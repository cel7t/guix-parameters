This is based on the respectve patch from NixPkgs, but with the parts pinning
mysql and postgresql executables removed. See our package definition on why.

diff --git a/src/akonadicontrol/agentmanager.cpp b/src/akonadicontrol/agentmanager.cpp
--- a/src/akonadicontrol/agentmanager.cpp
+++ b/src/akonadicontrol/agentmanager.cpp
@@ -47,7 +47,7 @@ public:
         connect(this, &Akonadi::ProcessControl::unableToStart, this, []() {
             QCoreApplication::instance()->exit(255);
         });
-        start(QStringLiteral("akonadiserver"), args, RestartOnCrash);
+        start(QStringLiteral(NIX_OUT "/bin/akonadiserver"), args, RestartOnCrash);
     }

     ~StorageProcessControl() override
@@ -69,7 +69,7 @@ public:
         connect(this, &Akonadi::ProcessControl::unableToStart, this, []() {
             qCCritical(AKONADICONTROL_LOG) << "Failed to start AgentServer!";
         });
-        start(QStringLiteral("akonadi_agent_server"), args, RestartOnCrash);
+        start(QStringLiteral(NIX_OUT "/bin/akonadi_agent_server"), args, RestartOnCrash);
     }

     ~AgentServerProcessControl() override
diff --git a/src/akonadicontrol/agentprocessinstance.cpp b/src/akonadicontrol/agentprocessinstance.cpp
--- a/src/akonadicontrol/agentprocessinstance.cpp
+++ b/src/akonadicontrol/agentprocessinstance.cpp
@@ -62,7 +62,7 @@ bool AgentProcessInstance::start(const AgentType &agentInfo)
     } else {
         Q_ASSERT(agentInfo.launchMethod == AgentType::Launcher);
         const QStringList arguments = QStringList() << executable << identifier();
-        const QString agentLauncherExec = Akonadi::StandardDirs::findExecutable(QStringLiteral("akonadi_agent_launcher"));
+        const QString agentLauncherExec = QLatin1String(NIX_OUT "/bin/akonadi_agent_launcher");
         mController->start(agentLauncherExec, arguments);
     }
     return true;
diff --git a/src/server/storage/dbconfigmysql.cpp b/src/server/storage/dbconfigmysql.cpp
--- a/src/server/storage/dbconfigmysql.cpp
+++ b/src/server/storage/dbconfigmysql.cpp
@@ -215,7 +215,7 @@ bool DbConfigMysql::startInternalServer()
 #endif

     // generate config file
-    const QString globalConfig = StandardDirs::locateResourceFile("config", QStringLiteral("mysql-global.conf"));
+    const QString globalConfig = QLatin1String(NIX_OUT "/etc/xdg/akonadi/mysql-global.conf");
     const QString localConfig = StandardDirs::locateResourceFile("config", QStringLiteral("mysql-local.conf"));
     const QString actualConfig = StandardDirs::saveDir("data") + QLatin1String("/mysql.conf");
     if (globalConfig.isEmpty()) {
