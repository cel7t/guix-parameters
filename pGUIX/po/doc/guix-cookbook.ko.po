# SOME DESCRIPTIVE TITLE
# Copyright (C) 2021 the authors of Guix (msgids) and the following authors (msgstr)
# This file is distributed under the same license as the guix manual package.
# simmon <simmon@nplob.com>, 2021, 2022.
# 김인수 <simmon@nplob.com>, 2022.
msgid ""
msgstr ""
"Project-Id-Version: guix manual checkout\n"
"Report-Msgid-Bugs-To: bug-guix@gnu.org\n"
"POT-Creation-Date: 2023-05-07 03:18+0000\n"
"PO-Revision-Date: 2022-11-26 11:04+0000\n"
"Last-Translator: 김인수 <simmon@nplob.com>\n"
"Language-Team: Korean <https://translate.fedoraproject.org/projects/guix/documentation-cookbook/ko/>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.14.2\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:7
msgid "@documentencoding UTF-8"
msgstr "@documentencoding UTF-8"

#. type: top
#: guix-git/doc/guix-cookbook.texi:7 guix-git/doc/guix-cookbook.texi:41
#: guix-git/doc/guix-cookbook.texi:55
#, no-wrap
msgid "GNU Guix Cookbook"
msgstr "GNU Guix 쿡북"

#. type: copying
#: guix-git/doc/guix-cookbook.texi:26
#, fuzzy
#| msgid "Copyright @copyright{} 2019, 2022 Ricardo Wurmus@* Copyright @copyright{} 2019 Efraim Flashner@* Copyright @copyright{} 2019 Pierre Neidhardt@* Copyright @copyright{} 2020 Oleg Pykhalov@* Copyright @copyright{} 2020 Matthew Brooks@* Copyright @copyright{} 2020 Marcin Karpezo@* Copyright @copyright{} 2020 Brice Waegeneire@* Copyright @copyright{} 2020 André Batista@* Copyright @copyright{} 2020 Christine Lemmer-Webber@* Copyright @copyright{} 2021 Joshua Branson@* Copyright @copyright{} 2022 Maxim Cournoyer*"
msgid "Copyright @copyright{} 2019, 2022 Ricardo Wurmus@* Copyright @copyright{} 2019 Efraim Flashner@* Copyright @copyright{} 2019 Pierre Neidhardt@* Copyright @copyright{} 2020 Oleg Pykhalov@* Copyright @copyright{} 2020 Matthew Brooks@* Copyright @copyright{} 2020 Marcin Karpezo@* Copyright @copyright{} 2020 Brice Waegeneire@* Copyright @copyright{} 2020 André Batista@* Copyright @copyright{} 2020 Christine Lemmer-Webber@* Copyright @copyright{} 2021 Joshua Branson@* Copyright @copyright{} 2022 Maxim Cournoyer@* Copyright @copyright{} 2023 Ludovic Courtès"
msgstr "Copyright @copyright{} 2019, 2022 Ricardo Wurmus@* Copyright @copyright{} 2019 Efraim Flashner@* Copyright @copyright{} 2019 Pierre Neidhardt@* Copyright @copyright{} 2020 Oleg Pykhalov@* Copyright @copyright{} 2020 Matthew Brooks@* Copyright @copyright{} 2020 Marcin Karpezo@* Copyright @copyright{} 2020 Brice Waegeneire@* Copyright @copyright{} 2020 André Batista@* Copyright @copyright{} 2020 Christine Lemmer-Webber@* Copyright @copyright{} 2021 Joshua Branson@* Copyright @copyright{} 2022 Maxim Cournoyer*"

#. type: copying
#: guix-git/doc/guix-cookbook.texi:33
msgid "Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license is included in the section entitled ``GNU Free Documentation License''."
msgstr ""

#. type: dircategory
#: guix-git/doc/guix-cookbook.texi:35
#, no-wrap
msgid "System administration"
msgstr "시스템 관리"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:38
msgid "Guix cookbook: (guix-cookbook)"
msgstr "Guix 쿡북: (guix- 쿡북)"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:38
msgid "Tutorials and examples for GNU Guix."
msgstr "GNU Guix를 위한 개인 학습과 예제."

#. type: subtitle
#: guix-git/doc/guix-cookbook.texi:42
#, no-wrap
msgid "Tutorials and examples for using the GNU Guix Functional Package Manager"
msgstr "GNU Guix 기능적인 꾸러미 매니저 사용하기를 위한 개인학습과 예제"

#. type: author
#: guix-git/doc/guix-cookbook.texi:43
#, no-wrap
msgid "The GNU Guix Developers"
msgstr "GNU Guix 개발자"

#. type: node
#: guix-git/doc/guix-cookbook.texi:54
#, no-wrap
msgid "Top"
msgstr "Top"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:61
msgid "This document presents tutorials and detailed examples for GNU@tie{}Guix, a functional package management tool written for the GNU system.  Please @pxref{Top,,, guix, GNU Guix reference manual} for details about the system, its API, and related concepts."
msgstr ""

#.  You can replace the following paragraph with information on
#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:71
msgid "This manual is also available in French (@pxref{Top,,, guix-cookbook.fr, Livre de recettes de GNU Guix}) and German (@pxref{Top,,, guix-cookbook.de, GNU-Guix-Kochbuch}).  If you would like to translate this document in your native language, consider joining @uref{https://translate.fedoraproject.org/projects/guix/documentation-cookbook, Weblate} (@pxref{Translating Guix,,, guix, GNU Guix reference manual})."
msgstr ""

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:131
#: guix-git/doc/guix-cookbook.texi:132
#, no-wrap
msgid "Scheme tutorials"
msgstr "체계 자습서"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "Meet your new favorite language!"
msgstr "당신을 위하여 좋아 할만한 새로운 언어를 만납니다!"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:89
#: guix-git/doc/guix-cookbook.texi:353 guix-git/doc/guix-cookbook.texi:354
#, no-wrap
msgid "Packaging"
msgstr "포장"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "Packaging tutorials"
msgstr "꾸러미 개인학습"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:93
#: guix-git/doc/guix-cookbook.texi:1411 guix-git/doc/guix-cookbook.texi:1412
#, no-wrap
msgid "System Configuration"
msgstr "시스템 설정"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "Customizing the GNU System"
msgstr "GNU 시스템 맞춤설정"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:107
#: guix-git/doc/guix-cookbook.texi:2759 guix-git/doc/guix-cookbook.texi:2760
#, no-wrap
msgid "Containers"
msgstr "컨테이너"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "Isolated environments and nested systems"
msgstr ""

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:112
#: guix-git/doc/guix-cookbook.texi:3158 guix-git/doc/guix-cookbook.texi:3159
#, no-wrap
msgid "Advanced package management"
msgstr "향상된 꾸러미 관리"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "Power to the users!"
msgstr "사용자에게 힘을!"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:116
#: guix-git/doc/guix-cookbook.texi:3557 guix-git/doc/guix-cookbook.texi:3558
#, no-wrap
msgid "Environment management"
msgstr "환경 관리"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "Control environment"
msgstr "제어 환경"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:120
#: guix-git/doc/guix-cookbook.texi:3682 guix-git/doc/guix-cookbook.texi:3683
#, no-wrap
msgid "Installing Guix on a Cluster"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "High-performance computing."
msgstr ""

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:84 guix-git/doc/guix-cookbook.texi:4055
#: guix-git/doc/guix-cookbook.texi:4056
#, no-wrap
msgid "Acknowledgments"
msgstr "감사의 말"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:84
msgid "Thanks!"
msgstr "감사합니다!"

#. type: appendix
#: guix-git/doc/guix-cookbook.texi:84 guix-git/doc/guix-cookbook.texi:4082
#: guix-git/doc/guix-cookbook.texi:4083
#, no-wrap
msgid "GNU Free Documentation License"
msgstr "GNU 자유 문서 저작권"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:84
msgid "The license of this document."
msgstr "이 문서의 저작권."

#. type: unnumbered
#: guix-git/doc/guix-cookbook.texi:84 guix-git/doc/guix-cookbook.texi:4088
#: guix-git/doc/guix-cookbook.texi:4089
#, no-wrap
msgid "Concept Index"
msgstr "개념 색인"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:84
msgid "Concepts."
msgstr "개념."

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:87
msgid "--- The Detailed Node Listing ---"
msgstr "--- 상세한 노드 목록 ---"

#. type: section
#: guix-git/doc/guix-cookbook.texi:91 guix-git/doc/guix-cookbook.texi:365
#: guix-git/doc/guix-cookbook.texi:367 guix-git/doc/guix-cookbook.texi:368
#, no-wrap
msgid "Packaging Tutorial"
msgstr "꾸러미 지도"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:91 guix-git/doc/guix-cookbook.texi:365
msgid "A tutorial on how to add packages to Guix."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:1435 guix-git/doc/guix-cookbook.texi:1436
#, no-wrap
msgid "Auto-Login to a Specific TTY"
msgstr "특정한 TTY로 자동-로그인"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Automatically Login a User to a Specific TTY"
msgstr "사용자를 특정한 TTY로 자동으로 로그인"

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:1480 guix-git/doc/guix-cookbook.texi:1481
#, no-wrap
msgid "Customizing the Kernel"
msgstr "커널을 최적화하기"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Creating and using a custom Linux kernel on Guix System."
msgstr "Guix 시스템에서 사용자 정의 리눅스 커널을 생성하고 사용하기."

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:1718 guix-git/doc/guix-cookbook.texi:1719
#, no-wrap
msgid "Guix System Image API"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Customizing images to target specific platforms."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:1929 guix-git/doc/guix-cookbook.texi:1930
#, no-wrap
msgid "Using security keys"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "How to use security keys with Guix System."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:1988 guix-git/doc/guix-cookbook.texi:1989
#, no-wrap
msgid "Connecting to Wireguard VPN"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Connecting to a Wireguard VPN."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:2065 guix-git/doc/guix-cookbook.texi:2066
#, no-wrap
msgid "Customizing a Window Manager"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Handle customization of a Window manager on Guix System."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:2156 guix-git/doc/guix-cookbook.texi:2157
#, no-wrap
msgid "Running Guix on a Linode Server"
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:2399 guix-git/doc/guix-cookbook.texi:2400
#, no-wrap
msgid "Setting up a bind mount"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Setting up a bind mount in the file-systems definition."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:2448 guix-git/doc/guix-cookbook.texi:2449
#, no-wrap
msgid "Getting substitutes from Tor"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Configuring Guix daemon to get substitutes through Tor."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:2512 guix-git/doc/guix-cookbook.texi:2513
#, no-wrap
msgid "Setting up NGINX with Lua"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Configuring NGINX web-server to load Lua modules."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:2569 guix-git/doc/guix-cookbook.texi:2570
#, no-wrap
msgid "Music Server with Bluetooth Audio"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Headless music player with Bluetooth output."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:110 guix-git/doc/guix-cookbook.texi:2786
#: guix-git/doc/guix-cookbook.texi:2788 guix-git/doc/guix-cookbook.texi:2789
#, no-wrap
msgid "Guix Containers"
msgstr "Guix 컨테이너"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:110 guix-git/doc/guix-cookbook.texi:2786
msgid "Perfectly isolated environments"
msgstr "완벽하게 격리된 환경"

#. type: section
#: guix-git/doc/guix-cookbook.texi:110 guix-git/doc/guix-cookbook.texi:2786
#: guix-git/doc/guix-cookbook.texi:2937 guix-git/doc/guix-cookbook.texi:2938
#, no-wrap
msgid "Guix System Containers"
msgstr "Guix 시스템 컨테이너"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:110 guix-git/doc/guix-cookbook.texi:2786
msgid "A system inside your system"
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:114 guix-git/doc/guix-cookbook.texi:3172
#: guix-git/doc/guix-cookbook.texi:3174 guix-git/doc/guix-cookbook.texi:3175
#, no-wrap
msgid "Guix Profiles in Practice"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:114 guix-git/doc/guix-cookbook.texi:3172
msgid "Strategies for multiple profiles and manifests."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:118 guix-git/doc/guix-cookbook.texi:3565
#: guix-git/doc/guix-cookbook.texi:3567 guix-git/doc/guix-cookbook.texi:3568
#, no-wrap
msgid "Guix environment via direnv"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:118 guix-git/doc/guix-cookbook.texi:3565
msgid "Setup Guix environment with direnv"
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
#: guix-git/doc/guix-cookbook.texi:3713 guix-git/doc/guix-cookbook.texi:3714
#, no-wrap
msgid "Setting Up a Head Node"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
msgid "The node that runs the daemon."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
#: guix-git/doc/guix-cookbook.texi:3809 guix-git/doc/guix-cookbook.texi:3810
#, no-wrap
msgid "Setting Up Compute Nodes"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
msgid "Client nodes."
msgstr ""

#. type: node
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
#: guix-git/doc/guix-cookbook.texi:3895
#, no-wrap
msgid "Cluster Network Access"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
msgid "Dealing with network access restrictions."
msgstr ""

#. type: node
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
#: guix-git/doc/guix-cookbook.texi:3981
#, no-wrap
msgid "Cluster Disk Usage"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
msgid "Disk usage considerations."
msgstr ""

#. type: node
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
#: guix-git/doc/guix-cookbook.texi:4026
#, fuzzy, no-wrap
#| msgid "security key, configuration"
msgid "Cluster Security Considerations"
msgstr "보안 키, 구성"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
msgid "Keeping the cluster secure."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:138
msgid "GNU@tie{}Guix is written in the general purpose programming language Scheme, and many of its features can be accessed and manipulated programmatically.  You can use Scheme to generate package definitions, to modify them, to build them, to deploy whole operating systems, etc."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:142
msgid "Knowing the basics of how to program in Scheme will unlock many of the advanced features Guix provides --- and you don't even need to be an experienced programmer to use them!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:144
msgid "Let's get started!"
msgstr "시작합니다!"

#. type: section
#: guix-git/doc/guix-cookbook.texi:145 guix-git/doc/guix-cookbook.texi:146
#, no-wrap
msgid "A Scheme Crash Course"
msgstr "계획 단기 집중 과정"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:148
#, no-wrap
msgid "Scheme, crash course"
msgstr "계획, 단기 집중 과정"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:154
msgid "Guix uses the Guile implementation of Scheme.  To start playing with the language, install it with @code{guix install guile} and start a @dfn{REPL}---short for @uref{https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop, @dfn{read-eval-print loop}}---by running @code{guile} from the command line."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:157
msgid "Alternatively you can also run @code{guix shell guile -- guile} if you'd rather not have Guile installed in your user profile."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:163
msgid "In the following examples, lines show what you would type at the REPL; lines starting with ``@result{}'' show evaluation results, while lines starting with ``@print{}'' show things that get printed.  @xref{Using Guile Interactively,,, guile, GNU Guile Reference Manual}, for more details on the REPL."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:171
msgid "Scheme syntax boils down to a tree of expressions (or @emph{s-expression} in Lisp lingo).  An expression can be a literal such as numbers and strings, or a compound which is a parenthesized list of compounds and literals.  @code{#true} and @code{#false} (abbreviated @code{#t} and @code{#f}) stand for the Booleans ``true'' and ``false'', respectively."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:173
msgid "Examples of valid expressions:"
msgstr "유효한 식의 예제:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:177
#, no-wrap
msgid ""
"\"Hello World!\"\n"
"@result{} \"Hello World!\"\n"
"\n"
msgstr ""
"\"안녕 세상아!\"\n"
"@result{} \"안녕 세상아!\"\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:180
#, no-wrap
msgid ""
"17\n"
"@result{} 17\n"
"\n"
msgstr ""
"17\n"
"@result{} 17\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:184
#, no-wrap
msgid ""
"(display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"@print{} Hello Guix!\n"
"@result{} #<unspecified>\n"
msgstr ""
"(display (string-append \"안녕 \" \"Guix\" \"\\n\"))\n"
"@print{} 안녕 Guix!\n"
"@result{} #<unspecified>\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:191
msgid "This last example is a function call nested in another function call.  When a parenthesized expression is evaluated, the first term is the function and the rest are the arguments passed to the function.  Every function returns the last evaluated expression as its return value."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:194
msgid "Anonymous functions are declared with the @code{lambda} term:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:198
#, no-wrap
msgid ""
"(lambda (x) (* x x))\n"
"@result{} #<procedure 120e348 at <unknown port>:24:0 (x)>\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:203
msgid "The above procedure returns the square of its argument.  Since everything is an expression, the @code{lambda} expression returns an anonymous procedure, which can in turn be applied to an argument:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:207
#, no-wrap
msgid ""
"((lambda (x) (* x x)) 3)\n"
"@result{} 9\n"
msgstr ""
"((lambda (x) (* x x)) 3)\n"
"@result{} 9\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:211
msgid "Anything can be assigned a global name with @code{define}:"
msgstr "무엇이든 @code{define}와 함께 전역 이름을 할당 할 수 있습니다:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:217
#, no-wrap
msgid ""
"(define a 3)\n"
"(define square (lambda (x) (* x x)))\n"
"(square a)\n"
"@result{} 9\n"
msgstr ""
"(define a 3)\n"
"(define square (lambda (x) (* x x)))\n"
"(square a)\n"
"@result{} 9\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:221
msgid "Procedures can be defined more concisely with the following syntax:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:224
#, no-wrap
msgid "(define (square x) (* x x))\n"
msgstr "(define (square x) (* x x))\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:228
msgid "A list structure can be created with the @code{list} procedure:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:232
#, no-wrap
msgid ""
"(list 2 a 5 7)\n"
"@result{} (2 3 5 7)\n"
msgstr ""
"(list 2 a 5 7)\n"
"@result{} (2 3 5 7)\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:239
msgid "The @dfn{quote} disables evaluation of a parenthesized expression: the first term is not called over the other terms (@pxref{Expression Syntax, quote,, guile, GNU Guile Reference Manual}).  Thus it effectively returns a list of terms."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:243
#, no-wrap
msgid ""
"'(display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"@result{} (display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"\n"
msgstr ""
"'(display (string-append \"안녕 \" \"Guix\" \"\\n\"))\n"
"@result{} (display (string-append \"안녕 \" \"Guix\" \"\\n\"))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:246
#, no-wrap
msgid ""
"'(2 a 5 7)\n"
"@result{} (2 a 5 7)\n"
msgstr ""
"'(2 a 5 7)\n"
"@result{} (2 a 5 7)\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:252
msgid "The @dfn{quasiquote} disables evaluation of a parenthesized expression until @dfn{unquote} (a comma) re-enables it.  Thus it provides us with fine-grained control over what is evaluated and what is not."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:256
#, no-wrap
msgid ""
"`(2 a 5 7 (2 ,a 5 ,(+ a 4)))\n"
"@result{} (2 a 5 7 (2 3 5 7))\n"
msgstr ""
"`(2 a 5 7 (2 ,a 5 ,(+ a 4)))\n"
"@result{} (2 a 5 7 (2 3 5 7))\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:260
msgid "Note that the above result is a list of mixed elements: numbers, symbols (here @code{a}) and the last element is a list itself."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:264
msgid "Multiple variables can be named locally with @code{let} (@pxref{Local Bindings,,, guile, GNU Guile Reference Manual}):"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:271
#, no-wrap
msgid ""
"(define x 10)\n"
"(let ((x 2)\n"
"      (y 3))\n"
"  (list x y))\n"
"@result{} (2 3)\n"
"\n"
msgstr ""
"(define x 10)\n"
"(let ((x 2)\n"
" (y 3))\n"
" (list x y))\n"
"@result{} (2 3)\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:274
#, no-wrap
msgid ""
"x\n"
"@result{} 10\n"
"\n"
msgstr ""
"x\n"
"@result{} 10\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:277
#, no-wrap
msgid ""
"y\n"
"@error{} In procedure module-lookup: Unbound variable: y\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:281
msgid "Use @code{let*} to allow later variable declarations to refer to earlier definitions."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:287
#, no-wrap
msgid ""
"(let* ((x 2)\n"
"       (y (* x 3)))\n"
"  (list x y))\n"
"@result{} (2 6)\n"
msgstr ""
"(let* ((x 2)\n"
" (y (* x 3)))\n"
" (list x y))\n"
"@result{} (2 6)\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:294
msgid "@dfn{Keywords} are typically used to identify the named parameters of a procedure.  They are prefixed by @code{#:} (hash, colon) followed by alphanumeric characters: @code{#:like-this}.  @xref{Keywords,,, guile, GNU Guile Reference Manual}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:299
msgid "The percentage @code{%} is typically used for read-only global variables in the build stage.  Note that it is merely a convention, like @code{_} in C.  Scheme treats @code{%} exactly the same as any other letter."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:303
msgid "Modules are created with @code{define-module} (@pxref{Creating Guile Modules,,, guile, GNU Guile Reference Manual}).  For instance"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:309
#, no-wrap
msgid ""
"(define-module (guix build-system ruby)\n"
"  #:use-module (guix store)\n"
"  #:export (ruby-build\n"
"            ruby-build-system))\n"
msgstr ""
"(define-module (guix build-system ruby)\n"
" #:use-module (guix store)\n"
" #:export (ruby-build\n"
" ruby-build-system))\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:315
msgid "defines the module @code{guix build-system ruby} which must be located in @file{guix/build-system/ruby.scm} somewhere in the Guile load path.  It depends on the @code{(guix store)} module and it exports two variables, @code{ruby-build} and @code{ruby-build-system}."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:317
#, no-wrap
msgid "Going further"
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:321
msgid "Scheme is a language that has been widely used to teach programming and you'll find plenty of material using it as a vehicle.  Here's a selection of documents to learn more about Scheme:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:326
msgid "@uref{https://spritely.institute/static/papers/scheme-primer.html, @i{A Scheme Primer}}, by Christine Lemmer-Webber and the Spritely Institute."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:330
msgid "@uref{http://www.troubleshooters.com/codecorn/scheme_guile/hello.htm, @i{Scheme at a Glance}}, by Steve Litt."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:337
msgid "@uref{https://sarabander.github.io/sicp/, @i{Structure and Interpretation of Computer Programs}}, by Harold Abelson and Gerald Jay Sussman, with Julie Sussman.  Colloquially known as ``SICP'', this book is a reference."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:339
msgid "You can also install it and read it from your computer:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:343
#, no-wrap
msgid ""
"guix install sicp info-reader\n"
"info sicp\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:349
msgid "You'll find more books, tutorials and other resources at @url{https://schemers.org/}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:356
#, no-wrap
msgid "packaging"
msgstr "패키징"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:362
msgid "This chapter is dedicated to teaching you how to add packages to the collection of packages that come with GNU Guix.  This involves writing package definitions in Guile Scheme, organizing them in package modules, and building them."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:376
msgid "GNU Guix stands out as the @emph{hackable} package manager, mostly because it uses @uref{https://www.gnu.org/software/guile/, GNU Guile}, a powerful high-level programming language, one of the @uref{https://en.wikipedia.org/wiki/Scheme_%28programming_language%29, Scheme} dialects from the @uref{https://en.wikipedia.org/wiki/Lisp_%28programming_language%29, Lisp family}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:380
msgid "Package definitions are also written in Scheme, which empowers Guix in some very unique ways, unlike most other package managers that use shell scripts or simple languages."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:385
msgid "Use functions, structures, macros and all of Scheme expressiveness for your package definitions."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:389
msgid "Inheritance makes it easy to customize a package by inheriting from it and modifying only what is needed."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:399
msgid "Batch processing: the whole package collection can be parsed, filtered and processed.  Building a headless server with all graphical interfaces stripped out? It's possible.  Want to rebuild everything from source using specific compiler optimization flags? Pass the @code{#:make-flags \"...\"} argument to the list of packages.  It wouldn't be a stretch to think @uref{https://wiki.gentoo.org/wiki/USE_flag, Gentoo USE flags} here, but this goes even further: the changes don't have to be thought out beforehand by the packager, they can be @emph{programmed} by the user!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:405
msgid "The following tutorial covers all the basics around package creation with Guix.  It does not assume much knowledge of the Guix system nor of the Lisp language.  The reader is only expected to be familiar with the command line and to have some basic programming knowledge."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:406 guix-git/doc/guix-cookbook.texi:407
#, no-wrap
msgid "A ``Hello World'' package"
msgstr "``Hello World'' 꾸러미"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:412
msgid "The ``Defining Packages'' section of the manual introduces the basics of Guix packaging (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}).  In the following section, we will partly go over those basics again."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:418
msgid "GNU@tie{}Hello is a dummy project that serves as an idiomatic example for packaging.  It uses the GNU build system (@code{./configure && make && make install}).  Guix already provides a package definition which is a perfect example to start with.  You can look up its declaration with @code{guix edit hello} from the command line.  Let's see how it looks:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:439
#, no-wrap
msgid ""
"(define-public hello\n"
"  (package\n"
"    (name \"hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, GNU world: An example GNU package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"
msgstr ""
"(define-public hello\n"
" (package\n"
" (name \"hello\")\n"
" (version \"2.10\")\n"
" (source (origin\n"
" (method url-fetch)\n"
" (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
" \".tar.gz\"))\n"
" (sha256\n"
" (base32\n"
" \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
" (build-system gnu-build-system)\n"
" (synopsis \"Hello, GNU world: An example GNU package\")\n"
" (description\n"
" \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits. It\n"
"serves as an example of standard GNU coding practices. As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
" (home-page \"https://www.gnu.org/software/hello/\")\n"
" (license gpl3+)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:443
msgid "As you can see, most of it is rather straightforward.  But let's review the fields together:"
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:445
#, no-wrap
msgid "name"
msgstr "이름"

#. type: table
#: guix-git/doc/guix-cookbook.texi:448
msgid "The project name.  Using Scheme conventions, we prefer to keep it lower case, without underscore and using dash-separated words."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:449
#, no-wrap
msgid "source"
msgstr "원천"

#. type: table
#: guix-git/doc/guix-cookbook.texi:452
msgid "This field contains a description of the source code origin.  The @code{origin} record contains these fields:"
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:454
#, no-wrap
msgid "The method, here @code{url-fetch} to download via HTTP/FTP, but other methods"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:456
msgid "exist, such as @code{git-fetch} for Git repositories."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:456
#, no-wrap
msgid "The URI, which is typically some @code{https://} location for @code{url-fetch}.  Here"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:459
msgid "the special `mirror://gnu` refers to a set of well known locations, all of which can be used by Guix to fetch the source, should some of them fail."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:459
#, no-wrap
msgid "The @code{sha256} checksum of the requested file.  This is essential to ensure"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:462
msgid "the source is not corrupted.  Note that Guix works with base32 strings, hence the call to the @code{base32} function."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:464
#, no-wrap
msgid "build-system"
msgstr "구성-시스템"

#. type: table
#: guix-git/doc/guix-cookbook.texi:473
msgid "This is where the power of abstraction provided by the Scheme language really shines: in this case, the @code{gnu-build-system} abstracts away the famous @code{./configure && make && make install} shell invocations.  Other build systems include the @code{trivial-build-system} which does not do anything and requires from the packager to program all the build steps, the @code{python-build-system}, the @code{emacs-build-system}, and many more (@pxref{Build Systems,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:474
#, no-wrap
msgid "synopsis"
msgstr "개요"

#. type: table
#: guix-git/doc/guix-cookbook.texi:477
msgid "It should be a concise summary of what the package does.  For many packages a tagline from the project's home page can be used as the synopsis."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:478
#, no-wrap
msgid "description"
msgstr "설명"

#. type: table
#: guix-git/doc/guix-cookbook.texi:481
msgid "Same as for the synopsis, it's fine to re-use the project description from the homepage.  Note that Guix uses Texinfo syntax."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:482
#, no-wrap
msgid "home-page"
msgstr "홈페이지"

#. type: table
#: guix-git/doc/guix-cookbook.texi:484
msgid "Use HTTPS if available."
msgstr "가능하다면 HTTPS를 사용합니다."

#. type: item
#: guix-git/doc/guix-cookbook.texi:485
#, no-wrap
msgid "license"
msgstr "저작권"

#. type: table
#: guix-git/doc/guix-cookbook.texi:488
msgid "See @code{guix/licenses.scm} in the project source for a full list of available licenses."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:492
msgid "Time to build our first package! Nothing fancy here for now: we will stick to a dummy @code{my-hello}, a copy of the above declaration."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:496
msgid "As with the ritualistic ``Hello World'' taught with most programming languages, this will possibly be the most ``manual'' approach.  We will work out an ideal setup later; for now we will go the simplest route."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:498
msgid "Save the following to a file @file{my-hello.scm}."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:504
#, no-wrap
msgid ""
"(use-modules (guix packages)\n"
"             (guix download)\n"
"             (guix build-system gnu)\n"
"             (guix licenses))\n"
"\n"
msgstr ""
"(use-modules (guix packages)\n"
" (guix download)\n"
" (guix build-system gnu)\n"
" (guix licenses))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:523
#, no-wrap
msgid ""
"(package\n"
"  (name \"my-hello\")\n"
"  (version \"2.10\")\n"
"  (source (origin\n"
"            (method url-fetch)\n"
"            (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                \".tar.gz\"))\n"
"            (sha256\n"
"             (base32\n"
"              \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"  (build-system gnu-build-system)\n"
"  (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"  (description\n"
"   \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"  (home-page \"https://www.gnu.org/software/hello/\")\n"
"  (license gpl3+))\n"
msgstr ""
"(package\n"
" (name \"my-hello\")\n"
" (version \"2.10\")\n"
" (source (origin\n"
" (method url-fetch)\n"
" (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
" \".tar.gz\"))\n"
" (sha256\n"
" (base32\n"
" \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
" (build-system gnu-build-system)\n"
" (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
" (description\n"
" \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
" (home-page \"https://www.gnu.org/software/hello/\")\n"
" (license gpl3+))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:526
msgid "We will explain the extra code in a moment."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:533
msgid "Feel free to play with the different values of the various fields.  If you change the source, you'll need to update the checksum.  Indeed, Guix refuses to build anything if the given checksum does not match the computed checksum of the source code.  To obtain the correct checksum of the package declaration, we need to download the source, compute the sha256 checksum and convert it to base32."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:536
msgid "Thankfully, Guix can automate this task for us; all we need is to provide the URI:"
msgstr ""

#.  This is example shell output.
#. type: example
#: guix-git/doc/guix-cookbook.texi:540
#, no-wrap
msgid ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:547
#, no-wrap
msgid ""
"Starting download of /tmp/guix-file.JLYgL7\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz...\n"
"following redirection to `https://mirror.ibcp.fr/pub/gnu/hello/hello-2.10.tar.gz'...\n"
" …10.tar.gz  709KiB                                 2.5MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\n"
msgstr ""
"Starting download of /tmp/guix-file.JLYgL7\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz...\n"
"following redirection to `https://mirror.ibcp.fr/pub/gnu/hello/hello-2.10.tar.gz'...\n"
"…10.tar.gz 709KiB 2.5MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:552
msgid "In this specific case the output tells us which mirror was chosen.  If the result of the above command is not the same as in the above snippet, update your @code{my-hello} declaration accordingly."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:556
msgid "Note that GNU package tarballs come with an OpenPGP signature, so you should definitely check the signature of this tarball with `gpg` to authenticate it before going further:"
msgstr ""

#.  This is example shell output.
#. type: example
#: guix-git/doc/guix-cookbook.texi:560
#, no-wrap
msgid ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz.sig\n"
"\n"
msgstr ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz.sig\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:575
#, no-wrap
msgid ""
"Starting download of /tmp/guix-file.03tFfb\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz.sig...\n"
"following redirection to `https://ftp.igh.cnrs.fr/pub/gnu/hello/hello-2.10.tar.gz.sig'...\n"
" ….tar.gz.sig  819B                                                                                                                       1.2MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig\n"
"0q0v86n3y38z17rl146gdakw9xc4mcscpk8dscs412j22glrv9jf\n"
"$ gpg --verify /gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig /gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"gpg: Signature made Sun 16 Nov 2014 01:08:37 PM CET\n"
"gpg:                using RSA key A9553245FDE9B739\n"
"gpg: Good signature from \"Sami Kerola <kerolasa@@iki.fi>\" [unknown]\n"
"gpg:                 aka \"Sami Kerola (http://www.iki.fi/kerolasa/) <kerolasa@@iki.fi>\" [unknown]\n"
"gpg: WARNING: This key is not certified with a trusted signature!\n"
"gpg:          There is no indication that the signature belongs to the owner.\n"
"Primary key fingerprint: 8ED3 96E3 7E38 D471 A005  30D3 A955 3245 FDE9 B739\n"
msgstr ""
"Starting download of /tmp/guix-file.03tFfb\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz.sig...\n"
"following redirection to `https://ftp.igh.cnrs.fr/pub/gnu/hello/hello-2.10.tar.gz.sig'...\n"
"….tar.gz.sig 819B 1.2MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig\n"
"0q0v86n3y38z17rl146gdakw9xc4mcscpk8dscs412j22glrv9jf\n"
"$ gpg --verify /gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig /gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"gpg: Signature made Sun 16 Nov 2014 01:08:37 PM CET\n"
"gpg: using RSA key A9553245FDE9B739\n"
"gpg: Good signature from \"Sami Kerola <kerolasa@@iki.fi>\" [unknown]\n"
"gpg: aka \"Sami Kerola (http://www.iki.fi/kerolasa/) <kerolasa@@iki.fi>\" [unknown]\n"
"gpg: WARNING: This key is not certified with a trusted signature!\n"
"gpg: There is no indication that the signature belongs to the owner.\n"
"Primary key fingerprint: 8ED3 96E3 7E38 D471 A005 30D3 A955 3245 FDE9 B739\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:578
msgid "You can then happily run"
msgstr "당신은 그런 다음에 행복하게 실행 할 수 있습니다"

#.  Do not translate this command
#. type: example
#: guix-git/doc/guix-cookbook.texi:582
#, no-wrap
msgid "$ guix package --install-from-file=my-hello.scm\n"
msgstr "$ guix package --install-from-file=my-hello.scm\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:585
msgid "You should now have @code{my-hello} in your profile!"
msgstr ""

#.  Do not translate this command
#. type: example
#: guix-git/doc/guix-cookbook.texi:591
#, no-wrap
msgid ""
"$ guix package --list-installed=my-hello\n"
"my-hello\t2.10\tout\n"
"/gnu/store/f1db2mfm8syb8qvc357c53slbvf1g9m9-my-hello-2.10\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:596
msgid "We've gone as far as we could without any knowledge of Scheme.  Before moving on to more complex packages, now is the right time to brush up on your Scheme knowledge.  @pxref{A Scheme Crash Course} to get up to speed."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:597 guix-git/doc/guix-cookbook.texi:598
#, no-wrap
msgid "Setup"
msgstr "설정"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:603
msgid "In the rest of this chapter we will rely on some basic Scheme programming knowledge.  Now let's detail the different possible setups for working on Guix packages."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:605
msgid "There are several ways to set up a Guix packaging environment."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:608
msgid "We recommend you work directly on the Guix source checkout since it makes it easier for everyone to contribute to the project."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:610
msgid "But first, let's look at other possibilities."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:611 guix-git/doc/guix-cookbook.texi:612
#, no-wrap
msgid "Local file"
msgstr "로컬 파일"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:617
msgid "This is what we previously did with @samp{my-hello}.  With the Scheme basics we've covered, we are now able to explain the leading chunks.  As stated in @code{guix package --help}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:622
#, no-wrap
msgid ""
"  -f, --install-from-file=FILE\n"
"                         install the package that the code within FILE\n"
"                         evaluates to\n"
msgstr ""
"  -f, --install-from-file=FILE\n"
" install the package that the code within FILE\n"
" evaluates to\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:626
msgid "Thus the last expression @emph{must} return a package, which is the case in our earlier example."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:630
msgid "The @code{use-modules} expression tells which of the modules we need in the file.  Modules are a collection of values and procedures.  They are commonly called ``libraries'' or ``packages'' in other programming languages."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:631 guix-git/doc/guix-cookbook.texi:632
#, fuzzy, no-wrap
#| msgid "Guix channels"
msgid "Channels"
msgstr "Guix 채널"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:634
#, fuzzy, no-wrap
#| msgid "Guix channels"
msgid "channel"
msgstr "Guix 채널"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:640
msgid "Guix and its package collection can be extended through @dfn{channels}.  A channel is a Git repository, public or not, containing @file{.scm} files that provide packages (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}) or services (@pxref{Defining Services,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:643
msgid "How would you go about creating a channel? First, create a directory that will contain your @file{.scm} files, say @file{~/my-channel}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:646
#, no-wrap
msgid "mkdir ~/my-channel\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:650
msgid "Suppose you want to add the @samp{my-hello} package we saw previously; it first needs some adjustments:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:657
#, no-wrap
msgid ""
"(define-module (my-hello)\n"
"  #:use-module (guix licenses)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix build-system gnu)\n"
"  #:use-module (guix download))\n"
"\n"
msgstr ""
"(define-module (my-hello)\n"
" #:use-module (guix licenses)\n"
" #:use-module (guix packages)\n"
" #:use-module (guix build-system gnu)\n"
" #:use-module (guix download))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:677
#, no-wrap
msgid ""
"(define-public my-hello\n"
"  (package\n"
"    (name \"my-hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"
msgstr ""
"(define-public my-hello\n"
" (package\n"
" (name \"my-hello\")\n"
" (version \"2.10\")\n"
" (source (origin\n"
" (method url-fetch)\n"
" (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
" \".tar.gz\"))\n"
" (sha256\n"
" (base32\n"
" \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
" (build-system gnu-build-system)\n"
" (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
" (description\n"
" \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
" (home-page \"https://www.gnu.org/software/hello/\")\n"
" (license gpl3+)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:683
msgid "Note that we have assigned the package value to an exported variable name with @code{define-public}.  This is effectively assigning the package to the @code{my-hello} variable so that it can be referenced, among other as dependency of other packages."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:688
msgid "If you use @code{guix package --install-from-file=my-hello.scm} on the above file, it will fail because the last expression, @code{define-public}, does not return a package.  If you want to use @code{define-public} in this use-case nonetheless, make sure the file ends with an evaluation of @code{my-hello}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:694
#, fuzzy, no-wrap
#| msgid ""
#| "; ...\n"
#| "(define-public my-hello\n"
#| "  ; ...\n"
#| "  )\n"
#| "\n"
msgid ""
";; ...\n"
"(define-public my-hello\n"
"  ;; ...\n"
"  )\n"
"\n"
msgstr ""
"; ...\n"
"(define-public my-hello\n"
" ; ...\n"
" )\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:696
#, no-wrap
msgid "my-hello\n"
msgstr "안녕하세요\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:699
msgid "This last example is not very typical."
msgstr "이 마지막 예제는 매우 전형적이지 않습니다."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:703
msgid "Now how do you make that package visible to @command{guix} commands so you can test your packages? You need to add the directory to the search path using the @option{-L} command-line option, as in these examples:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:707
#, no-wrap
msgid ""
"guix show -L ~/my-channel my-hello\n"
"guix build -L ~/my-channel my-hello\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:713
msgid "The final step is to turn @file{~/my-channel} into an actual channel, making your package collection seamlessly available @i{via} any @command{guix} command.  To do that, you first need to make it a Git repository:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:719
#, no-wrap
msgid ""
"cd ~/my-channel\n"
"git init\n"
"git add my-hello.scm\n"
"git commit -m \"First commit of my channel.\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:727
msgid "And that's it, you have a channel! From there on, you can add this channel to your channel configuration in @file{~/.config/guix/channels.scm} (@pxref{Specifying Additional Channels,,, guix, GNU Guix Reference Manual}); assuming you keep your channel local for now, the @file{channels.scm} would look something like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:734
#, no-wrap
msgid ""
"(append (list (channel\n"
"                (name 'my-channel)\n"
"                (url (string-append \"file://\" (getenv \"HOME\")\n"
"                                    \"/my-channel\"))))\n"
"        %default-channels)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:741
msgid "Next time you run @command{guix pull}, your channel will be picked up and the packages it defines will be readily available to all the @command{guix} commands, even if you do not pass @option{-L}.  The @command{guix describe} command will show that Guix is, indeed, using both the @code{my-channel} and the @code{guix} channels."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:744
msgid "@xref{Creating a Channel,,, guix, GNU Guix Reference Manual}, for details."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:745 guix-git/doc/guix-cookbook.texi:746
#, no-wrap
msgid "Direct checkout hacking"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:751
msgid "Working directly on the Guix project is recommended: it reduces the friction when the time comes to submit your changes upstream to let the community benefit from your hard work!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:757
msgid "Unlike most software distributions, the Guix repository holds in one place both the tooling (including the package manager) and the package definitions.  This choice was made so that it would give developers the flexibility to modify the API without breakage by updating all packages at the same time.  This reduces development inertia."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:759
msgid "Check out the official @uref{https://git-scm.com/, Git} repository:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:762
#, no-wrap
msgid "$ git clone https://git.savannah.gnu.org/git/guix.git\n"
msgstr "$ git clone https://git.savannah.gnu.org/git/guix.git\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:766
msgid "In the rest of this article, we use @samp{$GUIX_CHECKOUT} to refer to the location of the checkout."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:770
msgid "Follow the instructions in the manual (@pxref{Contributing,,, guix, GNU Guix Reference Manual}) to set up the repository environment."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:773
msgid "Once ready, you should be able to use the package definitions from the repository environment."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:775
msgid "Feel free to edit package definitions found in @samp{$GUIX_CHECKOUT/gnu/packages}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:779
msgid "The @samp{$GUIX_CHECKOUT/pre-inst-env} script lets you use @samp{guix} over the package collection of the repository (@pxref{Running Guix Before It Is Installed,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:783
msgid "Search packages, such as Ruby:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:790
#, no-wrap
msgid ""
"  $ cd $GUIX_CHECKOUT\n"
"  $ ./pre-inst-env guix package --list-available=ruby\n"
"      ruby    1.8.7-p374      out     gnu/packages/ruby.scm:119:2\n"
"      ruby    2.1.6   out     gnu/packages/ruby.scm:91:2\n"
"      ruby    2.2.2   out     gnu/packages/ruby.scm:39:2\n"
msgstr ""
"  $ cd $GUIX_CHECKOUT\n"
" $ ./pre-inst-env guix package --list-available=ruby\n"
" ruby 1.8.7-p374 out gnu/packages/ruby.scm:119:2\n"
" ruby 2.1.6 out gnu/packages/ruby.scm:91:2\n"
" ruby 2.2.2 out gnu/packages/ruby.scm:39:2\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:794
msgid "Build a package, here Ruby version 2.1:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:798
#, no-wrap
msgid ""
"  $ ./pre-inst-env guix build --keep-failed ruby@@2.1\n"
"  /gnu/store/c13v73jxmj2nir2xjqaz5259zywsa9zi-ruby-2.1.6\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:802
msgid "Install it to your user profile:"
msgstr "당신의 사용자 프로파일에 설치합니다:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:805
#, no-wrap
msgid "  $ ./pre-inst-env guix package --install ruby@@2.1\n"
msgstr "  $ ./pre-inst-env guix package --install ruby@@2.1\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:809
msgid "Check for common mistakes:"
msgstr "일반적인 실수를 점검합니다:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:812
#, no-wrap
msgid "  $ ./pre-inst-env guix lint ruby@@2.1\n"
msgstr "  $ ./pre-inst-env guix lint ruby@@2.1\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:817
msgid "Guix strives at maintaining a high packaging standard; when contributing to the Guix project, remember to"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:821
msgid "follow the coding style (@pxref{Coding Style,,, guix, GNU Guix Reference Manual}),"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:823
msgid "and review the check list from the manual (@pxref{Submitting Patches,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:827
msgid "Once you are happy with the result, you are welcome to send your contribution to make it part of Guix.  This process is also detailed in the manual.  (@pxref{Contributing,,, guix, GNU Guix Reference Manual})"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:830
msgid "It's a community effort so the more join in, the better Guix becomes!"
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:831 guix-git/doc/guix-cookbook.texi:832
#, no-wrap
msgid "Extended example"
msgstr "확장된 예제"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:837
msgid "The above ``Hello World'' example is as simple as it goes.  Packages can be more complex than that and Guix can handle more advanced scenarios.  Let's look at another, more sophisticated package (slightly modified from the source):"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:851
#, no-wrap
msgid ""
"(define-module (gnu packages version-control)\n"
"  #:use-module ((guix licenses) #:prefix license:)\n"
"  #:use-module (guix utils)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix git-download)\n"
"  #:use-module (guix build-system cmake)\n"
"  #:use-module (gnu packages ssh)\n"
"  #:use-module (gnu packages web)\n"
"  #:use-module (gnu packages pkg-config)\n"
"  #:use-module (gnu packages python)\n"
"  #:use-module (gnu packages compression)\n"
"  #:use-module (gnu packages tls))\n"
"\n"
msgstr ""
"(define-module (gnu packages version-control)\n"
" #:use-module ((guix licenses) #:prefix license:)\n"
" #:use-module (guix utils)\n"
" #:use-module (guix packages)\n"
" #:use-module (guix git-download)\n"
" #:use-module (guix build-system cmake)\n"
" #:use-module (gnu packages ssh)\n"
" #:use-module (gnu packages web)\n"
" #:use-module (gnu packages pkg-config)\n"
" #:use-module (gnu packages python)\n"
" #:use-module (gnu packages compression)\n"
" #:use-module (gnu packages tls))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:905
#, no-wrap
msgid ""
"(define-public my-libgit2\n"
"  (let ((commit \"e98d0a37c93574d2c6107bf7f31140b548c6a7bf\")\n"
"        (revision \"1\"))\n"
"    (package\n"
"      (name \"my-libgit2\")\n"
"      (version (git-version \"0.26.6\" revision commit))\n"
"      (source (origin\n"
"                (method git-fetch)\n"
"                (uri (git-reference\n"
"                      (url \"https://github.com/libgit2/libgit2/\")\n"
"                      (commit commit)))\n"
"                (file-name (git-file-name name version))\n"
"                (sha256\n"
"                 (base32\n"
"                  \"17pjvprmdrx4h6bb1hhc98w9qi6ki7yl57f090n9kbhswxqfs7s3\"))\n"
"                (patches (search-patches \"libgit2-mtime-0.patch\"))\n"
"                (modules '((guix build utils)))\n"
"                ;; Remove bundled software.\n"
"                (snippet '(delete-file-recursively \"deps\"))))\n"
"      (build-system cmake-build-system)\n"
"      (outputs '(\"out\" \"debug\"))\n"
"      (arguments\n"
"       `(#:tests? #true                         ; Run the test suite (this is the default)\n"
"         #:configure-flags '(\"-DUSE_SHA1DC=ON\") ; SHA-1 collision detection\n"
"         #:phases\n"
"         (modify-phases %standard-phases\n"
"           (add-after 'unpack 'fix-hardcoded-paths\n"
"             (lambda _\n"
"               (substitute* \"tests/repo/init.c\"\n"
"                 ((\"#!/bin/sh\") (string-append \"#!\" (which \"sh\"))))\n"
"               (substitute* \"tests/clar/fs.h\"\n"
"                 ((\"/bin/cp\") (which \"cp\"))\n"
"                 ((\"/bin/rm\") (which \"rm\")))))\n"
"           ;; Run checks more verbosely.\n"
"           (replace 'check\n"
"             (lambda _ (invoke \"./libgit2_clar\" \"-v\" \"-Q\")))\n"
"           (add-after 'unpack 'make-files-writable-for-tests\n"
"             (lambda _ (for-each make-file-writable (find-files \".\" \".*\")))))))\n"
"      (inputs\n"
"       (list libssh2 http-parser python-wrapper))\n"
"      (native-inputs\n"
"       (list pkg-config))\n"
"      (propagated-inputs\n"
"       ;; These two libraries are in 'Requires.private' in libgit2.pc.\n"
"       (list openssl zlib))\n"
"      (home-page \"https://libgit2.github.com/\")\n"
"      (synopsis \"Library providing Git core methods\")\n"
"      (description\n"
"       \"Libgit2 is a portable, pure C implementation of the Git core methods\n"
"provided as a re-entrant linkable library with a solid API, allowing you to\n"
"write native speed custom Git applications in any language with bindings.\")\n"
"      ;; GPLv2 with linking exception\n"
"      (license license:gpl2))))\n"
msgstr ""
"(define-public my-libgit2\n"
"  (let ((commit \"e98d0a37c93574d2c6107bf7f31140b548c6a7bf\")\n"
"        (revision \"1\"))\n"
"    (package\n"
"      (name \"my-libgit2\")\n"
"      (version (git-version \"0.26.6\" revision commit))\n"
"      (source (origin\n"
"                (method git-fetch)\n"
"                (uri (git-reference\n"
"                      (url \"https://github.com/libgit2/libgit2/\")\n"
"                      (commit commit)))\n"
"                (file-name (git-file-name name version))\n"
"                (sha256\n"
"                 (base32\n"
"                  \"17pjvprmdrx4h6bb1hhc98w9qi6ki7yl57f090n9kbhswxqfs7s3\"))\n"
"                (patches (search-patches \"libgit2-mtime-0.patch\"))\n"
"                (modules '((guix build utils)))\n"
"                ;; Remove bundled software.\n"
"                (snippet '(delete-file-recursively \"deps\"))))\n"
"      (build-system cmake-build-system)\n"
"      (outputs '(\"out\" \"debug\"))\n"
"      (arguments\n"
"       `(#:tests? #true                         ; Run the test suite (this is the default)\n"
"         #:configure-flags '(\"-DUSE_SHA1DC=ON\") ; SHA-1 collision detection\n"
"         #:phases\n"
"         (modify-phases %standard-phases\n"
"           (add-after 'unpack 'fix-hardcoded-paths\n"
"             (lambda _\n"
"               (substitute* \"tests/repo/init.c\"\n"
"                 ((\"#!/bin/sh\") (string-append \"#!\" (which \"sh\"))))\n"
"               (substitute* \"tests/clar/fs.h\"\n"
"                 ((\"/bin/cp\") (which \"cp\"))\n"
"                 ((\"/bin/rm\") (which \"rm\")))))\n"
"           ;; Run checks more verbosely.\n"
"           (replace 'check\n"
"             (lambda _ (invoke \"./libgit2_clar\" \"-v\" \"-Q\")))\n"
"           (add-after 'unpack 'make-files-writable-for-tests\n"
"             (lambda _ (for-each make-file-writable (find-files \".\" \".*\")))))))\n"
"      (inputs\n"
"       (list libssh2 http-parser python-wrapper))\n"
"      (native-inputs\n"
"       (list pkg-config))\n"
"      (propagated-inputs\n"
"       ;; These two libraries are in 'Requires.private' in libgit2.pc.\n"
"       (list openssl zlib))\n"
"      (home-page \"https://libgit2.github.com/\")\n"
"      (synopsis \"Library providing Git core methods\")\n"
"      (description\n"
"       \"Libgit2 is a portable, pure C implementation of the Git core methods\n"
"provided as a re-entrant linkable library with a solid API, allowing you to\n"
"write native speed custom Git applications in any language with bindings.\")\n"
"      ;; GPLv2 with linking exception\n"
"      (license license:gpl2))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:910
msgid "(In those cases were you only want to tweak a few fields from a package definition, you should rely on inheritance instead of copy-pasting everything.  See below.)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:912
msgid "Let's discuss those fields in depth."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:913
#, no-wrap
msgid "@code{git-fetch} method"
msgstr "@code{git-fetch} 방법"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:920
msgid "Unlike the @code{url-fetch} method, @code{git-fetch} expects a @code{git-reference} which takes a Git repository and a commit.  The commit can be any Git reference such as tags, so if the @code{version} is tagged, then it can be used directly.  Sometimes the tag is prefixed with a @code{v}, in which case you'd use @code{(commit (string-append \"v\" version))}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:924
msgid "To ensure that the source code from the Git repository is stored in a directory with a descriptive name, we use @code{(file-name (git-file-name name version))}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:929
msgid "The @code{git-version} procedure can be used to derive the version when packaging programs for a specific commit, following the Guix contributor guidelines (@pxref{Version Numbers,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:933
msgid "How does one obtain the @code{sha256} hash that's in there, you ask? By invoking @command{guix hash} on a checkout of the desired commit, along these lines:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:939
#, no-wrap
msgid ""
"git clone https://github.com/libgit2/libgit2/\n"
"cd libgit2\n"
"git checkout v0.26.6\n"
"guix hash -rx .\n"
msgstr ""
"git clone https://github.com/libgit2/libgit2/\n"
"cd libgit2\n"
"git checkout v0.26.6\n"
"guix hash -rx .\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:944
msgid "@command{guix hash -rx} computes a SHA256 hash over the whole directory, excluding the @file{.git} sub-directory (@pxref{Invoking guix hash,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:947
msgid "In the future, @command{guix download} will hopefully be able to do these steps for you, just like it does for regular downloads."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:948
#, no-wrap
msgid "Snippets"
msgstr "단편"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:954
msgid "Snippets are quoted (i.e. non-evaluated) Scheme code that are a means of patching the source.  They are a Guix-y alternative to the traditional @file{.patch} files.  Because of the quote, the code in only evaluated when passed to the Guix daemon for building.  There can be as many snippets as needed."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:957
msgid "Snippets might need additional Guile modules which can be imported from the @code{modules} field."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:958
#, no-wrap
msgid "Inputs"
msgstr "입력"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:961
msgid "There are 3 different input types.  In short:"
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:963
#, no-wrap
msgid "native-inputs"
msgstr "기본-입력"

#. type: table
#: guix-git/doc/guix-cookbook.texi:966
msgid "Required for building but not runtime -- installing a package through a substitute won't install these inputs."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:966
#, no-wrap
msgid "inputs"
msgstr "입력"

#. type: table
#: guix-git/doc/guix-cookbook.texi:969
msgid "Installed in the store but not in the profile, as well as being present at build time."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:969
#, no-wrap
msgid "propagated-inputs"
msgstr "지연된-입력"

#. type: table
#: guix-git/doc/guix-cookbook.texi:972
msgid "Installed in the store and in the profile, as well as being present at build time."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:975
msgid "@xref{package Reference,,, guix, GNU Guix Reference Manual} for more details."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:979
msgid "The distinction between the various inputs is important: if a dependency can be handled as an @emph{input} instead of a @emph{propagated input}, it should be done so, or else it ``pollutes'' the user profile for no good reason."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:986
msgid "For instance, a user installing a graphical program that depends on a command line tool might only be interested in the graphical part, so there is no need to force the command line tool into the user profile.  The dependency is a concern to the package, not to the user.  @emph{Inputs} make it possible to handle dependencies without bugging the user by adding undesired executable files (or libraries) to their profile."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:992
msgid "Same goes for @emph{native-inputs}: once the program is installed, build-time dependencies can be safely garbage-collected.  It also matters when a substitute is available, in which case only the @emph{inputs} and @emph{propagated inputs} will be fetched: the @emph{native inputs} are not required to install a package from a substitute."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:993 guix-git/doc/guix-cookbook.texi:2024
#: guix-git/doc/guix-cookbook.texi:3700 guix-git/doc/guix-cookbook.texi:3754
#, no-wrap
msgid "Note"
msgstr "알림"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:996
msgid "You may see here and there snippets where package inputs are written quite differently, like so:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1003
#, no-wrap
msgid ""
";; The \"old style\" for inputs.\n"
"(inputs\n"
" `((\"libssh2\" ,libssh2)\n"
"   (\"http-parser\" ,http-parser)\n"
"   (\"python\" ,python-wrapper)))\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:1009
msgid "This is the ``old style'', where each input in the list is explicitly given a label (a string).  It is still supported but we recommend using the style above instead.  @xref{package Reference,,, guix, GNU Guix Reference Manual}, for more info."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1011
#, no-wrap
msgid "Outputs"
msgstr "출력"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1015
msgid "Just like how a package can have multiple inputs, it can also produce multiple outputs."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1017
msgid "Each output corresponds to a separate directory in the store."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1020
msgid "The user can choose which output to install; this is useful to save space or to avoid polluting the user profile with unwanted executables or libraries."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1023
msgid "Output separation is optional.  When the @code{outputs} field is left out, the default and only output (the complete package) is referred to as @code{\"out\"}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1025
msgid "Typical separate output names include @code{debug} and @code{doc}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1029
msgid "It's advised to separate outputs only when you've shown it's worth it: if the output size is significant (compare with @code{guix size}) or in case the package is modular."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1030
#, no-wrap
msgid "Build system arguments"
msgstr "시스템 인수를 구성합니다"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1033
msgid "The @code{arguments} is a keyword-value list used to configure the build process."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1038
msgid "The simplest argument @code{#:tests?} can be used to disable the test suite when building the package.  This is mostly useful when the package does not feature any test suite.  It's strongly recommended to keep the test suite on if there is one."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1042
msgid "Another common argument is @code{:make-flags}, which specifies a list of flags to append when running make, as you would from the command line.  For instance, the following flags"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1046
#, no-wrap
msgid ""
"#:make-flags (list (string-append \"prefix=\" (assoc-ref %outputs \"out\"))\n"
"                   \"CC=gcc\")\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1049
msgid "translate into"
msgstr "번역합니다"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1052
#, no-wrap
msgid "$ make CC=gcc prefix=/gnu/store/...-<out>\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1058
msgid "This sets the C compiler to @code{gcc} and the @code{prefix} variable (the installation directory in Make parlance) to @code{(assoc-ref %outputs \"out\")}, which is a build-stage global variable pointing to the destination directory in the store (something like @file{/gnu/store/...-my-libgit2-20180408})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1060
msgid "Similarly, it's possible to set the configure flags:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1063
#, no-wrap
msgid "#:configure-flags '(\"-DUSE_SHA1DC=ON\")\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1067
msgid "The @code{%build-inputs} variable is also generated in scope.  It's an association table that maps the input names to their store directories."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1072
msgid "The @code{phases} keyword lists the sequential steps of the build system.  Typically phases include @code{unpack}, @code{configure}, @code{build}, @code{install} and @code{check}.  To know more about those phases, you need to work out the appropriate build system definition in @samp{$GUIX_CHECKOUT/guix/build/gnu-build-system.scm}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1091
#, no-wrap
msgid ""
"(define %standard-phases\n"
"  ;; Standard build phases, as a list of symbol/procedure pairs.\n"
"  (let-syntax ((phases (syntax-rules ()\n"
"                         ((_ p ...) `((p . ,p) ...)))))\n"
"    (phases set-SOURCE-DATE-EPOCH set-paths install-locale unpack\n"
"            bootstrap\n"
"            patch-usr-bin-file\n"
"            patch-source-shebangs configure patch-generated-file-shebangs\n"
"            build check install\n"
"            patch-shebangs strip\n"
"            validate-runpath\n"
"            validate-documentation-location\n"
"            delete-info-dir-file\n"
"            patch-dot-desktop-files\n"
"            install-license-files\n"
"            reset-gzip-timestamps\n"
"            compress-documentation)))\n"
msgstr ""
"(define %standard-phases\n"
" ;; Standard build phases, as a list of symbol/procedure pairs.\n"
" (let-syntax ((phases (syntax-rules ()\n"
" ((_ p ...) `((p . ,p) ...)))))\n"
" (phases set-SOURCE-DATE-EPOCH set-paths install-locale unpack\n"
" bootstrap\n"
" patch-usr-bin-file\n"
" patch-source-shebangs configure patch-generated-file-shebangs\n"
" build check install\n"
" patch-shebangs strip\n"
" validate-runpath\n"
" validate-documentation-location\n"
" delete-info-dir-file\n"
" patch-dot-desktop-files\n"
" install-license-files\n"
" reset-gzip-timestamps\n"
" compress-documentation)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1094
msgid "Or from the REPL:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1100
#, no-wrap
msgid ""
"(add-to-load-path \"/path/to/guix/checkout\")\n"
",use (guix build gnu-build-system)\n"
"(map first %standard-phases)\n"
"@result{} (set-SOURCE-DATE-EPOCH set-paths install-locale unpack bootstrap patch-usr-bin-file patch-source-shebangs configure patch-generated-file-shebangs build check install patch-shebangs strip validate-runpath validate-documentation-location delete-info-dir-file patch-dot-desktop-files install-license-files reset-gzip-timestamps compress-documentation)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1104
msgid "If you want to know more about what happens during those phases, consult the associated procedures."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1107
msgid "For instance, as of this writing the definition of @code{unpack} for the GNU build system is:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1117
#, no-wrap
msgid ""
"(define* (unpack #:key source #:allow-other-keys)\n"
"  \"Unpack SOURCE in the working directory, and change directory within the\n"
"source.  When SOURCE is a directory, copy it in a sub-directory of the current\n"
"working directory.\"\n"
"  (if (file-is-directory? source)\n"
"      (begin\n"
"        (mkdir \"source\")\n"
"        (chdir \"source\")\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1128
#, no-wrap
msgid ""
"        ;; Preserve timestamps (set to the Epoch) on the copied tree so that\n"
"        ;; things work deterministically.\n"
"        (copy-recursively source \".\"\n"
"                          #:keep-mtime? #true))\n"
"      (begin\n"
"        (if (string-suffix? \".zip\" source)\n"
"            (invoke \"unzip\" source)\n"
"            (invoke \"tar\" \"xvf\" source))\n"
"        (chdir (first-subdirectory \".\"))))\n"
"  #true)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1136
msgid "Note the @code{chdir} call: it changes the working directory to where the source was unpacked.  Thus every phase following the @code{unpack} will use the source as a working directory, which is why we can directly work on the source files.  That is to say, unless a later phase changes the working directory to something else."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1140
msgid "We modify the list of @code{%standard-phases} of the build system with the @code{modify-phases} macro as per the list of specified modifications, which may have the following forms:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1144
msgid "@code{(add-before @var{phase} @var{new-phase} @var{procedure})}: Run @var{procedure} named @var{new-phase} before @var{phase}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1146
msgid "@code{(add-after @var{phase} @var{new-phase} @var{procedure})}: Same, but afterwards."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1148
msgid "@code{(replace @var{phase} @var{procedure})}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1150
msgid "@code{(delete @var{phase})}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1157
msgid "The @var{procedure} supports the keyword arguments @code{inputs} and @code{outputs}.  Each input (whether @emph{native}, @emph{propagated} or not) and output directory is referenced by their name in those variables.  Thus @code{(assoc-ref outputs \"out\")} is the store directory of the main output of the package.  A phase procedure may look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1165
#, no-wrap
msgid ""
"(lambda* (#:key inputs outputs #:allow-other-keys)\n"
"  (let ((bash-directory (assoc-ref inputs \"bash\"))\n"
"        (output-directory (assoc-ref outputs \"out\"))\n"
"        (doc-directory (assoc-ref outputs \"doc\")))\n"
"    ;; ...\n"
"    #true))\n"
msgstr ""
"(lambda* (#:key inputs outputs #:allow-other-keys)\n"
" (let ((bash-directory (assoc-ref inputs \"bash\"))\n"
" (output-directory (assoc-ref outputs \"out\"))\n"
" (doc-directory (assoc-ref outputs \"doc\")))\n"
" ;; ...\n"
" #true))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1171
msgid "The procedure must return @code{#true} on success.  It's brittle to rely on the return value of the last expression used to tweak the phase because there is no guarantee it would be a @code{#true}.  Hence the trailing @code{#true} to ensure the right value is returned on success."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1172
#, no-wrap
msgid "Code staging"
msgstr "코드 스테이징"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1178
msgid "The astute reader may have noticed the quasi-quote and comma syntax in the argument field.  Indeed, the build code in the package declaration should not be evaluated on the client side, but only when passed to the Guix daemon.  This mechanism of passing code around two running processes is called @uref{https://arxiv.org/abs/1709.00833, code staging}."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1179
#, no-wrap
msgid "Utility functions"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1184
msgid "When customizing @code{phases}, we often need to write code that mimics the equivalent system invocations (@code{make}, @code{mkdir}, @code{cp}, etc.)@: commonly used during regular ``Unix-style'' installations."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1187
msgid "Some like @code{chmod} are native to Guile.  @xref{,,, guile, Guile reference manual} for a complete list."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1190
msgid "Guix provides additional helper functions which prove especially handy in the context of package management."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1194
msgid "Some of those functions can be found in @samp{$GUIX_CHECKOUT/guix/guix/build/utils.scm}.  Most of them mirror the behaviour of the traditional Unix system commands:"
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1196
#, no-wrap
msgid "which"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1198
msgid "Like the @samp{which} system command."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1198
#, no-wrap
msgid "find-files"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1200
msgid "Akin to the @samp{find} system command."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1200
#, no-wrap
msgid "mkdir-p"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1202
msgid "Like @samp{mkdir -p}, which creates all parents as needed."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1202
#, no-wrap
msgid "install-file"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1206
msgid "Similar to @samp{install} when installing a file to a (possibly non-existing) directory.  Guile has @code{copy-file} which works like @samp{cp}."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1206
#, no-wrap
msgid "copy-recursively"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1208
msgid "Like @samp{cp -r}."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1208
#, no-wrap
msgid "delete-file-recursively"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1210
msgid "Like @samp{rm -rf}."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1210
#, no-wrap
msgid "invoke"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1212
msgid "Run an executable.  This should be used instead of @code{system*}."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1212
#, no-wrap
msgid "with-directory-excursion"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1215
msgid "Run the body in a different working directory, then restore the previous working directory."
msgstr ""

#. type: item
#: guix-git/doc/guix-cookbook.texi:1215
#, no-wrap
msgid "substitute*"
msgstr ""

#. type: table
#: guix-git/doc/guix-cookbook.texi:1217
msgid "A ``@command{sed}-like'' function."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1221
msgid "@xref{Build Utilities,,, guix, GNU Guix Reference Manual}, for more information on these utilities."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1222
#, no-wrap
msgid "Module prefix"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1232
msgid "The license in our last example needs a prefix: this is because of how the @code{license} module was imported in the package, as @code{#:use-module ((guix licenses)  #:prefix license:)}.  The Guile module import mechanism (@pxref{Using Guile Modules,,, guile, Guile reference manual})  gives the user full control over namespacing: this is needed to avoid clashes between, say, the @samp{zlib} variable from @samp{licenses.scm} (a @emph{license} value) and the @samp{zlib} variable from @samp{compression.scm} (a @emph{package} value)."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1233 guix-git/doc/guix-cookbook.texi:1234
#, no-wrap
msgid "Other build systems"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1241
msgid "What we've seen so far covers the majority of packages using a build system other than the @code{trivial-build-system}.  The latter does not automate anything and leaves you to build everything manually.  This can be more demanding and we won't cover it here for now, but thankfully it is rarely necessary to fall back on this system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1245
msgid "For the other build systems, such as ASDF, Emacs, Perl, Ruby and many more, the process is very similar to the GNU build system except for a few specialized arguments."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1250
msgid "@xref{Build Systems,,, guix, GNU Guix Reference Manual}, for more information on build systems, or check the source code in the @samp{$GUIX_CHECKOUT/guix/build} and @samp{$GUIX_CHECKOUT/guix/build-system} directories."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1251 guix-git/doc/guix-cookbook.texi:1252
#, no-wrap
msgid "Programmable and automated package definition"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1256
msgid "We can't repeat it enough: having a full-fledged programming language at hand empowers us in ways that reach far beyond traditional package management."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1258
msgid "Let's illustrate this with some awesome features of Guix!"
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1259 guix-git/doc/guix-cookbook.texi:1260
#, no-wrap
msgid "Recursive importers"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1267
msgid "You might find some build systems good enough that there is little to do at all to write a package, to the point that it becomes repetitive and tedious after a while.  A @emph{raison d'être} of computers is to replace human beings at those boring tasks.  So let's tell Guix to do this for us and create the package definition of an R package from CRAN (the output is trimmed for conciseness):"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1270
#, no-wrap
msgid ""
"$ guix import cran --recursive walrus\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1274
#, no-wrap
msgid ""
"(define-public r-mc2d\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1278
#, no-wrap
msgid ""
"(define-public r-jmvcore\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1282
#, no-wrap
msgid ""
"(define-public r-wrs2\n"
"    ; ...\n"
"    (license gpl3)))\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1308
#, no-wrap
msgid ""
"(define-public r-walrus\n"
"  (package\n"
"    (name \"r-walrus\")\n"
"    (version \"1.0.3\")\n"
"    (source\n"
"      (origin\n"
"        (method url-fetch)\n"
"        (uri (cran-uri \"walrus\" version))\n"
"        (sha256\n"
"          (base32\n"
"            \"1nk2glcvy4hyksl5ipq2mz8jy4fss90hx6cq98m3w96kzjni6jjj\"))))\n"
"    (build-system r-build-system)\n"
"    (propagated-inputs\n"
"      (list r-ggplot2 r-jmvcore r-r6 r-wrs2))\n"
"    (home-page \"https://github.com/jamovi/walrus\")\n"
"    (synopsis \"Robust Statistical Methods\")\n"
"    (description\n"
"      \"This package provides a toolbox of common robust statistical\n"
"tests, including robust descriptives, robust t-tests, and robust ANOVA.\n"
"It is also available as a module for 'jamovi' (see\n"
"<https://www.jamovi.org> for more information).  Walrus is based on the\n"
"WRS2 package by Patrick Mair, which is in turn based on the scripts and\n"
"work of Rand Wilcox.  These analyses are described in depth in the book\n"
"'Introduction to Robust Estimation & Hypothesis Testing'.\")\n"
"    (license gpl3)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1312
msgid "The recursive importer won't import packages for which Guix already has package definitions, except for the very first."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1317
msgid "Not all applications can be packaged this way, only those relying on a select number of supported systems.  Read about the full list of importers in the guix import section of the manual (@pxref{Invoking guix import,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1318 guix-git/doc/guix-cookbook.texi:1319
#, no-wrap
msgid "Automatic update"
msgstr "자동으로 최신화"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1323
msgid "Guix can be smart enough to check for updates on systems it knows.  It can report outdated package definitions with"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1326
#, no-wrap
msgid "$ guix refresh hello\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1331
msgid "In most cases, updating a package to a newer version requires little more than changing the version number and the checksum.  Guix can do that automatically as well:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1334
#, no-wrap
msgid "$ guix refresh hello --update\n"
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1336 guix-git/doc/guix-cookbook.texi:1337
#, no-wrap
msgid "Inheritance"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1341
msgid "If you've started browsing the existing package definitions, you might have noticed that a significant number of them have a @code{inherit} field:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1356
#, no-wrap
msgid ""
"(define-public adwaita-icon-theme\n"
"  (package (inherit gnome-icon-theme)\n"
"    (name \"adwaita-icon-theme\")\n"
"    (version \"3.26.1\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnome/sources/\" name \"/\"\n"
"                                  (version-major+minor version) \"/\"\n"
"                                  name \"-\" version \".tar.xz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"17fpahgh5dyckgz7rwqvzgnhx53cx9kr2xw0szprc6bnqy977fi8\"))))\n"
"    (native-inputs (list `(,gtk+ \"bin\")))))\n"
msgstr ""
"(define-public adwaita-icon-theme\n"
"  (package (inherit gnome-icon-theme)\n"
"    (name \"adwaita-icon-theme\")\n"
"    (version \"3.26.1\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnome/sources/\" name \"/\"\n"
"                                  (version-major+minor version) \"/\"\n"
"                                  name \"-\" version \".tar.xz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"17fpahgh5dyckgz7rwqvzgnhx53cx9kr2xw0szprc6bnqy977fi8\"))))\n"
"    (native-inputs (list `(,gtk+ \"bin\")))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1361
msgid "All unspecified fields are inherited from the parent package.  This is very convenient to create alternative packages, for instance with different source, version or compilation options."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1362 guix-git/doc/guix-cookbook.texi:1363
#, no-wrap
msgid "Getting help"
msgstr "도움 얻기"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1369
msgid "Sadly, some applications can be tough to package.  Sometimes they need a patch to work with the non-standard file system hierarchy enforced by the store.  Sometimes the tests won't run properly.  (They can be skipped but this is not recommended.)  Other times the resulting package won't be reproducible."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1372
msgid "Should you be stuck, unable to figure out how to fix any sort of packaging issue, don't hesitate to ask the community for help."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1374
msgid "See the @uref{https://www.gnu.org/software/guix/contact/, Guix homepage} for information on the mailing lists, IRC, etc."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1375 guix-git/doc/guix-cookbook.texi:1376
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1382
msgid "This tutorial was a showcase of the sophisticated package management that Guix boasts.  At this point we have mostly restricted this introduction to the @code{gnu-build-system} which is a core abstraction layer on which more advanced abstractions are based."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1387
msgid "Where do we go from here? Next we ought to dissect the innards of the build system by removing all abstractions, using the @code{trivial-build-system}: this should give us a thorough understanding of the process before investigating some more advanced packaging techniques and edge cases."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1390
msgid "Other features worth exploring are the interactive editing and debugging capabilities of Guix provided by the Guile REPL@."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1395
msgid "Those fancy features are completely optional and can wait; now is a good time to take a well-deserved break.  With what we've introduced here you should be well armed to package lots of programs.  You can get started right away and hopefully we will see your contributions soon!"
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1396 guix-git/doc/guix-cookbook.texi:1397
#, no-wrap
msgid "References"
msgstr "참조"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1402
msgid "The @uref{https://www.gnu.org/software/guix/manual/en/html_node/Defining-Packages.html, package reference in the manual}"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1405
msgid "@uref{https://gitlab.com/pjotrp/guix-notes/blob/master/HACKING.org, Pjotr’s hacking guide to GNU Guix}"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1408
msgid "@uref{https://www.gnu.org/software/guix/guix-ghm-andreas-20130823.pdf, ``GNU Guix: Package without a scheme!''}, by Andreas Enge"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1417
msgid "Guix offers a flexible language for declaratively configuring your Guix System.  This flexibility can at times be overwhelming.  The purpose of this chapter is to demonstrate some advanced configuration concepts."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1420
msgid "@pxref{System Configuration,,, guix, GNU Guix Reference Manual} for a complete reference."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1445
msgid "While the Guix manual explains auto-login one user to @emph{all} TTYs ( @pxref{auto-login to TTY,,, guix, GNU Guix Reference Manual}), some might prefer a situation, in which one user is logged into one TTY with the other TTYs either configured to login different users or no one at all.  Note that one can auto-login one user to any TTY, but it is usually advisable to avoid @code{tty1}, which, by default, is used to log warnings and errors."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1447
msgid "Here is how one might set up auto login for one user to one tty:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1455
#, no-wrap
msgid ""
"(define (auto-login-to-tty config tty user)\n"
"  (if (string=? tty (mingetty-configuration-tty config))\n"
"        (mingetty-configuration\n"
"         (inherit config)\n"
"         (auto-login user))\n"
"        config))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1462
#, no-wrap
msgid ""
"(define %my-services\n"
"  (modify-services %base-services\n"
"    ;; @dots{}\n"
"    (mingetty-service-type config =>\n"
"                           (auto-login-to-tty\n"
"                            config \"tty3\" \"alice\"))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1466
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (services %my-services))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1471
msgid "One could also @code{compose} (@pxref{Higher-Order Functions,,, guile, The Guile Reference Manual}) @code{auto-login-to-tty} to login multiple users to multiple ttys."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1478
msgid "Finally, here is a note of caution.  Setting up auto login to a TTY, means that anyone can turn on your computer and run commands as your regular user.  However, if you have an encrypted root partition, and thus already need to enter a passphrase when the system boots, auto-login might be a convenient option."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1490
msgid "Guix is, at its core, a source based distribution with substitutes (@pxref{Substitutes,,, guix, GNU Guix Reference Manual}), and as such building packages from their source code is an expected part of regular package installations and upgrades.  Given this starting point, it makes sense that efforts are made to reduce the amount of time spent compiling packages, and recent changes and upgrades to the building and distribution of substitutes continues to be a topic of discussion within Guix."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1496
msgid "The kernel, while not requiring an overabundance of RAM to build, does take a rather long time on an average machine.  The official kernel configuration, as is the case with many GNU/Linux distributions, errs on the side of inclusiveness, and this is really what causes the build to take such a long time when the kernel is built from source."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1501
msgid "The Linux kernel, however, can also just be described as a regular old package, and as such can be customized just like any other package.  The procedure is a little bit different, although this is primarily due to the nature of how the package definition is written."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1504
msgid "The @code{linux-libre} kernel package definition is actually a procedure which creates a package."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1515
#, no-wrap
msgid ""
"(define* (make-linux-libre* version gnu-revision source supported-systems\n"
"                            #:key\n"
"                            (extra-version #f)\n"
"                            ;; A function that takes an arch and a variant.\n"
"                            ;; See kernel-config for an example.\n"
"                            (configuration-file #f)\n"
"                            (defconfig \"defconfig\")\n"
"                            (extra-options %default-extra-linux-options))\n"
"  ...)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1519
msgid "The current @code{linux-libre} package is for the 5.15.x series, and is declared like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1527
#, no-wrap
msgid ""
"(define-public linux-libre-5.15\n"
"  (make-linux-libre* linux-libre-5.15-version\n"
"                     linux-libre-5.15-gnu-revision\n"
"                     linux-libre-5.15-source\n"
"                     '(\"x86_64-linux\" \"i686-linux\" \"armhf-linux\" \"aarch64-linux\" \"riscv64-linux\")\n"
"                     #:configuration-file kernel-config))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1534
msgid "Any keys which are not assigned values inherit their default value from the @code{make-linux-libre} definition.  When comparing the two snippets above, notice the code comment that refers to @code{#:configuration-file}.  Because of this, it is not actually easy to include a custom kernel configuration from the definition, but don't worry, there are other ways to work with what we do have."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1540
msgid "There are two ways to create a kernel with a custom kernel configuration.  The first is to provide a standard @file{.config} file during the build process by including an actual @file{.config} file as a native input to our custom kernel.  The following is a snippet from the custom @code{'configure} phase of the @code{make-linux-libre} package definition:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1544
#, no-wrap
msgid ""
"(let ((build  (assoc-ref %standard-phases 'build))\n"
"      (config (assoc-ref (or native-inputs inputs) \"kconfig\")))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1552
#, no-wrap
msgid ""
"  ;; Use a custom kernel configuration file or a default\n"
"  ;; configuration file.\n"
"  (if config\n"
"      (begin\n"
"        (copy-file config \".config\")\n"
"        (chmod \".config\" #o666))\n"
"      (invoke \"make\" ,defconfig)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1557
msgid "Below is a sample kernel package.  The @code{linux-libre} package is nothing special and can be inherited from and have its fields overridden like any other package:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1566
#, no-wrap
msgid ""
"(define-public linux-libre/E2140\n"
"  (package\n"
"    (inherit linux-libre)\n"
"    (native-inputs\n"
"     `((\"kconfig\" ,(local-file \"E2140.config\"))\n"
"      ,@@(alist-delete \"kconfig\"\n"
"                      (package-native-inputs linux-libre))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1573
msgid "In the same directory as the file defining @code{linux-libre-E2140} is a file named @file{E2140.config}, which is an actual kernel configuration file.  The @code{defconfig} keyword of @code{make-linux-libre} is left blank here, so the only kernel configuration in the package is the one which was included in the @code{native-inputs} field."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1578
msgid "The second way to create a custom kernel is to pass a new value to the @code{extra-options} keyword of the @code{make-linux-libre} procedure.  The @code{extra-options} keyword works with another function defined right below it:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1594
#, no-wrap
msgid ""
"(define %default-extra-linux-options\n"
"  `(;; https://lists.gnu.org/archive/html/guix-devel/2014-04/msg00039.html\n"
"   (\"CONFIG_DEVPTS_MULTIPLE_INSTANCES\" . #true)\n"
"   ;; Modules required for initrd:\n"
"   (\"CONFIG_NET_9P\" . m)\n"
"   (\"CONFIG_NET_9P_VIRTIO\" . m)\n"
"   (\"CONFIG_VIRTIO_BLK\" . m)\n"
"   (\"CONFIG_VIRTIO_NET\" . m)\n"
"   (\"CONFIG_VIRTIO_PCI\" . m)\n"
"   (\"CONFIG_VIRTIO_BALLOON\" . m)\n"
"   (\"CONFIG_VIRTIO_MMIO\" . m)\n"
"   (\"CONFIG_FUSE_FS\" . m)\n"
"   (\"CONFIG_CIFS\" . m)\n"
"   (\"CONFIG_9P_FS\" . m)))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1605
#, no-wrap
msgid ""
"(define (config->string options)\n"
"  (string-join (map (match-lambda\n"
"                      ((option . 'm)\n"
"                       (string-append option \"=m\"))\n"
"                      ((option . #true)\n"
"                       (string-append option \"=y\"))\n"
"                      ((option . #false)\n"
"                       (string-append option \"=n\")))\n"
"                    options)\n"
"               \"\\n\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1608
msgid "And in the custom configure script from the `make-linux-libre` package:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1616
#, no-wrap
msgid ""
";; Appending works even when the option wasn't in the\n"
";; file.  The last one prevails if duplicated.\n"
"(let ((port (open-file \".config\" \"a\"))\n"
"      (extra-configuration ,(config->string extra-options)))\n"
"  (display extra-configuration port)\n"
"  (close-port port))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1618
#, no-wrap
msgid "(invoke \"make\" \"oldconfig\")\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1623
msgid "So by not providing a configuration-file the @file{.config} starts blank, and then we write into it the collection of flags that we want.  Here's another custom kernel:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1631
#, no-wrap
msgid ""
"(define %macbook41-full-config\n"
"  (append %macbook41-config-options\n"
"          %file-systems\n"
"          %efi-support\n"
"          %emulation\n"
"          (@@@@ (gnu packages linux) %default-extra-linux-options)))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1642
#, no-wrap
msgid ""
"(define-public linux-libre-macbook41\n"
"  ;; XXX: Access the internal 'make-linux-libre*' procedure, which is\n"
"  ;; private and unexported, and is liable to change in the future.\n"
"  ((@@@@ (gnu packages linux) make-linux-libre*)\n"
"   (@@@@ (gnu packages linux) linux-libre-version)\n"
"   (@@@@ (gnu packages linux) linux-libre-gnu-revision)\n"
"   (@@@@ (gnu packages linux) linux-libre-source)\n"
"   '(\"x86_64-linux\")\n"
"   #:extra-version \"macbook41\"\n"
"   #:extra-options %macbook41-config-options))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1649
msgid "In the above example @code{%file-systems} is a collection of flags enabling different file system support, @code{%efi-support} enables EFI support and @code{%emulation} enables a x86_64-linux machine to act in 32-bit mode also.  @code{%default-extra-linux-options} are the ones quoted above, which had to be added in since they were replaced in the @code{extra-options} keyword."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1658
msgid "This all sounds like it should be doable, but how does one even know which modules are required for a particular system? Two places that can be helpful in trying to answer this question is the @uref{https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel, Gentoo Handbook} and the @uref{https://www.kernel.org/doc/html/latest/admin-guide/README.html?highlight=localmodconfig, documentation from the kernel itself}.  From the kernel documentation, it seems that @code{make localmodconfig} is the command we want."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1661
msgid "In order to actually run @code{make localmodconfig} we first need to get and unpack the kernel source code:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1664
#, no-wrap
msgid "tar xf $(guix build linux-libre --source)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1671
msgid "Once inside the directory containing the source code run @code{touch .config} to create an initial, empty @file{.config} to start with.  @code{make localmodconfig} works by seeing what you already have in @file{.config} and letting you know what you're missing.  If the file is blank then you're missing everything.  The next step is to run:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1674
#, no-wrap
msgid "guix shell -D linux-libre -- make localmodconfig\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1679
msgid "and note the output.  Do note that the @file{.config} file is still empty.  The output generally contains two types of warnings.  The first start with \"WARNING\" and can actually be ignored in our case.  The second read:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1682
#, no-wrap
msgid "module pcspkr did not have configs CONFIG_INPUT_PCSPKR\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1687
msgid "For each of these lines, copy the @code{CONFIG_XXXX_XXXX} portion into the @file{.config} in the directory, and append @code{=m}, so in the end it looks like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1691
#, no-wrap
msgid ""
"CONFIG_INPUT_PCSPKR=m\n"
"CONFIG_VIRTIO=m\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1700
msgid "After copying all the configuration options, run @code{make localmodconfig} again to make sure that you don't have any output starting with ``module''.  After all of these machine specific modules there are a couple more left that are also needed.  @code{CONFIG_MODULES} is necessary so that you can build and load modules separately and not have everything built into the kernel.  @code{CONFIG_BLK_DEV_SD} is required for reading from hard drives.  It is possible that there are other modules which you will need."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1704
msgid "This post does not aim to be a guide to configuring your own kernel however, so if you do decide to build a custom kernel you'll have to seek out other guides to create a kernel which is just right for your needs."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1712
msgid "The second way to setup the kernel configuration makes more use of Guix's features and allows you to share configuration segments between different kernels.  For example, all machines using EFI to boot have a number of EFI configuration flags that they need.  It is likely that all the kernels will share a list of file systems to support.  By using variables it is easier to see at a glance what features are enabled and to make sure you don't have features in one kernel but missing in another."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1717
msgid "Left undiscussed however, is Guix's initrd and its customization.  It is likely that you'll need to modify the initrd on a machine using a custom kernel, since certain modules which are expected to be built may not be available for inclusion into the initrd."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1724
msgid "Historically, Guix System is centered around an @code{operating-system} structure.  This structure contains various fields ranging from the bootloader and kernel declaration to the services to install."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1730
msgid "Depending on the target machine, that can go from a standard @code{x86_64} machine to a small ARM single board computer such as the Pine64, the image constraints can vary a lot.  The hardware manufacturers will impose different image formats with various partition sizes and offsets."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1735
msgid "To create images suitable for all those machines, a new abstraction is necessary: that's the goal of the @code{image} record.  This record contains all the required information to be transformed into a standalone image, that can be directly booted on any target machine."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1757
#, no-wrap
msgid ""
"(define-record-type* <image>\n"
"  image make-image\n"
"  image?\n"
"  (name               image-name ;symbol\n"
"                      (default #f))\n"
"  (format             image-format) ;symbol\n"
"  (target             image-target\n"
"                      (default #f))\n"
"  (size               image-size  ;size in bytes as integer\n"
"                      (default 'guess))\n"
"  (operating-system   image-operating-system  ;<operating-system>\n"
"                      (default #f))\n"
"  (partitions         image-partitions ;list of <partition>\n"
"                      (default '()))\n"
"  (compression?       image-compression? ;boolean\n"
"                      (default #t))\n"
"  (volatile-root?     image-volatile-root? ;boolean\n"
"                      (default #t))\n"
"  (substitutable?     image-substitutable? ;boolean\n"
"                      (default #t)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1763
msgid "This record contains the operating-system to instantiate. The @code{format} field defines the image type and can be @code{efi-raw}, @code{qcow2} or @code{iso9660} for instance. In the future, it could be extended to @code{docker} or other image types."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1766
msgid "A new directory in the Guix sources is dedicated to images definition. For now there are four files:"
msgstr ""

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1768
#, no-wrap
msgid "gnu/system/images/hurd.scm"
msgstr ""

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1769
#, no-wrap
msgid "gnu/system/images/pine64.scm"
msgstr ""

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1770
#, no-wrap
msgid "gnu/system/images/novena.scm"
msgstr ""

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1771
#, no-wrap
msgid "gnu/system/images/pinebook-pro.scm"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1777
msgid "Let's have a look to @file{pine64.scm}. It contains the @code{pine64-barebones-os} variable which is a minimal definition of an operating-system dedicated to the @b{Pine A64 LTS} board."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1801
#, no-wrap
msgid ""
"(define pine64-barebones-os\n"
"  (operating-system\n"
"   (host-name \"vignemale\")\n"
"   (timezone \"Europe/Paris\")\n"
"   (locale \"en_US.utf8\")\n"
"   (bootloader (bootloader-configuration\n"
"                (bootloader u-boot-pine64-lts-bootloader)\n"
"                (targets '(\"/dev/vda\"))))\n"
"   (initrd-modules '())\n"
"   (kernel linux-libre-arm64-generic)\n"
"   (file-systems (cons (file-system\n"
"                        (device (file-system-label \"my-root\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                       %base-file-systems))\n"
"   (services (cons (service agetty-service-type\n"
"                            (agetty-configuration\n"
"                             (extra-options '(\"-L\")) ; no carrier detect\n"
"                             (baud-rate \"115200\")\n"
"                             (term \"vt100\")\n"
"                             (tty \"ttyS0\")))\n"
"                   %base-services))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1805
msgid "The @code{kernel} and @code{bootloader} fields are pointing to packages dedicated to this board."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1807
msgid "Right below, the @code{pine64-image-type} variable is also defined."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1813
#, no-wrap
msgid ""
"(define pine64-image-type\n"
"  (image-type\n"
"   (name 'pine64-raw)\n"
"   (constructor (cut image-with-os arm64-disk-image <>))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1817
msgid "It's using a record we haven't talked about yet, the @code{image-type} record, defined this way:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1824
#, no-wrap
msgid ""
"(define-record-type* <image-type>\n"
"  image-type make-image-type\n"
"  image-type?\n"
"  (name           image-type-name) ;symbol\n"
"  (constructor    image-type-constructor)) ;<operating-system> -> <image>\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1830
msgid "The main purpose of this record is to associate a name to a procedure transforming an @code{operating-system} to an image.  To understand why it is necessary, let's have a look to the command producing an image from an @code{operating-system} configuration file:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1833
#, no-wrap
msgid "guix system image my-os.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1839
msgid "This command expects an @code{operating-system} configuration but how should we indicate that we want an image targeting a Pine64 board? We need to provide an extra information, the @code{image-type}, by passing the @code{--image-type} or @code{-t} flag, this way:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1842
#, no-wrap
msgid "guix system image --image-type=pine64-raw my-os.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1848
msgid "This @code{image-type} parameter points to the @code{pine64-image-type} defined above. Hence, the @code{operating-system} declared in @code{my-os.scm} will be applied the @code{(cut image-with-os arm64-disk-image <>)} procedure to turn it into an image."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1850
msgid "The resulting image looks like:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1860
#, no-wrap
msgid ""
"(image\n"
" (format 'disk-image)\n"
" (target \"aarch64-linux-gnu\")\n"
" (operating-system my-os)\n"
" (partitions\n"
"  (list (partition\n"
"         (inherit root-partition)\n"
"         (offset root-offset)))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1864
msgid "which is the aggregation of the @code{operating-system} defined in @code{my-os.scm} to the @code{arm64-disk-image} record."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1866
msgid "But enough Scheme madness. What does this image API bring to the Guix user?"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1868
msgid "One can run:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1872
#, no-wrap
msgid ""
"mathieu@@cervin:~$ guix system --list-image-types\n"
"The available image types are:\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1884
#, no-wrap
msgid ""
"   - pinebook-pro-raw\n"
"   - pine64-raw\n"
"   - novena-raw\n"
"   - hurd-raw\n"
"   - hurd-qcow2\n"
"   - qcow2\n"
"   - uncompressed-iso9660\n"
"   - efi-raw\n"
"   - arm64-raw\n"
"   - arm32-raw\n"
"   - iso9660\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1889
msgid "and by writing an @code{operating-system} file based on @code{pine64-barebones-os}, you can customize your image to your preferences in a file (@file{my-pine-os.scm}) like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1893
#, no-wrap
msgid ""
"(use-modules (gnu services linux)\n"
"             (gnu system images pine64))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1904
#, no-wrap
msgid ""
"(let ((base-os pine64-barebones-os))\n"
"  (operating-system\n"
"    (inherit base-os)\n"
"    (timezone \"America/Indiana/Indianapolis\")\n"
"    (services\n"
"     (cons\n"
"      (service earlyoom-service-type\n"
"               (earlyoom-configuration\n"
"                (prefer-regexp \"icecat|chromium\")))\n"
"      (operating-system-user-services base-os)))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1907
msgid "run:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1910
#, no-wrap
msgid "guix system image --image-type=pine64-raw my-pine-os.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1913
msgid "or,"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1916
#, no-wrap
msgid "guix system image --image-type=hurd-raw my-hurd-os.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1920
msgid "to get an image that can be written directly to a hard drive and booted from."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1922
msgid "Without changing anything to @code{my-hurd-os.scm}, calling:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1925
#, no-wrap
msgid "guix system image --image-type=hurd-qcow2 my-hurd-os.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1928
msgid "will instead produce a Hurd QEMU image."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:1931
#, no-wrap
msgid "2FA, two-factor authentication"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:1932
#, no-wrap
msgid "U2F, Universal 2nd Factor"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:1933
#, no-wrap
msgid "security key, configuration"
msgstr "보안 키, 구성"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1940
msgid "The use of security keys can improve your security by providing a second authentication source that cannot be easily stolen or copied, at least for a remote adversary (something that you have), to the main secret (a passphrase -- something that you know), reducing the risk of impersonation."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1945
msgid "The example configuration detailed below showcases what minimal configuration needs to be made on your Guix System to allow the use of a Yubico security key.  It is hoped the configuration can be useful for other security keys as well, with minor adjustments."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1946
#, no-wrap
msgid "Configuration for use as a two-factor authenticator (2FA)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1954
msgid "To be usable, the udev rules of the system should be extended with key-specific rules.  The following shows how to extend your udev rules with the @file{lib/udev/rules.d/70-u2f.rules} udev rule file provided by the @code{libfido2} package from the @code{(gnu packages security-token)} module and add your user to the @samp{\"plugdev\"} group it uses:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1973
#, no-wrap
msgid ""
"(use-package-modules ... security-token ...)\n"
"...\n"
"(operating-system\n"
" ...\n"
" (users (cons* (user-account\n"
"               (name \"your-user\")\n"
"               (group \"users\")\n"
"               (supplementary-groups\n"
"\t\t'(\"wheel\" \"netdev\" \"audio\" \"video\"\n"
"                  \"plugdev\"))           ;<- added system group\n"
"               (home-directory \"/home/your-user\"))\n"
"              %base-user-accounts))\n"
" ...\n"
" (services\n"
"  (cons*\n"
"   ...\n"
"   (udev-rules-service 'fido2 libfido2 #:groups '(\"plugdev\")))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1978
msgid "After re-configuring your system and re-logging in your graphical session so that the new group is in effect for your user, you can verify that your key is usable by launching:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1981
#, no-wrap
msgid "guix shell ungoogled-chromium -- chromium chrome://settings/securityKeys\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1987
msgid "and validating that the security key can be reset via the ``Reset your security key'' menu.  If it works, congratulations, your security key is ready to be used with applications supporting two-factor authentication (2FA)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1994
msgid "To connect to a Wireguard VPN server you need the kernel module to be loaded in memory and a package providing networking tools that support it (e.g.  @code{wireguard-tools} or @code{network-manager})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1998
msgid "Here is a configuration example for Linux-Libre < 5.6, where the module is out of tree and need to be loaded manually---following revisions of the kernel have it built-in and so don't need such configuration:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2003
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules desktop)\n"
"(use-package-modules vpn)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2012
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (services (cons (simple-service 'wireguard-module\n"
"                                  kernel-module-loader-service-type\n"
"                                  '(\"wireguard\"))\n"
"                  %desktop-services))\n"
"  (packages (cons wireguard-tools %base-packages))\n"
"  (kernel-loadable-modules (list wireguard-linux-compat)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2016
msgid "After reconfiguring and restarting your system you can either use Wireguard tools or NetworkManager to connect to a VPN server."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2017
#, no-wrap
msgid "Using Wireguard tools"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2023
msgid "To test your Wireguard setup it is convenient to use @command{wg-quick}.  Just give it a configuration file @command{wg-quick up ./wg0.conf}; or put that file in @file{/etc/wireguard} and run @command{wg-quick up wg0} instead."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:2027
msgid "Be warned that the author described this command as a: “[…] very quick and dirty bash script […]”."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2029
#, no-wrap
msgid "Using NetworkManager"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2037
msgid "Thanks to NetworkManager support for Wireguard we can connect to our VPN using @command{nmcli} command.  Up to this point this guide assumes that you're using Network Manager service provided by @code{%desktop-services}.  Ortherwise you need to adjust your services list to load @code{network-manager-service-type} and reconfigure your Guix system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2039
msgid "To import your VPN configuration execute nmcli import command:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2043
#, no-wrap
msgid ""
"# nmcli connection import type wireguard file wg0.conf\n"
"Connection 'wg0' (edbee261-aa5a-42db-b032-6c7757c60fde) successfully added\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2048
msgid "This will create a configuration file in @file{/etc/NetworkManager/wg0.nmconnection}.  Next connect to the Wireguard server:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2052
#, no-wrap
msgid ""
"$ nmcli connection up wg0\n"
"Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2056
msgid "By default NetworkManager will connect automatically on system boot.  To change that behaviour you need to edit your config:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2059
#, no-wrap
msgid "# nmcli connection modify wg0 connection.autoconnect no\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2064
msgid "For more specific information about NetworkManager and wireguard @uref{https://blogs.gnome.org/thaller/2019/03/15/wireguard-in-networkmanager/,see this post by thaller}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2067
#, no-wrap
msgid "wm"
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2069 guix-git/doc/guix-cookbook.texi:2070
#, no-wrap
msgid "StumpWM"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2071
#, no-wrap
msgid "stumpwm"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2076
msgid "You could install StumpWM with a Guix system by adding @code{stumpwm} and optionally @code{`(,stumpwm \"lib\")} packages to a system configuration file, e.g.@: @file{/etc/config.scm}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2078
msgid "An example configuration can look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2082
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-package-modules wm)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2087
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    %base-packages)))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2089
#, no-wrap
msgid "stumpwm fonts"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2093
msgid "By default StumpWM uses X11 fonts, which could be small or pixelated on your system.  You could fix this by installing StumpWM contrib Lisp module @code{sbcl-ttf-fonts}, adding it to Guix system packages:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2097
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-package-modules fonts wm)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2102
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    sbcl-ttf-fonts font-dejavu %base-packages)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2106
msgid "Then you need to add the following code to a StumpWM configuration file @file{~/.stumpwm.d/init.lisp}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2113
#, no-wrap
msgid ""
"(require :ttf-fonts)\n"
"(setf xft:*font-dirs* '(\"/run/current-system/profile/share/fonts/\"))\n"
"(setf clx-truetype:+font-cache-filename+ (concat (getenv \"HOME\") \"/.fonts/font-cache.sexp\"))\n"
"(xft:cache-fonts)\n"
"(set-font (make-instance 'xft:font :family \"DejaVu Sans Mono\" :subfamily \"Book\" :size 11))\n"
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2115 guix-git/doc/guix-cookbook.texi:2116
#, no-wrap
msgid "Session lock"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2117
#, no-wrap
msgid "sessionlock"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2123
msgid "Depending on your environment, locking the screen of your session might come built in or it might be something you have to set up yourself. If you use a desktop environment like GNOME or KDE, it's usually built in. If you use a plain window manager like StumpWM or EXWM, you might have to set it up yourself."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:2124 guix-git/doc/guix-cookbook.texi:2125
#, no-wrap
msgid "Xorg"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2131
msgid "If you use Xorg, you can use the utility @uref{https://www.mankier.com/1/xss-lock, xss-lock} to lock the screen of your session.  xss-lock is triggered by DPMS which since Xorg 1.8 is auto-detected and enabled if ACPI is also enabled at kernel runtime."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2134
msgid "To use xss-lock, you can simple execute it and put it into the background before you start your window manager from e.g. your @file{~/.xsession}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2138
#, no-wrap
msgid ""
"xss-lock -- slock &\n"
"exec stumpwm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2142
msgid "In this example, xss-lock uses @code{slock} to do the actual locking of the screen when it determines it's appropriate, like when you suspend your device."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2146
msgid "For slock to be allowed to be a screen locker for the graphical session, it needs to be made setuid-root so it can authenticate users, and it needs a PAM service. This can be achieved by adding the following service to your @file{config.scm}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2149
#, no-wrap
msgid "(screen-locker-service slock)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2155
msgid "If you manually lock your screen, e.g. by directly calling slock when you want to lock your screen but not suspend it, it's a good idea to notify xss-lock about this so no confusion occurs. This can be done by executing @code{xset s activate} immediately before you execute slock."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2158
#, no-wrap
msgid "linode, Linode"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2163
msgid "To run Guix on a server hosted by @uref{https://www.linode.com, Linode}, start with a recommended Debian server.  We recommend using the default distro as a way to bootstrap Guix. Create your SSH keys."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2166
#, no-wrap
msgid "ssh-keygen\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2172
msgid "Be sure to add your SSH key for easy login to the remote server.  This is trivially done via Linode's graphical interface for adding SSH keys.  Go to your profile and click add SSH Key.  Copy into it the output of:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2175
#, no-wrap
msgid "cat ~/.ssh/<username>_rsa.pub\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2178
msgid "Power the Linode down."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2182
msgid "In the Linode's Storage tab, resize the Debian disk to be smaller.  30 GB free space is recommended.  Then click \"Add a disk\", and fill out the form with the following:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2186
msgid "Label: \"Guix\""
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2189
msgid "Filesystem: ext4"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2192
msgid "Set it to the remaining size"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2197
msgid "In the Configurations tab, press \"Edit\" on the default Debian profile.  Under \"Block Device Assignment\" click \"Add a Device\". It should be @file{/dev/sdc} and you can select the \"Guix\" disk. Save Changes."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2199
msgid "Now \"Add a Configuration\", with the following:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2202
msgid "Label: Guix"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2205
msgid "Kernel:GRUB 2 (it's at the bottom! This step is @b{IMPORTANT!})"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2208
msgid "Block device assignment:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2211
msgid "@file{/dev/sda}: Guix"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2214
msgid "@file{/dev/sdb}: swap"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2217
msgid "Root device: @file{/dev/sda}"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2220
msgid "Turn off all the filesystem/boot helpers"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2227
msgid "Now power it back up, booting with the Debian configuration.  Once it's running, ssh to your server via @code{ssh root@@@var{<your-server-IP-here>}}. (You can find your server IP address in your Linode Summary section.) Now you can run the \"install guix from @pxref{Binary Installation,,, guix, GNU Guix}\" steps:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2235
#, no-wrap
msgid ""
"sudo apt-get install gpg\n"
"wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -\n"
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
"guix pull\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2239
msgid "Now it's time to write out a config for the server.  The key information is below. Save the resulting file as @file{guix-config.scm}."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2250
#, no-wrap
msgid ""
"(use-modules (gnu)\n"
"             (guix modules))\n"
"(use-service-modules networking\n"
"                     ssh)\n"
"(use-package-modules admin\n"
"                     certs\n"
"                     package-management\n"
"                     ssh\n"
"                     tls)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2267
#, no-wrap
msgid ""
"(operating-system\n"
"  (host-name \"my-server\")\n"
"  (timezone \"America/New_York\")\n"
"  (locale \"en_US.UTF-8\")\n"
"  ;; This goofy code will generate the grub.cfg\n"
"  ;; without installing the grub bootloader on disk.\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader\n"
"                (bootloader\n"
"                 (inherit grub-bootloader)\n"
"                 (installer #~(const #true))))))\n"
"  (file-systems (cons (file-system\n"
"                        (device \"/dev/sda\")\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2270
#, no-wrap
msgid ""
"  (swap-devices (list \"/dev/sdb\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2274
#, no-wrap
msgid ""
"  (initrd-modules (cons \"virtio_scsi\"    ; Needed to find the disk\n"
"                        %base-initrd-modules))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2283
#, no-wrap
msgid ""
"  (users (cons (user-account\n"
"                (name \"janedoe\")\n"
"                (group \"users\")\n"
"                ;; Adding the account to the \"wheel\" group\n"
"                ;; makes it a sudoer.\n"
"                (supplementary-groups '(\"wheel\"))\n"
"                (home-directory \"/home/janedoe\"))\n"
"               %base-user-accounts))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2287
#, no-wrap
msgid ""
"  (packages (cons* nss-certs            ;for HTTPS access\n"
"                   openssh-sans-x\n"
"                   %base-packages))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2298
#, no-wrap
msgid ""
"  (services (cons*\n"
"             (service dhcp-client-service-type)\n"
"             (service openssh-service-type\n"
"                      (openssh-configuration\n"
"                       (openssh openssh-sans-x)\n"
"                       (password-authentication? #false)\n"
"                       (authorized-keys\n"
"                        `((\"janedoe\" ,(local-file \"janedoe_rsa.pub\"))\n"
"                          (\"root\" ,(local-file \"janedoe_rsa.pub\"))))))\n"
"             %base-services)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2301
msgid "Replace the following fields in the above configuration:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2309
#, no-wrap
msgid ""
"(host-name \"my-server\")       ; replace with your server name\n"
"; if you chose a linode server outside the U.S., then\n"
"; use tzselect to find a correct timezone string\n"
"(timezone \"America/New_York\") ; if needed replace timezone\n"
"(name \"janedoe\")              ; replace with your username\n"
"(\"janedoe\" ,(local-file \"janedoe_rsa.pub\")) ; replace with your ssh key\n"
"(\"root\" ,(local-file \"janedoe_rsa.pub\")) ; replace with your ssh key\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2316
msgid "The last line in the above example lets you log into the server as root and set the initial root password (see the note at the end of this recipe about root login).  After you have done this, you may delete that line from your configuration and reconfigure to prevent root login."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2321
msgid "Copy your ssh public key (eg: @file{~/.ssh/id_rsa.pub}) as @file{@var{<your-username-here>}_rsa.pub} and put @file{guix-config.scm} in the same directory.  In a new terminal run these commands."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2326
#, no-wrap
msgid ""
"sftp root@@<remote server ip address>\n"
"put /path/to/files/<username>_rsa.pub .\n"
"put /path/to/files/guix-config.scm .\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2329
msgid "In your first terminal, mount the guix drive:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2333
#, no-wrap
msgid ""
"mkdir /mnt/guix\n"
"mount /dev/sdc /mnt/guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2338
msgid "Due to the way we set up the bootloader section of the guix-config.scm, only the grub configuration file will be installed.  So, we need to copy over some of the other GRUB stuff already installed on the Debian system:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2342
#, no-wrap
msgid ""
"mkdir -p /mnt/guix/boot/grub\n"
"cp -r /boot/grub/* /mnt/guix/boot/grub/\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2345
msgid "Now initialize the Guix installation:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2348
#, no-wrap
msgid "guix system init guix-config.scm /mnt/guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2352
msgid "Ok, power it down! Now from the Linode console, select boot and select \"Guix\"."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2355
msgid "Once it boots, you should be able to log in via SSH! (The server config will have changed though.)  You may encounter an error like:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2371
#, no-wrap
msgid ""
"$ ssh root@@<server ip address>\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n"
"Someone could be eavesdropping on you right now (man-in-the-middle attack)!\n"
"It is also possible that a host key has just been changed.\n"
"The fingerprint for the ECDSA key sent by the remote host is\n"
"SHA256:0B+wp33w57AnKQuHCvQP0+ZdKaqYrI/kyU7CfVbS7R4.\n"
"Please contact your system administrator.\n"
"Add correct host key in /home/joshua/.ssh/known_hosts to get rid of this message.\n"
"Offending ECDSA key in /home/joshua/.ssh/known_hosts:3\n"
"ECDSA host key for 198.58.98.76 has changed and you have requested strict checking.\n"
"Host key verification failed.\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2375
msgid "Either delete @file{~/.ssh/known_hosts} file, or delete the offending line starting with your server IP address."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2377
msgid "Be sure to set your password and root's password."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2382
#, no-wrap
msgid ""
"ssh root@@<remote ip address>\n"
"passwd  ; for the root password\n"
"passwd <username> ; for the user password\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2389
msgid "You may not be able to run the above commands at this point.  If you have issues remotely logging into your linode box via SSH, then you may still need to set your root and user password initially by clicking on the ``Launch Console'' option in your linode.  Choose the ``Glish'' instead of ``Weblish''.  Now you should be able to ssh into the machine."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2393
msgid "Hooray! At this point you can shut down the server, delete the Debian disk, and resize the Guix to the rest of the size.  Congratulations!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2398
msgid "By the way, if you save it as a disk image right at this point, you'll have an easy time spinning up new Guix images! You may need to down-size the Guix image to 6144MB, to save it as an image.  Then you can resize it again to the max size."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2407
msgid "To bind mount a file system, one must first set up some definitions before the @code{operating-system} section of the system definition.  In this example we will bind mount a folder from a spinning disk drive to @file{/tmp}, to save wear and tear on the primary SSD, without dedicating an entire partition to be mounted as @file{/tmp}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2410
msgid "First, the source drive that hosts the folder we wish to bind mount should be defined, so that the bind mount can depend on it."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2417
#, no-wrap
msgid ""
"(define source-drive ;; \"source-drive\" can be named anything you want.\n"
"   (file-system\n"
"    (device (uuid \"UUID goes here\"))\n"
"    (mount-point \"/path-to-spinning-disk-goes-here\")\n"
"    (type \"ext4\"))) ;; Make sure to set this to the appropriate type for your drive.\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2421
msgid "The source folder must also be defined, so that guix will know it's not a regular block device, but a folder."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2423
#, no-wrap
msgid "(define (%source-directory) \"/path-to-spinning-disk-goes-here/tmp\") ;; \"source-directory\" can be named any valid variable name.\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2427
msgid "Finally, inside the @code{file-systems} definition, we must add the mount itself."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2430
#, no-wrap
msgid ""
"(file-systems (cons*\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2432
#, no-wrap
msgid ""
"                ...<other drives omitted for clarity>...\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2434
#, no-wrap
msgid ""
"                source-drive ;; Must match the name you gave the source drive in the earlier definition.\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2442
#, no-wrap
msgid ""
"                (file-system\n"
"                 (device (%source-directory)) ;; Make sure \"source-directory\" matches your earlier definition.\n"
"                 (mount-point \"/tmp\")\n"
"                 (type \"none\") ;; We are mounting a folder, not a partition, so this type needs to be \"none\"\n"
"                 (flags '(bind-mount))\n"
"                 (dependencies (list source-drive)) ;; Ensure \"source-drive\" matches what you've named the variable for the drive.\n"
"                 )\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2444
#, no-wrap
msgid ""
"                 ...<other drives omitted for clarity>...\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2446
#, no-wrap
msgid "                ))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2453
msgid "Guix daemon can use a HTTP proxy to get substitutes, here we are configuring it to get them via Tor."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:2454
#, no-wrap
msgid "Warning"
msgstr "경고"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:2460
msgid "@emph{Not all} Guix daemon's traffic will go through Tor! Only HTTP/HTTPS will get proxied; FTP, Git protocol, SSH, etc connections will still go through the clearnet.  Again, this configuration isn't foolproof some of your traffic won't get routed by Tor at all.  Use it at your own risk."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:2466
msgid "Also note that the procedure described here applies only to package substitution. When you update your guix distribution with @command{guix pull}, you still need to use @command{torsocks} if you want to route the connection to guix's git repository servers through Tor."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2471
msgid "Guix's substitute server is available as a Onion service, if you want to use it to get your substitutes through Tor configure your system as follow:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2475
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-module base networking)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2492
#, no-wrap
msgid ""
"(operating-system\n"
"  …\n"
"  (services\n"
"    (cons\n"
"      (service tor-service-type\n"
"              (tor-configuration\n"
"                (config-file (plain-file \"tor-config\"\n"
"                                         \"HTTPTunnelPort 127.0.0.1:9250\"))))\n"
"      (modify-services %base-services\n"
"        (guix-service-type\n"
"          config => (guix-configuration\n"
"                      (inherit config)\n"
"                      ;; ci.guix.gnu.org's Onion service\n"
"                      (substitute-urls\n"
"                       \"@value{SUBSTITUTE-TOR-URL}\")\n"
"                      (http-proxy \"http://localhost:9250\")))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2501
msgid "This will keep a tor process running that provides a HTTP CONNECT tunnel which will be used by @command{guix-daemon}.  The daemon can use other protocols than HTTP(S) to get remote resources, request using those protocols won't go through Tor since we are only setting a HTTP tunnel here.  Note that @code{substitutes-urls} is using HTTPS and not HTTP or it won't work, that's a limitation of Tor's tunnel; you may want to use @command{privoxy} instead to avoid such limitations."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2505
msgid "If you don't want to always get substitutes through Tor but using it just some of the times, then skip the @code{guix-configuration}.  When you want to get a substitute from the Tor tunnel run:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2510
#, no-wrap
msgid ""
"sudo herd set-http-proxy guix-daemon http://localhost:9250\n"
"guix build \\\n"
"  --substitute-urls=@value{SUBSTITUTE-TOR-URL} @dots{}\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2514
#, no-wrap
msgid "nginx, lua, openresty, resty"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2517
msgid "NGINX could be extended with Lua scripts."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2520
msgid "Guix provides NGINX service with ability to load Lua module and specific Lua packages, and reply to requests by evaluating Lua scripts."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2524
msgid "The following example demonstrates system definition with configuration to evaluate @file{index.lua} Lua script on HTTP request to @uref{http://localhost/hello} endpoint:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2527
#, no-wrap
msgid ""
"local shell = require \"resty.shell\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2531
#, no-wrap
msgid ""
"local stdin = \"\"\n"
"local timeout = 1000  -- ms\n"
"local max_size = 4096  -- byte\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2534
#, no-wrap
msgid ""
"local ok, stdout, stderr, reason, status =\n"
"   shell.run([[/run/current-system/profile/bin/ls /tmp]], stdin, timeout, max_size)\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2536
#, no-wrap
msgid "ngx.say(stdout)\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2567
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules #;… web)\n"
"(use-package-modules #;… lua)\n"
"(operating-system\n"
"  ;; …\n"
"  (services\n"
"   ;; …\n"
"   (service nginx-service-type\n"
"            (nginx-configuration\n"
"             (modules\n"
"              (list\n"
"               (file-append nginx-lua-module \"/etc/nginx/modules/ngx_http_lua_module.so\")))\n"
"             (lua-package-path (list lua-resty-core\n"
"                                     lua-resty-lrucache\n"
"                                     lua-resty-signal\n"
"                                     lua-tablepool\n"
"                                     lua-resty-shell))\n"
"             (lua-package-cpath (list lua-resty-signal))\n"
"             (server-blocks\n"
"              (list (nginx-server-configuration\n"
"                     (server-name '(\"localhost\"))\n"
"                     (listen '(\"80\"))\n"
"                     (root \"/etc\")\n"
"                     (locations (list\n"
"                                 (nginx-location-configuration\n"
"                                  (uri \"/hello\")\n"
"                                  (body (list #~(format #f \"content_by_lua_file ~s;\"\n"
"                                                        #$(local-file \"index.lua\"))))))))))))))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2571
#, no-wrap
msgid "mpd"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2572
#, no-wrap
msgid "music server, headless"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2573
#, no-wrap
msgid "bluetooth, ALSA configuration"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2580
msgid "MPD, the Music Player Daemon, is a flexible server-side application for playing music.  Client programs on different machines on the network --- a mobile phone, a laptop, a desktop workstation --- can connect to it to control the playback of audio files from your local music collection.  MPD decodes the audio files and plays them back on one or many outputs."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2587
msgid "By default MPD will play to the default audio device.  In the example below we make things a little more interesting by setting up a headless music server.  There will be no graphical user interface, no Pulseaudio daemon, and no local audio output.  Instead we will configure MPD with two outputs: a bluetooth speaker and a web server to serve audio streams to any streaming media player."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2593
msgid "Bluetooth is often rather frustrating to set up.  You will have to pair your Bluetooth device and make sure that the device is automatically connected as soon as it powers on.  The Bluetooth system service returned by the @code{bluetooth-service} procedure provides the infrastructure needed to set this up."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2596
msgid "Reconfigure your system with at least the following services and packages:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2606
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (cons* bluez bluez-alsa\n"
"                   %base-packages))\n"
"  (services\n"
"   ;; …\n"
"   (dbus-service #:services (list bluez-alsa))\n"
"   (bluetooth-service #:auto-enable? #t)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2613
msgid "Start the @code{bluetooth} service and then use @command{bluetoothctl} to scan for Bluetooth devices.  Try to identify your Bluetooth speaker and pick out its device ID from the resulting list of devices that is indubitably dominated by a baffling smorgasbord of your neighbors' home automation gizmos.  This only needs to be done once:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2617
#, no-wrap
msgid ""
"$ bluetoothctl \n"
"[NEW] Controller 00:11:22:33:95:7F BlueZ 5.40 [default]\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2620
#, no-wrap
msgid ""
"[bluetooth]# power on\n"
"[bluetooth]# Changing power on succeeded\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2623
#, no-wrap
msgid ""
"[bluetooth]# agent on\n"
"[bluetooth]# Agent registered\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2626
#, no-wrap
msgid ""
"[bluetooth]# default-agent\n"
"[bluetooth]# Default agent request successful\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2633
#, no-wrap
msgid ""
"[bluetooth]# scan on\n"
"[bluetooth]# Discovery started\n"
"[CHG] Controller 00:11:22:33:95:7F Discovering: yes\n"
"[NEW] Device AA:BB:CC:A4:AA:CD My Bluetooth Speaker\n"
"[NEW] Device 44:44:FF:2A:20:DC My Neighbor's TV\n"
"@dots{}\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2637
#, no-wrap
msgid ""
"[bluetooth]# pair AA:BB:CC:A4:AA:CD\n"
"Attempting to pair with AA:BB:CC:A4:AA:CD\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: yes\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2643
#, no-wrap
msgid ""
"[My Bluetooth Speaker]# [CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110b-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110c-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110e-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Paired: yes\n"
"Pairing successful\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2645
#, no-wrap
msgid ""
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: no\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2650
#, no-wrap
msgid ""
"[bluetooth]# \n"
"[bluetooth]# trust AA:BB:CC:A4:AA:CD\n"
"[bluetooth]# [CHG] Device AA:BB:CC:A4:AA:CD Trusted: yes\n"
"Changing AA:BB:CC:A4:AA:CD trust succeeded\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2657
#, no-wrap
msgid ""
"[bluetooth]# \n"
"[bluetooth]# connect AA:BB:CC:A4:AA:CD\n"
"Attempting to connect to AA:BB:CC:A4:AA:CD\n"
"[bluetooth]# [CHG] Device AA:BB:CC:A4:AA:CD RSSI: -63\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: yes\n"
"Connection successful\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2662
#, no-wrap
msgid ""
"[My Bluetooth Speaker]# scan off\n"
"[CHG] Device AA:BB:CC:A4:AA:CD RSSI is nil\n"
"Discovery stopped\n"
"[CHG] Controller 00:11:22:33:95:7F Discovering: no\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2666
msgid "Congratulations, you can now automatically connect to your Bluetooth speaker!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2676
msgid "It is now time to configure ALSA to use the @emph{bluealsa} Bluetooth module, so that you can define an ALSA pcm device corresponding to your Bluetooth speaker.  For a headless server using @emph{bluealsa} with a fixed Bluetooth device is likely simpler than configuring Pulseaudio and its stream switching behavior.  We configure ALSA by crafting a custom @code{alsa-configuration} for the @code{alsa-service-type}.  The configuration will declare a @code{pcm} type @code{bluealsa} from the @code{bluealsa} module provided by the @code{bluez-alsa} package, and then define a @code{pcm} device of that type for your Bluetooth speaker."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2683
msgid "All that is left then is to make MPD send audio data to this ALSA device.  We also add a secondary MPD output that makes the currently played audio files available as a stream through a web server on port 8080.  When enabled a device on the network could listen to the audio stream by connecting any capable media player to the HTTP server on port 8080, independent of the status of the Bluetooth speaker."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2686
msgid "What follows is the outline of an @code{operating-system} declaration that should accomplish the above-mentioned tasks:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2734
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules audio dbus sound #;… etc)\n"
"(use-package-modules audio linux #;… etc)\n"
"(operating-system\n"
"  ;; …\n"
"  (packages (cons* bluez bluez-alsa\n"
"                   %base-packages))\n"
"  (services\n"
"   ;; …\n"
"   (service mpd-service-type\n"
"            (mpd-configuration\n"
"             (user \"your-username\")\n"
"             (music-dir \"/path/to/your/music\")\n"
"             (address \"192.168.178.20\")\n"
"             (outputs (list (mpd-output\n"
"                             (type \"alsa\")\n"
"                             (name \"MPD\")\n"
"                             (extra-options\n"
"                              ;; Use the same name as in the ALSA\n"
"                              ;; configuration below.\n"
"                              '((device . \"pcm.btspeaker\"))))\n"
"                            (mpd-output\n"
"                             (type \"httpd\")\n"
"                             (name \"streaming\")\n"
"                             (enabled? #false)\n"
"                             (always-on? #true)\n"
"                             (tags? #true)\n"
"                             (mixer-type 'null)\n"
"                             (extra-options\n"
"                              '((encoder . \"vorbis\")\n"
"                                (port    . \"8080\")\n"
"                                (bind-to-address . \"192.168.178.20\")\n"
"                                (max-clients . \"0\") ;no limit\n"
"                                (quality . \"5.0\")\n"
"                                (format  . \"44100:16:1\"))))))))\n"
"   (dbus-service #:services (list bluez-alsa))\n"
"   (bluetooth-service #:auto-enable? #t)\n"
"   (service alsa-service-type\n"
"            (alsa-configuration\n"
"             (pulseaudio? #false) ;we don't need it\n"
"             (extra-options\n"
"              #~(string-append \"\\\n"
"# Declare Bluetooth audio device type \\\"bluealsa\\\" from bluealsa module\n"
"pcm_type.bluealsa @{\n"
"    lib \\\"\" #$(file-append bluez-alsa \"/lib/alsa-lib/libasound_module_pcm_bluealsa.so\") \"\\\"\n"
"@}\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2739
#, no-wrap
msgid ""
"# Declare control device type \\\"bluealsa\\\" from the same module\n"
"ctl_type.bluealsa @{\n"
"    lib \\\"\" #$(file-append bluez-alsa \"/lib/alsa-lib/libasound_module_ctl_bluealsa.so\") \"\\\"\n"
"@}\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2746
#, no-wrap
msgid ""
"# Define the actual Bluetooth audio device.\n"
"pcm.btspeaker @{\n"
"    type bluealsa\n"
"    device \\\"AA:BB:CC:A4:AA:CD\\\" # unique device identifier\n"
"    profile \\\"a2dp\\\"\n"
"@}\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2752
#, no-wrap
msgid ""
"# Define an associated controller.\n"
"ctl.btspeaker @{\n"
"    type bluealsa\n"
"@}\n"
"\"))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2756
msgid "Enjoy the music with the MPD client of your choice or a media player capable of streaming via HTTP!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2769
msgid "The kernel Linux provides a number of shared facilities that are available to processes in the system.  These facilities include a shared view on the file system, other processes, network devices, user and group identities, and a few others.  Since Linux 3.19 a user can choose to @emph{unshare} some of these shared facilities for selected processes, providing them (and their child processes) with a different view on the system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2775
msgid "A process with an unshared @code{mount} namespace, for example, has its own view on the file system --- it will only be able to see directories that have been explicitly bound in its mount namespace.  A process with its own @code{proc} namespace will consider itself to be the only process running on the system, running as PID 1."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2782
msgid "Guix uses these kernel features to provide fully isolated environments and even complete Guix System containers, lightweight virtual machines that share the host system's kernel.  This feature comes in especially handy when using Guix on a foreign distribution to prevent interference from foreign libraries or configuration files that are available system-wide."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2794
msgid "The easiest way to get started is to use @command{guix shell} with the @option{--container} option.  @xref{Invoking guix shell,,, guix, GNU Guix Reference Manual} for a reference of valid options."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2801
msgid "The following snippet spawns a minimal shell process with most namespaces unshared from the system.  The current working directory is visible to the process, but anything else on the file system is unavailable.  This extreme isolation can be very useful when you want to rule out any sort of interference from environment variables, globally installed libraries, or configuration files."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2804
#, no-wrap
msgid "guix shell --container\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2811
msgid "It is a bleak environment, barren, desolate.  You will find that not even the GNU coreutils are available here, so to explore this deserted wasteland you need to use built-in shell commands.  Even the usually gigantic @file{/gnu/store} directory is reduced to a faint shadow of itself."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2821
#, no-wrap
msgid ""
"$ echo /gnu/store/*\n"
"/gnu/store/@dots{}-gcc-10.3.0-lib\n"
"/gnu/store/@dots{}-glibc-2.33\n"
"/gnu/store/@dots{}-bash-static-5.1.8\n"
"/gnu/store/@dots{}-ncurses-6.2.20210619\n"
"/gnu/store/@dots{}-bash-5.1.8\n"
"/gnu/store/@dots{}-profile\n"
"/gnu/store/@dots{}-readline-8.1.1\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2823
#, no-wrap
msgid "exiting a container"
msgstr "컨테이너 나가기"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2827
msgid "There isn't much you can do in an environment like this other than exiting it.  You can use @key{^D} or @command{exit} to terminate this limited shell environment."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2828
#, no-wrap
msgid "exposing directories, container"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2829
#, no-wrap
msgid "sharing directories, container"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2830
#, no-wrap
msgid "mapping locations, container"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2839
msgid "You can make other directories available inside of the container environment; use @option{--expose=DIRECTORY} to bind-mount the given directory as a read-only location inside the container, or use @option{--share=DIRECTORY} to make the location writable.  With an additional mapping argument after the directory name you can control the name of the directory inside the container.  In the following example we map @file{/etc} on the host system to @file{/the/host/etc} inside a container in which the GNU coreutils are installed."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2843
#, no-wrap
msgid ""
"$ guix shell --container --share=/etc=/the/host/etc coreutils\n"
"$ ls /the/host/etc\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2850
msgid "Similarly, you can prevent the current working directory from being mapped into the container with the @option{--no-cwd} option.  Another good idea is to create a dedicated directory that will serve as the container's home directory, and spawn the container shell from that directory."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2851
#, no-wrap
msgid "hide system libraries, container"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2852
#, no-wrap
msgid "avoid ABI mismatch, container"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2862
msgid "On a foreign system a container environment can be used to compile software that cannot possibly be linked with system libraries or with the system's compiler toolchain.  A common use-case in a research context is to install packages from within an R session.  Outside of a container environment there is a good chance that the foreign compiler toolchain and incompatible system libraries are found first, resulting in incompatible binaries that cannot be used by R.  In a container shell this problem disappears, as system libraries and executables simply aren't available due to the unshared @code{mount} namespace."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2865
msgid "Let's take a comprehensive manifest providing a comfortable development environment for use with R:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2869
#, no-wrap
msgid ""
"(specifications->manifest\n"
"  (list \"r-minimal\"\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2874
#, no-wrap
msgid ""
"        ;; base packages\n"
"        \"bash-minimal\"\n"
"        \"glibc-locales\"\n"
"        \"nss-certs\"\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2881
#, no-wrap
msgid ""
"        ;; Common command line tools lest the container is too empty.\n"
"        \"coreutils\"\n"
"        \"grep\"\n"
"        \"which\"\n"
"        \"wget\"\n"
"        \"sed\"\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2884
#, no-wrap
msgid ""
"        ;; R markdown tools\n"
"        \"pandoc\"\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2900
#, no-wrap
msgid ""
"        ;; Toolchain and common libraries for \"install.packages\"\n"
"        \"gcc-toolchain@@10\"\n"
"        \"gfortran-toolchain\"\n"
"        \"gawk\"\n"
"        \"tar\"\n"
"        \"gzip\"\n"
"        \"unzip\"\n"
"        \"make\"\n"
"        \"cmake\"\n"
"        \"pkg-config\"\n"
"        \"cairo\"\n"
"        \"libxt\"\n"
"        \"openssl\"\n"
"        \"curl\"\n"
"        \"zlib\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2906
msgid "Let's use this to run R inside a container environment.  For convenience we share the @code{net} namespace to use the host system's network interfaces.  Now we can build R packages from source the traditional way without having to worry about ABI mismatch or incompatibilities."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2909
#, no-wrap
msgid ""
"$ guix shell --container --network --manifest=manifest.scm -- R\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2922
#, no-wrap
msgid ""
"R version 4.2.1 (2022-06-23) -- \"Funny-Looking Kid\"\n"
"Copyright (C) 2022 The R Foundation for Statistical Computing\n"
"@dots{}\n"
"> e <- Sys.getenv(\"GUIX_ENVIRONMENT\")\n"
"> Sys.setenv(GIT_SSL_CAINFO=paste0(e, \"/etc/ssl/certs/ca-certificates.crt\"))\n"
"> Sys.setenv(SSL_CERT_FILE=paste0(e, \"/etc/ssl/certs/ca-certificates.crt\"))\n"
"> Sys.setenv(SSL_CERT_DIR=paste0(e, \"/etc/ssl/certs\"))\n"
"> install.packages(\"Cairo\", lib=paste0(getwd()))\n"
"@dots{}\n"
"* installing *source* package 'Cairo' ...\n"
"@dots{}\n"
"* DONE (Cairo)\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2927
#, no-wrap
msgid ""
"The downloaded source packages are in\n"
"\t'/tmp/RtmpCuwdwM/downloaded_packages'\n"
"> library(\"Cairo\", lib=getwd())\n"
"> # success!\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2935
msgid "Using container shells is fun, but they can become a little cumbersome when you want to go beyond just a single interactive process.  Some tasks become a lot easier when they sit on the rock solid foundation of a proper Guix System and its rich set of system services.  The next section shows you how to launch a complete Guix System inside of a container."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2949
msgid "The Guix System provides a wide array of interconnected system services that are configured declaratively to form a dependable stateless GNU System foundation for whatever tasks you throw at it.  Even when using Guix on a foreign distribution you can benefit from the design of Guix System by running a system instance as a container.  Using the same kernel features of unshared namespaces mentioned in the previous section, the resulting Guix System instance is isolated from the host system and only shares file system locations that you explicitly declare."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2960
msgid "A Guix System container differs from the shell process created by @command{guix shell --container} in a number of important ways.  While in a container shell the containerized process is a Bash shell process, a Guix System container runs the Shepherd as PID 1.  In a system container all system services (@pxref{Services,,, guix, GNU Guix Reference Manual}) are set up just as they would be on a Guix System in a virtual machine or on bare metal---this includes daemons managed by the GNU@tie{}Shepherd (@pxref{Shepherd Services,,, guix, GNU Guix Reference Manual}) as well as other kinds of extensions to the operating system (@pxref{Service Composition,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2967
msgid "The perceived increase in complexity of running a Guix System container is easily justified when dealing with more complex applications that have higher or just more rigid requirements on their execution contexts---configuration files, dedicated user accounts, directories for caches or log files, etc.  In Guix System the demands of this kind of software are satisfied through the deployment of system services."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2969 guix-git/doc/guix-cookbook.texi:2970
#, no-wrap
msgid "A Database Container"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2975
msgid "A good example might be a PostgreSQL database server.  Much of the complexity of setting up such a database server is encapsulated in this deceptively short service declaration:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2980
#, no-wrap
msgid ""
"(service postgresql-service-type\n"
"         (postgresql-configuration\n"
"          (postgresql postgresql-14)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2984
msgid "A complete operating system declaration for use with a Guix System container would look something like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2989
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-package-modules databases)\n"
"(use-service-modules databases)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3023
#, no-wrap
msgid ""
"(operating-system\n"
"  (host-name \"container\")\n"
"  (timezone \"Europe/Berlin\")\n"
"  (file-systems (cons (file-system\n"
"                        (device (file-system-label \"does-not-matter\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader grub-bootloader)\n"
"               (targets '(\"/dev/sdX\"))))\n"
"  (services\n"
"   (cons* (service postgresql-service-type\n"
"                   (postgresql-configuration\n"
"                    (postgresql postgresql-14)\n"
"                    (config-file\n"
"                     (postgresql-config-file\n"
"                      (log-destination \"stderr\")\n"
"                      (hba-file\n"
"                       (plain-file \"pg_hba.conf\"\n"
"                                   \"\\\n"
"local\tall\tall\t\t\ttrust\n"
"host\tall\tall\t10.0.0.1/32 \ttrust\"))\n"
"                      (extra-config\n"
"                       '((\"listen_addresses\" \"*\")\n"
"                         (\"log_directory\"    \"/var/log/postgresql\")))))))\n"
"          (service postgresql-role-service-type\n"
"                   (postgresql-role-configuration\n"
"                    (roles\n"
"                     (list (postgresql-role\n"
"                            (name \"test\")\n"
"                            (create-database? #t))))))\n"
"          %base-services)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3031
msgid "With @code{postgresql-role-service-type} we define a role ``test'' and create a matching database, so that we can test right away without any further manual setup.  The @code{postgresql-config-file} settings allow a client from IP address 10.0.0.1 to connect without requiring authentication---a bad idea in production systems, but convenient for this example."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3037
msgid "Let's build a script that will launch an instance of this Guix System as a container.  Write the @code{operating-system} declaration above to a file @file{os.scm} and then use @command{guix system container} to build the launcher.  (@pxref{Invoking guix system,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3045
#, no-wrap
msgid ""
"$ guix system container os.scm\n"
"The following derivations will be built:\n"
"  /gnu/store/@dots{}-run-container.drv\n"
"  @dots{}\n"
"building /gnu/store/@dots{}-run-container.drv...\n"
"/gnu/store/@dots{}-run-container\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3051
msgid "Now that we have a launcher script we can run it to spawn the new system with a running PostgreSQL service.  Note that due to some as yet unresolved limitations we need to run the launcher as the root user, for example with @command{sudo}."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3056
#, no-wrap
msgid ""
"$ sudo /gnu/store/@dots{}-run-container\n"
"system container is running as PID 5983\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3063
msgid "Background the process with @key{Ctrl-z} followed by @command{bg}.  Note the process ID in the output; we will need it to connect to the container later.  You know what? Let's try attaching to the container right now.  We will use @command{nsenter}, a tool provided by the @code{util-linux} package:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3076
#, no-wrap
msgid ""
"$ guix shell util-linux\n"
"$ sudo nsenter -a -t 5983\n"
"root@@container /# pgrep -a postgres\n"
"49 /gnu/store/@dots{}-postgresql-14.4/bin/postgres -D /var/lib/postgresql/data --config-file=/gnu/store/@dots{}-postgresql.conf -p 5432\n"
"51 postgres: checkpointer\n"
"52 postgres: background writer\n"
"53 postgres: walwriter\n"
"54 postgres: autovacuum launcher\n"
"55 postgres: stats collector\n"
"56 postgres: logical replication launcher\n"
"root@@container /# exit\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3079
msgid "The PostgreSQL service is running in the container!"
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3081 guix-git/doc/guix-cookbook.texi:3082
#, no-wrap
msgid "Container Networking"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3083
#, no-wrap
msgid "container networking"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3089
msgid "What good is a Guix System running a PostgreSQL database service as a container when we can only talk to it with processes originating in the container? It would be much better if we could talk to the database over the network."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3095
msgid "The easiest way to do this is to create a pair of connected virtual Ethernet devices (known as @code{veth}).  We move one of the devices (@code{ceth-test}) into the @code{net} namespace of the container and leave the other end (@code{veth-test}) of the connection on the host system."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3101
#, no-wrap
msgid ""
"pid=5983\n"
"ns=\"guix-test\"\n"
"host=\"veth-test\"\n"
"client=\"ceth-test\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3104
#, no-wrap
msgid ""
"# Attach the new net namespace \"guix-test\" to the container PID.\n"
"sudo ip netns attach $ns $pid\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3107
#, no-wrap
msgid ""
"# Create the pair of devices\n"
"sudo ip link add $host type veth peer name $client\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3110
#, no-wrap
msgid ""
"# Move the client device into the container's net namespace\n"
"sudo ip link set $client netns $ns\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3113
msgid "Then we configure the host side:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3117
#, no-wrap
msgid ""
"sudo ip link set $host up\n"
"sudo ip addr add 10.0.0.1/24 dev $host\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3120
msgid "@dots{}and then we configure the client side:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3125
#, no-wrap
msgid ""
"sudo ip netns exec $ns  ip link set lo up\n"
"sudo ip netns exec $ns  ip link set $client up\n"
"sudo ip netns exec $ns  ip addr add 10.0.0.2/24 dev $client\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3131
msgid "At this point the host can reach the container at IP address 10.0.0.2, and the container can reach the host at IP 10.0.0.1.  This is all we need to talk to the database server inside the container from the host system on the outside."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3136
#, no-wrap
msgid ""
"$ psql -h 10.0.0.2 -U test\n"
"psql (14.4)\n"
"Type \"help\" for help.\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3146
#, no-wrap
msgid ""
"test=> CREATE TABLE hello (who TEXT NOT NULL);\n"
"CREATE TABLE\n"
"test=> INSERT INTO hello (who) VALUES ('world');\n"
"INSERT 0 1\n"
"test=> SELECT * FROM hello;\n"
"  who\n"
"-------\n"
" world\n"
"(1 row)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3149
msgid "Now that we're done with this little demonstration let's clean up:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3154
#, no-wrap
msgid ""
"sudo kill $pid\n"
"sudo ip netns del $ns\n"
"sudo ip link del $host\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3166
msgid "Guix is a functional package manager that offers many features beyond what more traditional package managers can do.  To the uninitiated, those features might not have obvious use cases at first.  The purpose of this chapter is to demonstrate some advanced package management concepts."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3169
msgid "@pxref{Package Management,,, guix, GNU Guix Reference Manual} for a complete reference."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3180
msgid "Guix provides a very useful feature that may be quite foreign to newcomers: @emph{profiles}.  They are a way to group package installations together and all users on the same system are free to use as many profiles as they want."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3185
msgid "Whether you're a developer or not, you may find that multiple profiles bring you great power and flexibility.  While they shift the paradigm somewhat compared to @emph{traditional package managers}, they are very convenient to use once you've understood how to set them up."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3191
msgid "If you are familiar with Python's @samp{virtualenv}, you can think of a profile as a kind of universal @samp{virtualenv} that can hold any kind of software whatsoever, not just Python software.  Furthermore, profiles are self-sufficient: they capture all the runtime dependencies which guarantees that all programs within a profile will always work at any point in time."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3193
msgid "Multiple profiles have many benefits:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3197
msgid "Clean semantic separation of the various packages a user needs for different contexts."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3201
msgid "Multiple profiles can be made available into the environment either on login or within a dedicated shell."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3205
msgid "Profiles can be loaded on demand.  For instance, the user can use multiple shells, each of them running different profiles."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3210
msgid "Isolation: Programs from one profile will not use programs from the other, and the user can even install different versions of the same programs to the two profiles without conflict."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3214
msgid "Deduplication: Profiles share dependencies that happens to be the exact same.  This makes multiple profiles storage-efficient."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3222
msgid "Reproducible: when used with declarative manifests, a profile can be fully specified by the Guix commit that was active when it was set up.  This means that the exact same profile can be @uref{https://guix.gnu.org/blog/2018/multi-dimensional-transactions-and-rollbacks-oh-my/, set up anywhere and anytime}, with just the commit information.  See the section on @ref{Reproducible profiles}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3226
msgid "Easier upgrades and maintenance: Multiple profiles make it easy to keep package listings at hand and make upgrades completely frictionless."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3229
msgid "Concretely, here follows some typical profiles:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3233
msgid "The dependencies of a project you are working on."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3236
msgid "Your favourite programming language libraries."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3239
msgid "Laptop-specific programs (like @samp{powertop}) that you don't need on a desktop."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3243
msgid "@TeX{}live (this one can be really useful when you need to install just one package for this one document you've just received over email)."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3246
msgid "Games."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3249
msgid "Let's dive in the set up!"
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3250 guix-git/doc/guix-cookbook.texi:3251
#, no-wrap
msgid "Basic setup with manifests"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3256
msgid "A Guix profile can be set up @i{via} a @dfn{manifest}.  A manifest is a snippet of Scheme code that specifies the set of packages you want to have in your profile; it looks like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3266
#, no-wrap
msgid ""
"(specifications->manifest\n"
"  '(\"package-1\"\n"
"    ;; Version 1.3 of package-2.\n"
"    \"package-2@@1.3\"\n"
"    ;; The \"lib\" output of package-3.\n"
"    \"package-3:lib\"\n"
"    ; ...\n"
"    \"package-N\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3270
msgid "@xref{Writing Manifests,,, guix, GNU Guix Reference Manual}, for more information about the syntax."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3272
msgid "We can create a manifest specification per profile and install them this way:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3277
#, no-wrap
msgid ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"mkdir -p \"$GUIX_EXTRA_PROFILES\"/my-project # if it does not exist yet\n"
"guix package --manifest=/path/to/guix-my-project-manifest.scm --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3281
msgid "Here we set an arbitrary variable @samp{GUIX_EXTRA_PROFILES} to point to the directory where we will store our profiles in the rest of this article."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3287
msgid "Placing all your profiles in a single directory, with each profile getting its own sub-directory, is somewhat cleaner.  This way, each sub-directory will contain all the symlinks for precisely one profile.  Besides, ``looping over profiles'' becomes obvious from any programming language (e.g.@: a shell script) by simply looping over the sub-directories of @samp{$GUIX_EXTRA_PROFILES}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3289
msgid "Note that it's also possible to loop over the output of"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3292
#, no-wrap
msgid "guix package --list-profiles\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3295
msgid "although you'll probably have to filter out @file{~/.config/guix/current}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3297
msgid "To enable all profiles on login, add this to your @file{~/.bash_profile} (or similar):"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3307
#, no-wrap
msgid ""
"for i in $GUIX_EXTRA_PROFILES/*; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3312
msgid "Note to Guix System users: the above reflects how your default profile @file{~/.guix-profile} is activated from @file{/etc/profile}, that latter being loaded by @file{~/.bashrc} by default."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3314
msgid "You can obviously choose to only enable a subset of them:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3324
#, no-wrap
msgid ""
"for i in \"$GUIX_EXTRA_PROFILES\"/my-project-1 \"$GUIX_EXTRA_PROFILES\"/my-project-2; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3328
msgid "When a profile is off, it's straightforward to enable it for an individual shell without \"polluting\" the rest of the user session:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3331
#, no-wrap
msgid "GUIX_PROFILE=\"path/to/my-project\" ; . \"$GUIX_PROFILE\"/etc/profile\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3338
msgid "The key to enabling a profile is to @emph{source} its @samp{etc/profile} file.  This file contains shell code that exports the right environment variables necessary to activate the software contained in the profile.  It is built automatically by Guix and meant to be sourced.  It contains the same variables you would get if you ran:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3341
#, no-wrap
msgid "guix package --search-paths=prefix --profile=$my_profile\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3345
msgid "Once again, see (@pxref{Invoking guix package,,, guix, GNU Guix Reference Manual})  for the command line options."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3347
msgid "To upgrade a profile, simply install the manifest again:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3350
#, no-wrap
msgid "guix package -m /path/to/guix-my-project-manifest.scm -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3356
msgid "To upgrade all profiles, it's easy enough to loop over them.  For instance, assuming your manifest specifications are stored in @file{~/.guix-manifests/guix-$profile-manifest.scm}, with @samp{$profile} being the name of the profile (e.g.@: \"project1\"), you could do the following in Bourne shell:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3361
#, no-wrap
msgid ""
"for profile in \"$GUIX_EXTRA_PROFILES\"/*; do\n"
"  guix package --profile=\"$profile\" --manifest=\"$HOME/.guix-manifests/guix-$profile-manifest.scm\"\n"
"done\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3364
msgid "Each profile has its own generations:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3367
#, no-wrap
msgid "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --list-generations\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3370
msgid "You can roll-back to any generation of a given profile:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3373
#, no-wrap
msgid "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --switch-generations=17\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3377
msgid "Finally, if you want to switch to a profile without inheriting from the current environment, you can activate it from an empty shell:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3381
#, no-wrap
msgid ""
"env -i $(which bash) --login --noprofile --norc\n"
". my-project/etc/profile\n"
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3383 guix-git/doc/guix-cookbook.texi:3384
#, no-wrap
msgid "Required packages"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3389
msgid "Activating a profile essentially boils down to exporting a bunch of environmental variables.  This is the role of the @samp{etc/profile} within the profile."
msgstr ""

#. type: emph{#1}
#: guix-git/doc/guix-cookbook.texi:3392
msgid "Note: Only the environmental variables of the packages that consume them will be set."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3396
msgid "For instance, @samp{MANPATH} won't be set if there is no consumer application for man pages within the profile.  So if you need to transparently access man pages once the profile is loaded, you've got two options:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3400
msgid "Either export the variable manually, e.g."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3402
#, no-wrap
msgid "export MANPATH=/path/to/profile$@{MANPATH:+:@}$MANPATH\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3406
msgid "Or include @samp{man-db} to the profile manifest."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3410
msgid "The same is true for @samp{INFOPATH} (you can install @samp{info-reader}), @samp{PKG_CONFIG_PATH} (install @samp{pkg-config}), etc."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3411 guix-git/doc/guix-cookbook.texi:3412
#, no-wrap
msgid "Default profile"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3415
msgid "What about the default profile that Guix keeps in @file{~/.guix-profile}?"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3418
msgid "You can assign it the role you want.  Typically you would install the manifest of the packages you want to use all the time."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3422
msgid "Alternatively, you could keep it ``manifest-less'' for throw-away packages that you would just use for a couple of days.  This way makes it convenient to run"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3426
#, no-wrap
msgid ""
"guix install package-foo\n"
"guix upgrade package-bar\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3429
msgid "without having to specify the path to a profile."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3430 guix-git/doc/guix-cookbook.texi:3431
#, no-wrap
msgid "The benefits of manifests"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3435
msgid "Manifests are a convenient way to keep your package lists around and, say, to synchronize them across multiple machines using a version control system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3439
msgid "A common complaint about manifests is that they can be slow to install when they contain large number of packages.  This is especially cumbersome when you just want get an upgrade for one package within a big manifest."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3444
msgid "This is one more reason to use multiple profiles, which happen to be just perfect to break down manifests into multiple sets of semantically connected packages.  Using multiple, small profiles provides more flexibility and usability."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3446
msgid "Manifests come with multiple benefits.  In particular, they ease maintenance:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3454
msgid "When a profile is set up from a manifest, the manifest itself is self-sufficient to keep a ``package listing'' around and reinstall the profile later or on a different system.  For ad-hoc profiles, we would need to generate a manifest specification manually and maintain the package versions for the packages that don't use the default version."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3459
msgid "@code{guix package --upgrade} always tries to update the packages that have propagated inputs, even if there is nothing to do.  Guix manifests remove this problem."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3465
msgid "When partially upgrading a profile, conflicts may arise (due to diverging dependencies between the updated and the non-updated packages) and they can be annoying to resolve manually.  Manifests remove this problem altogether since all packages are always upgraded at once."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3471
msgid "As mentioned above, manifests allow for reproducible profiles, while the imperative @code{guix install}, @code{guix upgrade}, etc. do not, since they produce different profiles every time even when they hold the same packages.  See @uref{https://issues.guix.gnu.org/issue/33285, the related discussion on the matter}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3479
msgid "Manifest specifications are usable by other @samp{guix} commands.  For example, you can run @code{guix weather -m manifest.scm} to see how many substitutes are available, which can help you decide whether you want to try upgrading today or wait a while.  Another example: you can run @code{guix pack -m manifest.scm} to create a pack containing all the packages in the manifest (and their transitive references)."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3483
msgid "Finally, manifests have a Scheme representation, the @samp{<manifest>} record type.  They can be manipulated in Scheme and passed to the various Guix @uref{https://en.wikipedia.org/wiki/Api, APIs}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3491
msgid "It's important to understand that while manifests can be used to declare profiles, they are not strictly equivalent: profiles have the side effect that they ``pin'' packages in the store, which prevents them from being garbage-collected (@pxref{Invoking guix gc,,, guix, GNU Guix Reference Manual})  and ensures that they will still be available at any point in the future."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3493
msgid "Let's take an example:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:3499
msgid "We have an environment for hacking on a project for which there isn't a Guix package yet.  We build the environment using a manifest, and then run @code{guix environment -m manifest.scm}.  So far so good."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:3505
msgid "Many weeks pass and we have run a couple of @code{guix pull} in the mean time.  Maybe a dependency from our manifest has been updated; or we may have run @code{guix gc} and some packages needed by our manifest have been garbage-collected."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:3510
msgid "Eventually, we set to work on that project again, so we run @code{guix shell -m manifest.scm}.  But now we have to wait for Guix to build and install stuff!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3516
msgid "Ideally, we could spare the rebuild time.  And indeed we can, all we need is to install the manifest to a profile and use @code{GUIX_PROFILE=/the/profile; . \"$GUIX_PROFILE\"/etc/profile} as explained above: this guarantees that our hacking environment will be available at all times."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3519
msgid "@emph{Security warning:} While keeping old profiles around can be convenient, keep in mind that outdated packages may not have received the latest security fixes."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3520 guix-git/doc/guix-cookbook.texi:3521
#, no-wrap
msgid "Reproducible profiles"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3524
msgid "To reproduce a profile bit-for-bit, we need two pieces of information:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3528
msgid "a manifest,"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3530
msgid "a Guix channel specification."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3534
msgid "Indeed, manifests alone might not be enough: different Guix versions (or different channels) can produce different outputs for a given manifest."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3538
msgid "You can output the Guix channel specification with @samp{guix describe --format=channels}.  Save this to a file, say @samp{channel-specs.scm}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3541
msgid "On another computer, you can use the channel specification file and the manifest to reproduce the exact same profile:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3545
#, no-wrap
msgid ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"GUIX_EXTRA=$HOME/.guix-extra\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3548
#, no-wrap
msgid ""
"mkdir -p \"$GUIX_EXTRA\"/my-project\n"
"guix pull --channels=channel-specs.scm --profile=\"$GUIX_EXTRA/my-project/guix\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3551
#, no-wrap
msgid ""
"mkdir -p \"$GUIX_EXTRA_PROFILES/my-project\"\n"
"\"$GUIX_EXTRA\"/my-project/guix/bin/guix package --manifest=/path/to/guix-my-project-manifest.scm --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3555
msgid "It's safe to delete the Guix channel profile you've just installed with the channel specification, the project profile does not depend on it."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3562
msgid "Guix provides multiple tools to manage environment.  This chapter demonstrate such utilities."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3573
msgid "Guix provides a @samp{direnv} package, which could extend shell after directory change.  This tool could be used to prepare a pure Guix environment."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3579
msgid "The following example provides a shell function for @file{~/.direnvrc} file, which could be used from Guix Git repository in @file{~/src/guix/.envrc} file to setup a build environment similar to described in @pxref{Building from Git,,, guix, GNU Guix Reference Manual}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3581
msgid "Create a @file{~/.direnvrc} with a Bash code:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3599
#, no-wrap
msgid ""
"# Thanks <https://github.com/direnv/direnv/issues/73#issuecomment-152284914>\n"
"export_function()\n"
"@{\n"
"  local name=$1\n"
"  local alias_dir=$PWD/.direnv/aliases\n"
"  mkdir -p \"$alias_dir\"\n"
"  PATH_add \"$alias_dir\"\n"
"  local target=\"$alias_dir/$name\"\n"
"  if declare -f \"$name\" >/dev/null; then\n"
"    echo \"#!$SHELL\" > \"$target\"\n"
"    declare -f \"$name\" >> \"$target\" 2>/dev/null\n"
"    # Notice that we add shell variables to the function trigger.\n"
"    echo \"$name \\$*\" >> \"$target\"\n"
"    chmod +x \"$target\"\n"
"  fi\n"
"@}\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3604
#, no-wrap
msgid ""
"use_guix()\n"
"@{\n"
"    # Set GitHub token.\n"
"    export GUIX_GITHUB_TOKEN=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3607
#, no-wrap
msgid ""
"    # Unset 'GUIX_PACKAGE_PATH'.\n"
"    export GUIX_PACKAGE_PATH=\"\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3616
#, no-wrap
msgid ""
"    # Recreate a garbage collector root.\n"
"    gcroots=\"$HOME/.config/guix/gcroots\"\n"
"    mkdir -p \"$gcroots\"\n"
"    gcroot=\"$gcroots/guix\"\n"
"    if [ -L \"$gcroot\" ]\n"
"    then\n"
"        rm -v \"$gcroot\"\n"
"    fi\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3631
#, no-wrap
msgid ""
"    # Miscellaneous packages.\n"
"    PACKAGES_MAINTENANCE=(\n"
"        direnv\n"
"        git\n"
"        git:send-email\n"
"        git-cal\n"
"        gnupg\n"
"        guile-colorized\n"
"        guile-readline\n"
"        less\n"
"        ncurses\n"
"        openssh\n"
"        xdot\n"
"    )\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3634
#, no-wrap
msgid ""
"    # Environment packages.\n"
"    PACKAGES=(help2man guile-sqlite3 guile-gcrypt)\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3637
#, no-wrap
msgid ""
"    # Thanks <https://lists.gnu.org/archive/html/guix-devel/2016-09/msg00859.html>\n"
"    eval \"$(guix environment --search-paths --root=\"$gcroot\" --pure guix --ad-hoc $@{PACKAGES[@@]@} $@{PACKAGES_MAINTENANCE[@@]@} \"$@@\")\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3644
#, no-wrap
msgid ""
"    # Predefine configure flags.\n"
"    configure()\n"
"    @{\n"
"        ./configure --localstatedir=/var --prefix=\n"
"    @}\n"
"    export_function configure\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3655
#, no-wrap
msgid ""
"    # Run make and optionally build something.\n"
"    build()\n"
"    @{\n"
"        make -j 2\n"
"        if [ $# -gt 0 ]\n"
"        then\n"
"            ./pre-inst-env guix build \"$@@\"\n"
"        fi\n"
"    @}\n"
"    export_function build\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3662
#, no-wrap
msgid ""
"    # Predefine push Git command.\n"
"    push()\n"
"    @{\n"
"        git push --set-upstream origin\n"
"    @}\n"
"    export_function push\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3665
#, no-wrap
msgid ""
"    clear                        # Clean up the screen.\n"
"    git-cal --author='Your Name' # Show contributions calendar.\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3673
#, no-wrap
msgid ""
"    # Show commands help.\n"
"    echo \"\n"
"build          build a package or just a project if no argument provided\n"
"configure      run ./configure with predefined parameters\n"
"push           push to upstream Git repository\n"
"\"\n"
"@}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3677
msgid "Every project containing @file{.envrc} with a string @code{use guix} will have predefined environment variables and procedures."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3679
msgid "Run @command{direnv allow} to setup the environment for the first time."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3685
#, fuzzy, no-wrap
#| msgid "System administration"
msgid "cluster installation"
msgstr "시스템 관리"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3686
#, no-wrap
msgid "high-performance computing, HPC"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3687
#, no-wrap
msgid "HPC, high-performance computing"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3693
msgid "Guix is appealing to scientists and @acronym{HPC, high-performance computing} practitioners: it makes it easy to deploy potentially complex software stacks, and it lets you do so in a reproducible fashion---you can redeploy the exact same software on different machines and at different points in time."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3699
msgid "In this chapter we look at how a cluster sysadmin can install Guix for system-wide use, such that it can be used on all the cluster nodes, and discuss the various tradeoffs@footnote{This chapter is adapted from a @uref{https://hpc.guix.info/blog/2017/11/installing-guix-on-a-cluster/, blog post published on the Guix-HPC web site in 2017}.}."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:3703
msgid "Here we assume that the cluster is running a GNU/Linux distro other than Guix System and that we are going to install Guix on top of it."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3719
msgid "The recommended approach is to set up one @emph{head node} running @command{guix-daemon} and exporting @file{/gnu/store} over NFS to compute nodes."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3729
msgid "Remember that @command{guix-daemon} is responsible for spawning build processes and downloads on behalf of clients (@pxref{Invoking guix-daemon,,, guix, GNU Guix Reference Manual}), and more generally accessing @file{/gnu/store}, which contains all the package binaries built by all the users (@pxref{The Store,,, guix, GNU Guix Reference Manual}).  ``Client'' here refers to all the Guix commands that users see, such as @code{guix install}.  On a cluster, these commands may be running on the compute nodes and we'll want them to talk to the head node's @code{guix-daemon} instance."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3734
msgid "To begin with, the head node can be installed following the usual binary installation instructions (@pxref{Binary Installation,,, guix, GNU Guix Reference Manual}).  Thanks to the installation script, this should be quick.  Once installation is complete, we need to make some adjustments."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3742
msgid "Since we want @code{guix-daemon} to be reachable not just from the head node but also from the compute nodes, we need to arrange so that it listens for connections over TCP/IP.  To do that, we'll edit the systemd startup file for @command{guix-daemon}, @file{/etc/systemd/system/guix-daemon.service}, and add a @code{--listen} argument to the @code{ExecStart} line so that it looks something like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3745
#, no-wrap
msgid "ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild --listen=/var/guix/daemon-socket/socket --listen=0.0.0.0\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3748
msgid "For these changes to take effect, the service needs to be restarted:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3752
#, no-wrap
msgid ""
"systemctl daemon-reload\n"
"systemctl restart guix-daemon\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:3761
msgid "The @code{--listen=0.0.0.0} bit means that @code{guix-daemon} will process @emph{all} incoming TCP connections on port 44146 (@pxref{Invoking guix-daemon,,, guix, GNU Guix Reference Manual}). This is usually fine in a cluster setup where the head node is reachable exclusively from the cluster's local area network---you don't want that to be exposed to the Internet!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3766
msgid "The next step is to define our NFS exports in @uref{https://linux.die.net/man/5/exports,@file{/etc/exports}} by adding something along these lines:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3771
#, no-wrap
msgid ""
"/gnu/store    *(ro)\n"
"/var/guix     *(rw, async)\n"
"/var/log/guix *(ro)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3778
msgid "The @file{/gnu/store} directory can be exported read-only since only @command{guix-daemon} on the master node will ever modify it.  @file{/var/guix} contains @emph{user profiles} as managed by @code{guix package}; thus, to allow users to install packages with @code{guix package}, this must be read-write."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3788
msgid "Users can create as many profiles as they like in addition to the default profile, @file{~/.guix-profile}.  For instance, @code{guix package -p ~/dev/python-dev -i python} installs Python in a profile reachable from the @code{~/dev/python-dev} symlink.  To make sure that this profile is protected from garbage collection---i.e., that Python will not be removed from @file{/gnu/store} while this profile exists---, @emph{home directories should be mounted on the head node} as well so that @code{guix-daemon} knows about these non-standard profiles and avoids collecting software they refer to."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3793
msgid "It may be a good idea to periodically remove unused bits from @file{/gnu/store} by running @command{guix gc} (@pxref{Invoking guix gc,,, guix, GNU Guix Reference Manual}).  This can be done by adding a crontab entry on the head node:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3796
#, no-wrap
msgid "root@@master# crontab -e\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3800
msgid "... with something like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3805
#, no-wrap
msgid ""
"# Every day at 5AM, run the garbage collector to make sure\n"
"# at least 10 GB are free on /gnu/store.\n"
"0 5 * * 1  /usr/local/bin/guix gc -F10G\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3808
msgid "We're done with the head node! Let's look at compute nodes now."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3815
msgid "First of all, we need compute nodes to mount those NFS directories that the head node exports.  This can be done by adding the following lines to @uref{https://linux.die.net/man/5/fstab,@file{/etc/fstab}}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3820
#, no-wrap
msgid ""
"@var{head-node}:/gnu/store    /gnu/store    nfs  defaults,_netdev,vers=3 0 0\n"
"@var{head-node}:/var/guix     /var/guix     nfs  defaults,_netdev,vers=3 0 0\n"
"@var{head-node}:/var/log/guix /var/log/guix nfs  defaults,_netdev,vers=3 0 0\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3826
msgid "... where @var{head-node} is the name or IP address of your head node.  From there on, assuming the mount points exist, you should be able to mount each of these on the compute nodes."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3832
msgid "Next, we need to provide a default @command{guix} command that users can run when they first connect to the cluster (eventually they will invoke @command{guix pull}, which will provide them with their ``own'' @command{guix} command).  Similar to what the binary installation script did on the head node, we'll store that in @file{/usr/local/bin}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3837
#, no-wrap
msgid ""
"mkdir -p /usr/local/bin\n"
"ln -s /var/guix/profiles/per-user/root/current-guix/bin/guix \\\n"
"      /usr/local/bin/guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3841
msgid "We then need to tell @code{guix} to talk to the daemon running on our master node, by adding these lines to @code{/etc/profile}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3845
#, no-wrap
msgid ""
"GUIX_DAEMON_SOCKET=\"guix://@var{head-node}\"\n"
"export GUIX_DAEMON_SOCKET\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3850
msgid "To avoid warnings and make sure @code{guix} uses the right locale, we need to tell it to use locale data provided by Guix (@pxref{Application Setup,,, guix, GNU Guix Reference Manual}):"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3854
#, no-wrap
msgid ""
"GUIX_LOCPATH=/var/guix/profiles/per-user/root/guix-profile/lib/locale\n"
"export GUIX_LOCPATH\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3859
#, no-wrap
msgid ""
"# Here we must use a valid locale name.  Try \"ls $GUIX_LOCPATH/*\"\n"
"# to see what names can be used.\n"
"LC_ALL=fr_FR.utf8\n"
"export LC_ALL\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3866
msgid "For convenience, @code{guix package} automatically generates @file{~/.guix-profile/etc/profile}, which defines all the environment variables necessary to use the packages---@code{PATH}, @code{C_INCLUDE_PATH}, @code{PYTHONPATH}, etc.  Thus it's a good idea to source it from @code{/etc/profile}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3872
#, no-wrap
msgid ""
"GUIX_PROFILE=\"$HOME/.guix-profile\"\n"
"if [ -f \"$GUIX_PROFILE/etc/profile\" ]; then\n"
"  . \"$GUIX_PROFILE/etc/profile\"\n"
"fi\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3876
msgid "Last but not least, Guix provides command-line completion notably for Bash and zsh.  In @code{/etc/bashrc}, consider adding this line:"
msgstr ""

#. type: verbatim
#: guix-git/doc/guix-cookbook.texi:3879
#, no-wrap
msgid ". /var/guix/profiles/per-user/root/current-guix/etc/bash_completion.d/guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3882
msgid "Voilà!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3885
msgid "You can check that everything's in place by logging in on a compute node and running:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3888
#, no-wrap
msgid "guix install hello\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3894
msgid "The daemon on the head node should download pre-built binaries on your behalf and unpack them in @file{/gnu/store}, and @command{guix install} should create @file{~/.guix-profile} containing the @file{~/.guix-profile/bin/hello} command."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:3896
#, no-wrap
msgid "Network Access"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3901
msgid "Guix requires network access to download source code and pre-built binaries.  The good news is that only the head node needs that since compute nodes simply delegate to it."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3907
msgid "It is customary for cluster nodes to have access at best to a @emph{white list} of hosts.  Our head node needs at least @code{ci.guix.gnu.org} in this white list since this is where it gets pre-built binaries from by default, for all the packages that are in Guix proper."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3912
msgid "Incidentally, @code{ci.guix.gnu.org} also serves as a @emph{content-addressed mirror} of the source code of those packages.  Consequently, it is sufficient to have @emph{only} @code{ci.guix.gnu.org} in that white list."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3921
msgid "Software packages maintained in a separate repository such as one of the various @uref{https://hpc.guix.info/channels, HPC channels} are of course unavailable from @code{ci.guix.gnu.org}.  For these packages, you may want to extend the white list such that source and pre-built binaries (assuming this-party servers provide binaries for these packages) can be downloaded.  As a last resort, users can always download source on their workstation and add it to the cluster's @file{/gnu/store}, like this:"
msgstr ""

#. type: verbatim
#: guix-git/doc/guix-cookbook.texi:3925
#, no-wrap
msgid ""
"GUIX_DAEMON_SOCKET=ssh://compute-node.example.org \\\n"
"  guix download http://starpu.gforge.inria.fr/files/starpu-1.2.3/starpu-1.2.3.tar.gz\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3929
msgid "The above command downloads @code{starpu-1.2.3.tar.gz} @emph{and} sends it to the cluster's @code{guix-daemon} instance over SSH."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3936
msgid "Air-gapped clusters require more work.  At the moment, our suggestion would be to download all the necessary source code on a workstation running Guix.  For instance, using the @option{--sources} option of @command{guix build} (@pxref{Invoking guix build,,, guix, GNU Guix Reference Manual}), the example below downloads all the source code the @code{openmpi} package depends on:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3939
#, no-wrap
msgid ""
"$ guix build --sources=transitive openmpi\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3941
#, no-wrap
msgid ""
"@dots{}\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:3953
#, no-wrap
msgid ""
"/gnu/store/xc17sm60fb8nxadc4qy0c7rqph499z8s-openmpi-1.10.7.tar.bz2\n"
"/gnu/store/s67jx92lpipy2nfj5cz818xv430n4b7w-gcc-5.4.0.tar.xz\n"
"/gnu/store/npw9qh8a46lrxiwh9xwk0wpi3jlzmjnh-gmp-6.0.0a.tar.xz\n"
"/gnu/store/hcz0f4wkdbsvsdky3c0vdvcawhdkyldb-mpfr-3.1.5.tar.xz\n"
"/gnu/store/y9akh452n3p4w2v631nj0injx7y0d68x-mpc-1.0.3.tar.gz\n"
"/gnu/store/6g5c35q8avfnzs3v14dzl54cmrvddjm2-glibc-2.25.tar.xz\n"
"/gnu/store/p9k48dk3dvvk7gads7fk30xc2pxsd66z-hwloc-1.11.8.tar.bz2\n"
"/gnu/store/cry9lqidwfrfmgl0x389cs3syr15p13q-gcc-5.4.0.tar.xz\n"
"/gnu/store/7ak0v3rzpqm2c5q1mp3v7cj0rxz0qakf-libfabric-1.4.1.tar.bz2\n"
"/gnu/store/vh8syjrsilnbfcf582qhmvpg1v3rampf-rdma-core-14.tar.gz\n"
"…\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3957
msgid "(In case you're wondering, that's more than 320@ MiB of @emph{compressed} source code.)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3960
msgid "We can then make a big archive containing all of this (@pxref{Invoking guix archive,,, guix, GNU Guix Reference Manual}):"
msgstr ""

#. type: verbatim
#: guix-git/doc/guix-cookbook.texi:3965
#, no-wrap
msgid ""
"$ guix archive --export \\\n"
"    `guix build --sources=transitive openmpi` \\\n"
"    > openmpi-source-code.nar\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3969
msgid "@dots{} and we can eventually transfer that archive to the cluster on removable storage and unpack it there:"
msgstr ""

#. type: verbatim
#: guix-git/doc/guix-cookbook.texi:3972
#, no-wrap
msgid "$ guix archive --import < openmpi-source-code.nar\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3976
msgid "This process has to be repeated every time new source code needs to be brought to the cluster."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3980
msgid "As we write this, the research institutes involved in Guix-HPC do not have air-gapped clusters though. If you have experience with such setups, we would like to hear feedback and suggestions."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:3982
#, no-wrap
msgid "Disk Usage"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3984
#, no-wrap
msgid "disk usage, on a cluster"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3991
msgid "A common concern of sysadmins' is whether this is all going to eat a lot of disk space.  If anything, if something is going to exhaust disk space, it's going to be scientific data sets rather than compiled software---that's our experience with almost ten years of Guix usage on HPC clusters.  Nevertheless, it's worth taking a look at how Guix contributes to disk usage."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3996
msgid "First, having several versions or variants of a given package in @file{/gnu/store} does not necessarily cost much, because @command{guix-daemon} implements deduplication of identical files, and package variants are likely to have a number of common files."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4003
msgid "As mentioned above, we recommend having a cron job to run @code{guix gc} periodically, which removes @emph{unused} software from @file{/gnu/store}. However, there's always a possibility that users will keep lots of software in their profiles, or lots of old generations of their profiles, which is ``live'' and cannot be deleted from the viewpoint of @command{guix gc}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4007
msgid "The solution to this is for users to regularly remove old generations of their profile. For instance, the following command removes generations that are more than two-month old:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4010
#, no-wrap
msgid "guix package --delete-generations=2m\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4015
msgid "Likewise, it's a good idea to invite users to regularly upgrade their profile, which can reduce the number of variants of a given piece of software stored in @file{/gnu/store}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4019
#, no-wrap
msgid ""
"guix pull\n"
"guix upgrade\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4025
msgid "As a last resort, it is always possible for sysadmins to do some of this on behalf of their users. Nevertheless, one of the strengths of Guix is the freedom and control users get on their software environment, so we strongly recommend leaving users in control."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:4027
#, fuzzy, no-wrap
#| msgid "security key, configuration"
msgid "Security Considerations"
msgstr "보안 키, 구성"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:4029
#, no-wrap
msgid "security, on a cluster"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4034
msgid "On an HPC cluster, Guix is typically used to manage scientific software.  Security-critical software such as the operating system kernel and system services such as @code{sshd} and the batch scheduler remain under control of sysadmins."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4039
msgid "The Guix project has a good track record delivering security updates in a timely fashion (@pxref{Security Updates,,, guix, GNU Guix Reference Manual}).  To get security updates, users have to run @code{guix pull && guix upgrade}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4045
msgid "Because Guix uniquely identifies software variants, it is easy to see if a vulnerable piece of software is in use. For instance, to check whether the glibc@ 2.25 variant without the mitigation patch against ``@uref{https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt,Stack Clash}'', one can check whether user profiles refer to it at all:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:4048
#, no-wrap
msgid "guix gc --referrers /gnu/store/…-glibc-2.25\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4052
msgid "This will report whether profiles exist that refer to this specific glibc variant."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4065
msgid "Guix is based on the @uref{https://nixos.org/nix/, Nix package manager}, which was designed and implemented by Eelco Dolstra, with contributions from other people (see the @file{nix/AUTHORS} file in Guix.)  Nix pioneered functional package management, and promoted unprecedented features, such as transactional package upgrades and rollbacks, per-user profiles, and referentially transparent build processes.  Without this work, Guix would not exist."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4068
msgid "The Nix-based software distributions, Nixpkgs and NixOS, have also been an inspiration for Guix."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4074
msgid "GNU@tie{}Guix itself is a collective work with contributions from a number of people.  See the @file{AUTHORS} file in Guix for more information on these fine people.  The @file{THANKS} file lists people who have helped by reporting bugs, taking care of the infrastructure, providing artwork and themes, making suggestions, and more---thank you!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4079
msgid "This document includes adapted sections from articles that have previously been published on the Guix blog at @uref{https://guix.gnu.org/blog} and on the Guix-HPC blog at @uref{https://hpc.guix.info/blog}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:4084
#, no-wrap
msgid "license, GNU Free Documentation License"
msgstr ""

#. type: include
#: guix-git/doc/guix-cookbook.texi:4085
#, no-wrap
msgid "fdl-1.3.texi"
msgstr ""

#~ msgid "@samp{GUIX_PACKAGE_PATH}"
#~ msgstr "@samp{GUIX_PACKAGE_PATH}"

#~ msgid "GUIX_PACKAGE_PATH"
#~ msgstr "GUIX_PACKAGE_PATH"

#~ msgid ""
#~ "$ mkdir ~/guix-packages\n"
#~ "$ export GUIX_PACKAGE_PATH=~/guix-packages\n"
#~ msgstr ""
#~ "$ mkdir ~/guix-packages\n"
#~ "$ export GUIX_PACKAGE_PATH=~/guix-packages\n"

#~ msgid "$ guix package --show=my-hello\n"
#~ msgstr "$ guix package --show=my-hello\n"

#~ msgid "Learn the basics of Scheme"
#~ msgstr "기본 계획을 배웁니다"

#~ msgid "Let's add a package to Guix!"
#~ msgstr "Guix에서 꾸러미를 추가합니다!"

#~ msgid ""
#~ "    (native-inputs\n"
#~ "     `((\"pkg-config\" ,pkg-config)))\n"
#~ msgstr ""
#~ "    (native-inputs\n"
#~ " `((\"pkg-config\" ,pkg-config)))\n"

#~ msgid "is equivalent to"
#~ msgstr "와 동등합니다"

#~ msgid "Creating and using a custom Linux kernel"
#~ msgstr "사용자 정의 리눅스 커널 생성과 사용하기"
