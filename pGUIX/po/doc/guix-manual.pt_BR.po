# SOME DESCRIPTIVE TITLE
# Copyright (C) 2021 the authors of Guix (msgids) and the following authors (msgstr)
# This file is distributed under the same license as the guix manual package.
# Rafael Fontenelle <rafaelff@gnome.org>, 2021.
# Thiago Jung Bauermann <bauermann@kolabnow.com>, 2021.
# Camila Flores Granella <cgranell@redhat.com>, 2022.
# Fábio Rodrigues Ribeiro <farribeiro@gmail.com>, 2022, 2023.
msgid ""
msgstr ""
"Project-Id-Version: guix manual checkout\n"
"Report-Msgid-Bugs-To: bug-guix@gnu.org\n"
"POT-Creation-Date: 2023-05-25 03:18+0000\n"
"PO-Revision-Date: 2023-01-26 17:20+0000\n"
"Last-Translator: Fábio Rodrigues Ribeiro <farribeiro@gmail.com>\n"
"Language-Team: Portuguese (Brazil) <https://translate.fedoraproject.org/projects/guix/documentation-manual/pt_BR/>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n > 1;\n"
"X-Generator: Weblate 4.15.2\n"

#. #-#-#-#-#  contributing.pot (guix manual checkout)  #-#-#-#-#
#. type: chapter
#. #-#-#-#-#  guix.pot (guix manual checkout)  #-#-#-#-#
#. type: menuentry
#: guix-git/doc/contributing.texi:1 guix-git/doc/contributing.texi:2
#: guix-git/doc/guix.texi:204
#, no-wrap
msgid "Contributing"
msgstr "Contribuindo"

#. type: Plain text
#: guix-git/doc/contributing.texi:9
#, fuzzy
#| msgid "This project is a cooperative effort, and we need your help to make it grow! Please get in touch with us on @email{guix-devel@@gnu.org} and @code{#guix} on the Freenode IRC network.  We welcome ideas, bug reports, patches, and anything that may be helpful to the project.  We particularly welcome help on packaging (@pxref{Packaging Guidelines})."
msgid "This project is a cooperative effort, and we need your help to make it grow! Please get in touch with us on @email{guix-devel@@gnu.org} and @code{#guix} on the Libera Chat IRC network.  We welcome ideas, bug reports, patches, and anything that may be helpful to the project.  We particularly welcome help on packaging (@pxref{Packaging Guidelines})."
msgstr "Este projeto é um esforço cooperativo e precisamos da sua ajuda para fazê-lo crescer! Por favor, entre em contato conosco por meio de @email{guix-devel@@gnu.org} e @code{#guix} na rede IRC do Freenode. São muito bem-vindas ideias, relatórios de bugs, patches e qualquer coisa que possa ser útil para o projeto. Nós particularmente agradecemos a ajuda no empacotamento das (@pxref{Diretrizes de empacotamento})."

#. type: cindex
#: guix-git/doc/contributing.texi:10
#, no-wrap
msgid "code of conduct, of contributors"
msgstr "código de conduta, de contribuidores"

#. type: cindex
#: guix-git/doc/contributing.texi:11
#, no-wrap
msgid "contributor covenant"
msgstr "acordo de contribuição"

#. type: Plain text
#: guix-git/doc/contributing.texi:17
msgid "We want to provide a warm, friendly, and harassment-free environment, so that anyone can contribute to the best of their abilities.  To this end our project uses a ``Contributor Covenant'', which was adapted from @url{https://contributor-covenant.org/}.  You can find a local version in the @file{CODE-OF-CONDUCT} file in the source tree."
msgstr "Queremos oferecer um ambiente acolhedor, amigável e sem assédio, para que todos possam contribuir com o melhor de suas habilidades. Para este fim, nosso projeto usa um ``Acordo de contribuição``, que foi adaptado de @url{https://contributor-covenant.org/}. Você pode encontrar uma versão local no arquivo @file{CODE-OF-CONDUCT} na árvore de fontes."

#. type: Plain text
#: guix-git/doc/contributing.texi:21
msgid "Contributors are not required to use their legal name in patches and on-line communication; they can use any name or pseudonym of their choice."
msgstr "Os contribuidores não são obrigados a usar seu nome legal em patches e comunicação on-line; eles podem usar qualquer nome ou pseudônimo de sua escolha."

#. type: section
#: guix-git/doc/contributing.texi:34 guix-git/doc/contributing.texi:36
#: guix-git/doc/contributing.texi:37
#, no-wrap
msgid "Building from Git"
msgstr "Compilando do git"

#. type: menuentry
#: guix-git/doc/contributing.texi:34
msgid "The latest and greatest."
msgstr "A mais recente e melhor."

#. type: section
#: guix-git/doc/contributing.texi:34 guix-git/doc/contributing.texi:195
#: guix-git/doc/contributing.texi:196
#, no-wrap
msgid "Running Guix Before It Is Installed"
msgstr "Executando guix antes dele ser instalado"

#. type: menuentry
#: guix-git/doc/contributing.texi:34
msgid "Hacker tricks."
msgstr "Truques de hacker."

#. type: section
#: guix-git/doc/contributing.texi:34 guix-git/doc/contributing.texi:286
#: guix-git/doc/contributing.texi:287
#, no-wrap
msgid "The Perfect Setup"
msgstr "A configuração perfeita"

#. type: menuentry
#: guix-git/doc/contributing.texi:34
msgid "The right tools."
msgstr "As ferramentas certas."

#. type: section
#: guix-git/doc/contributing.texi:34 guix-git/doc/contributing.texi:387
#: guix-git/doc/contributing.texi:388
#, no-wrap
msgid "Packaging Guidelines"
msgstr "Diretrizes de empacotamento"

#. type: menuentry
#: guix-git/doc/contributing.texi:34
msgid "Growing the distribution."
msgstr "Crescendo a distribuição."

#. type: section
#: guix-git/doc/contributing.texi:34 guix-git/doc/contributing.texi:1052
#: guix-git/doc/contributing.texi:1053
#, no-wrap
msgid "Coding Style"
msgstr "Estilo de código"

#. type: menuentry
#: guix-git/doc/contributing.texi:34
msgid "Hygiene of the contributor."
msgstr "Limpeza do contribuidor."

#. type: section
#: guix-git/doc/contributing.texi:34 guix-git/doc/contributing.texi:1150
#: guix-git/doc/contributing.texi:1151
#, no-wrap
msgid "Submitting Patches"
msgstr "Enviando patches"

#. type: menuentry
#: guix-git/doc/contributing.texi:34
msgid "Share your work."
msgstr "Compartilhe seu trabalho."

#. type: section
#: guix-git/doc/contributing.texi:34 guix-git/doc/contributing.texi:1577
#: guix-git/doc/contributing.texi:1578
#, no-wrap
msgid "Tracking Bugs and Patches"
msgstr ""

#. type: menuentry
#: guix-git/doc/contributing.texi:34
msgid "Keeping it all organized."
msgstr ""

#. type: section
#: guix-git/doc/contributing.texi:34 guix-git/doc/contributing.texi:1692
#: guix-git/doc/contributing.texi:1693
#, no-wrap
msgid "Commit Access"
msgstr ""

#. type: menuentry
#: guix-git/doc/contributing.texi:34
msgid "Pushing to the official repository."
msgstr ""

#. type: section
#: guix-git/doc/contributing.texi:34 guix-git/doc/contributing.texi:1926
#: guix-git/doc/contributing.texi:1927
#, no-wrap
msgid "Updating the Guix Package"
msgstr ""

#. type: menuentry
#: guix-git/doc/contributing.texi:34
msgid "Updating the Guix package definition."
msgstr ""

#. type: section
#: guix-git/doc/contributing.texi:34 guix-git/doc/contributing.texi:1964
#: guix-git/doc/contributing.texi:1965
#, fuzzy, no-wrap
#| msgid "Documentation"
msgid "Writing Documentation"
msgstr "Documentação"

#. type: menuentry
#: guix-git/doc/contributing.texi:34
msgid "Improving documentation in GNU Guix."
msgstr ""

#. type: section
#: guix-git/doc/contributing.texi:34 guix-git/doc/contributing.texi:2008
#: guix-git/doc/contributing.texi:2009
#, no-wrap
msgid "Translating Guix"
msgstr "Traduzindo o Guix"

#. type: menuentry
#: guix-git/doc/contributing.texi:34
msgid "Make Guix speak your native language."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:41
msgid "If you want to hack Guix itself, it is recommended to use the latest version from the Git repository:"
msgstr "Se você quiser hackear o próprio Guix, é recomendado usar a versão mais recente do repositório Git:"

#. type: example
#: guix-git/doc/contributing.texi:44
#, no-wrap
msgid "git clone https://git.savannah.gnu.org/git/guix.git\n"
msgstr "git clone https://git.savannah.gnu.org/git/guix.git\n"

#. type: cindex
#: guix-git/doc/contributing.texi:46
#, no-wrap
msgid "authentication, of a Guix checkout"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:51
msgid "How do you ensure that you obtained a genuine copy of the repository? To do that, run @command{guix git authenticate}, passing it the commit and OpenPGP fingerprint of the @dfn{channel introduction} (@pxref{Invoking guix git authenticate}):"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:58
#, no-wrap
msgid ""
"git fetch origin keyring:keyring\n"
"guix git authenticate 9edb3f66fd807b096b48283debdcddccfea34bad \\\n"
"  \"BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:63
msgid "This command completes with exit code zero on success; it prints an error message and exits with a non-zero code otherwise."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:70
msgid "As you can see, there is a chicken-and-egg problem: you first need to have Guix installed.  Typically you would install Guix System (@pxref{System Installation}) or Guix on top of another distro (@pxref{Binary Installation}); in either case, you would verify the OpenPGP signature on the installation medium.  This ``bootstraps'' the trust chain."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:75
msgid "The easiest way to set up a development environment for Guix is, of course, by using Guix! The following command starts a new shell where all the dependencies and appropriate environment variables are set up to hack on Guix:"
msgstr "A maneira mais fácil de configurar um ambiente de desenvolvimento para o Guix é, obviamente, usando o Guix! O comando a seguir inicia um novo shell no qual todas as dependências e variáveis de ambiente apropriadas são configuradas para hackear o Guix:"

#. type: example
#: guix-git/doc/contributing.texi:78
#, no-wrap
msgid "guix shell -D guix --pure\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:81
#, fuzzy
#| msgid "@xref{Invoking guix pack}, for more info on this handy tool."
msgid "@xref{Invoking guix shell}, for more information on that command."
msgstr "@xref{Invocando guix pack}, para mais informações sobre essa ferramenta útil."

#. type: Plain text
#: guix-git/doc/contributing.texi:85
msgid "If you are unable to use Guix when building Guix from a checkout, the following are the required packages in addition to those mentioned in the installation instructions (@pxref{Requirements})."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:87
#, no-wrap
msgid "@url{https://gnu.org/software/autoconf/, GNU Autoconf};"
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:88
#, no-wrap
msgid "@url{https://gnu.org/software/automake/, GNU Automake};"
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:89
#, no-wrap
msgid "@url{https://gnu.org/software/gettext/, GNU Gettext};"
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:90
#, no-wrap
msgid "@url{https://gnu.org/software/texinfo/, GNU Texinfo};"
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:91
#, no-wrap
msgid "@url{https://www.graphviz.org/, Graphviz};"
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:92
#, no-wrap
msgid "@url{https://www.gnu.org/software/help2man/, GNU Help2man (optional)}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:97
msgid "On Guix, extra dependencies can be added by instead running @command{guix shell}:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:100
#, no-wrap
msgid "guix shell -D guix help2man git strace --pure\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:104
#, fuzzy
#| msgid "Run @command{./bootstrap} to generate the build system infrastructure using Autoconf and Automake.  If you get an error like this one:"
msgid "From there you can generate the build system infrastructure using Autoconf and Automake:"
msgstr "Execute @command{./bootstrap} para gerar a infraestrutura do sistema de compilação usando o Autoconf e o Automake. Se você receber um erro como este:"

#. type: example
#: guix-git/doc/contributing.texi:107
#, fuzzy, no-wrap
#| msgid "Bootstrapping"
msgid "./bootstrap\n"
msgstr "Inicializando"

#. type: Plain text
#: guix-git/doc/contributing.texi:110
msgid "If you get an error like this one:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:113
#, no-wrap
msgid "configure.ac:46: error: possibly undefined macro: PKG_CHECK_MODULES\n"
msgstr "configure.ac:46: error: possibly undefined macro: PKG_CHECK_MODULES\n"

#. type: Plain text
#: guix-git/doc/contributing.texi:122
msgid "it probably means that Autoconf couldn’t find @file{pkg.m4}, which is provided by pkg-config.  Make sure that @file{pkg.m4} is available.  The same holds for the @file{guile.m4} set of macros provided by Guile.  For instance, if you installed Automake in @file{/usr/local}, it wouldn’t look for @file{.m4} files in @file{/usr/share}.  In that case, you have to invoke the following command:"
msgstr "provavelmente significa que o Autoconf não conseguiu encontrar o @file{pkg.m4}, que é fornecido pelo pkg-config. Certifique-se de que @file{pkg.m4} esteja disponível. O mesmo vale para o conjunto de macros @file{guile.m4} fornecido pelo Guile. Por exemplo, se você instalou o Automake em @file{/usr/local}, ele não procuraria arquivos @file{.m4} em @file{/usr/share}. Nesse caso, você tem que invocar o seguinte comando:"

#. type: example
#: guix-git/doc/contributing.texi:125
#, no-wrap
msgid "export ACLOCAL_PATH=/usr/share/aclocal\n"
msgstr "export ACLOCAL_PATH=/usr/share/aclocal\n"

#. type: Plain text
#: guix-git/doc/contributing.texi:129
msgid "@xref{Macro Search Path,,, automake, The GNU Automake Manual}, for more information."
msgstr "@xref{Macro Search Path,,, automake, The GNU Automake Manual}, para mais informações."

#. type: Plain text
#: guix-git/doc/contributing.texi:131
msgid "Then, run:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:134
#, fuzzy, no-wrap
#| msgid "--localstatedir"
msgid "./configure --localstatedir=/var --sysconfdir=/etc\n"
msgstr "--localstatedir"

#. type: Plain text
#: guix-git/doc/contributing.texi:143
msgid "... where @file{/var} is the normal @code{localstatedir} value (@pxref{The Store}, for information about this) and @file{/etc} is the normal @code{sysconfdir} value.  Note that you will probably not run @command{make install} at the end (you don't have to) but it's still important to pass the right @code{localstatedir} and @code{sysconfdir} values, which get recorded in the @code{(guix config)} Guile module."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:146
msgid "Finally, you can build Guix and, if you feel so inclined, run the tests (@pxref{Running the Test Suite}):"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:150
#, fuzzy, no-wrap
#| msgid "make check\n"
msgid ""
"make\n"
"make check\n"
msgstr "make check\n"

#. type: Plain text
#: guix-git/doc/contributing.texi:156
#, fuzzy
msgid "If anything fails, take a look at installation instructions (@pxref{Installation}) or send a message to the @email{guix-devel@@gnu.org, mailing list}."
msgstr "Finalmente, você tem que invocar @code{make check} para executar testes (@pxref{Executando a suíte de testes}). Se alguma coisa falhar, dê uma olhada nas instruções de instalação (@pxref{Instalação}) ou envie uma mensagem para a @email{guix-devel@@gnu.org, a lista de discussão}."

#. type: Plain text
#: guix-git/doc/contributing.texi:159
msgid "From there on, you can authenticate all the commits included in your checkout by running:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:162 guix-git/doc/contributing.texi:1807
#, no-wrap
msgid "make authenticate\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:165
msgid "The first run takes a couple of minutes, but subsequent runs are faster."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:171
msgid "Or, when your configuration for your local Git repository doesn't match the default one, you can provide the reference for the @code{keyring} branch through the variable @code{GUIX_GIT_KEYRING}.  The following example assumes that you have a Git remote called @samp{myremote} pointing to the official repository:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:174
#, no-wrap
msgid "make authenticate GUIX_GIT_KEYRING=myremote/keyring\n"
msgstr ""

#. type: quotation
#: guix-git/doc/contributing.texi:176 guix-git/doc/contributing.texi:790
#: guix-git/doc/contributing.texi:1417 guix-git/doc/contributing.texi:1462
#: guix-git/doc/contributing.texi:1780 guix-git/doc/guix.texi:680
#: guix-git/doc/guix.texi:729 guix-git/doc/guix.texi:933
#: guix-git/doc/guix.texi:1564 guix-git/doc/guix.texi:1951
#: guix-git/doc/guix.texi:2164 guix-git/doc/guix.texi:2226
#: guix-git/doc/guix.texi:2413 guix-git/doc/guix.texi:2635
#: guix-git/doc/guix.texi:2847 guix-git/doc/guix.texi:4079
#: guix-git/doc/guix.texi:4857 guix-git/doc/guix.texi:4871
#: guix-git/doc/guix.texi:4928 guix-git/doc/guix.texi:4981
#: guix-git/doc/guix.texi:5211 guix-git/doc/guix.texi:6001
#: guix-git/doc/guix.texi:6022 guix-git/doc/guix.texi:6644
#: guix-git/doc/guix.texi:6923 guix-git/doc/guix.texi:7044
#: guix-git/doc/guix.texi:7073 guix-git/doc/guix.texi:7114
#: guix-git/doc/guix.texi:7169 guix-git/doc/guix.texi:8597
#: guix-git/doc/guix.texi:10802 guix-git/doc/guix.texi:10944
#: guix-git/doc/guix.texi:11014 guix-git/doc/guix.texi:12892
#: guix-git/doc/guix.texi:12932 guix-git/doc/guix.texi:13032
#: guix-git/doc/guix.texi:13257 guix-git/doc/guix.texi:13269
#: guix-git/doc/guix.texi:15970 guix-git/doc/guix.texi:16664
#: guix-git/doc/guix.texi:16770 guix-git/doc/guix.texi:17747
#: guix-git/doc/guix.texi:18305 guix-git/doc/guix.texi:18807
#: guix-git/doc/guix.texi:21895 guix-git/doc/guix.texi:22078
#: guix-git/doc/guix.texi:22565 guix-git/doc/guix.texi:27143
#: guix-git/doc/guix.texi:27752 guix-git/doc/guix.texi:31140
#: guix-git/doc/guix.texi:35316 guix-git/doc/guix.texi:39561
#: guix-git/doc/guix.texi:39635 guix-git/doc/guix.texi:39677
#: guix-git/doc/guix.texi:39952 guix-git/doc/guix.texi:40122
#: guix-git/doc/guix.texi:40290 guix-git/doc/guix.texi:40397
#: guix-git/doc/guix.texi:40443 guix-git/doc/guix.texi:40500
#: guix-git/doc/guix.texi:40527 guix-git/doc/guix.texi:40865
#: guix-git/doc/guix.texi:42073 guix-git/doc/guix.texi:42148
#: guix-git/doc/guix.texi:42198 guix-git/doc/guix.texi:42248
#: guix-git/doc/guix.texi:42353 guix-git/doc/guix.texi:43862
#: guix-git/doc/guix.texi:45064
#, no-wrap
msgid "Note"
msgstr "Nota"

#. type: quotation
#: guix-git/doc/contributing.texi:180
msgid "You are advised to run @command{make authenticate} after every @command{git pull} invocation.  This ensures you keep receiving valid changes to the repository."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:184
msgid "After updating the repository, @command{make} might fail with an error similar to the following example:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:188
#, no-wrap
msgid ""
"error: failed to load 'gnu/packages/dunst.scm':\n"
"ice-9/eval.scm:293:34: In procedure abi-check: #<record-type <origin>>: record ABI mismatch; recompilation needed\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:194
msgid "This means that one of the record types that Guix defines (in this example, the @code{origin} record) has changed, and all of guix needs to be recompiled to take that change into account.  To do so, run @command{make clean-go} followed by @command{make}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:202
msgid "In order to keep a sane working environment, you will find it useful to test the changes made in your local source tree checkout without actually installing them.  So that you can distinguish between your ``end-user'' hat and your ``motley'' costume."
msgstr "Para manter um ambiente de trabalho saudável, você achará útil testar as alterações feitas na árvore local de fontes sem realmente instalá-las. Para que você possa distinguir entre o seu chapéude ''usuário final'' e sua fantasia ''misturada''."

#. type: Plain text
#: guix-git/doc/contributing.texi:213
msgid "To that end, all the command-line tools can be used even if you have not run @code{make install}.  To do that, you first need to have an environment with all the dependencies available (@pxref{Building from Git}), and then simply prefix each command with @command{./pre-inst-env} (the @file{pre-inst-env} script lives in the top build tree of Guix; it is generated by running @command{./bootstrap} followed by @command{./configure}).  As an example, here is how you would build the @code{hello} package as defined in your working tree (this assumes @command{guix-daemon} is already running on your system; it's OK if it's a different version):"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:216
#, no-wrap
msgid "$ ./pre-inst-env guix build hello\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:220
msgid "Similarly, an example for a Guile session using the Guix modules:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:223
#, no-wrap
msgid ""
"$ ./pre-inst-env guile -c '(use-modules (guix utils)) (pk (%current-system))'\n"
"\n"
msgstr ""
"$ ./pre-inst-env guile -c '(use-modules (guix utils)) (pk (%current-system))'\n"
"\n"

#. type: example
#: guix-git/doc/contributing.texi:225
#, no-wrap
msgid ";;; (\"x86_64-linux\")\n"
msgstr ";;; (\"x86_64-linux\")\n"

#. type: cindex
#: guix-git/doc/contributing.texi:228
#, no-wrap
msgid "REPL"
msgstr "REPL"

#. type: cindex
#: guix-git/doc/contributing.texi:229
#, no-wrap
msgid "read-eval-print loop"
msgstr "read-eval-print loop"

#. type: Plain text
#: guix-git/doc/contributing.texi:231
#, fuzzy
#| msgid "@dots{} and for a REPL (@pxref{Using Guile Interactively,,, guile, Guile Reference Manual}):"
msgid "@dots{} and for a REPL (@pxref{Using Guix Interactively}):"
msgstr "@dots{} e para um REPL (@pxref{Usando o Guile interativamente,,, guile, Manual de referência do Guile}):"

#. type: example
#: guix-git/doc/contributing.texi:246
#, no-wrap
msgid ""
"$ ./pre-inst-env guile\n"
"scheme@@(guile-user)> ,use(guix)\n"
"scheme@@(guile-user)> ,use(gnu)\n"
"scheme@@(guile-user)> (define snakes\n"
"                       (fold-packages\n"
"                         (lambda (package lst)\n"
"                           (if (string-prefix? \"python\"\n"
"                                               (package-name package))\n"
"                               (cons package lst)\n"
"                               lst))\n"
"                         '()))\n"
"scheme@@(guile-user)> (length snakes)\n"
"$1 = 361\n"
msgstr ""
"$ ./pre-inst-env guile\n"
"scheme@@(guile-user)> ,use(guix)\n"
"scheme@@(guile-user)> ,use(gnu)\n"
"scheme@@(guile-user)> (define snakes\n"
"                       (fold-packages\n"
"                         (lambda (package lst)\n"
"                           (if (string-prefix? \"python\"\n"
"                                               (package-name package))\n"
"                               (cons package lst)\n"
"                               lst))\n"
"                         '()))\n"
"scheme@@(guile-user)> (length snakes)\n"
"$1 = 361\n"

#. type: Plain text
#: guix-git/doc/contributing.texi:254
msgid "If you are hacking on the daemon and its supporting code or if @command{guix-daemon} is not already running on your system, you can launch it straight from the build tree@footnote{The @option{-E} flag to @command{sudo} guarantees that @code{GUILE_LOAD_PATH} is correctly set such that @command{guix-daemon} and the tools it uses can find the Guile modules they need.}:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:257
#, no-wrap
msgid "$ sudo -E ./pre-inst-env guix-daemon --build-users-group=guixbuild\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:261
msgid "The @command{pre-inst-env} script sets up all the environment variables necessary to support this, including @env{PATH} and @env{GUILE_LOAD_PATH}."
msgstr "O script @command{pre-inst-env} configura todas as variáveis de ambiente necessárias para prover suporte a isso, incluindo @env{PATH} e @env{GUILE_LOAD_PATH}."

#. type: Plain text
#: guix-git/doc/contributing.texi:266
msgid "Note that @command{./pre-inst-env guix pull} does @emph{not} upgrade the local source tree; it simply updates the @file{~/.config/guix/current} symlink (@pxref{Invoking guix pull}).  Run @command{git pull} instead if you want to upgrade your local source tree."
msgstr "Observe que @command{./pre-inst-env guix pull} @emph{não} atualiza a área de fontes local; ele simplesmente atualiza o link simbólico @file{~/.config/guix/current} (@pxref{Invocando guix pull}). Execute @command{git pull} em vez disso, se você quiser atualizar sua árvore de fontes local."

#. type: Plain text
#: guix-git/doc/contributing.texi:270
msgid "Sometimes, especially if you have recently updated your repository, running @command{./pre-inst-env} will print a message similar to the following example:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:274
#, no-wrap
msgid ""
";;; note: source file /home/user/projects/guix/guix/progress.scm\n"
";;;       newer than compiled /home/user/projects/guix/guix/progress.go\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:280
msgid "This is only a note and you can safely ignore it.  You can get rid of the message by running @command{make -j4}.  Until you do, Guile will run slightly slower because it will interpret the code instead of using prepared Guile object (@file{.go}) files."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:285
msgid "You can run @command{make} automatically as you work using @command{watchexec} from the @code{watchexec} package.  For example, to build again each time you update a package file, run @samp{watchexec -w gnu/packages -- make -j4}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:294
msgid "The Perfect Setup to hack on Guix is basically the perfect setup used for Guile hacking (@pxref{Using Guile in Emacs,,, guile, Guile Reference Manual}).  First, you need more than an editor, you need @url{https://www.gnu.org/software/emacs, Emacs}, empowered by the wonderful @url{https://nongnu.org/geiser/, Geiser}.  To set that up, run:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:297
#, fuzzy, no-wrap
#| msgid "guix package -i emacs guile emacs-geiser\n"
msgid "guix install emacs guile emacs-geiser emacs-geiser-guile\n"
msgstr "guix package -i emacs guile emacs-geiser\n"

#. type: Plain text
#: guix-git/doc/contributing.texi:306
msgid "Geiser allows for interactive and incremental development from within Emacs: code compilation and evaluation from within buffers, access to on-line documentation (docstrings), context-sensitive completion, @kbd{M-.} to jump to an object definition, a REPL to try out your code, and more (@pxref{Introduction,,, geiser, Geiser User Manual}).  For convenient Guix development, make sure to augment Guile’s load path so that it finds source files from your checkout:"
msgstr "O Geiser permite um desenvolvimento interativo e incremental de dentro do Emacs: compilação e avaliação de código de dentro dos buffers, acesso à documentação on-line (docstrings), completação sensível ao contexto, @kbd{M-.} para pular para uma definição de objeto, um REPL para tentar seu código e muito mais (@pxref{Introdução ,,, geiser, Manual de usuário do Geiser}). Para um desenvolvimento prático do Guix, certifique-se de aumentar o caminho de carregamento do Guile para que ele encontre os arquivos de origem do seu checkout:"

#. type: lisp
#: guix-git/doc/contributing.texi:311
#, no-wrap
msgid ""
";; @r{Assuming the Guix checkout is in ~/src/guix.}\n"
"(with-eval-after-load 'geiser-guile\n"
"  (add-to-list 'geiser-guile-load-path \"~/src/guix\"))\n"
msgstr ""
";; @r{Presumindo que o checkout do Guix está em ~/src/guix.}\n"
"(with-eval-after-load 'geiser-guile\n"
"  (add-to-list 'geiser-guile-load-path \"~/src/guix\"))\n"

#. type: Plain text
#: guix-git/doc/contributing.texi:319
msgid "To actually edit the code, Emacs already has a neat Scheme mode.  But in addition to that, you must not miss @url{https://www.emacswiki.org/emacs/ParEdit, Paredit}.  It provides facilities to directly operate on the syntax tree, such as raising an s-expression or wrapping it, swallowing or rejecting the following s-expression, etc."
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:320
#, no-wrap
msgid "code snippets"
msgstr "trechos de código"

#. type: cindex
#: guix-git/doc/contributing.texi:321
#, no-wrap
msgid "templates"
msgstr "modelos"

#. type: cindex
#: guix-git/doc/contributing.texi:322
#, no-wrap
msgid "reducing boilerplate"
msgstr "reduzindo boilerplate"

#. type: Plain text
#: guix-git/doc/contributing.texi:332
msgid "We also provide templates for common git commit messages and package definitions in the @file{etc/snippets} directory.  These templates can be used to expand short trigger strings to interactive text snippets. If you use @url{https://joaotavora.github.io/yasnippet/, YASnippet}, you may want to add the @file{etc/snippets/yas} snippets directory to the @var{yas-snippet-dirs} variable.  If you use @url{https://github.com/minad/tempel/, Tempel}, you may want to add the @file{etc/snippets/tempel/*} path to the @var{tempel-path} variable in Emacs."
msgstr ""

#. type: lisp
#: guix-git/doc/contributing.texi:344
#, no-wrap
msgid ""
";; @r{Assuming the Guix checkout is in ~/src/guix.}\n"
";; @r{Yasnippet configuration}\n"
"(with-eval-after-load 'yasnippet\n"
"  (add-to-list 'yas-snippet-dirs \"~/src/guix/etc/snippets/yas\"))\n"
";; @r{Tempel configuration}\n"
"(with-eval-after-load 'tempel\n"
"   ;; Ensure tempel-path is a list -- it may also be a string.\n"
"   (unless (listp 'tempel-path)\n"
"     (setq tempel-path (list tempel-path)))\n"
"   (add-to-list 'tempel-path \"~/src/guix/etc/snippets/tempel/*\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:352
msgid "The commit message snippets depend on @url{https://magit.vc/, Magit} to display staged files.  When editing a commit message type @code{add} followed by @kbd{TAB} to insert a commit message template for adding a package; type @code{update} followed by @kbd{TAB} to insert a template for updating a package; type @code{https} followed by @kbd{TAB} to insert a template for changing the home page URI of a package to HTTPS."
msgstr "Os trechos de mensagens de commit dependem de @url{https://magit.vc/, Magit} para exibir arquivos \"staged\". Ao editar uma mensagem de commit, digite @code{add} seguido por @kbd{TAB} para inserir um modelo de mensagem de commit para adicionar um pacote; digite @code{update} seguido por @kbd{TAB} para inserir um modelo para atualizar um pacote; digite @code{https} seguido por @kbd{TAB} para inserir um modelo para alterar a URI da página inicial de um pacote para HTTPS."

#. type: Plain text
#: guix-git/doc/contributing.texi:358
msgid "The main snippet for @code{scheme-mode} is triggered by typing @code{package...} followed by @kbd{TAB}.  This snippet also inserts the trigger string @code{origin...}, which can be expanded further.  The @code{origin} snippet in turn may insert other trigger strings ending on @code{...}, which also can be expanded further."
msgstr "O trecho principal para @code{scheme-mode} é acionado digitando @code{package ...} seguido de @kbd{TAB}. Esse trecho também insere a string de acionamento @code{origin...}, que pode ser expandida ainda mais. O trecho @code{origin}, por sua vez, pode inserir outras strings acionadoras que terminam em @code{...}, que também podem ser expandidas."

#. type: cindex
#: guix-git/doc/contributing.texi:359
#, no-wrap
msgid "insert or update copyright"
msgstr ""

#. type: code{#1}
#: guix-git/doc/contributing.texi:360
#, no-wrap
msgid "M-x guix-copyright"
msgstr ""

#. type: code{#1}
#: guix-git/doc/contributing.texi:361
#, no-wrap
msgid "M-x copyright-update"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:365
msgid "We additionally provide insertion and automatic update of a copyright in @file{etc/copyright.el}.  You may want to set your full name, mail, and load a file."
msgstr ""

#. type: lisp
#: guix-git/doc/contributing.texi:371
#, no-wrap
msgid ""
"(setq user-full-name \"Alice Doe\")\n"
"(setq user-mail-address \"alice@@mail.org\")\n"
";; @r{Assuming the Guix checkout is in ~/src/guix.}\n"
"(load-file \"~/src/guix/etc/copyright.el\")\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:374
msgid "To insert a copyright at the current line invoke @code{M-x guix-copyright}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:376
msgid "To update a copyright you need to specify a @code{copyright-names-regexp}."
msgstr ""

#. type: lisp
#: guix-git/doc/contributing.texi:380
#, no-wrap
msgid ""
"(setq copyright-names-regexp\n"
"      (format \"%s <%s>\" user-full-name user-mail-address))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:386
msgid "You can check if your copyright is up to date by evaluating @code{M-x copyright-update}.  If you want to do it automatically after each buffer save then add @code{(add-hook 'after-save-hook 'copyright-update)} in Emacs."
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:390
#, no-wrap
msgid "packages, creating"
msgstr "pacotes, criação"

#. type: Plain text
#: guix-git/doc/contributing.texi:394
msgid "The GNU distribution is nascent and may well lack some of your favorite packages.  This section describes how you can help make the distribution grow."
msgstr "A distribuição do GNU é incipiente e pode muito bem não ter alguns dos seus pacotes favoritos. Esta seção descreve como você pode ajudar a fazer a distribuição crescer."

#. type: Plain text
#: guix-git/doc/contributing.texi:402
msgid "Free software packages are usually distributed in the form of @dfn{source code tarballs}---typically @file{tar.gz} files that contain all the source files.  Adding a package to the distribution means essentially two things: adding a @dfn{recipe} that describes how to build the package, including a list of other packages required to build it, and adding @dfn{package metadata} along with that recipe, such as a description and licensing information."
msgstr "Pacotes de software livre geralmente são distribuídos na forma de @dfn{tarballs de código-fonte} -- geralmente arquivos @file{tar.gz} que contêm todos os arquivos fonte. Adicionar um pacote à distribuição significa essencialmente duas coisas: adicionar uma @dfn{receita} que descreve como criar o pacote, incluindo uma lista de outros pacotes necessários para compilá-lo e adicionar @dfn{metadados de pacote} junto com essa receita, como uma descrição e informações de licenciamento."

#. type: Plain text
#: guix-git/doc/contributing.texi:411
msgid "In Guix all this information is embodied in @dfn{package definitions}.  Package definitions provide a high-level view of the package.  They are written using the syntax of the Scheme programming language; in fact, for each package we define a variable bound to the package definition, and export that variable from a module (@pxref{Package Modules}).  However, in-depth Scheme knowledge is @emph{not} a prerequisite for creating packages.  For more information on package definitions, @pxref{Defining Packages}."
msgstr "No Guix, todas essas informações estão incorporadas em @dfn{configurações de pacote}. As definições de pacote fornecem uma visão de alto nível do pacote. Elas são escritas usando a sintaxe da linguagem de programação Scheme; de fato, para cada pacote, definimos uma variável vinculada à definição do pacote e exportamos essa variável de um módulo (@pxref{Módulos de pacote}). No entanto, o conhecimento profundo de Scheme @emph{não} é um pré-requisito para a criação de pacotes. Para mais informações sobre definições de pacotes, @pxref{Definindo pacotes}."

#. type: Plain text
#: guix-git/doc/contributing.texi:417
msgid "Once a package definition is in place, stored in a file in the Guix source tree, it can be tested using the @command{guix build} command (@pxref{Invoking guix build}).  For example, assuming the new package is called @code{gnew}, you may run this command from the Guix build tree (@pxref{Running Guix Before It Is Installed}):"
msgstr "Quando uma definição de pacote está em vigor, armazenada em um arquivo na árvore de fontes do Guix, ela pode ser testada usando o comando @command{guix build} (@pxref{Invocando guix build}). Por exemplo, supondo que o novo pacote seja chamado @code{gnew}, você pode executar este comando na árvore de construção do Guix (@pxref{Executando guix antes dele ser instalado}):"

#. type: example
#: guix-git/doc/contributing.texi:420
#, no-wrap
msgid "./pre-inst-env guix build gnew --keep-failed\n"
msgstr "./pre-inst-env guix build gnew --keep-failed\n"

#. type: Plain text
#: guix-git/doc/contributing.texi:426
msgid "Using @code{--keep-failed} makes it easier to debug build failures since it provides access to the failed build tree.  Another useful command-line option when debugging is @code{--log-file}, to access the build log."
msgstr "O uso de @code{--keep-failed} facilita a depuração de falhas de compilação, pois fornece acesso à árvore de compilação com falha. Outra opção útil da linha de comando ao depurar é @code{--log-file}, para acessar o log de compilação."

#. type: Plain text
#: guix-git/doc/contributing.texi:431
msgid "If the package is unknown to the @command{guix} command, it may be that the source file contains a syntax error, or lacks a @code{define-public} clause to export the package variable.  To figure it out, you may load the module from Guile to get more information about the actual error:"
msgstr "Se o pacote for desconhecido para o comando @command{guix}, pode ser que o arquivo fonte contenha um erro de sintaxe ou não tenha uma cláusula @code{define-public} para exportar a variável do pacote. Para descobrir isso, você pode carregar o módulo do Guile para obter mais informações sobre o erro real:"

#. type: example
#: guix-git/doc/contributing.texi:434
#, no-wrap
msgid "./pre-inst-env guile -c '(use-modules (gnu packages gnew))'\n"
msgstr "./pre-inst-env guile -c '(use-modules (gnu packages gnew))'\n"

#. type: Plain text
#: guix-git/doc/contributing.texi:441
msgid "Once your package builds correctly, please send us a patch (@pxref{Submitting Patches}).  Well, if you need help, we will be happy to help you too.  Once the patch is committed in the Guix repository, the new package automatically gets built on the supported platforms by @url{https://@value{SUBSTITUTE-SERVER-1}, our continuous integration system}."
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:442
#, no-wrap
msgid "substituter"
msgstr "substituidor"

#. type: Plain text
#: guix-git/doc/contributing.texi:449
#, fuzzy
#| msgid "Users can obtain the new package definition simply by running @command{guix pull} (@pxref{Invoking guix pull}).  When @code{@value{SUBSTITUTE-SERVER}} is done building the package, installing the package automatically downloads binaries from there (@pxref{Substitutes}).  The only place where human intervention is needed is to review and apply the patch."
msgid "Users can obtain the new package definition simply by running @command{guix pull} (@pxref{Invoking guix pull}).  When @code{@value{SUBSTITUTE-SERVER-1}} is done building the package, installing the package automatically downloads binaries from there (@pxref{Substitutes}).  The only place where human intervention is needed is to review and apply the patch."
msgstr "Os usuários podem obter a nova definição de pacote simplesmente executando @command{guix pull} (@pxref{Invocando guix pull}). Quando o @code{@value{SUBSTITUTE-SERVER}} terminar de compilar o pacote, a instalação do pacote fará o download automático dos binários a partir daí (@pxref{Substitutos}). O único lugar onde a intervenção humana é necessária é para revisar e aplicar o patch."

#. type: subsection
#: guix-git/doc/contributing.texi:464 guix-git/doc/contributing.texi:466
#: guix-git/doc/contributing.texi:467
#, no-wrap
msgid "Software Freedom"
msgstr "Liberdade de software"

#. type: menuentry
#: guix-git/doc/contributing.texi:464
msgid "What may go into the distribution."
msgstr "O que pode ir na distribuição."

#. type: subsection
#: guix-git/doc/contributing.texi:464 guix-git/doc/contributing.texi:494
#: guix-git/doc/contributing.texi:495
#, no-wrap
msgid "Package Naming"
msgstr "Nomeando um pacote"

#. type: menuentry
#: guix-git/doc/contributing.texi:464
msgid "What's in a name?"
msgstr "Que há em um nome?"

#. type: subsection
#: guix-git/doc/contributing.texi:464 guix-git/doc/contributing.texi:527
#: guix-git/doc/contributing.texi:528
#, no-wrap
msgid "Version Numbers"
msgstr "Números de versão"

#. type: menuentry
#: guix-git/doc/contributing.texi:464
msgid "When the name is not enough."
msgstr "Quando o nome não é suficiente."

#. type: subsection
#: guix-git/doc/contributing.texi:464 guix-git/doc/contributing.texi:634
#: guix-git/doc/contributing.texi:635
#, no-wrap
msgid "Synopses and Descriptions"
msgstr "Sinopses e descrições"

#. type: menuentry
#: guix-git/doc/contributing.texi:464
msgid "Helping users find the right package."
msgstr "Ajudando usuários a localizar o pacote certo."

#. type: subsection
#: guix-git/doc/contributing.texi:464 guix-git/doc/contributing.texi:713
#: guix-git/doc/contributing.texi:714
#, no-wrap
msgid "Snippets versus Phases"
msgstr ""

#. type: menuentry
#: guix-git/doc/contributing.texi:464
msgid "Whether to use a snippet, or a build phase."
msgstr ""

#. type: subsection
#: guix-git/doc/contributing.texi:464 guix-git/doc/contributing.texi:728
#: guix-git/doc/contributing.texi:729 guix-git/doc/guix.texi:2148
#, no-wrap
msgid "Emacs Packages"
msgstr ""

#. type: menuentry
#: guix-git/doc/contributing.texi:464
msgid "Your Elisp fix."
msgstr ""

#. type: subsection
#: guix-git/doc/contributing.texi:464 guix-git/doc/contributing.texi:768
#: guix-git/doc/contributing.texi:769
#, no-wrap
msgid "Python Modules"
msgstr "Módulos Python"

#. type: menuentry
#: guix-git/doc/contributing.texi:464
msgid "A touch of British comedy."
msgstr "Um toque de comédia britânica."

#. type: subsection
#: guix-git/doc/contributing.texi:464 guix-git/doc/contributing.texi:863
#: guix-git/doc/contributing.texi:864
#, no-wrap
msgid "Perl Modules"
msgstr "Módulos Perl"

#. type: menuentry
#: guix-git/doc/contributing.texi:464
msgid "Little pearls."
msgstr "Pequenas pérolas."

#. type: subsection
#: guix-git/doc/contributing.texi:464 guix-git/doc/contributing.texi:879
#: guix-git/doc/contributing.texi:880
#, no-wrap
msgid "Java Packages"
msgstr "Pacotes Java"

#. type: menuentry
#: guix-git/doc/contributing.texi:464
msgid "Coffee break."
msgstr "Parada para o café."

#. type: subsection
#: guix-git/doc/contributing.texi:464 guix-git/doc/contributing.texi:899
#: guix-git/doc/contributing.texi:900
#, no-wrap
msgid "Rust Crates"
msgstr ""

#. type: menuentry
#: guix-git/doc/contributing.texi:464
msgid "Beware of oxidation."
msgstr ""

#. type: subsection
#: guix-git/doc/contributing.texi:464 guix-git/doc/contributing.texi:933
#: guix-git/doc/contributing.texi:934
#, fuzzy, no-wrap
#| msgid "Java Packages"
msgid "Elm Packages"
msgstr "Pacotes Java"

#. type: menuentry
#: guix-git/doc/contributing.texi:464
msgid "Trees of browser code"
msgstr ""

#. type: subsection
#: guix-git/doc/contributing.texi:464 guix-git/doc/contributing.texi:1014
#: guix-git/doc/contributing.texi:1015
#, no-wrap
msgid "Fonts"
msgstr "Fontes"

#. type: menuentry
#: guix-git/doc/contributing.texi:464
msgid "Fond of fonts."
msgstr "Vício em fontes."

#. type: cindex
#: guix-git/doc/contributing.texi:470
#, no-wrap
msgid "free software"
msgstr "software livre"

#. type: Plain text
#: guix-git/doc/contributing.texi:478
msgid "The GNU operating system has been developed so that users can have freedom in their computing.  GNU is @dfn{free software}, meaning that users have the @url{https://www.gnu.org/philosophy/free-sw.html,four essential freedoms}: to run the program, to study and change the program in source code form, to redistribute exact copies, and to distribute modified versions.  Packages found in the GNU distribution provide only software that conveys these four freedoms."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:484
msgid "In addition, the GNU distribution follow the @url{https://www.gnu.org/distros/free-system-distribution-guidelines.html,free software distribution guidelines}.  Among other things, these guidelines reject non-free firmware, recommendations of non-free software, and discuss ways to deal with trademarks and patents."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:492
msgid "Some otherwise free upstream package sources contain a small and optional subset that violates the above guidelines, for instance because this subset is itself non-free code.  When that happens, the offending items are removed with appropriate patches or code snippets in the @code{origin} form of the package (@pxref{Defining Packages}).  This way, @code{guix build --source} returns the ``freed'' source rather than the unmodified upstream source."
msgstr "Algumas fontes de pacotes upstream livres de outra forma contêm um subconjunto pequeno e opcional que viola as diretrizes acima, por exemplo, porque esse subconjunto é ele próprio um código não livre. Quando isso acontece, os itens incorretos são removidos com patches ou trechos de código apropriados no formato @code{origin} do pacote (@pxref{Definindo pacotes}). Dessa forma, o @code{guix build --source} retorna a fonte ``lançada'' em vez da fonte upstream não modificada."

#. type: cindex
#: guix-git/doc/contributing.texi:497
#, no-wrap
msgid "package name"
msgstr "nome de pacote"

#. type: Plain text
#: guix-git/doc/contributing.texi:505
#, fuzzy
msgid "A package actually has two names associated with it.  First, there is the name of the @emph{Scheme variable}, the one following @code{define-public}.  By this name, the package can be made known in the Scheme code, for instance as input to another package.  Second, there is the string in the @code{name} field of a package definition.  This name is used by package management commands such as @command{guix package} and @command{guix build}."
msgstr "Na verdade, um pacote possui dois nomes associados: Primeiro, existe o nome da @emph{variável Scheme}, a que vem após @code{define-public}. Com esse nome, o pacote pode ser conhecido no código do esquema, por exemplo, como entrada para outro pacote. Segundo, existe a string no campo @code{name} de uma definição de pacote. Esse nome é usado por comandos de gerenciamento de pacotes como @command{guix package} e @command{guix build}."

#. type: Plain text
#: guix-git/doc/contributing.texi:510
msgid "Both are usually the same and correspond to the lowercase conversion of the project name chosen upstream, with underscores replaced with hyphens.  For instance, GNUnet is available as @code{gnunet}, and SDL_net as @code{sdl-net}."
msgstr "Ambos são geralmente iguais e correspondem à conversão em minúscula do nome do projeto escolhido a montante, com os sublinhados substituídos por hífenes. Por exemplo, o GNUnet está disponível como @code{gnunet} e SDL_net como @code{sdl-net}."

#. type: Plain text
#: guix-git/doc/contributing.texi:518
msgid "A noteworthy exception to this rule is when the project name is only a single character, or if an older maintained project with the same name already exists---regardless of whether it has already been packaged for Guix.  Use common sense to make such names unambiguous and meaningful.  For example, Guix's package for the shell called ``s'' upstream is @code{s-shell} and @emph{not} @code{s}.  Feel free to ask your fellow hackers for inspiration."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:523
msgid "We do not add @code{lib} prefixes for library packages, unless these are already part of the official project name.  But @pxref{Python Modules} and @ref{Perl Modules} for special rules concerning modules for the Python and Perl languages."
msgstr "Não adicionamos prefixos @code{lib} para pacotes de bibliotecas, a menos que eles já façam parte do nome oficial do projeto. Mas @pxref{Módulos Python} e @ref{Módulos Perl} para regras especiais relativas a módulos para as linguagens Python e Perl."

#. type: Plain text
#: guix-git/doc/contributing.texi:525
msgid "Font package names are handled differently, @pxref{Fonts}."
msgstr "Nomes de pacote de fontes são lidados de forma diferente. @xref{Fontes}."

#. type: cindex
#: guix-git/doc/contributing.texi:530
#, no-wrap
msgid "package version"
msgstr "versão de pacote"

#. type: Plain text
#: guix-git/doc/contributing.texi:539
msgid "We usually package only the latest version of a given free software project.  But sometimes, for instance for incompatible library versions, two (or more) versions of the same package are needed.  These require different Scheme variable names.  We use the name as defined in @ref{Package Naming} for the most recent version; previous versions use the same name, suffixed by @code{-} and the smallest prefix of the version number that may distinguish the two versions."
msgstr "Geralmente, empacotamos apenas a versão mais recente de um determinado projeto de software livre. Mas, às vezes, por exemplo, para versões incompatíveis de bibliotecas, são necessárias duas (ou mais) versões do mesmo pacote. Isso requer nomes de variáveis Scheme diferentes. Usamos o nome como definido em @ref{Nomeando um pacote} para a versão mais recente; as versões anteriores usam o mesmo nome, com o sufixo @code{-} e o menor prefixo do número da versão que pode distinguir as duas versões."

#. type: Plain text
#: guix-git/doc/contributing.texi:542
msgid "The name inside the package definition is the same for all versions of a package and does not contain any version number."
msgstr "O nome dentro da definição do pacote é o mesmo para todas as versões de um pacote e não contém nenhum número de versão."

#. type: Plain text
#: guix-git/doc/contributing.texi:544
msgid "For instance, the versions 2.24.20 and 3.9.12 of GTK+ may be packaged as follows:"
msgstr "Por exemplo, as versões 2.24.20 e 3.9.12 do GTK podem ser empacotados da seguinte forma:"

#. type: lisp
#: guix-git/doc/contributing.texi:556
#, no-wrap
msgid ""
"(define-public gtk+\n"
"  (package\n"
"    (name \"gtk+\")\n"
"    (version \"3.9.12\")\n"
"    ...))\n"
"(define-public gtk+-2\n"
"  (package\n"
"    (name \"gtk+\")\n"
"    (version \"2.24.20\")\n"
"    ...))\n"
msgstr ""
"(define-public gtk+\n"
"  (package\n"
"    (name \"gtk+\")\n"
"    (version \"3.9.12\")\n"
"    ...))\n"
"(define-public gtk+-2\n"
"  (package\n"
"    (name \"gtk+\")\n"
"    (version \"2.24.20\")\n"
"    ...))\n"

#. type: Plain text
#: guix-git/doc/contributing.texi:558
msgid "If we also wanted GTK+ 3.8.2, this would be packaged as"
msgstr "Se também quiséssemos GTK 3.8.2, este seria empacotado como"

#. type: lisp
#: guix-git/doc/contributing.texi:564
#, no-wrap
msgid ""
"(define-public gtk+-3.8\n"
"  (package\n"
"    (name \"gtk+\")\n"
"    (version \"3.8.2\")\n"
"    ...))\n"
msgstr ""
"(define-public gtk+-3.8\n"
"  (package\n"
"    (name \"gtk+\")\n"
"    (version \"3.8.2\")\n"
"    ...))\n"

#. type: cindex
#: guix-git/doc/contributing.texi:568
#, no-wrap
msgid "version number, for VCS snapshots"
msgstr "número de versão, para snapshots de VCS"

#. type: Plain text
#: guix-git/doc/contributing.texi:574
msgid "Occasionally, we package snapshots of upstream's version control system (VCS) instead of formal releases.  This should remain exceptional, because it is up to upstream developers to clarify what the stable release is.  Yet, it is sometimes necessary.  So, what should we put in the @code{version} field?"
msgstr "Ocasionalmente, empacotamos snapshots do sistema de controle de versão (VCS) do upstream em vez de lançamentos formais. Isso deve permanecer excepcional, porque cabe aos desenvolvedores upstream esclarecer qual é a versão estável. No entanto, às vezes é necessário. Então, o que devemos colocar no campo @code{version}?"

#. type: Plain text
#: guix-git/doc/contributing.texi:582
msgid "Clearly, we need to make the commit identifier of the VCS snapshot visible in the version string, but we also need to make sure that the version string is monotonically increasing so that @command{guix package --upgrade} can determine which version is newer.  Since commit identifiers, notably with Git, are not monotonically increasing, we add a revision number that we increase each time we upgrade to a newer snapshot.  The resulting version string looks like this:"
msgstr "Claramente, precisamos tornar o identificador de commit do snapshot VCS visível na string de versão, mas também precisamos garantir que a string de versão esteja aumentando monotonicamente para que o @command{pacote guix --upgrade} possa determinar qual versão é mais recente. Como os identificadores de commit, principalmente com o Git, não estão aumentando monotonicamente, adicionamos um número de revisão que aumentamos cada vez que atualizamos para um snapshot mais recente. A sequência da versão resultante é assim:"

#. type: example
#: guix-git/doc/contributing.texi:591
#, no-wrap
msgid ""
"2.0.11-3.cabba9e\n"
"  ^    ^    ^\n"
"  |    |    `-- upstream commit ID\n"
"  |    |\n"
"  |    `--- Guix package revision\n"
"  |\n"
"latest upstream version\n"
msgstr ""
"2.0.11-3.cabba9e\n"
"  ^    ^    ^\n"
"  |    |    `-- ID do commit do upstream\n"
"  |    |\n"
"  |    `--- revisão do pacote do Guix\n"
"  |\n"
"versão mais recente do upstream\n"

#. type: Plain text
#: guix-git/doc/contributing.texi:601
msgid "It is a good idea to strip commit identifiers in the @code{version} field to, say, 7 digits.  It avoids an aesthetic annoyance (assuming aesthetics have a role to play here) as well as problems related to OS limits such as the maximum shebang length (127 bytes for the Linux kernel).  There are helper functions for doing this for packages using @code{git-fetch} or @code{hg-fetch} (see below).  It is best to use the full commit identifiers in @code{origin}s, though, to avoid ambiguities.  A typical package definition may look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/contributing.texi:618
#, no-wrap
msgid ""
"(define my-package\n"
"  (let ((commit \"c3f29bc928d5900971f65965feaae59e1272a3f7\")\n"
"        (revision \"1\"))          ;Guix package revision\n"
"    (package\n"
"      (version (git-version \"0.9\" revision commit))\n"
"      (source (origin\n"
"                (method git-fetch)\n"
"                (uri (git-reference\n"
"                      (url \"git://example.org/my-package.git\")\n"
"                      (commit commit)))\n"
"                (sha256 (base32 \"1mbikn@dots{}\"))\n"
"                (file-name (git-file-name name version))))\n"
"      ;; @dots{}\n"
"      )))\n"
msgstr ""
"(define meu-pacote\n"
"  (let ((commit \"c3f29bc928d5900971f65965feaae59e1272a3f7\")\n"
"        (revision \"1\"))          ;revisão do pacote do Guix\n"
"    (package\n"
"      (version (git-version \"0.9\" revision commit))\n"
"      (source (origin\n"
"                (method git-fetch)\n"
"                (uri (git-reference\n"
"                      (url \"git://example.org/meu-pacote.git\")\n"
"                      (commit commit)))\n"
"                (sha256 (base32 \"1mbikn@dots{}\"))\n"
"                (file-name (git-file-name name version))))\n"
"      ;; @dots{}\n"
"      )))\n"

#. type: deffn
#: guix-git/doc/contributing.texi:620
#, no-wrap
msgid "{Scheme Procedure} git-version @var{VERSION} @var{REVISION} @var{COMMIT}"
msgstr ""

#. type: deffn
#: guix-git/doc/contributing.texi:622
msgid "Return the version string for packages using @code{git-fetch}."
msgstr ""

#. type: lisp
#: guix-git/doc/contributing.texi:626
#, no-wrap
msgid ""
"(git-version \"0.2.3\" \"0\" \"93818c936ee7e2f1ba1b315578bde363a7d43d05\")\n"
"@result{} \"0.2.3-0.93818c9\"\n"
msgstr ""

#. type: deffn
#: guix-git/doc/contributing.texi:629
#, no-wrap
msgid "{Scheme Procedure} hg-version @var{VERSION} @var{REVISION} @var{CHANGESET}"
msgstr ""

#. type: deffn
#: guix-git/doc/contributing.texi:632
msgid "Return the version string for packages using @code{hg-fetch}.  It works in the same way as @code{git-version}."
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:637
#, no-wrap
msgid "package description"
msgstr "descrição do pacote"

#. type: cindex
#: guix-git/doc/contributing.texi:638
#, no-wrap
msgid "package synopsis"
msgstr "sinopse do pacote"

#. type: Plain text
#: guix-git/doc/contributing.texi:645
msgid "As we have seen before, each package in GNU@tie{}Guix includes a synopsis and a description (@pxref{Defining Packages}).  Synopses and descriptions are important: They are what @command{guix package --search} searches, and a crucial piece of information to help users determine whether a given package suits their needs.  Consequently, packagers should pay attention to what goes into them."
msgstr "Como vimos anteriormente, cada pacote no GNU@tie{}Guix inclui uma sinopse e uma descrição (@pxref{Definindo pacotes}). Sinopses e descrições são importantes: são o que o @command{guix package --search} pesquisa e uma informação crucial para ajudar os usuários a determinar se um determinado pacote atende às suas necessidades. Consequentemente, os empacotadores devem prestar atenção ao que entra neles."

#. type: Plain text
#: guix-git/doc/contributing.texi:653
msgid "Synopses must start with a capital letter and must not end with a period.  They must not start with ``a'' or ``the'', which usually does not bring anything; for instance, prefer ``File-frobbing tool'' over ``A tool that frobs files''.  The synopsis should say what the package is---e.g., ``Core GNU utilities (file, text, shell)''---or what it is used for---e.g., the synopsis for GNU@tie{}grep is ``Print lines matching a pattern''."
msgstr "As sinopses devem começar com uma letra maiúscula e não devem terminar com um ponto. Elas não devem começar com ``a'' ou ``the'', que geralmente não traz nada; por exemplo, prefira ``Tool-frobbing tool'' em vez de ``A tool that frobs files''. A sinopse deve dizer o que é o pacote -- por exemplo, ``Core GNU utilities (file, text, shell)'' -- ou para que é usado -- por exemplo, a sinopse do GNU@tie{}grep é ``Print lines matching a pattern''."

#. type: Plain text
#: guix-git/doc/contributing.texi:663
msgid "Keep in mind that the synopsis must be meaningful for a very wide audience.  For example, ``Manipulate alignments in the SAM format'' might make sense for a seasoned bioinformatics researcher, but might be fairly unhelpful or even misleading to a non-specialized audience.  It is a good idea to come up with a synopsis that gives an idea of the application domain of the package.  In this example, this might give something like ``Manipulate nucleotide sequence alignments'', which hopefully gives the user a better idea of whether this is what they are looking for."
msgstr "Lembre-se de que a sinopse deve ser significativa para um público muito amplo. Por exemplo, ``Manipulate alignments in the SAM format'' pode fazer sentido para um pesquisador experiente em bioinformática, mas pode ser bastante inútil ou até enganoso para um público não especializado. É uma boa ideia apresentar uma sinopse que dê uma ideia do domínio do aplicativo do pacote. Neste exemplo, isso pode fornecer algo como ``Manipulate nucleotide sequence alignments'', o que, esperançosamente, dá ao usuário uma melhor ideia de se é isso que eles estão procurando."

#. type: Plain text
#: guix-git/doc/contributing.texi:671
msgid "Descriptions should take between five and ten lines.  Use full sentences, and avoid using acronyms without first introducing them.  Please avoid marketing phrases such as ``world-leading'', ``industrial-strength'', and ``next-generation'', and avoid superlatives like ``the most advanced''---they are not helpful to users looking for a package and may even sound suspicious.  Instead, try to be factual, mentioning use cases and features."
msgstr "Descrições devem levar entre cinco e dez linhas. Use sentenças completas e evite usar acrônimos sem primeiro apresentá-los. Por favor, evite frases de marketing como ``inovação mundial'', ``força industrial'' e ``próxima geração'', e evite superlativos como ``a mais avançada'' -- eles não ajudam o usuário procurando por um pacote e podem atém parece suspeito. Em vez idsso, tente se ater aos fatos, mencionando casos de uso e recursos."

#. type: cindex
#: guix-git/doc/contributing.texi:672
#, no-wrap
msgid "Texinfo markup, in package descriptions"
msgstr "Marcação Texinfo, em descrições de pacote"

#. type: Plain text
#: guix-git/doc/contributing.texi:681
#, fuzzy
#| msgid "Descriptions can include Texinfo markup, which is useful to introduce ornaments such as @code{@@code} or @code{@@dfn}, bullet lists, or hyperlinks (@pxref{Overview,,, texinfo, GNU Texinfo}).  However you should be careful when using some characters for example @samp{@@} and curly braces which are the basic special characters in Texinfo (@pxref{Special Characters,,, texinfo, GNU Texinfo}).  User interfaces such as @command{guix package --show} take care of rendering it appropriately."
msgid "Descriptions can include Texinfo markup, which is useful to introduce ornaments such as @code{@@code} or @code{@@dfn}, bullet lists, or hyperlinks (@pxref{Overview,,, texinfo, GNU Texinfo}).  However you should be careful when using some characters for example @samp{@@} and curly braces which are the basic special characters in Texinfo (@pxref{Special Characters,,, texinfo, GNU Texinfo}).  User interfaces such as @command{guix show} take care of rendering it appropriately."
msgstr "Descrições podem incluir marcação Texinfo, a qual é útil para apresentar adornos como @code{@@code} ou @code{@@dfn}, listas não numeradas ou hiperlinks (@pxref{Overview,,, texinfo, GNU Texinfo}). Porém, você  deve ter cuidado ao usar alguns caracteres, por exemplo @samp{@@} e chaves, que são caracteres especiais básicos no Texinfo (@pxref{Special Characters,,, texinfo, GNU Texinfo}). Interfaces de usuário, como @command{guix package --show}, cuidam de renderizá-las adequadamente."

#. type: Plain text
#: guix-git/doc/contributing.texi:687
msgid "Synopses and descriptions are translated by volunteers @uref{https://translate.fedoraproject.org/projects/guix/packages, at Weblate} so that as many users as possible can read them in their native language.  User interfaces search them and display them in the language specified by the current locale."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:692
msgid "To allow @command{xgettext} to extract them as translatable strings, synopses and descriptions @emph{must be literal strings}.  This means that you cannot use @code{string-append} or @code{format} to construct these strings:"
msgstr "Para permitir que @command{xgettext} extrai-as com strings traduzíveis, as sinopses e descrições @emph{devem ser strings literais}. Isso significa que você não pode usar @code{string-append} ou @code{format} para construir essas strings:"

#. type: lisp
#: guix-git/doc/contributing.texi:698
#, no-wrap
msgid ""
"(package\n"
"  ;; @dots{}\n"
"  (synopsis \"This is translatable\")\n"
"  (description (string-append \"This is \" \"*not*\" \" translatable.\")))\n"
msgstr ""
"(package\n"
"  ;; @dots{}\n"
"  (synopsis \"Isso é traduzível\")\n"
"  (description (string-append \"Isso \" \"*não*\" \" é traduzível.\")))\n"

#. type: Plain text
#: guix-git/doc/contributing.texi:706
msgid "Translation is a lot of work so, as a packager, please pay even more attention to your synopses and descriptions as every change may entail additional work for translators.  In order to help them, it is possible to make recommendations or instructions visible to them by inserting special comments like this (@pxref{xgettext Invocation,,, gettext, GNU Gettext}):"
msgstr "Tradução é muito trabalhoso, então, como empacotador, por favor, tenha ainda mais atenção às suas sinopses e descrições, pois cada alteração pode implicar em trabalho adicional para tradutores. Para ajudá-loas, é possível tornar recomendações ou instruções visíveis inserindo comentários especiais como esse (@pxref{xgettext Invocation,,, gettext, GNU Gettext}):"

#. type: lisp
#: guix-git/doc/contributing.texi:711
#, no-wrap
msgid ""
";; TRANSLATORS: \"X11 resize-and-rotate\" should not be translated.\n"
"(description \"ARandR is designed to provide a simple visual front end\n"
"for the X11 resize-and-rotate (RandR) extension. @dots{}\")\n"
msgstr ""
";; TRANSLATORS: \"X11 resize-and-rotate\" should not be translated.\n"
"(description \"ARandR is designed to provide a simple visual front end\n"
"for the X11 resize-and-rotate (RandR) extension. @dots{}\")\n"

#. type: cindex
#: guix-git/doc/contributing.texi:716
#, no-wrap
msgid "snippets, when to use"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:727
msgid "The boundary between using an origin snippet versus a build phase to modify the sources of a package can be elusive.  Origin snippets are typically used to remove unwanted files such as bundled libraries, nonfree sources, or to apply simple substitutions.  The source derived from an origin should produce a source that can be used to build the package on any system that the upstream package supports (i.e., act as the corresponding source).  In particular, origin snippets must not embed store items in the sources; such patching should rather be done using build phases.  Refer to the @code{origin} record documentation for more information (@pxref{origin Reference})."
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:731
#, no-wrap
msgid "emacs, packaging"
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:732
#, no-wrap
msgid "elisp, packaging"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:744
msgid "Emacs packages should preferably use the Emacs build system (@pxref{emacs-build-system}), for uniformity and the benefits provided by its build phases, such as the auto-generation of the autoloads file and the byte compilation of the sources.  Because there is no standardized way to run a test suite for Emacs packages, tests are disabled by default.  When a test suite is available, it should be enabled by setting the @code{#:tests?} argument to @code{#true}.  By default, the command to run the test is @command{make check}, but any command can be specified via the @code{#:test-command} argument.  The @code{#:test-command} argument expects a list containing a command and its arguments, to be invoked during the @code{check} phase."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:749
msgid "The Elisp dependencies of Emacs packages are typically provided as @code{propagated-inputs} when required at run time.  As for other packages, build or test dependencies should be specified as @code{native-inputs}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:758
msgid "Emacs packages sometimes depend on resources directories that should be installed along the Elisp files.  The @code{#:include} argument can be used for that purpose, by specifying a list of regexps to match.  The best practice when using the @code{#:include} argument is to extend rather than override its default value (accessible via the @code{%default-include} variable).  As an example, a yasnippet extension package typically include a @file{snippets} directory, which could be copied to the installation directory using:"
msgstr ""

#. type: lisp
#: guix-git/doc/contributing.texi:761
#, no-wrap
msgid "#:include (cons \"^snippets/\" %default-include)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:767
msgid "When encountering problems, it is wise to check for the presence of the @code{Package-Requires} extension header in the package main source file, and whether any dependencies and their versions listed therein are satisfied."
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:771
#, no-wrap
msgid "python"
msgstr "python"

#. type: Plain text
#: guix-git/doc/contributing.texi:777
msgid "We currently package Python 2 and Python 3, under the Scheme variable names @code{python-2} and @code{python} as explained in @ref{Version Numbers}.  To avoid confusion and naming clashes with other programming languages, it seems desirable that the name of a package for a Python module contains the word @code{python}."
msgstr "Atualmente empacotamos Python 2 e Python 3, sob os nomes de variável Scheme @code{python-2} e @code{python} conforme explicado em @ref{Números de versão}.  Para evitar confusão e conflitos de nomes com outras linguagens de programação, parece desejável que o nome de um pacote para um módulo Python contenha a palavra @code{python}."

#. type: Plain text
#: guix-git/doc/contributing.texi:783
msgid "Some modules are compatible with only one version of Python, others with both.  If the package Foo is compiled with Python 3, we name it @code{python-foo}.  If it is compiled with Python 2, we name it @code{python2-foo}.  Python 2 packages are being removed from the distribution; please do no not submit any new Python 2 packages."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:789
msgid "If a project already contains the word @code{python}, we drop this; for instance, the module python-dateutil is packaged under the names @code{python-dateutil} and @code{python2-dateutil}.  If the project name starts with @code{py} (e.g.@: @code{pytz}), we keep it and prefix it as described above."
msgstr "Se um projeto já contém a palavra @code{python}, nós a descartamos; por exemplo, o módulo python-dateutil é empacotado sob os nomes @code{python-dateutil} e @code{python2-dateutil}. Se o nome do projeto começa com @code{py} (p.ex., @code{pytz}), nós o mantemos e o prefixamos conforme descrito acima."

#. type: quotation
#: guix-git/doc/contributing.texi:803
msgid "Currently there are two different build systems for Python packages in Guix: @var{python-build-system} and @var{pyproject-build-system}.  For the longest time, Python packages were built from an informally specified @file{setup.py} file.  That worked amazingly well, considering Python's success, but was difficult to build tooling around.  As a result, a host of alternative build systems emerged and the community eventually settled on a @url{https://peps.python.org/pep-0517/, formal standard} for specifying build requirements.  @var{pyproject-build-system} is Guix's implementation of this standard.  It is considered ``experimental'' in that it does not yet support all the various PEP-517 @emph{build backends}, but you are encouraged to try it for new Python packages and report any problems.  It will eventually be deprecated and merged into @var{python-build-system}."
msgstr ""

#. type: subsubsection
#: guix-git/doc/contributing.texi:805
#, no-wrap
msgid "Specifying Dependencies"
msgstr "Especificando dependências"

#. type: cindex
#: guix-git/doc/contributing.texi:806
#, no-wrap
msgid "inputs, for Python packages"
msgstr "entradas, para pacotes Python"

#. type: Plain text
#: guix-git/doc/contributing.texi:813
#, fuzzy
#| msgid "Dependency information for Python packages is usually available in the package source tree, with varying degrees of accuracy: in the @file{setup.py} file, in @file{requirements.txt}, or in @file{tox.ini}."
msgid "Dependency information for Python packages is usually available in the package source tree, with varying degrees of accuracy: in the @file{pyproject.toml} file, the @file{setup.py} file, in @file{requirements.txt}, or in @file{tox.ini} (the latter mostly for test dependencies)."
msgstr "Informações de dependências para pacotes Python estão geralmente disponíveis na árvore de fonte do pacote, com vários graus de precisão: no arquivo @file{setup.py}, no @file{requirements.txt} ou no @file{tox.ini}."

#. type: Plain text
#: guix-git/doc/contributing.texi:819
msgid "Your mission, when writing a recipe for a Python package, is to map these dependencies to the appropriate type of ``input'' (@pxref{package Reference, inputs}).  Although the @code{pypi} importer normally does a good job (@pxref{Invoking guix import}), you may want to check the following check list to determine which dependency goes where."
msgstr "Sua missão, ao escrever uma receita para um pacote Python, é mapear essas dependências para o tipo apropriado de ``entrada'' (@pxref{Referência do package, inputs}). Apesar do importador do @code{pypi} normalmente fazer um bom trabalho (@pxref{Invocando guix import}), você pode se interessar em verificar a lista de verificação a seguir para determinar qual dependência vai onde."

#. type: itemize
#: guix-git/doc/contributing.texi:826
#, fuzzy
#| msgid "We currently package Python 2 with @code{setuptools} and @code{pip} installed like Python 3.4 has per default.  Thus you don't need to specify either of these as an input.  @command{guix lint} will warn you if you do."
msgid "We currently package Python with @code{setuptools} and @code{pip} installed per default.  This is about to change, and users are encouraged to use @code{python-toolchain} if they want a build environment for Python."
msgstr "Atualmente empacotamos Python 2 com @code{setuptools} e @code{pip} instalado como Python 3.4 tem por padrão. Então, você não precisa especificar nenhum deles como entrada. @command{guix lint} vai avisar você se precisar."

#. type: itemize
#: guix-git/doc/contributing.texi:829
msgid "@command{guix lint} will warn if @code{setuptools} or @code{pip} are added as native-inputs because they are generally not necessary."
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:835
msgid "Python dependencies required at run time go into @code{propagated-inputs}.  They are typically defined with the @code{install_requires} keyword in @file{setup.py}, or in the @file{requirements.txt} file."
msgstr "Dependências de Python necessárias em tempo de execução vão em @code{propagated-inputs}. Elas geralmente são definidas com a palavra-chave @code{install_requires} em @file{setup.py} ou no arquivo @file{requirements.txt}."

#. type: itemize
#: guix-git/doc/contributing.texi:844
#, fuzzy
#| msgid "Python packages required only at build time---e.g., those listed with the @code{setup_requires} keyword in @file{setup.py}---or only for testing---e.g., those in @code{tests_require}---go into @code{native-inputs}.  The rationale is that (1) they do not need to be propagated because they are not needed at run time, and (2) in a cross-compilation context, it's the ``native'' input that we'd want."
msgid "Python packages required only at build time---e.g., those listed under @code{build-system.requires} in @file{pyproject.toml} or with the @code{setup_requires} keyword in @file{setup.py}---or dependencies only for testing---e.g., those in @code{tests_require} or @file{tox.ini}---go into @code{native-inputs}.  The rationale is that (1) they do not need to be propagated because they are not needed at run time, and (2) in a cross-compilation context, it's the ``native'' input that we'd want."
msgstr "Pacotes Python necessários apenas em tempo de compilação -- p.ex., aqueles listados com a palavra-chave @code{setup_requires} em @file{setup.py} -- ou apenas para teste -- p.ex., aqueles em @code{tests_require} -- vão em @code{native-inputs}. O motivo é que (1) eles não precisam ser propagados porque não são necessários em tempo de execução e (2) em um contexto de compilação cruzada, é a entrada ``nativa'' que nós queremos."

#. type: itemize
#: guix-git/doc/contributing.texi:848
msgid "Examples are the @code{pytest}, @code{mock}, and @code{nose} test frameworks.  Of course if any of these packages is also required at run-time, it needs to go to @code{propagated-inputs}."
msgstr "Exemplos são os frameworks de teste @code{pytest}, @code{mock} e @code{nose}. É claro, se qualquer um desses pacotes também for necessário em tempo de compilação, ele precisa ir para @code{propagated-inputs}."

#. type: itemize
#: guix-git/doc/contributing.texi:853
msgid "Anything that does not fall in the previous categories goes to @code{inputs}, for example programs or C libraries required for building Python packages containing C extensions."
msgstr "Qualquer coisa que não encaixar nas categorias anteriores vai para @code{inputs}. Por exemplo, programas ou bibliotecas C necessárias para compilar pacotes Python contendo extensões C."

#. type: itemize
#: guix-git/doc/contributing.texi:859
msgid "If a Python package has optional dependencies (@code{extras_require}), it is up to you to decide whether to add them or not, based on their usefulness/overhead ratio (@pxref{Submitting Patches, @command{guix size}})."
msgstr "Se um pacote Python tem dependências opcionais (@code{extras_require}), fica a seu critério adicioná-las ou não, com base na sua proporção de utilidade/sobrecarga (@pxref{Enviando patches, @command{guix size}})."

#. type: cindex
#: guix-git/doc/contributing.texi:866
#, no-wrap
msgid "perl"
msgstr "perl"

#. type: Plain text
#: guix-git/doc/contributing.texi:877
msgid "Perl programs standing for themselves are named as any other package, using the lowercase upstream name.  For Perl packages containing a single class, we use the lowercase class name, replace all occurrences of @code{::} by dashes and prepend the prefix @code{perl-}.  So the class @code{XML::Parser} becomes @code{perl-xml-parser}.  Modules containing several classes keep their lowercase upstream name and are also prepended by @code{perl-}.  Such modules tend to have the word @code{perl} somewhere in their name, which gets dropped in favor of the prefix.  For instance, @code{libwww-perl} becomes @code{perl-libwww}."
msgstr "Os programas Perl próprios são nomeados como qualquer outro pacote, usando o nome upstream em letras minúsculas. Para pacotes Perl que contêm uma única classe, usamos o nome da classe em letras minúsculas, substituímos todas as ocorrências de @code{::} por traços e precede o prefixo @code{perl-}. Portanto, a classe @code{XML::Parser} se torna @code{perl-xml-parser}. Módulos contendo várias classes mantêm seu nome upstream em minúsculas e também são precedidos por @code{perl-}. Esses módulos tendem a ter a palavra @code{perl} em algum lugar do nome, que é descartada em favor do prefixo. Por exemplo, @code{libwww-perl} se torna @code{perl-libwww}."

#. type: cindex
#: guix-git/doc/contributing.texi:882
#, no-wrap
msgid "java"
msgstr "java"

#. type: Plain text
#: guix-git/doc/contributing.texi:885
msgid "Java programs standing for themselves are named as any other package, using the lowercase upstream name."
msgstr "Os programas Java próprios são nomeados como qualquer outro pacote, usando o nome do upstream em letras minúsculas."

#. type: Plain text
#: guix-git/doc/contributing.texi:891
msgid "To avoid confusion and naming clashes with other programming languages, it is desirable that the name of a package for a Java package is prefixed with @code{java-}.  If a project already contains the word @code{java}, we drop this; for instance, the package @code{ngsjava} is packaged under the name @code{java-ngs}."
msgstr "Para evitar confusão e conflitos de nomes com outras linguagens de programação, é desejável que o nome de um pacote para um pacote Java seja prefixado com @code{java-}. Se um projeto já contém a palavra @code{java}, descartamos isso; por exemplo, o pacote @code{ngsjava} é empacotado com o nome @code{java-ngs}."

#. type: Plain text
#: guix-git/doc/contributing.texi:897
msgid "For Java packages containing a single class or a small class hierarchy, we use the lowercase class name, replace all occurrences of @code{.} by dashes and prepend the prefix @code{java-}.  So the class @code{apache.commons.cli} becomes package @code{java-apache-commons-cli}."
msgstr "Para pacotes Java que contêm uma única classe ou uma pequena hierarquia de classes, usamos o nome da classe em letras minúsculas, substitua todas as ocorrências de @code{.} por traços e acrescente o prefixo @code{java-}. Assim, a classe @code{apache.commons.cli} se torna o pacote @code{java-apache-commons-cli}."

#. type: cindex
#: guix-git/doc/contributing.texi:902
#, no-wrap
msgid "rust"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:905
msgid "Rust programs standing for themselves are named as any other package, using the lowercase upstream name."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:909
msgid "To prevent namespace collisions we prefix all other Rust packages with the @code{rust-} prefix.  The name should be changed to lowercase as appropriate and dashes should remain in place."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:915
msgid "In the rust ecosystem it is common for multiple incompatible versions of a package to be used at any given time, so all package definitions should have a versioned suffix.  The versioned suffix is the left-most non-zero digit (and any leading zeros, of course).  This follows the ``caret'' version scheme intended by Cargo.  Examples@: @code{rust-clap-2}, @code{rust-rand-0.6}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:925
msgid "Because of the difficulty in reusing rust packages as pre-compiled inputs for other packages the Cargo build system (@pxref{Build Systems, @code{cargo-build-system}}) presents the @code{#:cargo-inputs} and @code{cargo-development-inputs} keywords as build system arguments.  It would be helpful to think of these as similar to @code{propagated-inputs} and @code{native-inputs}.  Rust @code{dependencies} and @code{build-dependencies} should go in @code{#:cargo-inputs}, and @code{dev-dependencies} should go in @code{#:cargo-development-inputs}.  If a Rust package links to other libraries then the standard placement in @code{inputs} and the like should be used."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:931
msgid "Care should be taken to ensure the correct version of dependencies are used; to this end we try to refrain from skipping the tests or using @code{#:skip-build?} when possible.  Of course this is not always possible, as the package may be developed for a different Operating System, depend on features from the Nightly Rust compiler, or the test suite may have atrophied since it was released."
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:936
#, no-wrap
msgid "Elm"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:939
msgid "Elm applications can be named like other software: their names need not mention Elm."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:945
msgid "Packages in the Elm sense (see @code{elm-build-system} under @ref{Build Systems}) are required use names of the format @var{author}@code{/}@var{project}, where both the @var{author} and the @var{project} may contain hyphens internally, and the @var{author} sometimes contains uppercase letters."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:949
msgid "To form the Guix package name from the upstream name, we follow a convention similar to Python packages (@pxref{Python Modules}), adding an @code{elm-} prefix unless the name would already begin with @code{elm-}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:956
msgid "In many cases we can reconstruct an Elm package's upstream name heuristically, but, since conversion to a Guix-style name involves a loss of information, this is not always possible.  Care should be taken to add the @code{'upstream-name} property when necessary so that @samp{guix import elm} will work correctly (@pxref{Invoking guix import}). The most notable scenarios when explicitly specifying the upstream name is necessary are:"
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:961
msgid "When the @var{author} is @code{elm} and the @var{project} contains one or more hyphens, as with @code{elm/virtual-dom}; and"
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:968
msgid "When the @var{author} contains hyphens or uppercase letters, as with @code{Elm-Canvas/raster-shapes}---unless the @var{author} is @code{elm-explorations}, which is handled as a special case, so packages like @code{elm-explorations/markdown} do @emph{not} need to use the @code{'upstream-name} property."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:972
msgid "The module @code{(guix build-system elm)} provides the following utilities for working with names and related conventions:"
msgstr ""

#. type: deffn
#: guix-git/doc/contributing.texi:973
#, no-wrap
msgid "{Scheme procedure} elm-package-origin @var{elm-name} @var{version} @"
msgstr ""

#. type: deffn
#: guix-git/doc/contributing.texi:978
msgid "@var{hash} Returns a Git origin using the repository naming and tagging regime required for a published Elm package with the upstream name @var{elm-name} at version @var{version} with sha256 checksum @var{hash}."
msgstr ""

#. #-#-#-#-#  contributing.pot (guix manual checkout)  #-#-#-#-#
#. type: deffn
#. #-#-#-#-#  guix.pot (guix manual checkout)  #-#-#-#-#
#. type: defun
#: guix-git/doc/contributing.texi:980 guix-git/doc/guix.texi:35183
#: guix-git/doc/guix.texi:38812
msgid "For example:"
msgstr ""

#. type: lisp
#: guix-git/doc/contributing.texi:990
#, no-wrap
msgid ""
"(package\n"
"  (name \"elm-html\")\n"
"  (version \"1.0.0\")\n"
"  (source\n"
"   (elm-package-origin\n"
"    \"elm/html\"\n"
"    version\n"
"    (base32 \"15k1679ja57vvlpinpv06znmrxy09lbhzfkzdc89i01qa8c4gb4a\")))\n"
"  ...)\n"
msgstr ""

#. type: deffn
#: guix-git/doc/contributing.texi:993
#, no-wrap
msgid "{Scheme procedure} elm->package-name @var{elm-name}"
msgstr ""

#. type: deffn
#: guix-git/doc/contributing.texi:996
msgid "Returns the Guix-style package name for an Elm package with upstream name @var{elm-name}."
msgstr ""

#. type: deffn
#: guix-git/doc/contributing.texi:999
msgid "Note that there is more than one possible @var{elm-name} for which @code{elm->package-name} will produce a given result."
msgstr ""

#. type: deffn
#: guix-git/doc/contributing.texi:1001
#, no-wrap
msgid "{Scheme procedure} guix-package->elm-name @var{package}"
msgstr ""

#. type: deffn
#: guix-git/doc/contributing.texi:1005
msgid "Given an Elm @var{package}, returns the possibly-inferred upstream name, or @code{#f} the upstream name is not specified via the @code{'upstream-name} property and can not be inferred by @code{infer-elm-package-name}."
msgstr ""

#. type: deffn
#: guix-git/doc/contributing.texi:1007
#, no-wrap
msgid "{Scheme procedure} infer-elm-package-name @var{guix-name}"
msgstr ""

#. type: deffn
#: guix-git/doc/contributing.texi:1012
msgid "Given the @var{guix-name} of an Elm package, returns the inferred upstream name, or @code{#f} if the upstream name can't be inferred.  If the result is not @code{#f}, supplying it to @code{elm->package-name} would produce @var{guix-name}."
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1017 guix-git/doc/guix.texi:2083
#, no-wrap
msgid "fonts"
msgstr "fontes"

#. type: Plain text
#: guix-git/doc/contributing.texi:1023
msgid "For fonts that are in general not installed by a user for typesetting purposes, or that are distributed as part of a larger software package, we rely on the general packaging rules for software; for instance, this applies to the fonts delivered as part of the X.Org system or fonts that are part of TeX Live."
msgstr "Para fontes que geralmente não são instaladas por um usuário para fins de digitação ou que são distribuídas como parte de um pacote de software maior, contamos com as regras gerais de empacotamento de software; por exemplo, isso se aplica às fontes entregues como parte do sistema X.Org ou às fontes que fazem parte do TeX Live."

#. type: Plain text
#: guix-git/doc/contributing.texi:1027
msgid "To make it easier for a user to search for fonts, names for other packages containing only fonts are constructed as follows, independently of the upstream package name."
msgstr "Para facilitar a busca de fontes por um usuário, os nomes de outros pacotes contendo apenas fontes são compilados da seguinte maneira, independentemente do nome do pacote upstream."

#. type: Plain text
#: guix-git/doc/contributing.texi:1035
msgid "The name of a package containing only one font family starts with @code{font-}; it is followed by the foundry name and a dash @code{-} if the foundry is known, and the font family name, in which spaces are replaced by dashes (and as usual, all upper case letters are transformed to lower case).  For example, the Gentium font family by SIL is packaged under the name @code{font-sil-gentium}."
msgstr "O nome de um pacote que contém apenas uma família de fontes começa com @code{font-}; é seguido pelo nome da fundição e um traço @code{-} se a fundição for conhecida e o nome da família da fonte, em que os espaços são substituídos por hífenes (e, como sempre, todas as letras maiúsculas são transformadas em minúsculas). Por exemplo, a família de fontes Gentium da SIL é empacotada com o nome @code{font-sil-gentium}."

#. type: Plain text
#: guix-git/doc/contributing.texi:1044
msgid "For a package containing several font families, the name of the collection is used in the place of the font family name.  For instance, the Liberation fonts consist of three families, Liberation Sans, Liberation Serif and Liberation Mono.  These could be packaged separately under the names @code{font-liberation-sans} and so on; but as they are distributed together under a common name, we prefer to package them together as @code{font-liberation}."
msgstr "Para um pacote que contém várias famílias de fontes, o nome da coleção é usado no lugar do nome da família de fontes. Por exemplo, as fontes Liberation consistem em três famílias, Liberation Sans, Liberation Serif e Liberation Mono. Eles podem ser empacotados separadamente com os nomes @code{font-liberation-sans} e assim por diante; mas como eles são distribuídos juntos com um nome comum, preferimos agrupá-los como @code{font-liberation}."

#. type: Plain text
#: guix-git/doc/contributing.texi:1050
msgid "In the case where several formats of the same font family or font collection are packaged separately, a short form of the format, prepended by a dash, is added to the package name.  We use @code{-ttf} for TrueType fonts, @code{-otf} for OpenType fonts and @code{-type1} for PostScript Type 1 fonts."
msgstr "No caso de vários formatos da mesma família ou coleção de fontes serem empacotados separadamente, um formato abreviado do formato, precedido por um traço, é adicionado ao nome do pacote. Usamos @code{-ttf} para fontes TrueType, @code{-otf} para fontes OpenType e @code{-type1} para fontes PostScript Type 1."

#. type: Plain text
#: guix-git/doc/contributing.texi:1058
msgid "In general our code follows the GNU Coding Standards (@pxref{Top,,, standards, GNU Coding Standards}).  However, they do not say much about Scheme, so here are some additional rules."
msgstr "Em geral, nosso código segue os Padrões de Codificação GNU (@pxref{Top ,,, standards, GNU Coding Standards}). No entanto, eles não dizem muito sobre Scheme, então aqui estão algumas regras adicionais."

#. type: subsection
#: guix-git/doc/contributing.texi:1064 guix-git/doc/contributing.texi:1066
#: guix-git/doc/contributing.texi:1067
#, no-wrap
msgid "Programming Paradigm"
msgstr "Paradigma de programação"

#. type: menuentry
#: guix-git/doc/contributing.texi:1064
msgid "How to compose your elements."
msgstr "Como compor seus elementos."

#. type: subsection
#: guix-git/doc/contributing.texi:1064 guix-git/doc/contributing.texi:1073
#: guix-git/doc/contributing.texi:1074
#, no-wrap
msgid "Modules"
msgstr "Módulos"

#. type: menuentry
#: guix-git/doc/contributing.texi:1064
msgid "Where to store your code?"
msgstr "Onde armazenar seu código?"

#. type: subsection
#: guix-git/doc/contributing.texi:1064 guix-git/doc/contributing.texi:1084
#: guix-git/doc/contributing.texi:1085
#, no-wrap
msgid "Data Types and Pattern Matching"
msgstr "Tipos de dados e correspondência de padrão"

#. type: menuentry
#: guix-git/doc/contributing.texi:1064
msgid "Implementing data structures."
msgstr "Implementação de estruturas de dados."

#. type: subsection
#: guix-git/doc/contributing.texi:1064 guix-git/doc/contributing.texi:1104
#: guix-git/doc/contributing.texi:1105
#, no-wrap
msgid "Formatting Code"
msgstr "Formatação de código"

#. type: menuentry
#: guix-git/doc/contributing.texi:1064
msgid "Writing conventions."
msgstr "Convenções de escrita."

#. type: Plain text
#: guix-git/doc/contributing.texi:1072
msgid "Scheme code in Guix is written in a purely functional style.  One exception is code that involves input/output, and procedures that implement low-level concepts, such as the @code{memoize} procedure."
msgstr "O código Scheme no Guix é escrito em um estilo puramente funcional. Uma exceção é o código que envolve entrada/saída e procedimentos que implementam conceitos de baixo nível, como o procedimento @code{memoize}."

#. type: Plain text
#: guix-git/doc/contributing.texi:1080
msgid "Guile modules that are meant to be used on the builder side must live in the @code{(guix build @dots{})} name space.  They must not refer to other Guix or GNU modules.  However, it is OK for a ``host-side'' module to use a build-side module."
msgstr "Os módulos de Guile que devem ser usados no lado do compilador devem residir no espaço de nomes @code{(guix build @dots{})}. Eles não devem fazer referência a outros módulos Guix ou GNU. No entanto, é aceitável que um módulo no lado do ``hospedeiro'' use um módulo do lado do compilador."

#. type: Plain text
#: guix-git/doc/contributing.texi:1083
msgid "Modules that deal with the broader GNU system should be in the @code{(gnu @dots{})} name space rather than @code{(guix @dots{})}."
msgstr "Módulos que lidam com o sistema GNU mais amplo devem estar no espaço de nome @code{(gnu @dots{})} em vez de @code{(guix @dots{})}."

#. type: Plain text
#: guix-git/doc/contributing.texi:1092
msgid "The tendency in classical Lisp is to use lists to represent everything, and then to browse them ``by hand'' using @code{car}, @code{cdr}, @code{cadr}, and co.  There are several problems with that style, notably the fact that it is hard to read, error-prone, and a hindrance to proper type error reports."
msgstr "A tendência no Lisp clássico é usar listas para representar tudo e, em seguida, pesquisá-las ``à mão'' usando @code{car}, @code{cdr}, @code{cadr} e co. Existem vários problemas com esse estilo, notadamente o fato de que é difícil de ler, propenso a erros e um obstáculo para os relatórios de erros de tipos adequados."

#. type: findex
#: guix-git/doc/contributing.texi:1093
#, no-wrap
msgid "define-record-type*"
msgstr ""

#. type: findex
#: guix-git/doc/contributing.texi:1094
#, no-wrap
msgid "match-record"
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1095
#, fuzzy, no-wrap
#| msgid "Data Types and Pattern Matching"
msgid "pattern matching"
msgstr "Tipos de dados e correspondência de padrão"

#. type: Plain text
#: guix-git/doc/contributing.texi:1103
msgid "Guix code should define appropriate data types (for instance, using @code{define-record-type*}) rather than abuse lists.  In addition, it should use pattern matching, via Guile’s @code{(ice-9 match)} module, especially when matching lists (@pxref{Pattern Matching,,, guile, GNU Guile Reference Manual}); pattern matching for records is better done using @code{match-record} from @code{(guix records)}, which, unlike @code{match}, verifies field names at macro-expansion time."
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1107
#, no-wrap
msgid "formatting code"
msgstr "formatação de código"

#. type: cindex
#: guix-git/doc/contributing.texi:1108
#, no-wrap
msgid "coding style"
msgstr "estilo de codificação"

#. type: Plain text
#: guix-git/doc/contributing.texi:1115
msgid "When writing Scheme code, we follow common wisdom among Scheme programmers.  In general, we follow the @url{https://mumble.net/~campbell/scheme/style.txt, Riastradh's Lisp Style Rules}.  This document happens to describe the conventions mostly used in Guile’s code too.  It is very thoughtful and well written, so please do read it."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1122
msgid "Some special forms introduced in Guix, such as the @code{substitute*} macro, have special indentation rules.  These are defined in the @file{.dir-locals.el} file, which Emacs automatically uses.  Also note that Emacs-Guix provides @code{guix-devel-mode} mode that indents and highlights Guix code properly (@pxref{Development,,, emacs-guix, The Emacs-Guix Reference Manual})."
msgstr "Alguns formulários especiais introduzidos no Guix, como a macro @code{substitute*}, possuem regras especiais de recuo. Estes são definidos no arquivo @file{.dir-locals.el}, que o Emacs usa automaticamente. Observe também que o Emacs-Guix fornece o modo @code{guix-devel-mode} que recua e destaca o código Guix corretamente (@pxref{Development ,,, emacs-guix, O manual de referência do Emacs-Guix})."

#. type: cindex
#: guix-git/doc/contributing.texi:1123
#, no-wrap
msgid "indentation, of code"
msgstr "recuo, de código"

#. type: cindex
#: guix-git/doc/contributing.texi:1124
#, no-wrap
msgid "formatting, of code"
msgstr "formatação, de código"

#. type: Plain text
#: guix-git/doc/contributing.texi:1127
msgid "If you do not use Emacs, please make sure to let your editor knows these rules.  To automatically indent a package definition, you can also run:"
msgstr "Se você não usa o Emacs, por favor, certifique-se que o seu editor conhece estas regras. Para recuar automaticamente uma definição de pacote, você também pode executar:"

#. type: example
#: guix-git/doc/contributing.texi:1130
#, fuzzy, no-wrap
#| msgid "./pre-inst-env guix build gnew --keep-failed\n"
msgid "./pre-inst-env guix style @var{package}\n"
msgstr "./pre-inst-env guix build gnew --keep-failed\n"

#. type: Plain text
#: guix-git/doc/contributing.texi:1134
#, fuzzy
#| msgid "@xref{Invoking guix pack}, for more info on this handy tool."
msgid "@xref{Invoking guix style}, for more information."
msgstr "@xref{Invocando guix pack}, para mais informações sobre essa ferramenta útil."

#. type: cindex
#: guix-git/doc/contributing.texi:1135
#, no-wrap
msgid "Vim, Scheme code editing"
msgstr "Vim, edição de código Scheme"

#. type: Plain text
#: guix-git/doc/contributing.texi:1141
msgid "If you are editing code with Vim, we recommend that you run @code{:set autoindent} so that your code is automatically indented as you type.  Additionally, @uref{https://www.vim.org/scripts/script.php?script_id=3998, @code{paredit.vim}} may help you deal with all these parentheses."
msgstr "Se você estiver editando código com o Vim, recomendamos que execute @code{:set autoindent} para que seu código seja automaticamente recuado na medida em que você digita. Além disso, o @uref{https://www.vim.org/scripts/script.php?script_id=3998, @code{paredit.vim}} pode ajudá-lo a lidar com todos esses parênteses."

#. type: Plain text
#: guix-git/doc/contributing.texi:1145
msgid "We require all top-level procedures to carry a docstring.  This requirement can be relaxed for simple private procedures in the @code{(guix build @dots{})} name space, though."
msgstr "Nós exigimos que todos os procedimentos de nível superior carreguem uma docstring. Porém, este requisito pode ser relaxado para procedimentos privados simples no espaço de nomes @code{(guix build @dots{})}."

#. type: Plain text
#: guix-git/doc/contributing.texi:1148
msgid "Procedures should not have more than four positional parameters.  Use keyword parameters for procedures that take more than four parameters."
msgstr "Os procedimentos não devem ter mais de quatro parâmetros posicionais. Use os parâmetros de palavra-chave para procedimentos que levam mais de quatro parâmetros."

#. type: Plain text
#: guix-git/doc/contributing.texi:1162
msgid "Development is done using the Git distributed version control system.  Thus, access to the repository is not strictly necessary.  We welcome contributions in the form of patches as produced by @code{git format-patch} sent to the @email{guix-patches@@gnu.org} mailing list (@pxref{Submitting patches to a project,,, git, Git User Manual}).  Contributors are encouraged to take a moment to set some Git repository options (@pxref{Configuring Git}) first, which can improve the readability of patches.  Seasoned Guix developers may also want to look at the section on commit access (@pxref{Commit Access})."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1169
msgid "This mailing list is backed by a Debbugs instance, which allows us to keep track of submissions (@pxref{Tracking Bugs and Patches}).  Each message sent to that mailing list gets a new tracking number assigned; people can then follow up on the submission by sending email to @code{@var{ISSUE_NUMBER}@@debbugs.gnu.org}, where @var{ISSUE_NUMBER} is the tracking number (@pxref{Sending a Patch Series})."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1173
msgid "Please write commit logs in the ChangeLog format (@pxref{Change Logs,,, standards, GNU Coding Standards}); you can check the commit history for examples."
msgstr "Por favor, escreva os logs de commit no formato de ChangeLog (@pxref{Change Logs ,,, standards, GNU Coding Standards}); você pode verificar o histórico de commit para exemplos."

#. type: Plain text
#: guix-git/doc/contributing.texi:1183
msgid "You can help make the review process more efficient, and increase the chance that your patch will be reviewed quickly, by describing the context of your patch and the impact you expect it to have.  For example, if your patch is fixing something that is broken, describe the problem and how your patch fixes it.  Tell us how you have tested your patch.  Will users of the code changed by your patch have to adjust their workflow at all? If so, tell us how.  In general, try to imagine what questions a reviewer will ask, and answer those questions in advance."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1186
msgid "Before submitting a patch that adds or modifies a package definition, please run through this check list:"
msgstr "Antes de enviar um patch que adicione ou modifique uma definição de pacote, execute esta lista de verificação:"

#. type: enumerate
#: guix-git/doc/contributing.texi:1193
msgid "If the authors of the packaged software provide a cryptographic signature for the release tarball, make an effort to verify the authenticity of the archive.  For a detached GPG signature file this would be done with the @code{gpg --verify} command."
msgstr "Se os autores do software empacotado fornecerem uma assinatura criptográfica para o tarball de lançamento, faça um esforço para verificar a autenticidade do arquivo. Para um arquivo de assinatura GPG separado, isso seria feito com o comando @code{gpg --verify}."

#. type: enumerate
#: guix-git/doc/contributing.texi:1197
msgid "Take some time to provide an adequate synopsis and description for the package.  @xref{Synopses and Descriptions}, for some guidelines."
msgstr "Reserve algum tempo para fornecer uma sinopse e descrição adequadas para o pacote. @xref{Sinopses e descrições}, para algumas diretrizes."

#. type: enumerate
#: guix-git/doc/contributing.texi:1202
msgid "Run @code{guix lint @var{package}}, where @var{package} is the name of the new or modified package, and fix any errors it reports (@pxref{Invoking guix lint})."
msgstr "Execute @code{guix lint @var{pacote}}, sendo @var{pacote} o nome do pacote novo ou modificado e corrija quaisquer erros que forem relatados (@pxref{Invocando guix lint})."

#. type: enumerate
#: guix-git/doc/contributing.texi:1206
#, fuzzy
#| msgid "Run @code{guix lint @var{package}}, where @var{package} is the name of the new or modified package, and fix any errors it reports (@pxref{Invoking guix lint})."
msgid "Run @code{guix style @var{package}} to format the new package definition according to the project's conventions (@pxref{Invoking guix style})."
msgstr "Execute @code{guix lint @var{pacote}}, sendo @var{pacote} o nome do pacote novo ou modificado e corrija quaisquer erros que forem relatados (@pxref{Invocando guix lint})."

#. type: enumerate
#: guix-git/doc/contributing.texi:1210
msgid "Make sure the package builds on your platform, using @code{guix build @var{package}}."
msgstr "Certifique-se de que o pacote compila em sua plataforma, usando @code{guix build @var{pacote}}."

#. type: enumerate
#: guix-git/doc/contributing.texi:1218
#, fuzzy
#| msgid "We recommend you also try building the package on other supported platforms.  As you may not have access to actual hardware platforms, we recommend using the @code{qemu-binfmt-service-type} to emulate them.  In order to enable it, add the following service to the list of services in your @code{operating-system} configuration:"
msgid "We recommend you also try building the package on other supported platforms.  As you may not have access to actual hardware platforms, we recommend using the @code{qemu-binfmt-service-type} to emulate them.  In order to enable it, add the @code{virtualization} service module and the following service to the list of services in your @code{operating-system} configuration:"
msgstr "Recomendamos que você também tente compilar o pacote em outras plataformas suportadas. Como você pode não ter acesso às plataformas de hardware reais, recomendamos o uso do @code{qemu-binfmt-service-type} para emulá-las. Para habilitar isso, adicione o seguinte serviço à lista de serviços na sua configuração @code{operating-system}:"

#. type: lisp
#: guix-git/doc/contributing.texi:1223
#, no-wrap
msgid ""
"(service qemu-binfmt-service-type\n"
" (qemu-binfmt-configuration\n"
"   (platforms (lookup-qemu-platforms \"arm\" \"aarch64\"))))\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:1226
msgid "Then reconfigure your system."
msgstr "Então, reconfigure seu sistema."

#. type: enumerate
#: guix-git/doc/contributing.texi:1231
#, fuzzy
#| msgid "You can then build packages for different platforms by specifying the @code{--system} option.  For example, to build the \"hello\" package for the armhf, aarch64, or mips64 architectures, you would run the following commands, respectively:"
msgid "You can then build packages for different platforms by specifying the @code{--system} option.  For example, to build the \"hello\" package for the armhf or aarch64 architectures, you would run the following commands, respectively:"
msgstr "Você pode criar pacotes para plataformas diferentes especificando a opção @code{--system}. Por exemplo, para compilar o pacote \"hello\" para as arquiteturas armhf, aarch64 ou mips64, você executaria os seguintes comandos, respectivamente:"

#. type: example
#: guix-git/doc/contributing.texi:1234
#, no-wrap
msgid ""
"guix build --system=armhf-linux --rounds=2 hello\n"
"guix build --system=aarch64-linux --rounds=2 hello\n"
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1237
#, no-wrap
msgid "bundling"
msgstr "incorporando"

#. type: enumerate
#: guix-git/doc/contributing.texi:1240
msgid "Make sure the package does not use bundled copies of software already available as separate packages."
msgstr "Verifique se o pacote não usa cópias de software já disponíveis como pacotes separados."

#. type: enumerate
#: guix-git/doc/contributing.texi:1249
msgid "Sometimes, packages include copies of the source code of their dependencies as a convenience for users.  However, as a distribution, we want to make sure that such packages end up using the copy we already have in the distribution, if there is one.  This improves resource usage (the dependency is built and stored only once), and allows the distribution to make transverse changes such as applying security updates for a given software package in a single place and have them affect the whole system---something that bundled copies prevent."
msgstr "Às vezes, os pacotes incluem cópias do código-fonte de suas dependências como uma conveniência para os usuários. No entanto, como uma distribuição, queremos garantir que esses pacotes acabem usando a cópia que já temos na distribuição, se houver. Isso melhora o uso de recursos (a dependência é criada e armazenada apenas uma vez) e permite que a distribuição faça alterações transversais, como aplicar atualizações de segurança para um determinado pacote de software em um único local e fazê-las afetar todo o sistema -- algo que cópias incluídas impedem."

#. type: enumerate
#: guix-git/doc/contributing.texi:1258
msgid "Take a look at the profile reported by @command{guix size} (@pxref{Invoking guix size}).  This will allow you to notice references to other packages unwillingly retained.  It may also help determine whether to split the package (@pxref{Packages with Multiple Outputs}), and which optional dependencies should be used.  In particular, avoid adding @code{texlive} as a dependency: because of its extreme size, use the @code{texlive-tiny} package or @code{texlive-union} procedure instead."
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:1263
#, fuzzy
#| msgid "For important changes, check that dependent package (if applicable) are not affected by the change; @code{guix refresh --list-dependent @var{package}} will help you do that (@pxref{Invoking guix refresh})."
msgid "For important changes, check that dependent packages (if applicable) are not affected by the change; @code{guix refresh --list-dependent @var{package}} will help you do that (@pxref{Invoking guix refresh})."
msgstr "Para alterações importantes, verifique se o pacote dependente (se aplicável) não é afetado pela alteração; @code{guix refresh --list-dependent @var{pacote}} ajudará você a fazer isso (@pxref{Invocando guix refresh})."

#. type: cindex
#: guix-git/doc/contributing.texi:1265
#, no-wrap
msgid "branching strategy"
msgstr "estratégia de ramificação"

#. type: cindex
#: guix-git/doc/contributing.texi:1266
#, no-wrap
msgid "rebuild scheduling strategy"
msgstr "estratégia de agendamento de recompilação"

#. type: enumerate
#: guix-git/doc/contributing.texi:1269
msgid "Depending on the number of dependent packages and thus the amount of rebuilding induced, commits go to different branches, along these lines:"
msgstr "Dependendo do número de pacotes dependentes e, portanto, da quantidade de recompilação induzida, os commits vão para diferentes ramos, ao longo das seguintes linhas:"

#. type: item
#: guix-git/doc/contributing.texi:1271
#, no-wrap
msgid "300 dependent packages or less"
msgstr "300 pacotes dependentes ou menos"

#. type: table
#: guix-git/doc/contributing.texi:1273
msgid "@code{master} branch (non-disruptive changes)."
msgstr "Ramo @code{master} (alterações não disruptivas)."

#. type: item
#: guix-git/doc/contributing.texi:1274
#, no-wrap
msgid "between 300 and 1,800 dependent packages"
msgstr ""

#. type: table
#: guix-git/doc/contributing.texi:1280
msgid "@code{staging} branch (non-disruptive changes).  This branch is intended to be merged in @code{master} every 6 weeks or so.  Topical changes (e.g., an update of the GNOME stack) can instead go to a specific branch (say, @code{gnome-updates}).  This branch is not expected to be buildable or usable until late in its development process."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:1281
#, no-wrap
msgid "more than 1,800 dependent packages"
msgstr ""

#. type: table
#: guix-git/doc/contributing.texi:1286
msgid "@code{core-updates} branch (may include major and potentially disruptive changes).  This branch is intended to be merged in @code{master} every 6 months or so.  This branch is not expected to be buildable or usable until late in its development process."
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:1293
msgid "All these branches are @uref{https://@value{SUBSTITUTE-SERVER-1}, tracked by our build farm} and merged into @code{master} once everything has been successfully built.  This allows us to fix issues before they hit users, and to reduce the window during which pre-built binaries are not available."
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:1302
msgid "When we decide to start building the @code{staging} or @code{core-updates} branches, they will be forked and renamed with the suffix @code{-frozen}, at which time only bug fixes may be pushed to the frozen branches.  The @code{core-updates} and @code{staging} branches will remain open to accept patches for the next cycle.  Please ask on the mailing list or IRC if unsure where to place a patch."
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1304
#, no-wrap
msgid "determinism, of build processes"
msgstr "determinismo, de processos de compilação"

#. type: cindex
#: guix-git/doc/contributing.texi:1305
#, no-wrap
msgid "reproducible builds, checking"
msgstr "compilações reproduzíveis, verificação"

#. type: enumerate
#: guix-git/doc/contributing.texi:1309
msgid "Check whether the package's build process is deterministic.  This typically means checking whether an independent build of the package yields the exact same result that you obtained, bit for bit."
msgstr "Verifique se o processo de compilação do pacote é determinístico. Isso normalmente significa verificar se uma compilação independente do pacote produz o mesmo resultado que você obteve, bit por bit."

#. type: enumerate
#: guix-git/doc/contributing.texi:1312
msgid "A simple way to do that is by building the same package several times in a row on your machine (@pxref{Invoking guix build}):"
msgstr "Uma maneira simples de fazer isso é compilar o mesmo pacote várias vezes seguidas em sua máquina (@pxref{Invocando guix build}):"

#. type: example
#: guix-git/doc/contributing.texi:1315
#, no-wrap
msgid "guix build --rounds=2 my-package\n"
msgstr "guix build --rounds=2 meu-pacote\n"

#. type: enumerate
#: guix-git/doc/contributing.texi:1319
msgid "This is enough to catch a class of common non-determinism issues, such as timestamps or randomly-generated output in the build result."
msgstr "Isso é suficiente para capturar uma classe de problemas comuns de não-determinismo, como registros de data e hora ou saída gerada aleatoriamente no resultado da compilação."

#. type: enumerate
#: guix-git/doc/contributing.texi:1329
#, fuzzy
#| msgid "Another option is to use @command{guix challenge} (@pxref{Invoking guix challenge}).  You may run it once the package has been committed and built by @code{@value{SUBSTITUTE-SERVER}} to check whether it obtains the same result as you did.  Better yet: Find another machine that can build it and run @command{guix publish}.  Since the remote build machine is likely different from yours, this can catch non-determinism issues related to the hardware---e.g., use of different instruction set extensions---or to the operating system kernel---e.g., reliance on @code{uname} or @file{/proc} files."
msgid "Another option is to use @command{guix challenge} (@pxref{Invoking guix challenge}).  You may run it once the package has been committed and built by @code{@value{SUBSTITUTE-SERVER-1}} to check whether it obtains the same result as you did.  Better yet: Find another machine that can build it and run @command{guix publish}.  Since the remote build machine is likely different from yours, this can catch non-determinism issues related to the hardware---e.g., use of different instruction set extensions---or to the operating system kernel---e.g., reliance on @code{uname} or @file{/proc} files."
msgstr "Outra opção é usar @command{guix challenge} (@pxref{Invocando guix challenge}). Você pode executá-lo uma vez que o pacote se tenha sido feito o commit e compilação por @code{SUBSTITUTE-SERVER} para verificar se obtém o mesmo resultado que você fez. Melhor ainda: encontre outra máquina que possa compilá-lo e executar @command{guix publish}. Como a máquina de compilação remota provavelmente é diferente da sua, isso pode capturar problemas de não determinismo relacionados ao hardware - por exemplo, uso de extensões de conjunto de instruções diferentes – ou ao kernel do sistema operacional – por exemplo, confiança em @code{uname} ou arquivos de @file{/proc}."

#. type: enumerate
#: guix-git/doc/contributing.texi:1335
msgid "When writing documentation, please use gender-neutral wording when referring to people, such as @uref{https://en.wikipedia.org/wiki/Singular_they, singular ``they''@comma{} ``their''@comma{} ``them''}, and so forth."
msgstr "Ao escrever documentação, por favor, use palavras de gênero neutras ao se referir a pessoas, como @uref{https://en.wikipedia.org/wiki/Singular_they, singular ``they''@comma{} ``their'' @comma{} ``them''}, e assim por diante."

#. type: enumerate
#: guix-git/doc/contributing.texi:1339
msgid "Verify that your patch contains only one set of related changes.  Bundling unrelated changes together makes reviewing harder and slower."
msgstr "Verifique se o seu patch contém apenas um conjunto de alterações relacionadas. Agrupar mudanças não relacionadas juntas torna a revisão mais difícil e lenta."

#. type: enumerate
#: guix-git/doc/contributing.texi:1342
msgid "Examples of unrelated changes include the addition of several packages, or a package update along with fixes to that package."
msgstr "Exemplos de alterações não relacionadas incluem a adição de vários pacotes ou uma atualização de pacote juntamente com correções para esse pacote."

#. type: enumerate
#: guix-git/doc/contributing.texi:1347
#, fuzzy
#| msgid "Please follow our code formatting rules, possibly running the @command{etc/indent-code.el} script to do that automatically for you (@pxref{Formatting Code})."
msgid "Please follow our code formatting rules, possibly running @command{guix style} script to do that automatically for you (@pxref{Formatting Code})."
msgstr "Siga nossas regras de formatação de código, possivelmente executando o script @command{etc/indent-code.el} para fazer isso automaticamente para você (@pxref{Formatação de código})."

#. type: enumerate
#: guix-git/doc/contributing.texi:1355
msgid "When possible, use mirrors in the source URL (@pxref{Invoking guix download}).  Use reliable URLs, not generated ones.  For instance, GitHub archives are not necessarily identical from one generation to the next, so in this case it's often better to clone the repository.  Don't use the @command{name} field in the URL: it is not very useful and if the name changes, the URL will probably be wrong."
msgstr "Quando possível, use espelhos no URL fonte (@pxref{Invocando guix download}). Use URLs confiáveis, não os gerados. Por exemplo, os arquivos do GitHub não são necessariamente idênticos de uma geração para a seguinte, portanto, nesse caso, geralmente é melhor clonar o repositório. Não use o campo @command{name} no URL: não é muito útil e se o nome mudar, o URL provavelmente estará errado."

#. type: enumerate
#: guix-git/doc/contributing.texi:1359
msgid "Check if Guix builds (@pxref{Building from Git}) and address the warnings, especially those about use of undefined symbols."
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:1362
msgid "Make sure your changes do not break Guix and simulate a @code{guix pull} with:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1364
#, no-wrap
msgid "guix pull --url=/path/to/your/checkout --profile=/tmp/guix.master\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1372
msgid "When posting a patch to the mailing list, use @samp{[PATCH] @dots{}} as a subject, if your patch is to be applied on a branch other than @code{master}, say @code{core-updates}, specify it in the subject like @samp{[PATCH core-updates] @dots{}}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1378
msgid "You may use your email client or the @command{git send-email} command (@pxref{Sending a Patch Series}).  We prefer to get patches in plain text messages, either inline or as MIME attachments.  You are advised to pay attention if your email client changes anything like line breaks or indentation which could potentially break the patches."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1383
msgid "Expect some delay when you submit your very first patch to @email{guix-patches@@gnu.org}. You have to wait until you get an acknowledgement with the assigned tracking number. Future acknowledgements should not be delayed."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1386
#, fuzzy
#| msgid "When a bug is resolved, please close the thread by sending an email to @email{@var{NNN}-done@@debbugs.gnu.org}."
msgid "When a bug is resolved, please close the thread by sending an email to @email{@var{ISSUE_NUMBER}-done@@debbugs.gnu.org}."
msgstr "Quando um erro for resolvido, feche o tópico enviando um e-mail para @email{@var{NNN}-done@@debbugs.gnu.org}."

#. type: subsection
#: guix-git/doc/contributing.texi:1387 guix-git/doc/contributing.texi:1388
#, no-wrap
msgid "Configuring Git"
msgstr "Configurando o Git"

#. type: cindex
#: guix-git/doc/contributing.texi:1389
#, no-wrap
msgid "git configuration"
msgstr "Configuração do git"

#. type: code{#1}
#: guix-git/doc/contributing.texi:1390 guix-git/doc/contributing.texi:1407
#, no-wrap
msgid "git format-patch"
msgstr ""

#. type: code{#1}
#: guix-git/doc/contributing.texi:1391 guix-git/doc/contributing.texi:1406
#, no-wrap
msgid "git send-email"
msgstr "git send-email"

#. type: Plain text
#: guix-git/doc/contributing.texi:1399
msgid "If you have not done so already, you may wish to set a name and email that will be associated with your commits (@pxref{telling git your name, , Telling Git your name, git, Git User Manual}).  If you wish to use a different name or email just for commits in this repository, you can use @command{git config --local}, or edit @file{.git/config} in the repository instead of @file{~/.gitconfig}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1402
msgid "Other important Git configuration will automatically be configured when building the project (@pxref{Building from Git})."
msgstr ""

#. type: subsection
#: guix-git/doc/contributing.texi:1403 guix-git/doc/contributing.texi:1404
#, no-wrap
msgid "Sending a Patch Series"
msgstr "Enviando uma série de patches"

#. type: cindex
#: guix-git/doc/contributing.texi:1405
#, no-wrap
msgid "patch series"
msgstr "série de patches"

#. type: anchor{#1}
#: guix-git/doc/contributing.texi:1409 guix-git/doc/contributing.texi:1416
#, fuzzy, no-wrap
#| msgid "Submitting Patches"
msgid "Single Patches"
msgstr "Enviando patches"

#. type: Plain text
#: guix-git/doc/contributing.texi:1416
msgid "The @command{git send-email} command is the best way to send both single patches and patch series (@pxref{Multiple Patches}) to the Guix mailing list.  Sending patches as email attachments may make them difficult to review in some mail clients, and @command{git diff} does not store commit metadata."
msgstr ""

#. type: quotation
#: guix-git/doc/contributing.texi:1420
msgid "The @command{git send-email} command is provided by the @code{send-email} output of the @code{git} package, i.e. @code{git:send-email}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1427
msgid "The following command will create a patch email from the latest commit, open it in your @var{EDITOR} or @var{VISUAL} for editing, and send it to the Guix mailing list to be reviewed and merged.  Assuming you have already configured Git according to @xref{Configuring Git}, you can simply use:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1430
#, fuzzy, no-wrap
#| msgid "git send-email"
msgid "$ git send-email --annotate -1\n"
msgstr "git send-email"

#. type: quotation
#: guix-git/doc/contributing.texi:1432 guix-git/doc/guix.texi:19525
#: guix-git/doc/guix.texi:19533 guix-git/doc/guix.texi:32947
#, fuzzy, no-wrap
#| msgid "Top"
msgid "Tip"
msgstr "Top"

#. type: quotation
#: guix-git/doc/contributing.texi:1438
msgid "To add a prefix to the subject of your patch, you may use the @option{--subject-prefix} option.  The Guix project uses this to specify that the patch is intended for a branch or repository other than the @code{master} branch of @url{https://git.savannah.gnu.org/cgit/guix.git}."
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1441
#, no-wrap
msgid "git send-email --annotate --subject-prefix='PATCH core-updates' -1\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1448
msgid "The patch email contains a three-dash separator line after the commit message.  You may ``annotate'' the patch with explanatory text by adding it under this line.  If you do not wish to annotate the email, you may drop the @option{--annotate} option."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1455
msgid "If you need to send a revised patch, don't resend it like this or send a ``fix'' patch to be applied on top of the last one; instead, use @command{git commit --amend} or @url{https://git-rebase.io, @command{git rebase}} to modify the commit, and use the @email{@var{ISSUE_NUMBER}@@debbugs.gnu.org} address and the @option{-v} flag with @command{git send-email}."
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1460
#, no-wrap
msgid ""
"$ git commit --amend\n"
"$ git send-email --annotate -v@var{REVISION} \\\n"
"      --to=@var{ISSUE_NUMBER}@@debbugs.gnu.org -1\n"
msgstr ""

#. type: quotation
#: guix-git/doc/contributing.texi:1466
msgid "Due to an apparent bug in @command{git send-email}, @option{-v @var{REVISION}} (with the space) will not work; you @emph{must} use @option{-v@var{REVISION}}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1472
msgid "You can find out @var{ISSUE_NUMBER} either by searching on the mumi interface at @url{https://issues.guix.gnu.org} for the name of your patch or reading the acknowledgement email sent automatically by Debbugs in reply to incoming bugs and patches, which contains the bug number."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/contributing.texi:1473 guix-git/doc/contributing.texi:1475
#, no-wrap
msgid "Notifying Teams"
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1475 guix-git/doc/contributing.texi:1541
#, no-wrap
msgid "teams"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1484
msgid "If your git checkout has been correctly configured (@pxref{Configuring Git}), the @command{git send-email} command will automatically notify the appropriate team members, based on the scope of your changes.  This relies on the @file{etc/teams.scm} script, which can also be invoked manually if you do not use the preferred @command{git send-email} command to submit patches.  To list the available actions of the script, you can invoke it via the @command{etc/teams.scm help} command.  For more information regarding teams, see @xref{Teams}."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/contributing.texi:1485 guix-git/doc/contributing.texi:1487
#, fuzzy, no-wrap
#| msgid "Submitting Patches"
msgid "Multiple Patches"
msgstr "Enviando patches"

#. type: cindex
#: guix-git/doc/contributing.texi:1487
#, no-wrap
msgid "cover letter"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1493
msgid "While @command{git send-email} alone will suffice for a single patch, an unfortunate flaw in Debbugs means you need to be more careful when sending multiple patches: if you send them all to the @email{guix-patches@@gnu.org} address, a new issue will be created for each patch!"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1499
msgid "When sending a series of patches, it's best to send a Git ``cover letter'' first, to give reviewers an overview of the patch series.  We can create a directory called @file{outgoing} containing both our patch series and a cover letter called @file{0000-cover-letter.patch} with @command{git format-patch}."
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1503
#, no-wrap
msgid ""
"$ git format-patch -@var{NUMBER_COMMITS} -o outgoing \\\n"
"      --cover-letter --base=auto\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1508
msgid "We can now send @emph{just} the cover letter to the @email{guix-patches@@gnu.org} address, which will create an issue that we can send the rest of the patches to."
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1512
#, no-wrap
msgid ""
"$ git send-email outgoing/0000-cover-letter.patch --annotate\n"
"$ rm outgoing/0000-cover-letter.patch # we don't want to resend it!\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1517
msgid "Ensure you edit the email to add an appropriate subject line and blurb before sending it.  Note the automatically generated shortlog and diffstat below the blurb."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1520
msgid "Once the Debbugs mailer has replied to your cover letter email, you can send the actual patches to the newly-created issue address."
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1524
#, no-wrap
msgid ""
"$ git send-email outgoing/*.patch --to=@var{ISSUE_NUMBER}@@debbugs.gnu.org\n"
"$ rm -rf outgoing # we don't need these anymore\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1529
msgid "Thankfully, this @command{git format-patch} dance is not necessary to send an amended patch series, since an issue already exists for the patchset."
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1533
#, no-wrap
msgid ""
"$ git send-email -@var{NUMBER_COMMITS} -v@var{REVISION} \\\n"
"      --to=@var{ISSUE_NUMBER}@@debbugs.gnu.org\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1538
msgid "If need be, you may use @option{--cover-letter --annotate} to send another cover letter, e.g. for explaining what's changed since the last revision, and these changes are necessary."
msgstr ""

#. type: subsection
#: guix-git/doc/contributing.texi:1539 guix-git/doc/contributing.texi:1540
#, no-wrap
msgid "Teams"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1545
msgid "There are several teams mentoring different parts of the Guix source code.  To list all those teams, you can run from a Guix checkout:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1558
#, no-wrap
msgid ""
"$ ./etc/teams.scm list-teams\n"
"id: mentors\n"
"name: Mentors\n"
"description: A group of mentors who chaperone contributions by newcomers.\n"
"members:\n"
"+ Christopher Baines <mail@@cbaines.net>\n"
"+ Ricardo Wurmus <rekado@@elephly.net>\n"
"+ Mathieu Othacehe <othacehe@@gnu.org>\n"
"+ jgart <jgart@@dismail.de>\n"
"+ Ludovic Courtès <ludo@@gnu.org>\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1562
msgid "You can run the following command to have the @code{Mentors} team put in CC of a patch series:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1566
#, no-wrap
msgid ""
"$ git send-email --to=@var{ISSUE_NUMBER}@@debbugs.gnu.org \\\n"
"  --header-cmd='etc/teams.scm cc-mentors-header-cmd' *.patch\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1571
msgid "The appropriate team or teams can also be inferred from the modified files.  For instance, if you want to send the two latest commits of the current Git repository to review, you can run:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1575
#, no-wrap
msgid ""
"$ guix shell -D guix\n"
"[env]$ git send-email --to=@var{ISSUE_NUMBER}@@debbugs.gnu.org -2\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1582
msgid "This section describes how the Guix project tracks its bug reports and patch submissions."
msgstr ""

#. type: subsection
#: guix-git/doc/contributing.texi:1587 guix-git/doc/contributing.texi:1589
#: guix-git/doc/contributing.texi:1590
#, no-wrap
msgid "The Issue Tracker"
msgstr ""

#. type: menuentry
#: guix-git/doc/contributing.texi:1587
msgid "The official bug and patch tracker."
msgstr ""

#. type: subsection
#: guix-git/doc/contributing.texi:1587 guix-git/doc/contributing.texi:1603
#: guix-git/doc/contributing.texi:1604
#, fuzzy, no-wrap
#| msgid "user interfaces"
msgid "Debbugs User Interfaces"
msgstr "interfaces de usuário"

#. type: menuentry
#: guix-git/doc/contributing.texi:1587
msgid "Ways to interact with Debbugs."
msgstr ""

#. type: subsection
#: guix-git/doc/contributing.texi:1587 guix-git/doc/contributing.texi:1643
#: guix-git/doc/contributing.texi:1644
#, no-wrap
msgid "Debbugs Usertags"
msgstr ""

#. type: menuentry
#: guix-git/doc/contributing.texi:1587
msgid "Tag reports with custom labels."
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1592
#, no-wrap
msgid "bug reports, tracking"
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1593
#, no-wrap
msgid "patch submissions, tracking"
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1594
#, no-wrap
msgid "issue tracking"
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1595
#, no-wrap
msgid "Debbugs, issue tracking system"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1602
msgid "Bug reports and patch submissions are currently tracked using the Debbugs instance at @uref{https://bugs.gnu.org}.  Bug reports are filed against the @code{guix} ``package'' (in Debbugs parlance), by sending email to @email{bug-guix@@gnu.org}, while patch submissions are filed against the @code{guix-patches} package by sending email to @email{guix-patches@@gnu.org} (@pxref{Submitting Patches})."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1608
msgid "A web interface (actually @emph{two} web interfaces!) are available to browse issues:"
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:1617
msgid "@url{https://issues.guix.gnu.org} provides a pleasant interface@footnote{The web interface at @url{https://issues.guix.gnu.org} is powered by Mumi, a nice piece of software written in Guile, and you can help! See @url{https://git.elephly.net/gitweb.cgi?p=software/mumi.git}.} to browse bug reports and patches, and to participate in discussions;"
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:1619
msgid "@url{https://bugs.gnu.org/guix} lists bug reports;"
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:1621
msgid "@url{https://bugs.gnu.org/guix-patches} lists patch submissions."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1626
msgid "To view discussions related to issue number @var{n}, go to @indicateurl{https://issues.guix.gnu.org/@var{n}} or @indicateurl{https://bugs.gnu.org/@var{n}}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1629
msgid "If you use Emacs, you may find it more convenient to interact with issues using @file{debbugs.el}, which you can install with:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1632
#, no-wrap
msgid "guix install emacs-debbugs\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1635
msgid "For example, to list all open issues on @code{guix-patches}, hit:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1638
#, no-wrap
msgid "@kbd{C-u} @kbd{M-x} debbugs-gnu @kbd{RET} @kbd{RET} guix-patches @kbd{RET} n y\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1642
msgid "@xref{Top,,, debbugs-ug, Debbugs User Guide}, for more information on this nifty tool!"
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1646
#, no-wrap
msgid "usertags, for debbugs"
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1647
#, no-wrap
msgid "Debbugs usertags"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1653
msgid "Debbugs provides a feature called @dfn{usertags} that allows any user to tag any bug with an arbitrary label.  Bugs can be searched by usertag, so this is a handy way to organize bugs@footnote{The list of usertags is public information, and anyone can modify any user's list of usertags, so keep that in mind if you choose to use this feature.}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1659
msgid "For example, to view all the bug reports (or patches, in the case of @code{guix-patches}) tagged with the usertag @code{powerpc64le-linux} for the user @code{guix}, open a URL like the following in a web browser: @url{https://debbugs.gnu.org/cgi-bin/pkgreport.cgi?tag=powerpc64le-linux;users=guix}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1663
msgid "For more information on how to use usertags, please refer to the documentation for Debbugs or the documentation for whatever tool you use to interact with Debbugs."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1668
msgid "In Guix, we are experimenting with usertags to keep track of architecture-specific issues.  To facilitate collaboration, all our usertags are associated with the single user @code{guix}.  The following usertags currently exist for that user:"
msgstr ""

#. #-#-#-#-#  contributing.pot (guix manual checkout)  #-#-#-#-#
#. type: item
#. #-#-#-#-#  guix.pot (guix manual checkout)  #-#-#-#-#
#. type: defvar
#: guix-git/doc/contributing.texi:1671 guix-git/doc/guix.texi:632
#: guix-git/doc/guix.texi:44220
#, fuzzy, no-wrap
msgid "powerpc64le-linux"
msgstr "aarch64-linux"

#. type: table
#: guix-git/doc/contributing.texi:1679
msgid "The purpose of this usertag is to make it easy to find the issues that matter most for the @code{powerpc64le-linux} system type.  Please assign this usertag to bugs or patches that affect @code{powerpc64le-linux} but not other system types.  In addition, you may use it to identify issues that for some reason are particularly important for the @code{powerpc64le-linux} system type, even if the issue affects other system types, too."
msgstr ""

#. #-#-#-#-#  contributing.pot (guix manual checkout)  #-#-#-#-#
#. type: item
#. #-#-#-#-#  guix.pot (guix manual checkout)  #-#-#-#-#
#. type: cindex
#: guix-git/doc/contributing.texi:1680 guix-git/doc/guix.texi:3358
#: guix-git/doc/guix.texi:5105
#, no-wrap
msgid "reproducibility"
msgstr ""

#. type: table
#: guix-git/doc/contributing.texi:1684
msgid "For issues related to reproducibility.  For example, it would be appropriate to assign this usertag to a bug report for a package that fails to build reproducibly."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1691
msgid "If you're a committer and you want to add a usertag, just start using it with the @code{guix} user.  If the usertag proves useful to you, consider updating this section of the manual so that others will know what your usertag means."
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1695
#, no-wrap
msgid "commit access, for developers"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1711
msgid "Everyone can contribute to Guix without having commit access (@pxref{Submitting Patches}).  However, for frequent contributors, having write access to the repository can be convenient.  As a rule of thumb, a contributor should have accumulated fifty (50) reviewed commits to be considered as a committer and have sustained their activity in the project for at least 6 months.  This ensures enough interactions with the contributor, which is essential for mentoring and assessing whether they are ready to become a committer.  Commit access should not be thought of as a ``badge of honor'' but rather as a responsibility a contributor is willing to take to help the project.  It is expected from all contributors, and even more so from committers, to help build consensus and make decisions based on consensus.  To learn what consensus decision making means and understand its finer details, you are encouraged to read @url{https://www.seedsforchange.org.uk/consensus}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1715
msgid "The following sections explain how to get commit access, how to be ready to push commits, and the policies and community expectations for commits pushed upstream."
msgstr ""

#. type: subsection
#: guix-git/doc/contributing.texi:1716
#, no-wrap
msgid "Applying for Commit Access"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1720
msgid "When you deem it necessary, consider applying for commit access by following these steps:"
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:1729
msgid "Find three committers who would vouch for you.  You can view the list of committers at @url{https://savannah.gnu.org/project/memberlist.php?group=guix}.  Each of them should email a statement to @email{guix-maintainers@@gnu.org} (a private alias for the collective of maintainers), signed with their OpenPGP key."
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:1735
msgid "Committers are expected to have had some interactions with you as a contributor and to be able to judge whether you are sufficiently familiar with the project's practices.  It is @emph{not} a judgment on the value of your work, so a refusal should rather be interpreted as ``let's try again later''."
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:1742
msgid "Send @email{guix-maintainers@@gnu.org} a message stating your intent, listing the three committers who support your application, signed with the OpenPGP key you will use to sign commits, and giving its fingerprint (see below).  See @uref{https://emailselfdefense.fsf.org/en/}, for an introduction to public-key cryptography with GnuPG."
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:1748
msgid "Set up GnuPG such that it never uses the SHA1 hash algorithm for digital signatures, which is known to be unsafe since 2019, for instance by adding the following line to @file{~/.gnupg/gpg.conf} (@pxref{GPG Esoteric Options,,, gnupg, The GNU Privacy Guard Manual}):"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1751
#, no-wrap
msgid "digest-algo sha512\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:1756
msgid "Maintainers ultimately decide whether to grant you commit access, usually following your referrals' recommendation."
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1758
#, no-wrap
msgid "OpenPGP, signed commits"
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:1763
msgid "If and once you've been given access, please send a message to @email{guix-devel@@gnu.org} to say so, again signed with the OpenPGP key you will use to sign commits (do that before pushing your first commit).  That way, everyone can notice and ensure you control that OpenPGP key."
msgstr ""

#. type: quotation
#: guix-git/doc/contributing.texi:1764 guix-git/doc/guix.texi:20709
#, no-wrap
msgid "Important"
msgstr "Importante"

#. type: quotation
#: guix-git/doc/contributing.texi:1766
msgid "Before you can push for the first time, maintainers must:"
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:1770
msgid "add your OpenPGP key to the @code{keyring} branch;"
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:1773
msgid "add your OpenPGP fingerprint to the @file{.guix-authorizations} file of the branch(es) you will commit to."
msgstr ""

#. type: enumerate
#: guix-git/doc/contributing.texi:1778
msgid "Make sure to read the rest of this section and... profit!"
msgstr ""

#. type: quotation
#: guix-git/doc/contributing.texi:1784
msgid "Maintainers are happy to give commit access to people who have been contributing for some time and have a track record---don't be shy and don't underestimate your work!"
msgstr ""

#. type: quotation
#: guix-git/doc/contributing.texi:1788
msgid "However, note that the project is working towards a more automated patch review and merging system, which, as a consequence, may lead us to have fewer people with commit access to the main repository.  Stay tuned!"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1795
msgid "All commits that are pushed to the central repository on Savannah must be signed with an OpenPGP key, and the public key should be uploaded to your user account on Savannah and to public key servers, such as @code{keys.openpgp.org}.  To configure Git to automatically sign commits, run:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1798
#, no-wrap
msgid ""
"git config commit.gpgsign true\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1801
#, no-wrap
msgid ""
"# Substitute the fingerprint of your public PGP key.\n"
"git config user.signingkey CABBA6EA1DC0FF33\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1804
msgid "To check that commits are signed with correct key, use:"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1812
msgid "To avoid accidentally pushing unsigned or signed with the wrong key commits to Savannah, make sure to configure Git according to @xref{Configuring Git}."
msgstr ""

#. type: subsection
#: guix-git/doc/contributing.texi:1813
#, no-wrap
msgid "Commit Policy"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1818
msgid "If you get commit access, please make sure to follow the policy below (discussions of the policy can take place on @email{guix-devel@@gnu.org})."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1830
msgid "Changes should be posted to @email{guix-patches@@gnu.org}.  This mailing list fills the patch-tracking database (@pxref{Tracking Bugs and Patches}).  It also allows patches to be picked up and tested by the quality assurance tooling; the result of that testing eventually shows up on the dashboard at @indicateurl{https://qa.guix.gnu.org/issue/@var{ISSUE_NUMBER}}, where @var{ISSUE_NUMBER} is the number assigned by the issue tracker.  Leave time for a review, without committing anything (@pxref{Submitting Patches}).  If you didn’t receive any reply after one week (two weeks for more significant changes), and if you're confident, it's OK to commit."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1836
msgid "As an exception, some changes considered ``trivial'' or ``obvious'' may be pushed directly.  This includes changes to fix typos and reverting commits that caused immediate problems.  This is subject to being adjusted, allowing individuals to commit directly on non-controversial changes on parts they’re familiar with."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1841
msgid "When pushing a commit on behalf of somebody else, please add a @code{Signed-off-by} line at the end of the commit log message---e.g., with @command{git am --signoff}.  This improves tracking of who did what."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1845
msgid "When adding channel news entries (@pxref{Channels, Writing Channel News}), make sure they are well-formed by running the following command right before pushing:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1848
#, no-wrap
msgid "make check-channel-news\n"
msgstr ""

#. type: subsection
#: guix-git/doc/contributing.texi:1850
#, no-wrap
msgid "Addressing Issues"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1861
msgid "Peer review (@pxref{Submitting Patches}) and tools such as @command{guix lint} (@pxref{Invoking guix lint}) and the test suite (@pxref{Running the Test Suite}) should catch issues before they are pushed.  Yet, commits that ``break'' functionality might occasionally go through.  When that happens, there are two priorities: mitigating the impact, and understanding what happened to reduce the chance of similar incidents in the future.  The responsibility for both these things primarily lies with those involved, but like everything this is a group effort."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1866
msgid "Some issues can directly affect all users---for instance because they make @command{guix pull} fail or break core functionality, because they break major packages (at build time or run time), or because they introduce known security vulnerabilities."
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1867
#, no-wrap
msgid "reverting commits"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1873
msgid "The people involved in authoring, reviewing, and pushing such commit(s) should be at the forefront to mitigate their impact in a timely fashion: by pushing a followup commit to fix it (if possible), or by reverting it to leave time to come up with a proper fix, and by communicating with other developers about the problem."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1879
msgid "If these persons are unavailable to address the issue in time, other committers are entitled to revert the commit(s), explaining in the commit log and on the mailing list what the problem was, with the goal of leaving time to the original committer, reviewer(s), and author(s)  to propose a way forward."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1888
msgid "Once the problem has been dealt with, it is the responsibility of those involved to make sure the situation is understood.  If you are working to understand what happened, focus on gathering information and avoid assigning any blame.  Do ask those involved to describe what happened, do not ask them to explain the situation---this would implicitly blame them, which is unhelpful.  Accountability comes from a consensus about the problem, learning from it and improving processes so that it's less likely to reoccur."
msgstr ""

#. type: subsection
#: guix-git/doc/contributing.texi:1889
#, fuzzy, no-wrap
#| msgid "Log Rotation"
msgid "Commit Revocation"
msgstr "Rotação de log"

#. type: Plain text
#: guix-git/doc/contributing.texi:1896
msgid "In order to reduce the possibility of mistakes, committers will have their Savannah account removed from the Guix Savannah project and their key removed from @file{.guix-authorizations} after 12 months of inactivity; they can ask to regain commit access by emailing the maintainers, without going through the vouching process."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1906
msgid "Maintainers@footnote{See @uref{https://guix.gnu.org/en/about} for the current list of maintainers.  You can email them privately at @email{guix-maintainers@@gnu.org}.} may also revoke an individual's commit rights, as a last resort, if cooperation with the rest of the community has caused too much friction---even within the bounds of the project's code of conduct (@pxref{Contributing}).  They would only do so after public or private discussion with the individual and a clear notice.  Examples of behavior that hinders cooperation and could lead to such a decision include:"
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:1908
#, no-wrap
msgid "repeated violation of the commit policy stated above;"
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:1909
#, no-wrap
msgid "repeated failure to take peer criticism into account;"
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:1910
#, no-wrap
msgid "breaching trust through a series of grave incidents."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1917
msgid "When maintainers resort to such a decision, they notify developers on @email{guix-devel@@gnu.org}; inquiries may be sent to @email{guix-maintainers@@gnu.org}.  Depending on the situation, the individual may still be welcome to contribute."
msgstr ""

#. type: subsection
#: guix-git/doc/contributing.texi:1918
#, no-wrap
msgid "Helping Out"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1925
msgid "One last thing: the project keeps moving forward because committers not only push their own awesome changes, but also offer some of their time @emph{reviewing} and pushing other people's changes.  As a committer, you're welcome to use your expertise and commit rights to help other contributors, too!"
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:1929
#, no-wrap
msgid "update-guix-package, updating the guix package"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1935
msgid "It is sometimes desirable to update the @code{guix} package itself (the package defined in @code{(gnu packages package-management)}), for example to make new daemon features available for use by the @code{guix-service-type} service type.  In order to simplify this task, the following command can be used:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1938
#, no-wrap
msgid "make update-guix-package\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1945
msgid "The @code{update-guix-package} make target will use the last known @emph{commit} corresponding to @code{HEAD} in your Guix checkout, compute the hash of the Guix sources corresponding to that commit and update the @code{commit}, @code{revision} and hash of the @code{guix} package definition."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1949
msgid "To validate that the updated @code{guix} package hashes are correct and that it can be built successfully, the following command can be run from the directory of your Guix checkout:"
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:1952
#, no-wrap
msgid "./pre-inst-env guix build guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1957
msgid "To guard against accidentally updating the @code{guix} package to a commit that others can't refer to, a check is made that the commit used has already been pushed to the Savannah-hosted Guix git repository."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1962
msgid "This check can be disabled, @emph{at your own peril}, by setting the @code{GUIX_ALLOW_ME_TO_USE_PRIVATE_COMMIT} environment variable.  When this variable is set, the updated package source is also added to the store.  This is used as part of the release process of Guix."
msgstr ""

#. #-#-#-#-#  contributing.pot (guix manual checkout)  #-#-#-#-#
#. type: cindex
#. #-#-#-#-#  guix.pot (guix manual checkout)  #-#-#-#-#
#. type: item
#: guix-git/doc/contributing.texi:1963 guix-git/doc/guix.texi:4374
#: guix-git/doc/guix.texi:41492 guix-git/doc/guix.texi:41549
#, no-wrap
msgid "documentation"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1970
msgid "Guix is documented using the Texinfo system.  If you are not yet familiar with it, we accept contributions for documentation in most formats.  That includes plain text, Markdown, Org, etc."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1974
msgid "Documentation contributions can be sent to @email{guix-patches@@gnu.org}.  Prepend @samp{[DOCUMENTATION]} to the subject."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1979
msgid "When you need to make more than a simple addition to the documentation, we prefer that you send a proper patch as opposed to sending an email as described above.  @xref{Submitting Patches} for more information on how to send your patches."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1988
msgid "To modify the documentation, you need to edit @file{doc/guix.texi} and @file{doc/contributing.texi} (which contains this documentation section), or @file{doc/guix-cookbook.texi} for the cookbook.  If you compiled the Guix repository before, you will have many more @file{.texi} files that are translations of these documents.  Do not modify them, the translation is managed through @uref{https://translate.fedoraproject.org/projects/guix, Weblate}.  @xref{Translating Guix} for more information."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:1993
msgid "To render documentation, you must first make sure that you ran @command{./configure} in your source tree (@pxref{Running Guix Before It Is Installed}).  After that you can run one of the following commands:"
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:1995
#, no-wrap
msgid "@samp{make doc/guix.info} to compile the Info manual."
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:1997
msgid "You can check it with @command{info doc/guix.info}."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:1997
#, no-wrap
msgid "@samp{make doc/guix.html} to compile the HTML version."
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:2000
msgid "You can point your browser to the relevant file in the @file{doc/guix.html} directory."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2000
#, no-wrap
msgid "@samp{make doc/guix-cookbook.info} for the cookbook Info manual."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2001
#, no-wrap
msgid "@samp{make doc/guix-cookbook.html} for the cookbook HTML version."
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:2004
#, no-wrap
msgid "translation"
msgstr "tradução"

#. type: cindex
#: guix-git/doc/contributing.texi:2005
#, no-wrap
msgid "l10n"
msgstr ""

#. type: cindex
#: guix-git/doc/contributing.texi:2006
#, no-wrap
msgid "i18n"
msgstr "i18n"

#. type: cindex
#: guix-git/doc/contributing.texi:2007
#, no-wrap
msgid "native language support"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2017
msgid "Writing code and packages is not the only way to provide a meaningful contribution to Guix.  Translating to a language you speak is another example of a valuable contribution you can make.  This section is designed to describe the translation process.  It gives you advice on how you can get involved, what can be translated, what mistakes you should avoid and what we can do to help you!"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2023
msgid "Guix is a big project that has multiple components that can be translated.  We coordinate the translation effort on a @uref{https://translate.fedoraproject.org/projects/guix/,Weblate instance} hosted by our friends at Fedora.  You will need an account to submit translations."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2030
msgid "Some of the software packaged in Guix also contain translations.  We do not host a translation platform for them.  If you want to translate a package provided by Guix, you should contact their developers or find the information on their website.  As an example, you can find the homepage of the @code{hello} package by typing @code{guix show hello}.  On the ``homepage'' line, you will see @url{https://www.gnu.org/software/hello/} as the homepage."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2035
msgid "Many GNU and non-GNU packages can be translated on the @uref{https://translationproject.org,Translation Project}.  Some projects with multiple components have their own platform.  For instance, GNOME has its own platform, @uref{https://l10n.gnome.org/,Damned Lies}."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2037
msgid "Guix has five components hosted on Weblate."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2039
#, no-wrap
msgid "@code{guix} contains all the strings from the Guix software (the"
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:2041
msgid "guided system installer, the package manager, etc), excluding packages."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2041
#, no-wrap
msgid "@code{packages} contains the synopsis (single-sentence description"
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:2043
msgid "of a package) and description (longer description) of packages in Guix."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2043
#, no-wrap
msgid "@code{website} contains the official Guix website, except for"
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:2045
msgid "blog posts and multimedia content."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2045
#, no-wrap
msgid "@code{documentation-manual} corresponds to this manual."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2046
#, no-wrap
msgid "@code{documentation-cookbook} is the component for the cookbook."
msgstr ""

#. type: subsubheading
#: guix-git/doc/contributing.texi:2049
#, fuzzy, no-wrap
#| msgid "generations"
msgid "General Directions"
msgstr "gerações"

#. type: Plain text
#: guix-git/doc/contributing.texi:2057
msgid "Once you get an account, you should be able to select a component from @uref{https://translate.fedoraproject.org/projects/guix/,the guix project}, and select a language.  If your language does not appear in the list, go to the bottom and click on the ``Start new translation'' button.  Select the language you want to translate to from the list, to start your new translation."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2062
msgid "Like lots of other free software packages, Guix uses @uref{https://www.gnu.org/software/gettext,GNU Gettext} for its translations, with which translatable strings are extracted from the source code to so-called PO files."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2073
msgid "Even though PO files are text files, changes should not be made with a text editor but with PO editing software.  Weblate integrates PO editing functionality.  Alternatively, translators can use any of various free-software tools for filling in translations, of which @uref{https://poedit.net/,Poedit} is one example, and (after logging in)  @uref{https://docs.weblate.org/en/latest/user/files.html,upload} the changed file.  There is also a special @uref{https://www.emacswiki.org/emacs/PoMode,PO editing mode} for users of GNU Emacs.  Over time translators find out what software they are happy with and what features they need."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2078
msgid "On Weblate, you will find various links to the editor, that will show various subsets (or all) of the strings.  Have a look around and at the @uref{https://docs.weblate.org/en/latest/,documentation} to familiarize yourself with the platform."
msgstr ""

#. type: subsubheading
#: guix-git/doc/contributing.texi:2079
#, no-wrap
msgid "Translation Components"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2084
msgid "In this section, we provide more detailed guidance on the translation process, as well as details on what you should or should not do.  When in doubt, please contact us, we will be happy to help!"
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2086 guix-git/doc/guix.texi:10973
#, no-wrap
msgid "guix"
msgstr "guix"

#. type: table
#: guix-git/doc/contributing.texi:2091
msgid "Guix is written in the Guile programming language, and some strings contain special formatting that is interpreted by Guile.  These special formatting should be highlighted by Weblate.  They start with @code{~} followed by one or more characters."
msgstr ""

#. type: table
#: guix-git/doc/contributing.texi:2100
msgid "When printing the string, Guile replaces the special formatting symbols with actual values.  For instance, the string @samp{ambiguous package specification `~a'} would be substituted to contain said package specification instead of @code{~a}.  To properly translate this string, you must keep the formatting code in your translation, although you can place it where it makes sense in your language.  For instance, the French translation says @samp{spécification du paquet « ~a » ambiguë} because the adjective needs to be placed in the end of the sentence."
msgstr ""

#. type: table
#: guix-git/doc/contributing.texi:2104
msgid "If there are multiple formatting symbols, make sure to respect the order.  Guile does not know in which order you intended the string to be read, so it will substitute the symbols in the same order as the English sentence."
msgstr ""

#. type: table
#: guix-git/doc/contributing.texi:2112
msgid "As an example, you cannot translate @samp{package '~a' has been superseded by '~a'} by @samp{'~a' superseeds package '~a'}, because the meaning would be reversed.  If @var{foo} is superseded by @var{bar}, the translation would read @samp{'foo' superseeds package 'bar'}.  To work around this problem, it is possible to use more advanced formatting to select a given piece of data, instead of following the default English order.  @xref{Formatted Output,,, guile, GNU Guile Reference Manual}, for more information on formatting in Guile."
msgstr ""

#. #-#-#-#-#  contributing.pot (guix manual checkout)  #-#-#-#-#
#. type: item
#. #-#-#-#-#  guix.pot (guix manual checkout)  #-#-#-#-#
#. type: cindex
#: guix-git/doc/contributing.texi:2113 guix-git/doc/guix.texi:3276
#, no-wrap
msgid "packages"
msgstr "pacotes"

#. type: table
#: guix-git/doc/contributing.texi:2118
msgid "Package descriptions occasionally contain Texinfo markup (@pxref{Synopses and Descriptions}).  Texinfo markup looks like @samp{@@code@{rm -rf@}}, @samp{@@emph@{important@}}, etc.  When translating, please leave markup as is."
msgstr ""

#. type: table
#: guix-git/doc/contributing.texi:2127
msgid "The characters after ``@@'' form the name of the markup, and the text between ``@{'' and ``@}'' is its content.  In general, you should not translate the content of markup like @code{@@code}, as it contains literal code that do not change with language.  You can translate the content of formatting markup such as @code{@@emph}, @code{@@i}, @code{@@itemize}, @code{@@item}.  However, do not translate the name of the markup, or it will not be recognized.  Do not translate the word after @code{@@end}, it is the name of the markup that is closed at this position (e.g.@: @code{@@itemize ... @@end itemize})."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2128
#, no-wrap
msgid "documentation-manual and documentation-cookbook"
msgstr ""

#. type: table
#: guix-git/doc/contributing.texi:2132
msgid "The first step to ensure a successful translation of the manual is to find and translate the following strings @emph{first}:"
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2134
#, no-wrap
msgid "@code{version.texi}: Translate this string as @code{version-xx.texi},"
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:2137
msgid "where @code{xx} is your language code (the one shown in the URL on weblate)."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2137
#, no-wrap
msgid "@code{contributing.texi}: Translate this string as"
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:2139
msgid "@code{contributing.xx.texi}, where @code{xx} is the same language code."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2139
#, no-wrap
msgid "@code{Top}: Do not translate this string, it is important for Texinfo."
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:2142
msgid "If you translate it, the document will be empty (missing a Top node).  Please look for it, and register @code{Top} as its translation."
msgstr ""

#. type: table
#: guix-git/doc/contributing.texi:2147
msgid "Translating these strings first ensure we can include your translation in the guix repository without breaking the make process or the @command{guix pull} machinery."
msgstr ""

#. type: table
#: guix-git/doc/contributing.texi:2154
msgid "The manual and the cookbook both use Texinfo.  As for @code{packages}, please keep Texinfo markup as is.  There are more possible markup types in the manual than in the package descriptions.  In general, do not translate the content of @code{@@code}, @code{@@file}, @code{@@var}, @code{@@value}, etc.  You should translate the content of formatting markup such as @code{@@emph}, @code{@@i}, etc."
msgstr ""

#. type: table
#: guix-git/doc/contributing.texi:2162
msgid "The manual contains sections that can be referred to by name by @code{@@ref}, @code{@@xref} and @code{@@pxref}.  We have a mechanism in place so you do not have to translate their content.  If you keep the English title, we will automatically replace it with your translation of that title.  This ensures that Texinfo will always be able to find the node. If you decide to change the translation of the title, the references will automatically be updated and you will not have to update them all yourself."
msgstr ""

#. type: table
#: guix-git/doc/contributing.texi:2172
msgid "When translating references from the cookbook to the manual, you need to replace the name of the manual and the name of the section.  For instance, to translate @code{@@pxref@{Defining Packages,,, guix, GNU Guix Reference Manual@}}, you would replace @code{Defining Packages} with the title of that section in the translated manual @emph{only} if that title is translated.  If the title is not translated in your language yet, do not translate it here, or the link will be broken.  Replace @code{guix} with @code{guix.xx} where @code{xx} is your language code.  @code{GNU Guix Reference Manual} is the text of the link.  You can translate it however you wish."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2173
#, fuzzy, no-wrap
#| msgid "official website"
msgid "website"
msgstr "website"

#. type: table
#: guix-git/doc/contributing.texi:2180
msgid "The website pages are written using SXML, an s-expression version of HTML, the basic language of the web.  We have a process to extract translatable strings from the source, and replace complex s-expressions with a more familiar XML markup, where each markup is numbered.  Translators can arbitrarily change the ordering, as in the following example."
msgstr ""

#. type: example
#: guix-git/doc/contributing.texi:2187
#, no-wrap
msgid ""
"#. TRANSLATORS: Defining Packages is a section name\n"
"#. in the English (en) manual.\n"
"#: apps/base/templates/about.scm:64\n"
"msgid \"Packages are <1>defined<1.1>en</1.1><1.2>Defining-Packages.html</1.2></1> as native <2>Guile</2> modules.\"\n"
"msgstr \"Pakete werden als reine <2>Guile</2>-Module <1>definiert<1.1>de</1.1><1.2>Pakete-definieren.html</1.2></1>.\"\n"
msgstr ""

#. type: table
#: guix-git/doc/contributing.texi:2190
msgid "Note that you need to include the same markups.  You cannot skip any."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2198
msgid "In case you make a mistake, the component might fail to build properly with your language, or even make guix pull fail.  To prevent that, we have a process in place to check the content of the files before pushing to our repository.  We will not be able to update the translation for your language in Guix, so we will notify you (through weblate and/or by email) so you get a chance to fix the issue."
msgstr ""

#. type: subsubheading
#: guix-git/doc/contributing.texi:2199
#, no-wrap
msgid "Outside of Weblate"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2202
msgid "Currently, some parts of Guix cannot be translated on Weblate, help wanted!"
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2204
#, no-wrap
msgid "@command{guix pull} news can be translated in @file{news.scm}, but is not"
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:2210
msgid "available from Weblate.  If you want to provide a translation, you can prepare a patch as described above, or simply send us your translation with the name of the news entry you translated and your language. @xref{Writing Channel News}, for more information about channel news."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2210
#, no-wrap
msgid "Guix blog posts cannot currently be translated."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2211
#, no-wrap
msgid "The installer script (for foreign distributions) is entirely in English."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2212
#, no-wrap
msgid "Some of the libraries Guix uses cannot be translated or are translated"
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:2214
msgid "outside of the Guix project.  Guile itself is not internationalized."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2214
#, no-wrap
msgid "Other manuals linked from this manual or the cookbook might not be"
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:2216
msgid "translated."
msgstr ""

#. type: subsubheading
#: guix-git/doc/contributing.texi:2218
#, no-wrap
msgid "Conditions for Inclusion"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2225
msgid "There are no conditions for adding new translations of the @code{guix} and @code{guix-packages} components, other than they need at least one translated string.  New languages will be added to Guix as soon as possible.  The files may be removed if they fall out of sync and have no more translated strings."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2231
msgid "Given that the web site is dedicated to new users, we want its translation to be as complete as possible before we include it in the language menu.  For a new language to be included, it needs to reach at least 80% completion.  When a language is included, it may be removed in the future if it stays out of sync and falls below 60% completion."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2239
msgid "The manual and cookbook are automatically added in the default compilation target.  Every time we synchronize translations, developers need to recompile all the translated manuals and cookbooks.  This is useless for what is essentially the English manual or cookbook.  Therefore, we will only include a new language when it reaches 10% completion in the component.  When a language is included, it may be removed in the future if it stays out of sync and falls below 5% completion."
msgstr ""

#. type: subsubheading
#: guix-git/doc/contributing.texi:2240
#, no-wrap
msgid "Translation Infrastructure"
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2251
msgid "Weblate is backed by a git repository from which it discovers new strings to translate and pushes new and updated translations.  Normally, it would be enough to give it commit access to our repositories.  However, we decided to use a separate repository for two reasons.  First, we would have to give Weblate commit access and authorize its signing key, but we do not trust it in the same way we trust guix developers, especially since we do not manage the instance ourselves.  Second, if translators mess something up, it can break the generation of the website and/or guix pull for all our users, independently of their language."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2255
msgid "For these reasons, we use a dedicated repository to host translations, and we synchronize it with our guix and artworks repositories after checking no issue was introduced in the translation."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2261
msgid "Developers can download the latest PO files from weblate in the Guix repository by running the @command{make download-po} command.  It will automatically download the latest files from weblate, reformat them to a canonical form, and check they do not contain issues.  The manual needs to be built again to check for additional issues that might crash Texinfo."
msgstr ""

#. type: Plain text
#: guix-git/doc/contributing.texi:2265
msgid "Before pushing new translation files, developers should add them to the make machinery so the translations are actually available.  The process differs for the various components."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2267
#, no-wrap
msgid "New po files for the @code{guix} and @code{packages} components must"
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:2270
msgid "be registered by adding the new language to @file{po/guix/LINGUAS} or @file{po/packages/LINGUAS}."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2270
#, no-wrap
msgid "New po files for the @code{documentation-manual} component must be"
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:2276
msgid "registered by adding the file name to @code{DOC_PO_FILES} in @file{po/doc/local.mk}, the generated @file{%D%/guix.xx.texi} manual to @code{info_TEXINFOS} in @file{doc/local.mk} and the generated @file{%D%/guix.xx.texi} and @file{%D%/contributing.xx.texi} to @code{TRANSLATED_INFO} also in @file{doc/local.mk}."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2276
#, no-wrap
msgid "New po files for the @code{documentation-cookbook} component must be"
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:2282
msgid "registered by adding the file name to @code{DOC_COOKBOOK_PO_FILES} in @file{po/doc/local.mk}, the generated @file{%D%/guix-cookbook.xx.texi} manual to @code{info_TEXINFOS} in @file{doc/local.mk} and the generated @file{%D%/guix-cookbook.xx.texi} to @code{TRANSLATED_INFO} also in @file{doc/local.mk}."
msgstr ""

#. type: item
#: guix-git/doc/contributing.texi:2282
#, no-wrap
msgid "New po files for the @code{website} component must be added to the"
msgstr ""

#. type: itemize
#: guix-git/doc/contributing.texi:2287
msgid "@code{guix-artwork} repository, in @file{website/po/}.  @file{website/po/LINGUAS} and @file{website/po/ietf-tags.scm} must be updated accordingly (see @file{website/i18n-howto.txt} for more information on the process)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7
#, fuzzy
msgid "@documentencoding UTF-8"
msgstr ""
"@documentencoding UTF-8\n"
"@documentlanguage pt_BR\n"
"@frenchspacing on"

#. type: title
#: guix-git/doc/guix.texi:7 guix-git/doc/guix.texi:147
#, no-wrap
msgid "GNU Guix Reference Manual"
msgstr "Manual de referência do GNU Guix"

#. type: include
#: guix-git/doc/guix.texi:10
#, no-wrap
msgid "version.texi"
msgstr "version-pt_BR.texi"

#. type: copying
#: guix-git/doc/guix.texi:119
msgid "Copyright @copyright{} 2012-2023 Ludovic Courtès@* Copyright @copyright{} 2013, 2014, 2016 Andreas Enge@* Copyright @copyright{} 2013 Nikita Karetnikov@* Copyright @copyright{} 2014, 2015, 2016 Alex Kost@* Copyright @copyright{} 2015, 2016 Mathieu Lirzin@* Copyright @copyright{} 2014 Pierre-Antoine Rault@* Copyright @copyright{} 2015 Taylan Ulrich Bayırlı/Kammer@* Copyright @copyright{} 2015, 2016, 2017, 2019, 2020, 2021, 2023 Leo Famulari@* Copyright @copyright{} 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023 Ricardo Wurmus@* Copyright @copyright{} 2016 Ben Woodcroft@* Copyright @copyright{} 2016, 2017, 2018, 2021 Chris Marusich@* Copyright @copyright{} 2016, 2017, 2018, 2019, 2020, 2021, 2022 Efraim Flashner@* Copyright @copyright{} 2016 John Darrington@* Copyright @copyright{} 2016, 2017 Nikita Gillmann@* Copyright @copyright{} 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023 Jan Nieuwenhuizen@* Copyright @copyright{} 2016, 2017, 2018, 2019, 2020, 2021 Julien Lepiller@* Copyright @copyright{} 2016 Alex ter Weele@* Copyright @copyright{} 2016, 2017, 2018, 2019, 2020, 2021 Christopher Baines@* Copyright @copyright{} 2017, 2018, 2019 Clément Lassieur@* Copyright @copyright{} 2017, 2018, 2020, 2021, 2022 Mathieu Othacehe@* Copyright @copyright{} 2017 Federico Beffa@* Copyright @copyright{} 2017, 2018 Carlo Zancanaro@* Copyright @copyright{} 2017 Thomas Danckaert@* Copyright @copyright{} 2017 humanitiesNerd@* Copyright @copyright{} 2017, 2021 Christine Lemmer-Webber@* Copyright @copyright{} 2017, 2018, 2019, 2020, 2021, 2022 Marius Bakke@* Copyright @copyright{} 2017, 2019, 2020, 2022 Hartmut Goebel@* Copyright @copyright{} 2017, 2019, 2020, 2021, 2022, 2023 Maxim Cournoyer@* Copyright @copyright{} 2017–2022 Tobias Geerinckx-Rice@* Copyright @copyright{} 2017 George Clemmer@* Copyright @copyright{} 2017 Andy Wingo@* Copyright @copyright{} 2017, 2018, 2019, 2020 Arun Isaac@* Copyright @copyright{} 2017 nee@* Copyright @copyright{} 2018 Rutger Helling@* Copyright @copyright{} 2018, 2021 Oleg Pykhalov@* Copyright @copyright{} 2018 Mike Gerwitz@* Copyright @copyright{} 2018 Pierre-Antoine Rouby@* Copyright @copyright{} 2018, 2019 Gábor Boskovits@* Copyright @copyright{} 2018, 2019, 2020, 2022, 2023 Florian Pelz@* Copyright @copyright{} 2018 Laura Lazzati@* Copyright @copyright{} 2018 Alex Vong@* Copyright @copyright{} 2019 Josh Holland@* Copyright @copyright{} 2019, 2020 Diego Nicola Barbato@* Copyright @copyright{} 2019 Ivan Petkov@* Copyright @copyright{} 2019 Jakob L. Kreuze@* Copyright @copyright{} 2019 Kyle Andrews@* Copyright @copyright{} 2019 Alex Griffin@* Copyright @copyright{} 2019, 2020, 2021, 2022 Guillaume Le Vaillant@* Copyright @copyright{} 2020 Liliana Marie Prikler@* Copyright @copyright{} 2019, 2020, 2021, 2022, 2023 Simon Tournier@* Copyright @copyright{} 2020 Wiktor Żelazny@* Copyright @copyright{} 2020 Damien Cassou@* Copyright @copyright{} 2020 Jakub Kądziołka@* Copyright @copyright{} 2020 Jack Hill@* Copyright @copyright{} 2020 Naga Malleswari@* Copyright @copyright{} 2020, 2021 Brice Waegeneire@* Copyright @copyright{} 2020 R Veera Kumar@* Copyright @copyright{} 2020, 2021, 2022 Pierre Langlois@* Copyright @copyright{} 2020 pinoaffe@* Copyright @copyright{} 2020, 2023 André Batista@* Copyright @copyright{} 2020, 2021 Alexandru-Sergiu Marton@* Copyright @copyright{} 2020 raingloom@* Copyright @copyright{} 2020 Daniel Brooks@* Copyright @copyright{} 2020 John Soo@* Copyright @copyright{} 2020 Jonathan Brielmaier@* Copyright @copyright{} 2020 Edgar Vincent@* Copyright @copyright{} 2021, 2022 Maxime Devos@* Copyright @copyright{} 2021 B. Wilson@* Copyright @copyright{} 2021 Xinglu Chen@* Copyright @copyright{} 2021 Raghav Gururajan@* Copyright @copyright{} 2021 Domagoj Stolfa@* Copyright @copyright{} 2021 Hui Lu@* Copyright @copyright{} 2021 pukkamustard@* Copyright @copyright{} 2021 Alice Brenon@* Copyright @copyright{} 2021, 2022 Josselin Poiret@* Copyright @copyright{} 2021 muradm@* Copyright @copyright{} 2021, 2022 Andrew Tropin@* Copyright @copyright{} 2021 Sarah Morgensen@* Copyright @copyright{} 2022 Remco van 't Veer@* Copyright @copyright{} 2022 Aleksandr Vityazev@* Copyright @copyright{} 2022 Philip M@sup{c}Grath@* Copyright @copyright{} 2022 Karl Hallsby@* Copyright @copyright{} 2022 Justin Veilleux@* Copyright @copyright{} 2022 Reily Siegel@* Copyright @copyright{} 2022 Simon Streit@* Copyright @copyright{} 2022 (@* Copyright @copyright{} 2022 John Kehayias@* Copyright @copyright{} 2022⁠–⁠2023 Bruno Victal@* Copyright @copyright{} 2022 Ivan Vilata-i-Balaguer@* Copyright @copyright{} 2023 Giacomo Leidi@* Copyright @copyright{} 2022 Antero Mejr@* Copyright @copyright{} 2023 Karl Hallsby@* Copyright @copyright{} 2023 Nathaniel Nicandro@* Copyright @copyright{} 2023 Tanguy Le Carrour@*"
msgstr ""

#. type: copying
#: guix-git/doc/guix.texi:126
msgid "Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license is included in the section entitled ``GNU Free Documentation License''."
msgstr "Permissão concedida para copiar, distribuir e/ou modificar este documento sob os termos da Licença de Documentação Livre GNU, Versão 1.3 ou qualquer versão mais recente publicada pela Free Software Foundation; sem Seções Invariantes, Textos de Capa Frontal, e sem Textos de Contracapa. Uma cópia da licença está incluída na seção intitulada ``GNU Free Documentation License''."

#. type: dircategory
#: guix-git/doc/guix.texi:128
#, no-wrap
msgid "System administration"
msgstr "Administração de Sistemas"

#. type: menuentry
#: guix-git/doc/guix.texi:136
msgid "Guix: (guix)"
msgstr "Guix: (guix)"

#. type: menuentry
#: guix-git/doc/guix.texi:136
msgid "Manage installed software and system configuration."
msgstr "Gerencie softwares instalados e configuração do sistema."

#. type: menuentry
#: guix-git/doc/guix.texi:136
msgid "guix package: (guix)Invoking guix package"
msgstr "guix package: (guix)Invocando guix package"

#. type: menuentry
#: guix-git/doc/guix.texi:136
msgid "Installing, removing, and upgrading packages."
msgstr "Instalando, removendo e atualizando pacotes."

#. type: menuentry
#: guix-git/doc/guix.texi:136
msgid "guix gc: (guix)Invoking guix gc"
msgstr "guix gc: (guix)Invocando guix gc"

#. type: menuentry
#: guix-git/doc/guix.texi:136
msgid "Reclaiming unused disk space."
msgstr "Recuperando espaço em disco não utilizado."

#. type: menuentry
#: guix-git/doc/guix.texi:136
msgid "guix pull: (guix)Invoking guix pull"
msgstr "guix pull: (guix)Invocando guix pull"

#. type: menuentry
#: guix-git/doc/guix.texi:136
msgid "Update the list of available packages."
msgstr "Atualize a lista de pacotes disponíveis."

#. type: menuentry
#: guix-git/doc/guix.texi:136
msgid "guix system: (guix)Invoking guix system"
msgstr "guix system: (guix)Invocando guix system"

#. type: menuentry
#: guix-git/doc/guix.texi:136
msgid "Manage the operating system configuration."
msgstr "Gerencie a configuração do sistema operacional."

#. type: menuentry
#: guix-git/doc/guix.texi:136
msgid "guix deploy: (guix)Invoking guix deploy"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:136
msgid "Manage operating system configurations for remote hosts."
msgstr ""

#. type: dircategory
#: guix-git/doc/guix.texi:138
#, no-wrap
msgid "Software development"
msgstr "Desenvolvimento de software"

#. type: menuentry
#: guix-git/doc/guix.texi:144
#, fuzzy
#| msgid "guix pull: (guix)Invoking guix pull"
msgid "guix shell: (guix)Invoking guix shell"
msgstr "guix pull: (guix)Invocando guix pull"

#. type: menuentry
#: guix-git/doc/guix.texi:144
#, fuzzy
#| msgid "Creating software bundles."
msgid "Creating software environments."
msgstr "Criando pacotes de software."

#. type: menuentry
#: guix-git/doc/guix.texi:144
msgid "guix environment: (guix)Invoking guix environment"
msgstr "guix environment: (guix)Invocando guix environment"

#. type: menuentry
#: guix-git/doc/guix.texi:144
msgid "Building development environments with Guix."
msgstr "Compilando ambientes de desenvolvimento com Guix."

#. type: menuentry
#: guix-git/doc/guix.texi:144
msgid "guix build: (guix)Invoking guix build"
msgstr "guix build: (guix)Invocando guix build"

#. type: menuentry
#: guix-git/doc/guix.texi:144
msgid "Building packages."
msgstr "Compilando pacotes."

#. type: menuentry
#: guix-git/doc/guix.texi:144
msgid "guix pack: (guix)Invoking guix pack"
msgstr "guix pack: (guix)Invocando guix pack"

#. type: menuentry
#: guix-git/doc/guix.texi:144
msgid "Creating binary bundles."
msgstr "Criando pacotes de binários."

#. type: subtitle
#: guix-git/doc/guix.texi:148
#, no-wrap
msgid "Using the GNU Guix Functional Package Manager"
msgstr "Usando o Gerenciador de Pacotes Funcional GNU Guix"

#. type: author
#: guix-git/doc/guix.texi:149
#, no-wrap
msgid "The GNU Guix Developers"
msgstr "Os desenvolvedores do GNU Guix"

#. type: titlepage
#: guix-git/doc/guix.texi:155
msgid "Edition @value{EDITION} @* @value{UPDATED} @*"
msgstr "Edição @value{EDITION} @* @value{UPDATED} @*"

#. type: node
#: guix-git/doc/guix.texi:162
#, no-wrap
msgid "Top"
msgstr "Top"

#. type: top
#: guix-git/doc/guix.texi:163
#, no-wrap
msgid "GNU Guix"
msgstr "GNU Guix"

#. type: Plain text
#: guix-git/doc/guix.texi:167
msgid "This document describes GNU Guix version @value{VERSION}, a functional package management tool written for the GNU system."
msgstr "Esse documento descreve Guix versão @value{VERSION}, uma ferramenta de gerenciamento de pacotes funcional escrita para o sistema GNU."

#.  You can replace the following paragraph with information on
#. type: Plain text
#: guix-git/doc/guix.texi:180
msgid "This manual is also available in Simplified Chinese (@pxref{Top,,, guix.zh_CN, GNU Guix参考手册}), French (@pxref{Top,,, guix.fr, Manuel de référence de GNU Guix}), German (@pxref{Top,,, guix.de, Referenzhandbuch zu GNU Guix}), Spanish (@pxref{Top,,, guix.es, Manual de referencia de GNU Guix}), Brazilian Portuguese (@pxref{Top,,, guix.pt_BR, Manual de referência do GNU Guix}), and Russian (@pxref{Top,,, guix.ru, Руководство GNU Guix}).  If you would like to translate it in your native language, consider joining @uref{https://translate.fedoraproject.org/projects/guix/documentation-manual, Weblate} (@pxref{Translating Guix})."
msgstr ""

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:214
#: guix-git/doc/guix.texi:478 guix-git/doc/guix.texi:479
#, no-wrap
msgid "Introduction"
msgstr "Introdução"

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "What is Guix about?"
msgstr "Sobre o que é o Guix?"

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:219
#: guix-git/doc/guix.texi:675 guix-git/doc/guix.texi:676
#, no-wrap
msgid "Installation"
msgstr "Instalação"

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "Installing Guix."
msgstr "Instalando o Guix."

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:235
#: guix-git/doc/guix.texi:2215 guix-git/doc/guix.texi:2216
#, no-wrap
msgid "System Installation"
msgstr "Instalação do sistema"

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "Installing the whole operating system."
msgstr "Instalando todo o sistema operacional."

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:252
#: guix-git/doc/guix.texi:2949 guix-git/doc/guix.texi:2950
#, no-wrap
msgid "System Troubleshooting Tips"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "When things don't go as planned."
msgstr ""

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:3065
#: guix-git/doc/guix.texi:3066
#, no-wrap
msgid "Getting Started"
msgstr "Primeiros passos"

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "Your first steps."
msgstr ""

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:256
#: guix-git/doc/guix.texi:3273 guix-git/doc/guix.texi:3274
#, no-wrap
msgid "Package Management"
msgstr "Gerenciamento de pacote"

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "Package installation, upgrade, etc."
msgstr "Instalação de pacote, atualização, etc."

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:279
#: guix-git/doc/guix.texi:5390 guix-git/doc/guix.texi:5391
#, no-wrap
msgid "Channels"
msgstr "Canais"

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "Customizing the package collection."
msgstr "Personalizando a coleção de pacotes."

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:293
#: guix-git/doc/guix.texi:5966 guix-git/doc/guix.texi:5967
#, no-wrap
msgid "Development"
msgstr "Desenvolvimento"

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "Guix-aided software development."
msgstr "Desenvolvimento de software auxiliado pelo Guix."

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:301
#: guix-git/doc/guix.texi:7442 guix-git/doc/guix.texi:7443
#, no-wrap
msgid "Programming Interface"
msgstr "Interface de programação"

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "Using Guix in Scheme."
msgstr "Usando o Guix no Scheme."

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:323
#: guix-git/doc/guix.texi:12467 guix-git/doc/guix.texi:12468
#, no-wrap
msgid "Utilities"
msgstr "Utilitários"

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "Package management commands."
msgstr "Comandos de gerenciamento de pacote."

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:349
#: guix-git/doc/guix.texi:16250 guix-git/doc/guix.texi:16251
#, no-wrap
msgid "Foreign Architectures"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "Build for foreign architectures."
msgstr ""

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:354
#: guix-git/doc/guix.texi:16412 guix-git/doc/guix.texi:16413
#, no-wrap
msgid "System Configuration"
msgstr "Configuração do sistema"

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "Configuring the operating system."
msgstr "Configurando o sistema operacional."

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:426
#: guix-git/doc/guix.texi:42058 guix-git/doc/guix.texi:42059
#, fuzzy, no-wrap
#| msgid "System Configuration"
msgid "Home Configuration"
msgstr "Configuração do sistema"

#. type: menuentry
#: guix-git/doc/guix.texi:204
#, fuzzy
#| msgid "Configuring the boot loader."
msgid "Configuring the home environment."
msgstr "Configurando o \"bootloader\"."

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:44076
#: guix-git/doc/guix.texi:44077
#, no-wrap
msgid "Documentation"
msgstr "Documentação"

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "Browsing software user manuals."
msgstr "Navegando por manuais do usuário do software."

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:449
#: guix-git/doc/guix.texi:44142 guix-git/doc/guix.texi:44143
#, no-wrap
msgid "Platforms"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:204
#, fuzzy
#| msgid "Defining new packages."
msgid "Defining platforms."
msgstr "Definindo novos pacotes."

#. type: node
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:44251
#, no-wrap
msgid "System Images"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:204
#, fuzzy
#| msgid "Creating software bundles."
msgid "Creating system images."
msgstr "Criando pacotes de software."

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:465
#: guix-git/doc/guix.texi:44763 guix-git/doc/guix.texi:44764
#, no-wrap
msgid "Installing Debugging Files"
msgstr "Instalando arquivos de depuração"

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "Feeding the debugger."
msgstr "Alimentando o depurador."

#. type: node
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:44918
#, no-wrap
msgid "Using TeX and LaTeX"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:204
#, fuzzy
#| msgid "Testing Guix."
msgid "Typesetting."
msgstr "Testando o Guix."

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:45069
#: guix-git/doc/guix.texi:45070
#, no-wrap
msgid "Security Updates"
msgstr "Atualizações de segurança"

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "Deploying security fixes quickly."
msgstr "Implementando correções de segurança rapidamente."

#. type: chapter
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:470
#: guix-git/doc/guix.texi:45184 guix-git/doc/guix.texi:45185
#, no-wrap
msgid "Bootstrapping"
msgstr "Inicializando"

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "GNU/Linux built from scratch."
msgstr "GNU/Linux compilado do zero."

#. type: node
#: guix-git/doc/guix.texi:204 guix-git/doc/guix.texi:45483
#, no-wrap
msgid "Porting"
msgstr "Portando"

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "Targeting another platform or kernel."
msgstr "Objetivando outra plataforma ou kernel."

#. type: menuentry
#: guix-git/doc/guix.texi:204
msgid "Your help needed!"
msgstr "Sua ajuda é necessária!"

#. type: chapter
#: guix-git/doc/guix.texi:209 guix-git/doc/guix.texi:45533
#: guix-git/doc/guix.texi:45534
#, no-wrap
msgid "Acknowledgments"
msgstr "Agradecimentos"

#. type: menuentry
#: guix-git/doc/guix.texi:209
msgid "Thanks!"
msgstr "Obrigado!"

#. type: appendix
#: guix-git/doc/guix.texi:209 guix-git/doc/guix.texi:45555
#: guix-git/doc/guix.texi:45556
#, no-wrap
msgid "GNU Free Documentation License"
msgstr "Licença de Documentação Livre GNU"

#. type: menuentry
#: guix-git/doc/guix.texi:209
msgid "The license of this manual."
msgstr "A licença deste manual."

#. type: unnumbered
#: guix-git/doc/guix.texi:209 guix-git/doc/guix.texi:45561
#: guix-git/doc/guix.texi:45562
#, no-wrap
msgid "Concept Index"
msgstr "Índice de conceitos"

#. type: menuentry
#: guix-git/doc/guix.texi:209
msgid "Concepts."
msgstr "Conceitos."

#. type: unnumbered
#: guix-git/doc/guix.texi:209 guix-git/doc/guix.texi:45565
#: guix-git/doc/guix.texi:45566
#, no-wrap
msgid "Programming Index"
msgstr "Índice de programação"

#. type: menuentry
#: guix-git/doc/guix.texi:209
msgid "Data types, functions, and variables."
msgstr "Tipos de dados, funções e variáveis."

#. type: menuentry
#: guix-git/doc/guix.texi:212
msgid "--- The Detailed Node Listing ---"
msgstr "--- A listagem detalhada de nós ---"

#. type: section
#: guix-git/doc/guix.texi:217 guix-git/doc/guix.texi:505
#: guix-git/doc/guix.texi:507 guix-git/doc/guix.texi:508
#, no-wrap
msgid "Managing Software the Guix Way"
msgstr "Gerenciando software do jeito do Guix"

#. type: menuentry
#: guix-git/doc/guix.texi:217 guix-git/doc/guix.texi:505
msgid "What's special."
msgstr "O que há de especial."

#. type: section
#: guix-git/doc/guix.texi:217 guix-git/doc/guix.texi:505
#: guix-git/doc/guix.texi:562 guix-git/doc/guix.texi:563
#, no-wrap
msgid "GNU Distribution"
msgstr "Distribuição GNU"

#. type: menuentry
#: guix-git/doc/guix.texi:217 guix-git/doc/guix.texi:505
msgid "The packages and tools."
msgstr "Os pacotes e as ferramentas."

#. type: section
#: guix-git/doc/guix.texi:227 guix-git/doc/guix.texi:715
#: guix-git/doc/guix.texi:717 guix-git/doc/guix.texi:718
#, no-wrap
msgid "Binary Installation"
msgstr "Instalação de binários"

#. type: menuentry
#: guix-git/doc/guix.texi:227 guix-git/doc/guix.texi:715
msgid "Getting Guix running in no time!"
msgstr "Faça o Guix funcionar rapidamente!"

#. type: section
#: guix-git/doc/guix.texi:227 guix-git/doc/guix.texi:715
#: guix-git/doc/guix.texi:971 guix-git/doc/guix.texi:972
#, no-wrap
msgid "Requirements"
msgstr "Requisitos"

#. type: menuentry
#: guix-git/doc/guix.texi:227 guix-git/doc/guix.texi:715
msgid "Software needed to build and run Guix."
msgstr "Software necessário para compilar e executar o Guix."

#. type: section
#: guix-git/doc/guix.texi:227 guix-git/doc/guix.texi:715
#: guix-git/doc/guix.texi:1067 guix-git/doc/guix.texi:1068
#, no-wrap
msgid "Running the Test Suite"
msgstr "Executando a suíte de testes"

#. type: menuentry
#: guix-git/doc/guix.texi:227 guix-git/doc/guix.texi:715
msgid "Testing Guix."
msgstr "Testando o Guix."

#. type: section
#: guix-git/doc/guix.texi:227 guix-git/doc/guix.texi:229
#: guix-git/doc/guix.texi:715 guix-git/doc/guix.texi:1164
#: guix-git/doc/guix.texi:1165
#, no-wrap
msgid "Setting Up the Daemon"
msgstr "Configurando o daemon"

#. type: menuentry
#: guix-git/doc/guix.texi:227 guix-git/doc/guix.texi:715
msgid "Preparing the build daemon's environment."
msgstr "Preparando o ambiente do daemon de compilação."

#. type: node
#: guix-git/doc/guix.texi:227 guix-git/doc/guix.texi:715
#: guix-git/doc/guix.texi:1659
#, no-wrap
msgid "Invoking guix-daemon"
msgstr "Invocando guix-daemon"

#. type: menuentry
#: guix-git/doc/guix.texi:227 guix-git/doc/guix.texi:715
msgid "Running the build daemon."
msgstr "Executando o daemon de compilação."

#. type: section
#: guix-git/doc/guix.texi:227 guix-git/doc/guix.texi:715
#: guix-git/doc/guix.texi:1965 guix-git/doc/guix.texi:1966
#, no-wrap
msgid "Application Setup"
msgstr "Configuração de aplicativo"

#. type: menuentry
#: guix-git/doc/guix.texi:227 guix-git/doc/guix.texi:715
msgid "Application-specific setup."
msgstr "Configuração específica de aplicativo."

#. type: section
#: guix-git/doc/guix.texi:227 guix-git/doc/guix.texi:715
#: guix-git/doc/guix.texi:2178 guix-git/doc/guix.texi:2179
#, no-wrap
msgid "Upgrading Guix"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:227 guix-git/doc/guix.texi:715
msgid "Upgrading Guix and its build daemon."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:233 guix-git/doc/guix.texi:1184
#: guix-git/doc/guix.texi:1186 guix-git/doc/guix.texi:1187
#, no-wrap
msgid "Build Environment Setup"
msgstr "Configuração do ambiente de compilação"

#. type: menuentry
#: guix-git/doc/guix.texi:233 guix-git/doc/guix.texi:1184
msgid "Preparing the isolated build environment."
msgstr "Preparando o ambiente de compilação isolado."

#. type: node
#: guix-git/doc/guix.texi:233 guix-git/doc/guix.texi:1184
#: guix-git/doc/guix.texi:1310
#, no-wrap
msgid "Daemon Offload Setup"
msgstr "Configuração de descarregamento de daemon"

#. type: menuentry
#: guix-git/doc/guix.texi:233 guix-git/doc/guix.texi:1184
msgid "Offloading builds to remote machines."
msgstr "Descarregando compilações para máquinas remotas."

#. type: subsection
#: guix-git/doc/guix.texi:233 guix-git/doc/guix.texi:1184
#: guix-git/doc/guix.texi:1549 guix-git/doc/guix.texi:1550
#, no-wrap
msgid "SELinux Support"
msgstr "Suporte a SELinux"

#. type: menuentry
#: guix-git/doc/guix.texi:233 guix-git/doc/guix.texi:1184
msgid "Using an SELinux policy for the daemon."
msgstr "Usando um política SELinux para o daemon."

#. type: section
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:1604
#: guix-git/doc/guix.texi:2249 guix-git/doc/guix.texi:2251
#: guix-git/doc/guix.texi:2252
#, no-wrap
msgid "Limitations"
msgstr "Limitações"

#. type: menuentry
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
msgid "What you can expect."
msgstr "O que você pode esperar."

#. type: section
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
#: guix-git/doc/guix.texi:2277 guix-git/doc/guix.texi:2278
#, no-wrap
msgid "Hardware Considerations"
msgstr "Considerações de hardware"

#. type: menuentry
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
msgid "Supported hardware."
msgstr "Hardware suportado."

#. type: section
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
#: guix-git/doc/guix.texi:2315 guix-git/doc/guix.texi:2316
#, no-wrap
msgid "USB Stick and DVD Installation"
msgstr "Instalação em um pendrive e em DVD"

#. type: menuentry
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
msgid "Preparing the installation medium."
msgstr "Preparando a mídia de instalação."

#. type: section
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
#: guix-git/doc/guix.texi:2396 guix-git/doc/guix.texi:2397
#, no-wrap
msgid "Preparing for Installation"
msgstr "Preparando para instalação"

#. type: menuentry
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
msgid "Networking, partitioning, etc."
msgstr "Rede, particionamento, etc."

#. type: section
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
#: guix-git/doc/guix.texi:2419 guix-git/doc/guix.texi:2420
#, no-wrap
msgid "Guided Graphical Installation"
msgstr "Instalação gráfica guiada"

#. type: menuentry
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
msgid "Easy graphical installation."
msgstr "Instalação gráfica fácil."

#. type: section
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:247
#: guix-git/doc/guix.texi:2249 guix-git/doc/guix.texi:2450
#: guix-git/doc/guix.texi:2451
#, no-wrap
msgid "Manual Installation"
msgstr "Instalação manual"

#. type: menuentry
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
msgid "Manual installation for wizards."
msgstr "Instalação manual para magos."

#. type: section
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
#: guix-git/doc/guix.texi:2830 guix-git/doc/guix.texi:2831
#, no-wrap
msgid "After System Installation"
msgstr "Após a instalação do sistema"

#. type: menuentry
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
msgid "When installation succeeded."
msgstr "Quando a instalação conclui com sucesso."

#. type: node
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
#: guix-git/doc/guix.texi:2864
#, no-wrap
msgid "Installing Guix in a VM"
msgstr "Instalando Guix em um VM"

#. type: menuentry
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
msgid "Guix System playground."
msgstr "Parque de diversões do Guix System."

#. type: section
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
#: guix-git/doc/guix.texi:2915 guix-git/doc/guix.texi:2916
#, no-wrap
msgid "Building the Installation Image"
msgstr "Compilando a imagem de instalação"

#. type: menuentry
#: guix-git/doc/guix.texi:245 guix-git/doc/guix.texi:2249
msgid "How this comes to be."
msgstr "Como isso vem a ser."

#. type: node
#: guix-git/doc/guix.texi:250 guix-git/doc/guix.texi:2468
#: guix-git/doc/guix.texi:2470
#, no-wrap
msgid "Keyboard Layout and Networking and Partitioning"
msgstr "Disposição de teclado e rede e particionamento"

#. type: menuentry
#: guix-git/doc/guix.texi:250 guix-git/doc/guix.texi:2468
msgid "Initial setup."
msgstr "Configuração inicial."

#. type: subsection
#: guix-git/doc/guix.texi:250 guix-git/doc/guix.texi:2468
#: guix-git/doc/guix.texi:2741 guix-git/doc/guix.texi:2742
#, no-wrap
msgid "Proceeding with the Installation"
msgstr "Prosseguindo com a instalação"

#. type: menuentry
#: guix-git/doc/guix.texi:250 guix-git/doc/guix.texi:2468
msgid "Installing."
msgstr "Instalando."

#. type: section
#: guix-git/doc/guix.texi:254 guix-git/doc/guix.texi:2966
#: guix-git/doc/guix.texi:2968 guix-git/doc/guix.texi:2969
#, fuzzy, no-wrap
#| msgid "Configuring the operating system."
msgid "Chrooting into an existing system"
msgstr "Configurando o sistema operacional."

#. type: section
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
#: guix-git/doc/guix.texi:3307 guix-git/doc/guix.texi:3308
#, no-wrap
msgid "Features"
msgstr "Recursos"

#. type: menuentry
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
msgid "How Guix will make your life brighter."
msgstr "Como o Guix vai iluminar a sua vida."

#. type: node
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
#: guix-git/doc/guix.texi:3397
#, no-wrap
msgid "Invoking guix package"
msgstr "Invocando guix package"

#. type: menuentry
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
msgid "Package installation, removal, etc."
msgstr "Instalação de pacote, remoção, etc."

#. type: section
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:269
#: guix-git/doc/guix.texi:3305 guix-git/doc/guix.texi:4010
#: guix-git/doc/guix.texi:4011
#, no-wrap
msgid "Substitutes"
msgstr "Substitutos"

#. type: menuentry
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
msgid "Downloading pre-built binaries."
msgstr "Baixando binários pré-compilados."

#. type: section
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
#: guix-git/doc/guix.texi:4346 guix-git/doc/guix.texi:4347
#, no-wrap
msgid "Packages with Multiple Outputs"
msgstr "Pacotes com múltiplas saídas"

#. type: menuentry
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
msgid "Single source package, multiple outputs."
msgstr "Um único pacote de fontes, várias saídas."

#. type: node
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
#: guix-git/doc/guix.texi:4419
#, no-wrap
msgid "Invoking guix gc"
msgstr "Invocando guix gc"

#. type: menuentry
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
msgid "Running the garbage collector."
msgstr "Executando o coletor de lixo."

#. type: node
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
#: guix-git/doc/guix.texi:4643
#, no-wrap
msgid "Invoking guix pull"
msgstr "Invocando guix pull"

#. type: menuentry
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
msgid "Fetching the latest Guix and distribution."
msgstr "Obtendo o Guix mais recente e distribuição."

#. type: node
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
#: guix-git/doc/guix.texi:4894
#, no-wrap
msgid "Invoking guix time-machine"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
msgid "Running an older revision of Guix."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
#: guix-git/doc/guix.texi:4977 guix-git/doc/guix.texi:4978
#, no-wrap
msgid "Inferiors"
msgstr "Inferiores"

#. type: menuentry
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
msgid "Interacting with another revision of Guix."
msgstr "Interagindo com outra revisão do Guix."

#. type: node
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
#: guix-git/doc/guix.texi:5102
#, no-wrap
msgid "Invoking guix describe"
msgstr "Invocando guix describe"

#. type: menuentry
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
msgid "Display information about your Guix revision."
msgstr "Exibe informações sobre sua revisão do Guix."

#. type: node
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
#: guix-git/doc/guix.texi:5198
#, no-wrap
msgid "Invoking guix archive"
msgstr "Invocando guix archive"

#. type: menuentry
#: guix-git/doc/guix.texi:267 guix-git/doc/guix.texi:3305
msgid "Exporting and importing store files."
msgstr "Exportando e importando arquivos do armazém."

#. type: subsection
#: guix-git/doc/guix.texi:277 guix-git/doc/guix.texi:4034
#: guix-git/doc/guix.texi:4036 guix-git/doc/guix.texi:4037
#, fuzzy, no-wrap
#| msgid "Official Substitute Server"
msgid "Official Substitute Servers"
msgstr "Servidor substituto oficial"

#. type: menuentry
#: guix-git/doc/guix.texi:277 guix-git/doc/guix.texi:4034
msgid "One particular source of substitutes."
msgstr "Uma fonte específica de substitutos."

#. type: subsection
#: guix-git/doc/guix.texi:277 guix-git/doc/guix.texi:4034
#: guix-git/doc/guix.texi:4066 guix-git/doc/guix.texi:4067
#, no-wrap
msgid "Substitute Server Authorization"
msgstr "Autorização de servidor substituto"

#. type: menuentry
#: guix-git/doc/guix.texi:277 guix-git/doc/guix.texi:4034
msgid "How to enable or disable substitutes."
msgstr "Como habilitar ou desabilitar substitutos."

#. type: subsection
#: guix-git/doc/guix.texi:277 guix-git/doc/guix.texi:4034
#: guix-git/doc/guix.texi:4136 guix-git/doc/guix.texi:4137
#, no-wrap
msgid "Getting Substitutes from Other Servers"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:277 guix-git/doc/guix.texi:4034
msgid "Substitute diversity."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:277 guix-git/doc/guix.texi:4034
#: guix-git/doc/guix.texi:4241 guix-git/doc/guix.texi:4242
#, no-wrap
msgid "Substitute Authentication"
msgstr "Autenticação de substituto"

#. type: menuentry
#: guix-git/doc/guix.texi:277 guix-git/doc/guix.texi:4034
msgid "How Guix verifies substitutes."
msgstr "Como Guix verifica substitutos."

#. type: subsection
#: guix-git/doc/guix.texi:277 guix-git/doc/guix.texi:4034
#: guix-git/doc/guix.texi:4276 guix-git/doc/guix.texi:4277
#, no-wrap
msgid "Proxy Settings"
msgstr "Configurações de proxy"

#. type: menuentry
#: guix-git/doc/guix.texi:277 guix-git/doc/guix.texi:4034
msgid "How to get substitutes via proxy."
msgstr "Como obter substitutos via proxy."

#. type: subsection
#: guix-git/doc/guix.texi:277 guix-git/doc/guix.texi:4034
#: guix-git/doc/guix.texi:4288 guix-git/doc/guix.texi:4289
#, no-wrap
msgid "Substitution Failure"
msgstr "Falha na substituição"

#. type: menuentry
#: guix-git/doc/guix.texi:277 guix-git/doc/guix.texi:4034
msgid "What happens when substitution fails."
msgstr "O que acontece quando a substituição falha."

#. type: subsection
#: guix-git/doc/guix.texi:277 guix-git/doc/guix.texi:4034
#: guix-git/doc/guix.texi:4316 guix-git/doc/guix.texi:4317
#, no-wrap
msgid "On Trusting Binaries"
msgstr "Confiança em binários"

#. type: menuentry
#: guix-git/doc/guix.texi:277 guix-git/doc/guix.texi:4034
msgid "How can you trust that binary blob?"
msgstr "Como você pode confiar naquele blob binário?"

#. type: section
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
#: guix-git/doc/guix.texi:5423 guix-git/doc/guix.texi:5424
#, no-wrap
msgid "Specifying Additional Channels"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
msgid "Extending the package collection."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
#: guix-git/doc/guix.texi:5469 guix-git/doc/guix.texi:5470
#, no-wrap
msgid "Using a Custom Guix Channel"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
msgid "Using a customized Guix."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
#: guix-git/doc/guix.texi:5510 guix-git/doc/guix.texi:5511
#, no-wrap
msgid "Replicating Guix"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
msgid "Running the @emph{exact same} Guix."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
#: guix-git/doc/guix.texi:5570 guix-git/doc/guix.texi:5571
#, no-wrap
msgid "Channel Authentication"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
msgid "How Guix verifies what it fetches."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
#: guix-git/doc/guix.texi:5610 guix-git/doc/guix.texi:5611
#, no-wrap
msgid "Channels with Substitutes"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
msgid "Using channels with available substitutes."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
#: guix-git/doc/guix.texi:5635 guix-git/doc/guix.texi:5636
#, no-wrap
msgid "Creating a Channel"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
msgid "How to write your custom channel."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
#: guix-git/doc/guix.texi:5702 guix-git/doc/guix.texi:5703
#, no-wrap
msgid "Package Modules in a Sub-directory"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
msgid "Specifying the channel's package modules location."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
#: guix-git/doc/guix.texi:5728 guix-git/doc/guix.texi:5729
#, no-wrap
msgid "Declaring Channel Dependencies"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
msgid "How to depend on other channels."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
#: guix-git/doc/guix.texi:5770 guix-git/doc/guix.texi:5771
#, no-wrap
msgid "Specifying Channel Authorizations"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
msgid "Defining channel authors authorizations."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
#: guix-git/doc/guix.texi:5873 guix-git/doc/guix.texi:5874
#, no-wrap
msgid "Primary URL"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
msgid "Distinguishing mirror to original."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
#: guix-git/doc/guix.texi:5896 guix-git/doc/guix.texi:5897
#, no-wrap
msgid "Writing Channel News"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:291 guix-git/doc/guix.texi:5421
msgid "Communicating information to channel's users."
msgstr ""

#. type: node
#: guix-git/doc/guix.texi:299 guix-git/doc/guix.texi:5986
#: guix-git/doc/guix.texi:5988
#, fuzzy, no-wrap
#| msgid "Invoking guix size"
msgid "Invoking guix shell"
msgstr "Invocando guix size"

#. type: menuentry
#: guix-git/doc/guix.texi:299 guix-git/doc/guix.texi:5986
#, fuzzy
#| msgid "Preparing the isolated build environment."
msgid "Spawning one-off software environments."
msgstr "Preparando o ambiente de compilação isolado."

#. type: node
#: guix-git/doc/guix.texi:299 guix-git/doc/guix.texi:5986
#: guix-git/doc/guix.texi:6516
#, no-wrap
msgid "Invoking guix environment"
msgstr "Invocando guix environment"

#. type: menuentry
#: guix-git/doc/guix.texi:299 guix-git/doc/guix.texi:5986
msgid "Setting up development environments."
msgstr "Configurando ambientes de desenvolvimento."

#. type: node
#: guix-git/doc/guix.texi:299 guix-git/doc/guix.texi:5986
#: guix-git/doc/guix.texi:6913
#, no-wrap
msgid "Invoking guix pack"
msgstr "Invocando guix pack"

#. type: menuentry
#: guix-git/doc/guix.texi:299 guix-git/doc/guix.texi:5986
msgid "Creating software bundles."
msgstr "Criando pacotes de software."

#. type: section
#: guix-git/doc/guix.texi:299 guix-git/doc/guix.texi:5986
#: guix-git/doc/guix.texi:7352 guix-git/doc/guix.texi:7353
#, no-wrap
msgid "The GCC toolchain"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:299 guix-git/doc/guix.texi:5986
msgid "Working with languages supported by GCC."
msgstr ""

#. type: node
#: guix-git/doc/guix.texi:299 guix-git/doc/guix.texi:5986
#: guix-git/doc/guix.texi:7378
#, no-wrap
msgid "Invoking guix git authenticate"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:299 guix-git/doc/guix.texi:5986
msgid "Authenticating Git repositories."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
#: guix-git/doc/guix.texi:7487 guix-git/doc/guix.texi:7488
#, no-wrap
msgid "Package Modules"
msgstr "Módulos de pacote"

#. type: menuentry
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
msgid "Packages from the programmer's viewpoint."
msgstr "Pacotes do ponto de vista do programador."

#. type: section
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:318
#: guix-git/doc/guix.texi:7485 guix-git/doc/guix.texi:7549
#: guix-git/doc/guix.texi:7550
#, no-wrap
msgid "Defining Packages"
msgstr "Definindo pacotes"

#. type: menuentry
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
msgid "Defining new packages."
msgstr "Definindo novos pacotes."

#. type: section
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
#: guix-git/doc/guix.texi:8254 guix-git/doc/guix.texi:8255
#, no-wrap
msgid "Defining Package Variants"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
msgid "Customizing packages."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
#: guix-git/doc/guix.texi:8526 guix-git/doc/guix.texi:8527
#, fuzzy, no-wrap
#| msgid "Writing conventions."
msgid "Writing Manifests"
msgstr "Convenções de escrita."

#. type: menuentry
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
msgid "The bill of materials of your environment."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
#: guix-git/doc/guix.texi:8831 guix-git/doc/guix.texi:8832
#, no-wrap
msgid "Build Systems"
msgstr "Sistemas de compilação"

#. type: menuentry
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
msgid "Specifying how packages are built."
msgstr "Especificando como pacotes são compilados."

#. type: subsection
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
#: guix-git/doc/guix.texi:10036 guix-git/doc/guix.texi:10037
#: guix-git/doc/guix.texi:10568
#, no-wrap
msgid "Build Phases"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
msgid "Phases of the build process of a package."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
#: guix-git/doc/guix.texi:10256 guix-git/doc/guix.texi:10257
#, no-wrap
msgid "Build Utilities"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
msgid "Helpers for your package definitions and more."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
#: guix-git/doc/guix.texi:10725 guix-git/doc/guix.texi:10726
#, fuzzy, no-wrap
#| msgid "--search-paths"
msgid "Search Paths"
msgstr "--search-paths"

#. type: menuentry
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
#, fuzzy
#| msgid "Preparing the isolated build environment."
msgid "Declaring search path environment variables."
msgstr "Declarando o Ambiente Doméstico"

#. type: section
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
#: guix-git/doc/guix.texi:10922 guix-git/doc/guix.texi:10923
#, no-wrap
msgid "The Store"
msgstr "O armazém"

#. type: menuentry
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
msgid "Manipulating the package store."
msgstr "Manipulação do armazém de pacotes."

#. type: section
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
#: guix-git/doc/guix.texi:11074 guix-git/doc/guix.texi:11075
#, no-wrap
msgid "Derivations"
msgstr "Derivações"

#. type: menuentry
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
msgid "Low-level interface to package derivations."
msgstr "Interface de baixo nível para derivações de pacotes."

#. type: section
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
#: guix-git/doc/guix.texi:11267 guix-git/doc/guix.texi:11268
#, no-wrap
msgid "The Store Monad"
msgstr "A mônada do armazém"

#. type: menuentry
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
msgid "Purely functional interface to the store."
msgstr "Interface puramente funcional para o armazém."

#. type: section
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
#: guix-git/doc/guix.texi:11589 guix-git/doc/guix.texi:11590
#, no-wrap
msgid "G-Expressions"
msgstr "Expressões-G"

#. type: menuentry
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
msgid "Manipulating build expressions."
msgstr "Manipulação de expressões de compilação."

#. type: node
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
#: guix-git/doc/guix.texi:12223
#, no-wrap
msgid "Invoking guix repl"
msgstr "Invocando guix repl"

#. type: menuentry
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
msgid "Programming Guix in Guile"
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
#: guix-git/doc/guix.texi:12340 guix-git/doc/guix.texi:12341
#, fuzzy, no-wrap
#| msgid "Using Guix in Scheme."
msgid "Using Guix Interactively"
msgstr "Usando o Guix no Scheme."

#. type: menuentry
#: guix-git/doc/guix.texi:316 guix-git/doc/guix.texi:7485
msgid "Fine-grain interaction at the REPL."
msgstr ""

#. type: node
#: guix-git/doc/guix.texi:321 guix-git/doc/guix.texi:7753
#: guix-git/doc/guix.texi:7756
#, no-wrap
msgid "package Reference"
msgstr "Referência do package"

#. type: menuentry
#: guix-git/doc/guix.texi:321 guix-git/doc/guix.texi:7753
msgid "The package data type."
msgstr "O tipo de dados package."

#. type: node
#: guix-git/doc/guix.texi:321 guix-git/doc/guix.texi:7753
#: guix-git/doc/guix.texi:8064
#, no-wrap
msgid "origin Reference"
msgstr "Referência do origin"

#. type: menuentry
#: guix-git/doc/guix.texi:321 guix-git/doc/guix.texi:7753
msgid "The origin data type."
msgstr "O tipo de dados origin."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:12494
#, no-wrap
msgid "Invoking guix build"
msgstr "Invocando guix build"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
msgid "Building packages from the command line."
msgstr "Compilando pacotes a partir da linha de comando."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:13452
#, no-wrap
msgid "Invoking guix edit"
msgstr "Invocando guix edit"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
msgid "Editing package definitions."
msgstr "Editando definições de pacote."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:13482
#, no-wrap
msgid "Invoking guix download"
msgstr "Invocando guix download"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
msgid "Downloading a file and printing its hash."
msgstr "Baixando um arquivo e imprimindo seu hash."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:13540
#, no-wrap
msgid "Invoking guix hash"
msgstr "Invocando guix hash"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
msgid "Computing the cryptographic hash of a file."
msgstr "Computando a hash criptográfica de um arquivo."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:13631
#, no-wrap
msgid "Invoking guix import"
msgstr "Invocando guix import"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
msgid "Importing package definitions."
msgstr "Importando definições de pacote."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:14228
#, no-wrap
msgid "Invoking guix refresh"
msgstr "Invocando guix refresh"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
msgid "Updating package definitions."
msgstr "Atualizando definições de pacotes."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:14626
#, fuzzy, no-wrap
#| msgid "Invoking guix system"
msgid "Invoking guix style"
msgstr "Invocando guix system"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#, fuzzy
#| msgid "Editing package definitions."
msgid "Styling package definitions."
msgstr "Editando definições de pacote."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:14828
#, no-wrap
msgid "Invoking guix lint"
msgstr "Invocando guix lint"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
msgid "Finding errors in package definitions."
msgstr "Encontrando erros nas definições de pacote."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:15014
#, no-wrap
msgid "Invoking guix size"
msgstr "Invocando guix size"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
msgid "Profiling disk usage."
msgstr "Perfilando uso de disco."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:15158
#, no-wrap
msgid "Invoking guix graph"
msgstr "Invocando guix graph"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
msgid "Visualizing the graph of packages."
msgstr "Visualizando o grafo de pacotes."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:15439
#, no-wrap
msgid "Invoking guix publish"
msgstr "Invocando guix publish"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
msgid "Sharing substitutes."
msgstr "Compartilhando substitutos."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:15713
#, no-wrap
msgid "Invoking guix challenge"
msgstr "Invocando guix challenge"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
msgid "Challenging substitute servers."
msgstr "Desafiando servidores substitutos."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:15902
#, no-wrap
msgid "Invoking guix copy"
msgstr "Invocando guix copy"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
msgid "Copying to and from a remote store."
msgstr "Copiando para e de um armazém remoto."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:15966
#, no-wrap
msgid "Invoking guix container"
msgstr "Invocando guix container"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
msgid "Process isolation."
msgstr "Isolação de processo."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:16020
#, no-wrap
msgid "Invoking guix weather"
msgstr "Invocando guix weather"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
msgid "Assessing substitute availability."
msgstr "Acessando disponibilidade de substituto."

#. type: node
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
#: guix-git/doc/guix.texi:16151
#, no-wrap
msgid "Invoking guix processes"
msgstr "Invocando guix processes"

#. type: menuentry
#: guix-git/doc/guix.texi:340 guix-git/doc/guix.texi:12492
msgid "Listing client processes."
msgstr "Listando processos do cliente."

#. type: section
#: guix-git/doc/guix.texi:342 guix-git/doc/guix.texi:12495
#, no-wrap
msgid "Invoking @command{guix build}"
msgstr "Invocando @command{guix build}"

#. type: subsection
#: guix-git/doc/guix.texi:347 guix-git/doc/guix.texi:12546
#: guix-git/doc/guix.texi:12548 guix-git/doc/guix.texi:12549
#, no-wrap
msgid "Common Build Options"
msgstr "Opções de compilação comum"

#. type: menuentry
#: guix-git/doc/guix.texi:347 guix-git/doc/guix.texi:12546
msgid "Build options for most commands."
msgstr "Opções de compilação para a maioria dos comandos."

#. type: subsection
#: guix-git/doc/guix.texi:347 guix-git/doc/guix.texi:12546
#: guix-git/doc/guix.texi:12703 guix-git/doc/guix.texi:12704
#, no-wrap
msgid "Package Transformation Options"
msgstr "Opções de transformação de pacote"

#. type: menuentry
#: guix-git/doc/guix.texi:347 guix-git/doc/guix.texi:12546
msgid "Creating variants of packages."
msgstr "Criando variantes de pacotes."

#. type: subsection
#: guix-git/doc/guix.texi:347 guix-git/doc/guix.texi:12546
#: guix-git/doc/guix.texi:13126 guix-git/doc/guix.texi:13127
#, no-wrap
msgid "Additional Build Options"
msgstr "Opções de compilação adicional"

#. type: menuentry
#: guix-git/doc/guix.texi:347 guix-git/doc/guix.texi:12546
msgid "Options specific to 'guix build'."
msgstr "Opções específicas para \"guix build\"."

#. type: subsection
#: guix-git/doc/guix.texi:347 guix-git/doc/guix.texi:12546
#: guix-git/doc/guix.texi:13372 guix-git/doc/guix.texi:13373
#, no-wrap
msgid "Debugging Build Failures"
msgstr "Depurando falhas de compilação"

#. type: menuentry
#: guix-git/doc/guix.texi:347 guix-git/doc/guix.texi:12546
msgid "Real life packaging experience."
msgstr "Experiência de empacotamento na vida real."

#. type: section
#: guix-git/doc/guix.texi:352 guix-git/doc/guix.texi:16274
#: guix-git/doc/guix.texi:16276 guix-git/doc/guix.texi:16277
#, fuzzy, no-wrap
#| msgid "Process isolation."
msgid "Cross-Compilation"
msgstr "Isolação de processo."

#. type: menuentry
#: guix-git/doc/guix.texi:352 guix-git/doc/guix.texi:16274
msgid "Cross-compiling for another architecture."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:352 guix-git/doc/guix.texi:16274
#: guix-git/doc/guix.texi:16324 guix-git/doc/guix.texi:16325
#, no-wrap
msgid "Native Builds"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:352 guix-git/doc/guix.texi:16274
#, fuzzy
#| msgid "Targeting another platform or kernel."
msgid "Targeting another architecture through native builds."
msgstr "Objetivando outra plataforma ou kernel."

#. type: section
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
#: guix-git/doc/guix.texi:16458 guix-git/doc/guix.texi:16459
#, no-wrap
msgid "Using the Configuration System"
msgstr "Usando o sistema de configuração"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "Customizing your GNU system."
msgstr "Personalizando seu sistema GNU."

#. type: node
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
#: guix-git/doc/guix.texi:16714
#, no-wrap
msgid "operating-system Reference"
msgstr "Referência do operating-system"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "Detail of operating-system declarations."
msgstr "Detalhe das declarações do operating-system."

#. type: section
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:375
#: guix-git/doc/guix.texi:16456 guix-git/doc/guix.texi:16932
#: guix-git/doc/guix.texi:16933
#, no-wrap
msgid "File Systems"
msgstr "Sistemas de arquivos"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "Configuring file system mounts."
msgstr "Configurando montagens de sistema de arquivos."

#. type: section
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
#: guix-git/doc/guix.texi:17295 guix-git/doc/guix.texi:17296
#, no-wrap
msgid "Mapped Devices"
msgstr "Dispositivos mapeados"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "Block device extra processing."
msgstr "Processamento extra de dispositivo de bloco."

#. type: section
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
#: guix-git/doc/guix.texi:17444 guix-git/doc/guix.texi:17445
#, no-wrap
msgid "Swap Space"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "Backing RAM with disk space."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
#: guix-git/doc/guix.texi:17626 guix-git/doc/guix.texi:17627
#, no-wrap
msgid "User Accounts"
msgstr "Contas de usuários"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "Specifying user accounts."
msgstr "Especificando contas de usuários."

#. type: section
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:2477
#: guix-git/doc/guix.texi:16456 guix-git/doc/guix.texi:17807
#: guix-git/doc/guix.texi:17808
#, no-wrap
msgid "Keyboard Layout"
msgstr "Disposição do teclado"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "How the system interprets key strokes."
msgstr "Como o sistema interpreta pressionamento de teclas."

#. type: section
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:1973
#: guix-git/doc/guix.texi:16456 guix-git/doc/guix.texi:17952
#: guix-git/doc/guix.texi:17953
#, no-wrap
msgid "Locales"
msgstr "Locales"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "Language and cultural convention settings."
msgstr "Configurações de idioma e de convenção cultural."

#. type: node
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:379
#: guix-git/doc/guix.texi:16456 guix-git/doc/guix.texi:18092
#: guix-git/doc/guix.texi:18093 guix-git/doc/guix.texi:32920
#, no-wrap
msgid "Services"
msgstr "Serviços"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "Specifying system services."
msgstr "Especificando serviços de sistema."

#. type: section
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
#: guix-git/doc/guix.texi:39008 guix-git/doc/guix.texi:39009
#, no-wrap
msgid "Setuid Programs"
msgstr "Programas setuid"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
#, fuzzy
#| msgid "Programs running with root privileges."
msgid "Programs running with elevated privileges."
msgstr "Programas sendo executados com privilégios de root."

#. type: section
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:2137
#: guix-git/doc/guix.texi:16456 guix-git/doc/guix.texi:39095
#: guix-git/doc/guix.texi:39096
#, no-wrap
msgid "X.509 Certificates"
msgstr "Certificados X.509"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "Authenticating HTTPS servers."
msgstr "Autenticando servidores HTTPS."

#. type: section
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:2032
#: guix-git/doc/guix.texi:16456 guix-git/doc/guix.texi:39159
#: guix-git/doc/guix.texi:39160
#, no-wrap
msgid "Name Service Switch"
msgstr "Name Service Switch"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "Configuring libc's name service switch."
msgstr "Configurando name service switch do libc."

#. type: section
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
#: guix-git/doc/guix.texi:39297 guix-git/doc/guix.texi:39298
#, no-wrap
msgid "Initial RAM Disk"
msgstr "Disco de RAM inicial"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "Linux-Libre bootstrapping."
msgstr "Inicialização do Linux-Libre."

#. type: section
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
#: guix-git/doc/guix.texi:39504 guix-git/doc/guix.texi:39505
#, no-wrap
msgid "Bootloader Configuration"
msgstr "Configuração do carregador de inicialização"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "Configuring the boot loader."
msgstr "Configurando o \"bootloader\"."

#. type: node
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
#: guix-git/doc/guix.texi:39869
#, no-wrap
msgid "Invoking guix system"
msgstr "Invocando guix system"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "Instantiating a system configuration."
msgstr "Inicializando uma configuração de sistema."

#. type: node
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
#: guix-git/doc/guix.texi:40516
#, no-wrap
msgid "Invoking guix deploy"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "Deploying a system configuration to a remote host."
msgstr ""

#. type: node
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
#: guix-git/doc/guix.texi:40757
#, no-wrap
msgid "Running Guix in a VM"
msgstr "Executando Guix em uma VM"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "How to run Guix System in a virtual machine."
msgstr "Como executar Guix System em uma máquina virtual."

#. type: section
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:418
#: guix-git/doc/guix.texi:16456 guix-git/doc/guix.texi:40892
#: guix-git/doc/guix.texi:40893
#, no-wrap
msgid "Defining Services"
msgstr "Definindo serviços"

#. type: menuentry
#: guix-git/doc/guix.texi:373 guix-git/doc/guix.texi:16456
msgid "Adding new service definitions."
msgstr "Adicionando novas definições de serviço."

#. type: subsection
#: guix-git/doc/guix.texi:377 guix-git/doc/guix.texi:17189
#: guix-git/doc/guix.texi:17191 guix-git/doc/guix.texi:17192
#, no-wrap
msgid "Btrfs file system"
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:18191 guix-git/doc/guix.texi:18192
#, no-wrap
msgid "Base Services"
msgstr "Serviços base"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Essential system services."
msgstr "Serviços essenciais do sistema."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:19464 guix-git/doc/guix.texi:19465
#, no-wrap
msgid "Scheduled Job Execution"
msgstr "Execução de trabalho agendado"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "The mcron service."
msgstr "O serviço mcron."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:19638 guix-git/doc/guix.texi:19639
#, no-wrap
msgid "Log Rotation"
msgstr "Rotação de log"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "The rottlog service."
msgstr "O serviço rottlog."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:19859 guix-git/doc/guix.texi:19860
#, fuzzy, no-wrap
#| msgid "Networking"
msgid "Networking Setup"
msgstr "Rede"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Setting up network interfaces."
msgstr "Configurando interfaces de rede."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:20298 guix-git/doc/guix.texi:20299
#, no-wrap
msgid "Networking Services"
msgstr "Serviços de Rede"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#, fuzzy
#| msgid "Network setup, SSH daemon, etc."
msgid "Firewall, SSH daemon, etc."
msgstr "Configuração de rede, daemon SSH, etc."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:21764 guix-git/doc/guix.texi:21765
#, no-wrap
msgid "Unattended Upgrades"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Automated system upgrades."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:21913 guix-git/doc/guix.texi:21914
#, no-wrap
msgid "X Window"
msgstr "X Window"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Graphical display."
msgstr "Exibição gráfica."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:22526 guix-git/doc/guix.texi:22527
#, no-wrap
msgid "Printing Services"
msgstr "Serviços de impressão"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Local and remote printer support."
msgstr "Suporte a impressora local e remota."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:23348 guix-git/doc/guix.texi:23349
#, no-wrap
msgid "Desktop Services"
msgstr "Serviços de desktop"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "D-Bus and desktop services."
msgstr "Serviços de D-Bus e desktop."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:24474 guix-git/doc/guix.texi:24475
#, no-wrap
msgid "Sound Services"
msgstr "Serviços de som"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "ALSA and Pulseaudio services."
msgstr "Serviços ALSA e Pulseaudio."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:24647 guix-git/doc/guix.texi:24648
#, no-wrap
msgid "Database Services"
msgstr "Serviços de bancos de dados"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "SQL databases, key-value stores, etc."
msgstr "Banco de dados SQL, armazenamentos de valor chave, etc."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:24982 guix-git/doc/guix.texi:24983
#, no-wrap
msgid "Mail Services"
msgstr "Serviços de correio"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "IMAP, POP3, SMTP, and all that."
msgstr "IMAP, POP3, SMTP e tudo isso."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:26852 guix-git/doc/guix.texi:26853
#, no-wrap
msgid "Messaging Services"
msgstr "Serviços de mensageria"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Messaging services."
msgstr "Serviços de mensageria."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:27357 guix-git/doc/guix.texi:27358
#, no-wrap
msgid "Telephony Services"
msgstr "Serviços de telefonia"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Telephony services."
msgstr "Serviços de telefonia."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:27801 guix-git/doc/guix.texi:27802
#, no-wrap
msgid "File-Sharing Services"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "File-sharing services."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:28599 guix-git/doc/guix.texi:28600
#, no-wrap
msgid "Monitoring Services"
msgstr "Serviços de monitoramento"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Monitoring services."
msgstr "Serviços de monitoramento."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:29257 guix-git/doc/guix.texi:29258
#, no-wrap
msgid "Kerberos Services"
msgstr "Serviços Kerberos"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Kerberos services."
msgstr "Serviços Kerberos."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:29383 guix-git/doc/guix.texi:29384
#, no-wrap
msgid "LDAP Services"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "LDAP services."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:30047 guix-git/doc/guix.texi:30048
#, no-wrap
msgid "Web Services"
msgstr "Serviços Web"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Web servers."
msgstr "Servidores Web."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:31272 guix-git/doc/guix.texi:31273
#, no-wrap
msgid "Certificate Services"
msgstr "Serviços de certificado"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "TLS certificates via Let's Encrypt."
msgstr "Certificados TLS via Let's Encrypt."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:31453 guix-git/doc/guix.texi:31454
#, no-wrap
msgid "DNS Services"
msgstr "Serviços DNS"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "DNS daemons."
msgstr "Deamons DNS."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:32213 guix-git/doc/guix.texi:32214
#, fuzzy, no-wrap
#| msgid "VPN Services"
msgid "VNC Services"
msgstr "Serviços VPN"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#, fuzzy
#| msgid "VPN daemons."
msgid "VNC daemons."
msgstr "Deamons VPN."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:32367 guix-git/doc/guix.texi:32368
#, no-wrap
msgid "VPN Services"
msgstr "Serviços VPN"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "VPN daemons."
msgstr "Deamons VPN."

#. type: node
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:32724 guix-git/doc/guix.texi:32725
#: guix-git/doc/guix.texi:32920
#, no-wrap
msgid "Network File System"
msgstr "Sistema de arquivos de rede"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "NFS related services."
msgstr "Serviços relacionados a NFS."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:32920 guix-git/doc/guix.texi:32921
#, fuzzy, no-wrap
#| msgid "Game Services"
msgid "Samba Services"
msgstr "Serviços de jogos"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#, fuzzy
#| msgid "Other services."
msgid "Samba services."
msgstr "Serviços domésticos"

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:32920 guix-git/doc/guix.texi:33072
#: guix-git/doc/guix.texi:33073
#, no-wrap
msgid "Continuous Integration"
msgstr "Integração contínua"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#, fuzzy
msgid "Cuirass and Laminar services."
msgstr "O serviço Cuirass."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:33358 guix-git/doc/guix.texi:33359
#, no-wrap
msgid "Power Management Services"
msgstr "Serviços de gerenciamento de energia"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Extending battery life."
msgstr "Estendendo a vida da bateria."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:33924 guix-git/doc/guix.texi:33925
#, no-wrap
msgid "Audio Services"
msgstr "Serviços de áudio"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "The MPD."
msgstr "O MPD."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:34291 guix-git/doc/guix.texi:34292
#, no-wrap
msgid "Virtualization Services"
msgstr "Serviços de virtualização"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Virtualization services."
msgstr "Serviços de virtualização."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:35985 guix-git/doc/guix.texi:35986
#, no-wrap
msgid "Version Control Services"
msgstr "Serviços de controlando versão"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Providing remote access to Git repositories."
msgstr "Fornecendo acesso remoto a repositórios Git."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:37341 guix-git/doc/guix.texi:37342
#, no-wrap
msgid "Game Services"
msgstr "Serviços de jogos"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Game servers."
msgstr "Servidores de jogos."

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:37392 guix-git/doc/guix.texi:37393
#, no-wrap
msgid "PAM Mount Service"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Service to mount volumes when logging in."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:37475 guix-git/doc/guix.texi:37476
#, no-wrap
msgid "Guix Services"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Services relating specifically to Guix."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:37902 guix-git/doc/guix.texi:37903
#, no-wrap
msgid "Linux Services"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Services tied to the Linux kernel."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:38191 guix-git/doc/guix.texi:38192
#, no-wrap
msgid "Hurd Services"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Services specific for a Hurd System."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
#: guix-git/doc/guix.texi:38233 guix-git/doc/guix.texi:38234
#, no-wrap
msgid "Miscellaneous Services"
msgstr "Serviços diversos"

#. type: menuentry
#: guix-git/doc/guix.texi:416 guix-git/doc/guix.texi:18189
msgid "Other services."
msgstr "Outros serviços."

#. type: subsection
#: guix-git/doc/guix.texi:424 guix-git/doc/guix.texi:40905
#: guix-git/doc/guix.texi:40907 guix-git/doc/guix.texi:40908
#, no-wrap
msgid "Service Composition"
msgstr "Composição de serviço"

#. type: menuentry
#: guix-git/doc/guix.texi:424 guix-git/doc/guix.texi:40905
msgid "The model for composing services."
msgstr "O modelo para serviços de composição."

#. type: subsection
#: guix-git/doc/guix.texi:424 guix-git/doc/guix.texi:40905
#: guix-git/doc/guix.texi:40963 guix-git/doc/guix.texi:40964
#, no-wrap
msgid "Service Types and Services"
msgstr "Tipos de Service e Serviços"

#. type: menuentry
#: guix-git/doc/guix.texi:424 guix-git/doc/guix.texi:40905
msgid "Types and services."
msgstr "Tipos e serviços."

#. type: subsection
#: guix-git/doc/guix.texi:424 guix-git/doc/guix.texi:40905
#: guix-git/doc/guix.texi:41099 guix-git/doc/guix.texi:41100
#, no-wrap
msgid "Service Reference"
msgstr "Referência de Service"

#. type: menuentry
#: guix-git/doc/guix.texi:424 guix-git/doc/guix.texi:40905
msgid "API reference."
msgstr "Referência de API."

#. type: subsection
#: guix-git/doc/guix.texi:424 guix-git/doc/guix.texi:40905
#: guix-git/doc/guix.texi:41416 guix-git/doc/guix.texi:41417
#, no-wrap
msgid "Shepherd Services"
msgstr "Serviços de Shepherd"

#. type: menuentry
#: guix-git/doc/guix.texi:424 guix-git/doc/guix.texi:40905
msgid "A particular type of service."
msgstr "Um tipo em particular de serviço."

#. type: subsection
#: guix-git/doc/guix.texi:424 guix-git/doc/guix.texi:40905
#: guix-git/doc/guix.texi:41668 guix-git/doc/guix.texi:41669
#, fuzzy, no-wrap
#| msgid "System Configuration"
msgid "Complex Configurations"
msgstr "Configuração do sistema"

#. type: menuentry
#: guix-git/doc/guix.texi:424 guix-git/doc/guix.texi:40905
#, fuzzy
#| msgid "Instantiating a system configuration."
msgid "Defining bindings for complex configurations."
msgstr "Inicializando uma configuração de sistema."

#. type: section
#: guix-git/doc/guix.texi:431 guix-git/doc/guix.texi:42121
#: guix-git/doc/guix.texi:42123 guix-git/doc/guix.texi:42124
#, fuzzy, no-wrap
#| msgid "Preparing the isolated build environment."
msgid "Declaring the Home Environment"
msgstr "Declarando o Ambiente Doméstico"

#. type: menuentry
#: guix-git/doc/guix.texi:431 guix-git/doc/guix.texi:42121
#, fuzzy
#| msgid "Customizing your GNU system."
msgid "Customizing your Home."
msgstr "Personalizando seu sistema GNU."

#. type: section
#: guix-git/doc/guix.texi:431 guix-git/doc/guix.texi:42121
#: guix-git/doc/guix.texi:42206 guix-git/doc/guix.texi:42207
#, no-wrap
msgid "Configuring the Shell"
msgstr "Configurando o \"Shell\""

#. type: menuentry
#: guix-git/doc/guix.texi:431 guix-git/doc/guix.texi:42121
#, fuzzy
#| msgid "Invoking guix environment"
msgid "Enabling home environment."
msgstr "Habilitando o ambiente doméstico."

#. type: section
#: guix-git/doc/guix.texi:431 guix-git/doc/guix.texi:433
#: guix-git/doc/guix.texi:42121 guix-git/doc/guix.texi:42253
#: guix-git/doc/guix.texi:42254
#, fuzzy, no-wrap
#| msgid "Game Services"
msgid "Home Services"
msgstr "Serviços de jogos"

#. type: menuentry
#: guix-git/doc/guix.texi:431 guix-git/doc/guix.texi:42121
#, fuzzy
#| msgid "Specifying system services."
msgid "Specifying home services."
msgstr "Especificando serviços de sistema."

#. type: node
#: guix-git/doc/guix.texi:431 guix-git/doc/guix.texi:42121
#: guix-git/doc/guix.texi:43735
#, fuzzy, no-wrap
#| msgid "Invoking guix hash"
msgid "Invoking guix home"
msgstr "Invocando guix hash"

#. type: menuentry
#: guix-git/doc/guix.texi:431 guix-git/doc/guix.texi:42121
#, fuzzy
#| msgid "Instantiating a system configuration."
msgid "Instantiating a home configuration."
msgstr "Inicializando uma configuração de sistema."

#. type: subsection
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#: guix-git/doc/guix.texi:42302 guix-git/doc/guix.texi:42303
#, no-wrap
msgid "Essential Home Services"
msgstr "Serviços essenciais domésticos"

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
msgid "Environment variables, packages, on-* scripts."
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Shepherd Services"
msgid "Shells: Shells Home Services"
msgstr "Serviços de Shepherd"

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
msgid "POSIX shells, Bash, Zsh."
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Version Control Services"
msgid "Mcron: Mcron Home Service"
msgstr "Serviços de controlando versão"

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
msgid "Scheduled User's Job Execution."
msgstr "Execução de trabalho do Usuário agendado."

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Power Management Services"
msgid "Power Management: Power Management Home Services"
msgstr "Serviços de gerenciamento de energia"

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Services"
msgid "Services for battery power."
msgstr "Serviços"

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Shepherd Services"
msgid "Shepherd: Shepherd Home Service"
msgstr "Serviços de Shepherd"

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Messaging services."
msgid "Managing User's Daemons."
msgstr "Serviços de mensageria."

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
msgid "SSH: Secure Shell"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
msgid "Setting up the secure shell client."
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
msgid "GPG: GNU Privacy Guard"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
msgid "Setting up GPG and related tools."
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Desktop Services"
msgid "Desktop: Desktop Home Services"
msgstr "Serviços de desktop"

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
msgid "Services for graphical environments."
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Game Services"
msgid "Guix: Guix Home Services"
msgstr "Serviços de jogos"

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Services"
msgid "Services for Guix."
msgstr "Serviços"

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Version Control Services"
msgid "Fonts: Fonts Home Services"
msgstr "Serviços de controlando versão"

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Messaging services."
msgid "Services for managing User's fonts."
msgstr "Serviços de mensageria."

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Version Control Services"
msgid "Sound: Sound Home Services"
msgstr "Serviços de controlando versão"

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
msgid "Dealing with audio."
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Messaging Services"
msgid "Messaging: Messaging Home Services"
msgstr "Serviços de mensageria"

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Messaging services."
msgid "Services for managing messaging."
msgstr "Serviços de mensageria."

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Game Services"
msgid "Media: Media Home Services"
msgstr "Serviços de jogos"

#. type: menuentry
#: guix-git/doc/guix.texi:447 guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Messaging services."
msgid "Services for managing media."
msgstr "Serviços de mensageria."

#. type: node
#: guix-git/doc/guix.texi:452 guix-git/doc/guix.texi:44154
#: guix-git/doc/guix.texi:44156
#, fuzzy, no-wrap
#| msgid "origin Reference"
msgid "platform Reference"
msgstr "Referência do origin"

#. type: menuentry
#: guix-git/doc/guix.texi:452 guix-git/doc/guix.texi:44154
#, fuzzy
#| msgid "Detail of operating-system declarations."
msgid "Detail of platform declarations."
msgstr "Detalhe das declarações do operating-system."

#. type: section
#: guix-git/doc/guix.texi:452 guix-git/doc/guix.texi:44154
#: guix-git/doc/guix.texi:44198 guix-git/doc/guix.texi:44199
#, fuzzy, no-wrap
#| msgid "Supported hardware."
msgid "Supported Platforms"
msgstr "Hardware suportado."

#. type: menuentry
#: guix-git/doc/guix.texi:452 guix-git/doc/guix.texi:44154
#, fuzzy
#| msgid "List the supported graph types."
msgid "Description of the supported platforms."
msgstr "Lista os tipos de gráficos disponíveis."

#. type: chapter
#: guix-git/doc/guix.texi:454 guix-git/doc/guix.texi:44252
#, fuzzy, no-wrap
#| msgid "Creating software bundles."
msgid "Creating System Images"
msgstr "Criando pacotes de software."

#. type: node
#: guix-git/doc/guix.texi:459 guix-git/doc/guix.texi:44284
#: guix-git/doc/guix.texi:44286
#, fuzzy, no-wrap
#| msgid "package Reference"
msgid "image Reference"
msgstr "Referência do package"

#. type: menuentry
#: guix-git/doc/guix.texi:459 guix-git/doc/guix.texi:44284
#, fuzzy
#| msgid "Detail of operating-system declarations."
msgid "Detail of image declarations."
msgstr "Detalhe das declarações do operating-system."

#. type: section
#: guix-git/doc/guix.texi:459 guix-git/doc/guix.texi:44284
#: guix-git/doc/guix.texi:44435 guix-git/doc/guix.texi:44436
#, no-wrap
msgid "Instantiate an Image"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:459 guix-git/doc/guix.texi:44284
msgid "How to instantiate an image record."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:459 guix-git/doc/guix.texi:44284
#: guix-git/doc/guix.texi:44589 guix-git/doc/guix.texi:44590
#, fuzzy, no-wrap
#| msgid "package Reference"
msgid "image-type Reference"
msgstr "Referência do package"

#. type: menuentry
#: guix-git/doc/guix.texi:459 guix-git/doc/guix.texi:44284
#, fuzzy
#| msgid "Detail of operating-system declarations."
msgid "Detail of image types declaration."
msgstr "Detalhe das declarações do operating-system."

#. type: section
#: guix-git/doc/guix.texi:459 guix-git/doc/guix.texi:44284
#: guix-git/doc/guix.texi:44710 guix-git/doc/guix.texi:44711
#, fuzzy, no-wrap
#| msgid "Package Modules"
msgid "Image Modules"
msgstr "Módulos de pacote"

#. type: menuentry
#: guix-git/doc/guix.texi:459 guix-git/doc/guix.texi:44284
msgid "Definition of image modules."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:461 guix-git/doc/guix.texi:44287
#, fuzzy, no-wrap
#| msgid "package Reference"
msgid "@code{image} Reference"
msgstr "Referência do package"

#. type: node
#: guix-git/doc/guix.texi:463 guix-git/doc/guix.texi:44376
#: guix-git/doc/guix.texi:44378
#, fuzzy, no-wrap
#| msgid "origin Reference"
msgid "partition Reference"
msgstr "Referência do origin"

#. type: section
#: guix-git/doc/guix.texi:468 guix-git/doc/guix.texi:44780
#: guix-git/doc/guix.texi:44782 guix-git/doc/guix.texi:44783
#, no-wrap
msgid "Separate Debug Info"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:468 guix-git/doc/guix.texi:44780
msgid "Installing 'debug' outputs."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:468 guix-git/doc/guix.texi:44780
#: guix-git/doc/guix.texi:44855 guix-git/doc/guix.texi:44856
#, no-wrap
msgid "Rebuilding Debug Info"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:468 guix-git/doc/guix.texi:44780
msgid "Building missing debug info."
msgstr ""

#. type: node
#: guix-git/doc/guix.texi:473 guix-git/doc/guix.texi:45223
#: guix-git/doc/guix.texi:45225
#, no-wrap
msgid "Full-Source Bootstrap"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:473 guix-git/doc/guix.texi:45223
msgid "A Bootstrap worthy of GNU."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:473 guix-git/doc/guix.texi:45223
#: guix-git/doc/guix.texi:45307 guix-git/doc/guix.texi:45308
#, no-wrap
msgid "Preparing to Use the Bootstrap Binaries"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:473 guix-git/doc/guix.texi:45223
msgid "Building that what matters most."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:481
#, no-wrap
msgid "purpose"
msgstr "propósito"

#. type: Plain text
#: guix-git/doc/guix.texi:489
msgid "GNU Guix@footnote{``Guix'' is pronounced like ``geeks'', or ``ɡiːks'' using the international phonetic alphabet (IPA).} is a package management tool for and distribution of the GNU system.  Guix makes it easy for unprivileged users to install, upgrade, or remove software packages, to roll back to a previous package set, to build packages from source, and generally assists with the creation and maintenance of software environments."
msgstr "GNU Guix@footnote{``Guix'' é pronunciado como ``geeks'', ou ``ɡiːks'' usando o alfabeto fonético internacional (IPA).} é uma ferramenta de gerenciamento de pacotes e distribuição do sistema GNU. O Guix facilita a instalação, a atualização ou a remoção de pacotes de software, a reversão para um conjunto de pacotes anterior, a compilação de pacotes a partir do código-fonte e geralmente ajuda na criação e manutenção de ambientes de software."

#. type: cindex
#: guix-git/doc/guix.texi:490 guix-git/doc/guix.texi:565
#, no-wrap
msgid "Guix System"
msgstr "Sistema Guix"

#. type: cindex
#: guix-git/doc/guix.texi:491
#, no-wrap
msgid "GuixSD, now Guix System"
msgstr "GuixSD, agora Guix System"

#. type: cindex
#: guix-git/doc/guix.texi:492
#, no-wrap
msgid "Guix System Distribution, now Guix System"
msgstr "Guix System Distribution, agora Guix System"

#. type: Plain text
#: guix-git/doc/guix.texi:501
msgid "You can install GNU@tie{}Guix on top of an existing GNU/Linux system where it complements the available tools without interference (@pxref{Installation}), or you can use it as a standalone operating system distribution, @dfn{Guix@tie{}System}@footnote{We used to refer to Guix System as ``Guix System Distribution'' or ``GuixSD''.  We now consider it makes more sense to group everything under the ``Guix'' banner since, after all, Guix System is readily available through the @command{guix system} command, even if you're using a different distro underneath!}.  @xref{GNU Distribution}."
msgstr "Você pode instalar o GNU@tie{}Guix sobre um sistema GNU/Linux existente, onde ele complementa as ferramentas disponíveis sem interferência (@pxref{Instalação}) ou você pode usá-lo como uma distribuição de sistema operacional independente, @dfn{Guix@tie{}System}@footnote{Costumávamos nos referir ao Guix System como ``Guix System Distribution'' ou ``GuixSD''. Agora consideramos que faz mais sentido agrupar tudo sob o banner ``Guix'', pois, afinal, o Guix System está prontamente disponível através do comando @command{guix system}, mesmo se você estiver usando uma distribuição diferente por baixo!}. @xref{Distribuição GNU}."

#. type: cindex
#: guix-git/doc/guix.texi:510
#, no-wrap
msgid "user interfaces"
msgstr "interfaces de usuário"

#. type: Plain text
#: guix-git/doc/guix.texi:516
msgid "Guix provides a command-line package management interface (@pxref{Package Management}), tools to help with software development (@pxref{Development}), command-line utilities for more advanced usage (@pxref{Utilities}), as well as Scheme programming interfaces (@pxref{Programming Interface})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:516
#, no-wrap
msgid "build daemon"
msgstr "build daemon"

#. type: Plain text
#: guix-git/doc/guix.texi:520
msgid "Its @dfn{build daemon} is responsible for building packages on behalf of users (@pxref{Setting Up the Daemon}) and for downloading pre-built binaries from authorized sources (@pxref{Substitutes})."
msgstr "O @dfn{build daemon} é responsável por compilar pacotes em nome dos usuários (@pxref{Configurando o daemon}) e por baixar binários pré-compilados de fontes autorizados (@pxref{Substitutos})."

#. type: cindex
#: guix-git/doc/guix.texi:521
#, no-wrap
msgid "extensibility of the distribution"
msgstr "extensibilidade da distribuição"

#. type: cindex
#: guix-git/doc/guix.texi:522 guix-git/doc/guix.texi:7509
#, no-wrap
msgid "customization, of packages"
msgstr "personalização, de pacotes"

#. type: Plain text
#: guix-git/doc/guix.texi:531
msgid "Guix includes package definitions for many GNU and non-GNU packages, all of which @uref{https://www.gnu.org/philosophy/free-sw.html, respect the user's computing freedom}.  It is @emph{extensible}: users can write their own package definitions (@pxref{Defining Packages}) and make them available as independent package modules (@pxref{Package Modules}).  It is also @emph{customizable}: users can @emph{derive} specialized package definitions from existing ones, including from the command line (@pxref{Package Transformation Options})."
msgstr "Guix inclui definições de pacotes para muitos pacotes GNU e não-GNU, todos os quais @uref{https://www.gnu.org/philosophy/free-sw.html, respeitam a liberdade de computação do usuário}. É @emph{extensível}: os usuários podem escrever suas próprias definições de pacotes (@pxref{Definindo pacotes}) e disponibilizá-los como módulos de pacotes independentes (@pxref{Módulos de pacote}). Também é @emph{personalizável}: os usuários podem @emph{derivar} definições de pacotes especializados das existentes, incluindo da linha de comando (@pxref{Opções de transformação de pacote})."

#. type: cindex
#: guix-git/doc/guix.texi:532
#, no-wrap
msgid "functional package management"
msgstr "gerenciamento de pacotes funcional"

#. type: cindex
#: guix-git/doc/guix.texi:533
#, no-wrap
msgid "isolation"
msgstr "isolação"

#. type: Plain text
#: guix-git/doc/guix.texi:548
msgid "Under the hood, Guix implements the @dfn{functional package management} discipline pioneered by Nix (@pxref{Acknowledgments}).  In Guix, the package build and installation process is seen as a @emph{function}, in the mathematical sense.  That function takes inputs, such as build scripts, a compiler, and libraries, and returns an installed package.  As a pure function, its result depends solely on its inputs---for instance, it cannot refer to software or scripts that were not explicitly passed as inputs.  A build function always produces the same result when passed a given set of inputs.  It cannot alter the environment of the running system in any way; for instance, it cannot create, modify, or delete files outside of its build and installation directories.  This is achieved by running build processes in isolated environments (or @dfn{containers}), where only their explicit inputs are visible."
msgstr "Nos bastidores, a Guix implementa a disciplina @dfn{gerenciamento de pacotes funcional} pioneira da Nix (@pxref{Agradecimentos}). No Guix, o processo de compilação e instalação de pacotes é visto como uma @emph{função}, no sentido matemático. Essa função recebe entradas, como scripts de compilação, um compilador e bibliotecas, e retorna um pacote instalado. Como uma função pura, seu resultado depende apenas de suas entradas – por exemplo, não pode fazer referência a um software ou scripts que não foram explicitamente passados como entradas. Uma função de compilação sempre produz o mesmo resultado ao passar por um determinado conjunto de entradas. Não pode alterar o ambiente do sistema em execução de qualquer forma; por exemplo, ele não pode criar, modificar ou excluir arquivos fora de seus diretórios de compilação e instalação. Isto é conseguido através da execução de processos de compilação em ambientes isolados (ou @dfn{containers}), onde somente suas entradas explícitas são visíveis."

#. type: cindex
#: guix-git/doc/guix.texi:549 guix-git/doc/guix.texi:10925
#, no-wrap
msgid "store"
msgstr "armazém"

#. type: Plain text
#: guix-git/doc/guix.texi:556
msgid "The result of package build functions is @dfn{cached} in the file system, in a special directory called @dfn{the store} (@pxref{The Store}).  Each package is installed in a directory of its own in the store---by default under @file{/gnu/store}.  The directory name contains a hash of all the inputs used to build that package; thus, changing an input yields a different directory name."
msgstr "O resultado das funções de compilação do pacote é mantido (@dfn{cached}) no sistema de arquivos, em um diretório especial chamado @dfn{armazém} (@pxref{The Store}). Cada pacote é instalado em um diretório próprio no armazém – por padrão, em @file{/gnu/store}. O nome do diretório contém um hash de todas as entradas usadas para compilar esse pacote; Assim, a alteração uma entrada gera um nome de diretório diferente."

#. type: Plain text
#: guix-git/doc/guix.texi:560
msgid "This approach is the foundation for the salient features of Guix: support for transactional package upgrade and rollback, per-user installation, and garbage collection of packages (@pxref{Features})."
msgstr "Essa abordagem é a fundação para os principais recursos do Guix: suporte para atualização transacional de pacotes e reversão, instalação por usuário e coleta de lixo de pacotes (@pxref{Recursos})."

#. type: Plain text
#: guix-git/doc/guix.texi:575
msgid "Guix comes with a distribution of the GNU system consisting entirely of free software@footnote{The term ``free'' here refers to the @url{https://www.gnu.org/philosophy/free-sw.html,freedom provided to users of that software}.}.  The distribution can be installed on its own (@pxref{System Installation}), but it is also possible to install Guix as a package manager on top of an installed GNU/Linux system (@pxref{Installation}).  When we need to distinguish between the two, we refer to the standalone distribution as Guix@tie{}System."
msgstr "O Guix vem com uma distribuição do sistema GNU que consiste inteiramente de software livre@footnote{O termo ``free'' em ``free software`` se refere à @url{https://www.gnu.org/philosophy/free-sw.html,liberdade fornecida aos usuários desse software}. A ambiguidade no termo em inglês não ocorre na tradução para português ``livre``.}. A distribuição pode ser instalada por conta própria (@pxref{Instalação do sistema}), mas também é possível instalar o Guix como um gerenciador de pacotes em cima de um sistema GNU/Linux instalado (@pxref{Instalação}). Quando precisamos distinguir entre os dois, nos referimos à distribuição independente como Guix@tie{}System."

#. type: Plain text
#: guix-git/doc/guix.texi:581
msgid "The distribution provides core GNU packages such as GNU libc, GCC, and Binutils, as well as many GNU and non-GNU applications.  The complete list of available packages can be browsed @url{https://www.gnu.org/software/guix/packages,on-line} or by running @command{guix package} (@pxref{Invoking guix package}):"
msgstr "A distribuição fornece pacotes GNU principais, como GNU libc, GCC e Binutils, além de muitos aplicativos GNU e não GNU. A lista completa de pacotes disponíveis pode ser acessada @url{https://www.gnu.org/software/guix/packages,online} ou executando @command{guix package} (@pxref{Invocando guix package}):"

#. type: example
#: guix-git/doc/guix.texi:584
#, no-wrap
msgid "guix package --list-available\n"
msgstr "guix package --list-available\n"

#. type: Plain text
#: guix-git/doc/guix.texi:590
msgid "Our goal is to provide a practical 100% free software distribution of Linux-based and other variants of GNU, with a focus on the promotion and tight integration of GNU components, and an emphasis on programs and tools that help users exert that freedom."
msgstr "Nosso objetivo é fornecer uma distribuição prática e 100% de software livre, baseada em Linux e outras variantes do GNU, com foco na promoção e forte integração de componentes do GNU e ênfase em programas e ferramentas que ajudam os usuários a exercer essa liberdade."

#. type: Plain text
#: guix-git/doc/guix.texi:592
msgid "Packages are currently available on the following platforms:"
msgstr "Os pacotes estão atualmente disponíveis nas seguintes plataformas:"

#. type: defvar
#: guix-git/doc/guix.texi:595 guix-git/doc/guix.texi:2324
#: guix-git/doc/guix.texi:44232
#, no-wrap
msgid "x86_64-linux"
msgstr "x86_64-linux"

#. type: table
#: guix-git/doc/guix.texi:597
msgid "Intel/AMD @code{x86_64} architecture, Linux-Libre kernel."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:598 guix-git/doc/guix.texi:2327
#: guix-git/doc/guix.texi:44228
#, no-wrap
msgid "i686-linux"
msgstr "i686-linux"

#. type: table
#: guix-git/doc/guix.texi:600
msgid "Intel 32-bit architecture (IA32), Linux-Libre kernel."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:601
#, no-wrap
msgid "armhf-linux"
msgstr "armhf-linux"

#. type: table
#: guix-git/doc/guix.texi:605
msgid "ARMv7-A architecture with hard float, Thumb-2 and NEON, using the EABI hard-float application binary interface (ABI), and Linux-Libre kernel."
msgstr "Arquitetura ARMv7-A com hard float, Thumb-2 e NEON, usando a interface binária de aplicativos EABI hard-float (ABI) e o kernel Linux-Libre."

#. type: defvar
#: guix-git/doc/guix.texi:606 guix-git/doc/guix.texi:44208
#, no-wrap
msgid "aarch64-linux"
msgstr "aarch64-linux"

#. type: table
#: guix-git/doc/guix.texi:608
msgid "little-endian 64-bit ARMv8-A processors, Linux-Libre kernel."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:609 guix-git/doc/guix.texi:44246
#, no-wrap
msgid "i586-gnu"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:612
msgid "@uref{https://hurd.gnu.org, GNU/Hurd} on the Intel 32-bit architecture (IA32)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:618
msgid "This configuration is experimental and under development.  The easiest way for you to give it a try is by setting up an instance of @code{hurd-vm-service-type} on your GNU/Linux machine (@pxref{transparent-emulation-qemu, @code{hurd-vm-service-type}}).  @xref{Contributing}, on how to help!"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:619
#, no-wrap
msgid "mips64el-linux (unsupported)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:625
msgid "little-endian 64-bit MIPS processors, specifically the Loongson series, n32 ABI, and Linux-Libre kernel.  This configuration is no longer fully supported; in particular, there is no ongoing work to ensure that this architecture still works.  Should someone decide they wish to revive this architecture then the code is still available."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:626
#, no-wrap
msgid "powerpc-linux (unsupported)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:631
msgid "big-endian 32-bit PowerPC processors, specifically the PowerPC G4 with AltiVec support, and Linux-Libre kernel.  This configuration is not fully supported and there is no ongoing work to ensure this architecture works."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:642
msgid "little-endian 64-bit Power ISA processors, Linux-Libre kernel.  This includes POWER9 systems such as the @uref{https://www.fsf.org/news/talos-ii-mainboard-and-talos-ii-lite-mainboard-now-fsf-certified-to-respect-your-freedom, RYF Talos II mainboard}. This platform is available as a \"technology preview\": although it is supported, substitutes are not yet available from the build farm (@pxref{Substitutes}), and some packages may fail to build (@pxref{Tracking Bugs and Patches}).  That said, the Guix community is actively working on improving this support, and now is a great time to try it and get involved!"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:643 guix-git/doc/guix.texi:44224
#, fuzzy, no-wrap
#| msgid "aarch64-linux"
msgid "riscv64-linux"
msgstr "aarch64-linux"

#. type: table
#: guix-git/doc/guix.texi:651
msgid "little-endian 64-bit RISC-V processors, specifically RV64GC, and Linux-Libre kernel. This platform is available as a \"technology preview\": although it is supported, substitutes are not yet available from the build farm (@pxref{Substitutes}), and some packages may fail to build (@pxref{Tracking Bugs and Patches}).  That said, the Guix community is actively working on improving this support, and now is a great time to try it and get involved!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:661
msgid "With Guix@tie{}System, you @emph{declare} all aspects of the operating system configuration and Guix takes care of instantiating the configuration in a transactional, reproducible, and stateless fashion (@pxref{System Configuration}).  Guix System uses the Linux-libre kernel, the Shepherd initialization system (@pxref{Introduction,,, shepherd, The GNU Shepherd Manual}), the well-known GNU utilities and tool chain, as well as the graphical environment or system services of your choice."
msgstr "Com o Guix@tie{}System, você @emph{declara} todos os aspectos da configuração do sistema operacional, e o Guix cuida de instanciar a configuração de maneira transacional, reproduzível e sem estado (@pxref{Configuração do sistema}). O Guix System usa o kernel Linux-libre, o sistema de inicialização Shepherd (@pxref{Introduction ,,, shepherd, The GNU Shepherd Manual}), os conhecidos utilitários do GNU e cadeia de ferramentas, bem como o ambiente gráfico ou os serviços de sistema do sua escolha."

#. type: Plain text
#: guix-git/doc/guix.texi:665
#, fuzzy
msgid "Guix System is available on all the above platforms except @code{mips64el-linux}, @code{powerpc-linux}, @code{powerpc64le-linux} and @code{riscv64-linux}."
msgstr "O Guix System está disponível em todas as plataformas acima, exceto @code{mips64el-linux}."

#. type: Plain text
#: guix-git/doc/guix.texi:669
msgid "For information on porting to other architectures or kernels, @pxref{Porting}."
msgstr "Para obter informações sobre como portar para outras arquiteturas ou kernels, @pxref{Portando}."

#. type: Plain text
#: guix-git/doc/guix.texi:672
msgid "Building this distribution is a cooperative effort, and you are invited to join! @xref{Contributing}, for information about how you can help."
msgstr "A construção desta distribuição é um esforço cooperativo e você está convidado a participar! @xref{Contribuindo}, para obter informações sobre como você pode ajudar."

#. type: cindex
#: guix-git/doc/guix.texi:678
#, no-wrap
msgid "installing Guix"
msgstr "instalando Guix"

#. type: quotation
#: guix-git/doc/guix.texi:690
msgid "We recommend the use of this @uref{https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh, shell installer script} to install Guix on top of a running GNU/Linux system, thereafter called a @dfn{foreign distro}.@footnote{This section is concerned with the installation of the package manager, which can be done on top of a running GNU/Linux system.  If, instead, you want to install the complete GNU operating system, @pxref{System Installation}.} The script automates the download, installation, and initial configuration of Guix.  It should be run as the root user."
msgstr "Recomendamos o uso deste @uref{https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh, script de instalação do shell} para instalar o Guix sobre o sistema GNU/Linux que você esteja usando, posteriormente denominado @dfn{distro alheia}.@footnote{Esta seção trata da instalação do gerenciador de pacotes, que pode ser feita sobre um sistema GNU/Linux atualmente em uso. Se, em vez disso, você deseja instalar o sistema operacional GNU completo, @pxref{Instalação do sistema}.} O script automatiza o download, a instalação e a configuração inicial do Guix. Ele deve ser executado como usuário root."

#. type: cindex
#: guix-git/doc/guix.texi:692 guix-git/doc/guix.texi:1968
#, no-wrap
msgid "foreign distro"
msgstr "distro alheia"

#. type: cindex
#: guix-git/doc/guix.texi:693
#, no-wrap
msgid "directories related to foreign distro"
msgstr "diretórios relacionados à distro alheia"

#. type: Plain text
#: guix-git/doc/guix.texi:698
msgid "When installed on a foreign distro, GNU@tie{}Guix complements the available tools without interference.  Its data lives exclusively in two directories, usually @file{/gnu/store} and @file{/var/guix}; other files on your system, such as @file{/etc}, are left untouched."
msgstr "Quando instalado sobre uma distro alheia. GNU@tie{}Guix complementa as ferramentas disponíveis sem interferência. Seus dados residem exclusivamente em dois diretórios, geralmente @file{/gnu/store} e @file{/var/guix}; outros arquivos no seu sistema, como @file{/etc}, são deixados intactos."

#. type: Plain text
#: guix-git/doc/guix.texi:701
msgid "Once installed, Guix can be updated by running @command{guix pull} (@pxref{Invoking guix pull})."
msgstr "Uma vez instalado, o Guix pode ser atualizado executando @command{guix pull} (@pxref{Invocando guix pull})."

#. type: Plain text
#: guix-git/doc/guix.texi:706
msgid "If you prefer to perform the installation steps manually or want to tweak them, you may find the following subsections useful.  They describe the software requirements of Guix, as well as how to install it manually and get ready to use it."
msgstr "Se você preferir executar as etapas de instalação manualmente ou desejar ajustá-las, poderá achar úteis as seguintes subseções. Eles descrevem os requisitos de software do Guix, bem como instalá-lo manualmente e se preparar para usá-lo."

#. type: cindex
#: guix-git/doc/guix.texi:720
#, no-wrap
msgid "installing Guix from binaries"
msgstr "instalando Guix de binários"

#. type: cindex
#: guix-git/doc/guix.texi:721
#, no-wrap
msgid "installer script"
msgstr "script de instalação"

#. type: Plain text
#: guix-git/doc/guix.texi:727
msgid "This section describes how to install Guix on an arbitrary system from a self-contained tarball providing binaries for Guix and for all its dependencies.  This is often quicker than installing from source, which is described in the next sections.  The only requirement is to have GNU@tie{}tar and Xz."
msgstr "Esta seção descreve como instalar o Guix em um sistema arbitrário a partir de um tarball independente que fornece binários para o Guix e para todas as suas dependências. Isso geralmente é mais rápido do que instalar do código-fonte, o que é descrito nas próximas seções. O único requisito é ter o GNU@tie{}tar e Xz."

#. type: quotation
#: guix-git/doc/guix.texi:735
msgid "We recommend the use of this @uref{https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh, shell installer script}.  The script automates the download, installation, and initial configuration steps described below.  It should be run as the root user.  As root, you can thus run this:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:741
#, no-wrap
msgid ""
"cd /tmp\n"
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:746
msgid "If you're running Debian or a derivative such as Ubuntu, you can instead install the package (it might be a version older than @value{VERSION} but you can update it afterwards by running @samp{guix pull}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:749
#, no-wrap
msgid "sudo apt install guix\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:752
msgid "Likewise on openSUSE:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:755
#, no-wrap
msgid "sudo zypper install guix\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:759
msgid "When you're done, @pxref{Application Setup} for extra configuration you might need, and @ref{Getting Started} for your first steps!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:762
msgid "Installing goes along these lines:"
msgstr "A instalação segue as seguintes linhas:"

#. type: cindex
#: guix-git/doc/guix.texi:765
#, no-wrap
msgid "downloading Guix binary"
msgstr "baixando binário do Guix"

#. type: enumerate
#: guix-git/doc/guix.texi:771
msgid "Download the binary tarball from @indicateurl{@value{BASE-URL}/guix-binary-@value{VERSION}.x86_64-linux.tar.xz}, where @code{x86_64-linux} can be replaced with @code{i686-linux} for an @code{i686} (32-bits) machine already running the kernel Linux, and so on (@pxref{GNU Distribution})."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:775
msgid "Make sure to download the associated @file{.sig} file and to verify the authenticity of the tarball against it, along these lines:"
msgstr "Certifique-se de baixar o arquivo @file{.sig} associado e verificar a autenticidade do tarball, seguindo estas linhas:"

#. type: example
#: guix-git/doc/guix.texi:779
#, no-wrap
msgid ""
"$ wget @value{BASE-URL}/guix-binary-@value{VERSION}.x86_64-linux.tar.xz.sig\n"
"$ gpg --verify guix-binary-@value{VERSION}.x86_64-linux.tar.xz.sig\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:783 guix-git/doc/guix.texi:2342
msgid "If that command fails because you do not have the required public key, then run this command to import it:"
msgstr "Se esse comando falhar porque você não possui a chave pública requerida, execute este comando para importá-lo:"

#. type: example
#: guix-git/doc/guix.texi:787
#, no-wrap
msgid ""
"$ wget '@value{OPENPGP-SIGNING-KEY-URL}' \\\n"
"      -qO - | gpg --import -\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:791 guix-git/doc/guix.texi:2350
msgid "and rerun the @code{gpg --verify} command."
msgstr "e execute novamente o comando @code{gpg --verify}."

#. type: Plain text
#: guix-git/doc/guix.texi:794 guix-git/doc/guix.texi:2353
msgid "Take note that a warning like ``This key is not certified with a trusted signature!'' is normal."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:800
msgid "Now, you need to become the @code{root} user.  Depending on your distribution, you may have to run @code{su -} or @code{sudo -i}.  As @code{root}, run:"
msgstr "Agora, você precisa se tornar o usuário @code{root}. Dependendo de sua distribuição, você pode ter que executar @code{su -} ou @code{sudo -i}. Como @code{root}, execute:"

#. type: example
#: guix-git/doc/guix.texi:806
#, no-wrap
msgid ""
"# cd /tmp\n"
"# tar --warning=no-timestamp -xf \\\n"
"     /path/to/guix-binary-@value{VERSION}.x86_64-linux.tar.xz\n"
"# mv var/guix /var/ && mv gnu /\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:811
msgid "This creates @file{/gnu/store} (@pxref{The Store}) and @file{/var/guix}.  The latter contains a ready-to-use profile for @code{root} (see next step)."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:814
msgid "Do @emph{not} unpack the tarball on a working Guix system since that would overwrite its own essential files."
msgstr "@emph{Não} descompacte o tarball em um sistema Guix funcional, pois isso substituiria seus próprios arquivos essenciais."

#. type: enumerate
#: guix-git/doc/guix.texi:824
msgid "The @option{--warning=no-timestamp} option makes sure GNU@tie{}tar does not emit warnings about ``implausibly old time stamps'' (such warnings were triggered by GNU@tie{}tar 1.26 and older; recent versions are fine).  They stem from the fact that all the files in the archive have their modification time set to 1 (which means January 1st, 1970).  This is done on purpose to make sure the archive content is independent of its creation time, thus making it reproducible."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:828
msgid "Make the profile available under @file{~root/.config/guix/current}, which is where @command{guix pull} will install updates (@pxref{Invoking guix pull}):"
msgstr "Torne o perfil disponível sob @file{~root/.config/guix/current}, que é onde @command{guix pull} vai instalar atualizações (@pxref{Invoking guix pull}):"

#. type: example
#: guix-git/doc/guix.texi:833
#, no-wrap
msgid ""
"# mkdir -p ~root/.config/guix\n"
"# ln -sf /var/guix/profiles/per-user/root/current-guix \\\n"
"         ~root/.config/guix/current\n"
msgstr ""
"# mkdir -p ~root/.config/guix\n"
"# ln -sf /var/guix/profiles/per-user/root/current-guix \\\n"
"         ~root/.config/guix/current\n"

#. type: enumerate
#: guix-git/doc/guix.texi:837
msgid "Source @file{etc/profile} to augment @env{PATH} and other relevant environment variables:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:841
#, no-wrap
msgid ""
"# GUIX_PROFILE=\"`echo ~root`/.config/guix/current\" ; \\\n"
"  source $GUIX_PROFILE/etc/profile\n"
msgstr ""
"# GUIX_PROFILE=\"`echo ~root`/.config/guix/current\" ; \\\n"
"  source $GUIX_PROFILE/etc/profile\n"

#. type: enumerate
#: guix-git/doc/guix.texi:846
msgid "Create the group and user accounts for build users as explained below (@pxref{Build Environment Setup})."
msgstr "Crie o grupo e contas de usuário para compilar usuários conforme explicado abaixo (@pxref{Configuração do ambiente de compilação})."

#. type: enumerate
#: guix-git/doc/guix.texi:849
msgid "Run the daemon, and set it to automatically start on boot."
msgstr "Execute o daemon e configure-o para iniciar automaticamente na inicialização do sistema."

#. type: enumerate
#: guix-git/doc/guix.texi:852
msgid "If your host distro uses the systemd init system, this can be achieved with these commands:"
msgstr "Se sua distro hospedeira usa o sistema init systemd, isso pode ser obtido com estes comandos:"

#. type: example
#: guix-git/doc/guix.texi:865
#, no-wrap
msgid ""
"# cp ~root/.config/guix/current/lib/systemd/system/gnu-store.mount \\\n"
"     ~root/.config/guix/current/lib/systemd/system/guix-daemon.service \\\n"
"     /etc/systemd/system/\n"
"# systemctl enable --now gnu-store.mount guix-daemon\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:868
msgid "You may also want to arrange for @command{guix gc} to run periodically:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:874
#, no-wrap
msgid ""
"# cp ~root/.config/guix/current/lib/systemd/system/guix-gc.service \\\n"
"     ~root/.config/guix/current/lib/systemd/system/guix-gc.timer \\\n"
"     /etc/systemd/system/\n"
"# systemctl enable --now guix-gc.timer\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:878
msgid "You may want to edit @file{guix-gc.service} to adjust the command line options to fit your needs (@pxref{Invoking guix gc})."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:880 guix-git/doc/guix.texi:15703
msgid "If your host distro uses the Upstart init system:"
msgstr "Se sua distro hospedeira usa o sistema init Upstart:"

#. type: example
#: guix-git/doc/guix.texi:886
#, no-wrap
msgid ""
"# initctl reload-configuration\n"
"# cp ~root/.config/guix/current/lib/upstart/system/guix-daemon.conf \\\n"
"     /etc/init/\n"
"# start guix-daemon\n"
msgstr ""
"# initctl reload-configuration\n"
"# cp ~root/.config/guix/current/lib/upstart/system/guix-daemon.conf \\\n"
"     /etc/init/\n"
"# start guix-daemon\n"

#. type: enumerate
#: guix-git/doc/guix.texi:889
msgid "Otherwise, you can still start the daemon manually with:"
msgstr "Caso contrário, você ainda pode iniciar o daemon manualmente com:"

#. type: example
#: guix-git/doc/guix.texi:893
#, no-wrap
msgid ""
"# ~root/.config/guix/current/bin/guix-daemon \\\n"
"       --build-users-group=guixbuild\n"
msgstr ""
"# ~root/.config/guix/current/bin/guix-daemon \\\n"
"       --build-users-group=guixbuild\n"

#. type: enumerate
#: guix-git/doc/guix.texi:898
msgid "Make the @command{guix} command available to other users on the machine, for instance with:"
msgstr "Disponibilize o comando @command{guix} para outros usuários na máquina, por exemplo, com:"

#. type: example
#: guix-git/doc/guix.texi:903
#, no-wrap
msgid ""
"# mkdir -p /usr/local/bin\n"
"# cd /usr/local/bin\n"
"# ln -s /var/guix/profiles/per-user/root/current-guix/bin/guix\n"
msgstr ""
"# mkdir -p /usr/local/bin\n"
"# cd /usr/local/bin\n"
"# ln -s /var/guix/profiles/per-user/root/current-guix/bin/guix\n"

#. type: enumerate
#: guix-git/doc/guix.texi:907
msgid "It is also a good idea to make the Info version of this manual available there:"
msgstr "Também é uma boa ideia disponibilizar a versão Info deste manual:"

#. type: example
#: guix-git/doc/guix.texi:913
#, no-wrap
msgid ""
"# mkdir -p /usr/local/share/info\n"
"# cd /usr/local/share/info\n"
"# for i in /var/guix/profiles/per-user/root/current-guix/share/info/* ;\n"
"  do ln -s $i ; done\n"
msgstr ""
"# mkdir -p /usr/local/share/info\n"
"# cd /usr/local/share/info\n"
"# for i in /var/guix/profiles/per-user/root/current-guix/share/info/* ;\n"
"  do ln -s $i ; done\n"

#. type: enumerate
#: guix-git/doc/guix.texi:919
msgid "That way, assuming @file{/usr/local/share/info} is in the search path, running @command{info guix} will open this manual (@pxref{Other Info Directories,,, texinfo, GNU Texinfo}, for more details on changing the Info search path)."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:921 guix-git/doc/guix.texi:4070
#: guix-git/doc/guix.texi:18794
#, no-wrap
msgid "substitutes, authorization thereof"
msgstr "substitutos, autenticação dela"

#. type: enumerate
#: guix-git/doc/guix.texi:925
#, fuzzy
#| msgid "To use substitutes from @code{@value{SUBSTITUTE-SERVER}} or one of its mirrors (@pxref{Substitutes}), authorize them:"
msgid "To use substitutes from @code{@value{SUBSTITUTE-SERVER-1}}, @code{@value{SUBSTITUTE-SERVER-2}} or a mirror (@pxref{Substitutes}), authorize them:"
msgstr "Para usar substitutos de @code{@value{SUBSTITUTE-SERVER}} ou um de seus espelhos (@pxref{Substitutos}), autorize-os:"

#. type: example
#: guix-git/doc/guix.texi:931
#, no-wrap
msgid ""
"# guix archive --authorize < \\\n"
"     ~root/.config/guix/current/share/guix/@value{SUBSTITUTE-SERVER-1}.pub\n"
"# guix archive --authorize < \\\n"
"     ~root/.config/guix/current/share/guix/@value{SUBSTITUTE-SERVER-2}.pub\n"
msgstr ""
"# guix archive --authorize < \\\n"
"     ~root/.config/guix/current/share/guix/@value{SUBSTITUTE-SERVER-1}.pub\n"
"# guix archive --authorize < \\\n"
"     ~root/.config/guix/current/share/guix/@value{SUBSTITUTE-SERVER-2}.pub\n"

#. type: quotation
#: guix-git/doc/guix.texi:938
msgid "If you do not enable substitutes, Guix will end up building @emph{everything} from source on your machine, making each installation and upgrade very expensive.  @xref{On Trusting Binaries}, for a discussion of reasons why one might want do disable substitutes."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:943
msgid "Each user may need to perform a few additional steps to make their Guix environment ready for use, @pxref{Application Setup}."
msgstr "Cada usuário pode precisar executar algumas etapas adicionais para tornar seu ambiente Guix pronto para uso, @pxref{Configuração de aplicativo}."

#. type: Plain text
#: guix-git/doc/guix.texi:946
msgid "Voilà, the installation is complete!"
msgstr "Voilà, a instalação está completa!"

#. type: Plain text
#: guix-git/doc/guix.texi:949
msgid "You can confirm that Guix is working by installing a sample package into the root profile:"
msgstr "Você pode confirmar que o Guix está funcionando instalando um pacote de amostra no perfil raiz:"

#. type: example
#: guix-git/doc/guix.texi:952
#, no-wrap
msgid "# guix install hello\n"
msgstr "# guix install hello\n"

#. type: Plain text
#: guix-git/doc/guix.texi:956
msgid "The binary installation tarball can be (re)produced and verified simply by running the following command in the Guix source tree:"
msgstr "O tarball da instalação binária pode ser (re)produzido e verificado simplesmente executando o seguinte comando na árvore de código-fonte do Guix:"

#. type: example
#: guix-git/doc/guix.texi:959
#, no-wrap
msgid "make guix-binary.@var{system}.tar.xz\n"
msgstr "make guix-binary.@var{system}.tar.xz\n"

#. type: Plain text
#: guix-git/doc/guix.texi:963
msgid "...@: which, in turn, runs:"
msgstr "...@: que, por sua vez, executa:"

#. type: example
#: guix-git/doc/guix.texi:967
#, no-wrap
msgid ""
"guix pack -s @var{system} --localstatedir \\\n"
"  --profile-name=current-guix guix\n"
msgstr ""
"guix pack -s @var{system} --localstatedir \\\n"
"  --profile-name=current-guix guix\n"

#. type: Plain text
#: guix-git/doc/guix.texi:970
msgid "@xref{Invoking guix pack}, for more info on this handy tool."
msgstr "@xref{Invocando guix pack}, para mais informações sobre essa ferramenta útil."

#. type: Plain text
#: guix-git/doc/guix.texi:978
msgid "This section lists requirements when building Guix from source.  The build procedure for Guix is the same as for other GNU software, and is not covered here.  Please see the files @file{README} and @file{INSTALL} in the Guix source tree for additional details."
msgstr "Esta seção lista os requisitos ao compilar o Guix a partir do fonte. O procedimento de compilação do Guix é o mesmo que para outros softwares GNU, e não é coberto aqui. Por favor, veja os arquivos @file{README} e @file{INSTALL} na árvore fonte do Guix para detalhes adicionais."

#. type: cindex
#: guix-git/doc/guix.texi:979
#, no-wrap
msgid "official website"
msgstr "site oficial"

#. type: Plain text
#: guix-git/doc/guix.texi:982
msgid "GNU Guix is available for download from its website at @url{https://www.gnu.org/software/guix/}."
msgstr "O GNU Guix está disponível para download em seu site em @url{http://www.gnu.org/software/guix/}."

#. type: Plain text
#: guix-git/doc/guix.texi:984
msgid "GNU Guix depends on the following packages:"
msgstr "GNU Guix depende dos seguintes pacotes:"

#. type: item
#: guix-git/doc/guix.texi:986
#, fuzzy, no-wrap
#| msgid "@url{https://www.gnu.org/software/make/, GNU Make}."
msgid "@url{https://gnu.org/software/guile/, GNU Guile}, version 3.0.x,"
msgstr "@url{https://gnu.org/software/guile/, GNU Guile}, version 3.0.x;"

#. type: itemize
#: guix-git/doc/guix.texi:988
#, fuzzy
msgid "version 3.0.3 or later;"
msgstr "0.1.0 ou posterior;"

#. type: item
#: guix-git/doc/guix.texi:988
#, no-wrap
msgid "@url{https://notabug.org/cwebber/guile-gcrypt, Guile-Gcrypt}, version"
msgstr "@url{https://notabug.org/cwebber/guile-gcrypt, Guile-Gcrypt}, versão"

#. type: itemize
#: guix-git/doc/guix.texi:990
msgid "0.1.0 or later;"
msgstr "0.1.0 ou posterior;"

#. type: itemize
#: guix-git/doc/guix.texi:996
msgid "@uref{https://gitlab.com/gnutls/guile/, Guile-GnuTLS} (@pxref{Guile Preparations, how to install the GnuTLS bindings for Guile,, gnutls-guile, GnuTLS-Guile})@footnote{The Guile bindings to @uref{https://gnutls.org/, GnuTLS} were distributed as part of GnuTLS until version 3.7.8 included.};"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:999
msgid "@uref{https://notabug.org/guile-sqlite3/guile-sqlite3, Guile-SQLite3}, version 0.1.0 or later;"
msgstr "@uref{https://notabug.org/guile-sqlite3/guile-sqlite3, Guile-SQLite3}, versão 0.1.0 ou posterior;"

#. type: item
#: guix-git/doc/guix.texi:999
#, fuzzy, no-wrap
msgid "@uref{https://notabug.org/guile-zlib/guile-zlib, Guile-zlib},"
msgstr "@uref{https://notabug.org/guile-zlib/guile-zlib, Guile-zlib},"

#. type: itemize
#: guix-git/doc/guix.texi:1001
#, fuzzy
msgid "version 0.1.0 or later;"
msgstr "0.1.0 ou posterior;"

#. type: item
#: guix-git/doc/guix.texi:1001
#, no-wrap
msgid "@uref{https://notabug.org/guile-lzlib/guile-lzlib, Guile-lzlib};"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1002
#, no-wrap
msgid "@uref{https://www.nongnu.org/guile-avahi/, Guile-Avahi};"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:1006
#, fuzzy
#| msgid "@uref{https://notabug.org/guile-sqlite3/guile-sqlite3, Guile-SQLite3}, version 0.1.0 or later;"
msgid "@uref{https://gitlab.com/guile-git/guile-git, Guile-Git}, version 0.5.0 or later;"
msgstr "@uref{https://notabug.org/guile-sqlite3/guile-sqlite3, Guile-SQLite3}, versão 0.1.0 ou posterior;"

#. type: item
#: guix-git/doc/guix.texi:1006
#, no-wrap
msgid "@uref{https://savannah.nongnu.org/projects/guile-json/, Guile-JSON}"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:1008
msgid "4.3.0 or later;"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1008
#, no-wrap
msgid "@url{https://www.gnu.org/software/make/, GNU Make}."
msgstr "@url{https://www.gnu.org/software/make/, GNU Make}."

#. type: Plain text
#: guix-git/doc/guix.texi:1012
msgid "The following dependencies are optional:"
msgstr "As seguintes dependências são opcionais:"

#. type: itemize
#: guix-git/doc/guix.texi:1020
msgid "Support for build offloading (@pxref{Daemon Offload Setup}) and @command{guix copy} (@pxref{Invoking guix copy}) depends on @uref{https://github.com/artyom-poptsov/guile-ssh, Guile-SSH}, version 0.13.0 or later."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:1025
msgid "@uref{https://notabug.org/guile-zstd/guile-zstd, Guile-zstd}, for zstd compression and decompression in @command{guix publish} and for substitutes (@pxref{Invoking guix publish})."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:1029
msgid "@uref{https://ngyro.com/software/guile-semver.html, Guile-Semver} for the @code{crate} importer (@pxref{Invoking guix import})."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:1034
msgid "@uref{https://www.nongnu.org/guile-lib/doc/ref/htmlprag/, Guile-Lib} for the @code{go} importer (@pxref{Invoking guix import}) and for some of the ``updaters'' (@pxref{Invoking guix refresh})."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:1038
msgid "When @url{http://www.bzip.org, libbz2} is available, @command{guix-daemon} can use it to compress build logs."
msgstr "Quando @url{http://www.bzip.org, libbz2} está disponível, @command{guix-daemon} pode usá-lo para comprimir logs de compilação."

#. type: Plain text
#: guix-git/doc/guix.texi:1042
msgid "Unless @option{--disable-daemon} was passed to @command{configure}, the following packages are also needed:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1044
#, no-wrap
msgid "@url{https://gnupg.org/, GNU libgcrypt};"
msgstr "@url{https://gnupg.org/, GNU libgcrypt};"

#. type: item
#: guix-git/doc/guix.texi:1045
#, no-wrap
msgid "@url{https://sqlite.org, SQLite 3};"
msgstr "@url{https://sqlite.org, SQLite 3};"

#. type: item
#: guix-git/doc/guix.texi:1046
#, no-wrap
msgid "@url{https://gcc.gnu.org, GCC's g++}, with support for the"
msgstr "@url{https://gcc.gnu.org, GCC's g++}, com suporte ao"

#. type: itemize
#: guix-git/doc/guix.texi:1048
msgid "C++11 standard."
msgstr "padrão C++11."

#. type: cindex
#: guix-git/doc/guix.texi:1050
#, no-wrap
msgid "state directory"
msgstr "diretório de estado"

#. type: cindex
#: guix-git/doc/guix.texi:1051
#, fuzzy, no-wrap
#| msgid "--localstatedir"
msgid "localstatedir"
msgstr "--localstatedir"

#. type: cindex
#: guix-git/doc/guix.texi:1052
#, fuzzy, no-wrap
#| msgid "System Configuration"
msgid "system configuration directory"
msgstr "Configuração do sistema"

#. type: cindex
#: guix-git/doc/guix.texi:1053
#, fuzzy, no-wrap
#| msgid "config"
msgid "sysconfdir"
msgstr "config"

#. type: Plain text
#: guix-git/doc/guix.texi:1066
msgid "When configuring Guix on a system that already has a Guix installation, be sure to specify the same state directory as the existing installation using the @option{--localstatedir} option of the @command{configure} script (@pxref{Directory Variables, @code{localstatedir},, standards, GNU Coding Standards}).  Usually, this @var{localstatedir} option is set to the value @file{/var}.  The @command{configure} script protects against unintended misconfiguration of @var{localstatedir} so you do not inadvertently corrupt your store (@pxref{The Store}).  The configuration directory should also be configured by setting the @option{--sysconfdir} option to the @file{/etc} value, which is the location used by Guix to store for example the access control list of authorized machines and the definition of offload machines."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:1070
#, no-wrap
msgid "test suite"
msgstr "suíte/conjunto de testes"

#. type: Plain text
#: guix-git/doc/guix.texi:1076
msgid "After a successful @command{configure} and @code{make} run, it is a good idea to run the test suite.  It can help catch issues with the setup or environment, or bugs in Guix itself---and really, reporting test failures is a good way to help improve the software.  To run the test suite, type:"
msgstr "Depois que um @command{configure} e @code{make} bem-sucedido forem executados, é uma boa ideia executar o conjunto de testes. Ele pode ajudar a detectar problemas com a configuração ou o ambiente, ou com bugs no próprio Guix – e realmente, relatar falhas de teste é uma boa maneira de ajudar a melhorar o software. Para executar o conjunto de testes, digite:"

#. type: example
#: guix-git/doc/guix.texi:1079
#, no-wrap
msgid "make check\n"
msgstr "make check\n"

#. type: Plain text
#: guix-git/doc/guix.texi:1086
msgid "Test cases can run in parallel: you can use the @code{-j} option of GNU@tie{}make to speed things up.  The first run may take a few minutes on a recent machine; subsequent runs will be faster because the store that is created for test purposes will already have various things in cache."
msgstr "Os casos de teste podem ser executados em paralelo: você pode usar a opção @code{-j} do GNU@tie{}make para acelerar as coisas. A primeira execução pode levar alguns minutos em uma máquina recente; as execuções subsequentes serão mais rápidas porque o armazém criado para fins de teste já terá vários itens no cache."

#. type: Plain text
#: guix-git/doc/guix.texi:1089
msgid "It is also possible to run a subset of the tests by defining the @code{TESTS} makefile variable as in this example:"
msgstr "Também é possível executar um subconjunto dos testes definindo a variável makefile @code{TESTS} como neste exemplo:"

#. type: example
#: guix-git/doc/guix.texi:1092
#, no-wrap
msgid "make check TESTS=\"tests/store.scm tests/cpio.scm\"\n"
msgstr "make check TESTS=\"tests/store.scm tests/cpio.scm\"\n"

#. type: Plain text
#: guix-git/doc/guix.texi:1097
msgid "By default, tests results are displayed at a file level.  In order to see the details of every individual test cases, it is possible to define the @code{SCM_LOG_DRIVER_FLAGS} makefile variable as in this example:"
msgstr "Por padrão, os resultados dos testes são exibidos em um nível de arquivo. Para ver os detalhes de cada caso de teste individual, é possível definir a variável makefile @code{SCM_LOG_DRIVER_FLAGS} como neste exemplo:"

#. type: example
#: guix-git/doc/guix.texi:1100
#, no-wrap
msgid "make check TESTS=\"tests/base64.scm\" SCM_LOG_DRIVER_FLAGS=\"--brief=no\"\n"
msgstr "make check TESTS=\"tests/base64.scm\" SCM_LOG_DRIVER_FLAGS=\"--brief=no\"\n"

#. type: Plain text
#: guix-git/doc/guix.texi:1108
msgid "The underlying SRFI 64 custom Automake test driver used for the 'check' test suite (located at @file{build-aux/test-driver.scm}) also allows selecting which test cases to run at a finer level, via its @option{--select} and @option{--exclude} options.  Here's an example, to run all the test cases from the @file{tests/packages.scm} test file whose names start with ``transaction-upgrade-entry'':"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:1112
#, no-wrap
msgid ""
"export SCM_LOG_DRIVER_FLAGS=\"--select=^transaction-upgrade-entry\"\n"
"make check TESTS=\"tests/packages.scm\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1118
msgid "Those wishing to inspect the results of failed tests directly from the command line can add the @option{--errors-only=yes} option to the @code{SCM_LOG_DRIVER_FLAGS} makefile variable and set the @code{VERBOSE} Automake makefile variable, as in:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:1121
#, no-wrap
msgid "make check SCM_LOG_DRIVER_FLAGS=\"--brief=no --errors-only=yes\" VERBOSE=1\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1126
msgid "The @option{--show-duration=yes} option can be used to print the duration of the individual test cases, when used in combination with @option{--brief=no}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:1129
#, no-wrap
msgid "make check SCM_LOG_DRIVER_FLAGS=\"--brief=no --show-duration=yes\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1133
msgid "@xref{Parallel Test Harness,,,automake,GNU Automake} for more information about the Automake Parallel Test Harness."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1138
msgid "Upon failure, please email @email{bug-guix@@gnu.org} and attach the @file{test-suite.log} file.  Please specify the Guix version being used as well as version numbers of the dependencies (@pxref{Requirements}) in your message."
msgstr "Em caso de falha, envie um e-mail para @email{bug-guix@@gnu.org} e anexe o arquivo @file{test-suite.log}. Por favor, especifique a versão do Guix que está sendo usada, bem como os números de versão das dependências (@pxref{Requisitos}) em sua mensagem."

#. type: Plain text
#: guix-git/doc/guix.texi:1142
msgid "Guix also comes with a whole-system test suite that tests complete Guix System instances.  It can only run on systems where Guix is already installed, using:"
msgstr "O Guix também vem com um conjunto de testes de sistema completo que testa instâncias completas do Guix System. Ele só pode ser executado em sistemas nos quais o Guix já está instalado, usando:"

#. type: example
#: guix-git/doc/guix.texi:1145
#, no-wrap
msgid "make check-system\n"
msgstr "make check-system\n"

#. type: Plain text
#: guix-git/doc/guix.texi:1149
msgid "or, again, by defining @code{TESTS} to select a subset of tests to run:"
msgstr "ou, novamente, definindo @code{TESTS} para selecionar um subconjunto de testes a serem executados:"

#. type: example
#: guix-git/doc/guix.texi:1152
#, no-wrap
msgid "make check-system TESTS=\"basic mcron\"\n"
msgstr "make check-system TESTS=\"basic mcron\"\n"

#. type: Plain text
#: guix-git/doc/guix.texi:1160
msgid "These system tests are defined in the @code{(gnu tests @dots{})} modules.  They work by running the operating systems under test with lightweight instrumentation in a virtual machine (VM).  They can be computationally intensive or rather cheap, depending on whether substitutes are available for their dependencies (@pxref{Substitutes}).  Some of them require a lot of storage space to hold VM images."
msgstr "Esses testes de sistema são definidos nos módulos @code{(gnu tests @dots{})}. Eles trabalham executando os sistemas operacionais em teste com instrumentação leve em uma máquina virtual (VM). Eles podem ser computacionalmente intensivos ou bastante baratos, dependendo se os substitutos estão disponíveis para suas dependências (@pxref{Substitutos}). Alguns deles exigem muito espaço de armazenamento para armazenar imagens de VM."

#. type: Plain text
#: guix-git/doc/guix.texi:1163
msgid "Again in case of test failures, please send @email{bug-guix@@gnu.org} all the details."
msgstr "Novamente, em caso de falhas nos testes, por favor envie @email{bug-guix@@gnu.org} todos os detalhes."

#. type: cindex
#: guix-git/doc/guix.texi:1167
#, no-wrap
msgid "daemon"
msgstr "daemon"

#. type: Plain text
#: guix-git/doc/guix.texi:1175
msgid "Operations such as building a package or running the garbage collector are all performed by a specialized process, the @dfn{build daemon}, on behalf of clients.  Only the daemon may access the store and its associated database.  Thus, any operation that manipulates the store goes through the daemon.  For instance, command-line tools such as @command{guix package} and @command{guix build} communicate with the daemon (@i{via} remote procedure calls) to instruct it what to do."
msgstr "Operações como compilar um pacote ou executar o coletor de lixo são todas executadas por um processo especializado, o @dfn{build daemon}, em nome dos clientes. Apenas o daemon pode acessar o armazém e seu banco de dados associado. Assim, qualquer operação que manipule o armazém passa pelo daemon. Por exemplo, ferramentas de linha de comando como @command{guix package} e @command{guix build} se comunicam com o daemon (@i{via} chamadas de procedimento remoto) para instruir o que fazer."

#. type: Plain text
#: guix-git/doc/guix.texi:1179
msgid "The following sections explain how to prepare the build daemon's environment.  See also @ref{Substitutes}, for information on how to allow the daemon to download pre-built binaries."
msgstr "As seções a seguir explicam como preparar o ambiente do daemon de compilação. Veja também @ref{Substitutos}, para informações sobre como permitir que o daemon baixe binários pré-compilados."

#. type: cindex
#: guix-git/doc/guix.texi:1189 guix-git/doc/guix.texi:1680
#, no-wrap
msgid "build environment"
msgstr "ambiente de compilação"

#. type: Plain text
#: guix-git/doc/guix.texi:1197
msgid "In a standard multi-user setup, Guix and its daemon---the @command{guix-daemon} program---are installed by the system administrator; @file{/gnu/store} is owned by @code{root} and @command{guix-daemon} runs as @code{root}.  Unprivileged users may use Guix tools to build packages or otherwise access the store, and the daemon will do it on their behalf, ensuring that the store is kept in a consistent state, and allowing built packages to be shared among users."
msgstr "Em uma configuração multiusuário padrão, o Guix e seu daemon – o programa @command{guix-daemon} – são instalados pelo administrador do sistema; @file{/gnu/store} é de propriedade de @code{root} e @command{guix-daemon} é executado como @code{root}. Usuários desprivilegiados podem usar ferramentas Guix para criar pacotes ou acessar o armazém, e o daemon fará isso em seu nome, garantindo que o armazém seja mantido em um estado consistente e permitindo que pacotes construídos sejam compartilhados entre os usuários."

#. type: cindex
#: guix-git/doc/guix.texi:1198
#, no-wrap
msgid "build users"
msgstr "usuários de compilação"

#. type: Plain text
#: guix-git/doc/guix.texi:1209
msgid "When @command{guix-daemon} runs as @code{root}, you may not want package build processes themselves to run as @code{root} too, for obvious security reasons.  To avoid that, a special pool of @dfn{build users} should be created for use by build processes started by the daemon.  These build users need not have a shell and a home directory: they will just be used when the daemon drops @code{root} privileges in build processes.  Having several such users allows the daemon to launch distinct build processes under separate UIDs, which guarantees that they do not interfere with each other---an essential feature since builds are regarded as pure functions (@pxref{Introduction})."
msgstr "Quando @command{guix-daemon} é executado como @code{root}, você pode não querer que os próprios processos de compilação de pacotes também sejam executados como @code{root}, por razões óbvias de segurança. Para evitar isso, um conjunto especial de @dfn{usuários de compilação} deve ser criado para uso pelos processos de construção iniciados pelo daemon. Esses usuários de compilação não precisam ter um shell e um diretório inicial: eles serão usados apenas quando o daemon der um privilégio @code{root} nos processos de compilação. Ter vários desses usuários permite que o daemon ative processos de compilação distintos sob UIDs separados, o que garante que eles não interfiram uns com os outros - um recurso essencial, pois as compilações são consideradas funções puras (@pxref{Introdução})."

#. type: Plain text
#: guix-git/doc/guix.texi:1212
msgid "On a GNU/Linux system, a build user pool may be created like this (using Bash syntax and the @code{shadow} commands):"
msgstr "Em um sistema GNU/Linux, um conjunto de usuários de construção pode ser criado assim (usando a sintaxe Bash e os comandos @code{shadow}):"

#. type: example
#: guix-git/doc/guix.texi:1224
#, fuzzy, no-wrap
msgid ""
"# groupadd --system guixbuild\n"
"# for i in $(seq -w 1 10);\n"
"  do\n"
"    useradd -g guixbuild -G guixbuild           \\\n"
"            -d /var/empty -s $(which nologin)   \\\n"
"            -c \"Guix build user $i\" --system    \\\n"
"            guixbuilder$i;\n"
"  done\n"
msgstr ""
"# groupadd --system guixbuild\n"
"# for i in `seq -w 1 10`;\n"
"  do\n"
"    useradd -g guixbuild -G guixbuild           \\\n"
"            -d /var/empty -s `which nologin`    \\\n"
"            -c \"Guix build user $i\" --system    \\\n"
"            guixbuilder$i;\n"
"  done\n"

#. type: Plain text
#: guix-git/doc/guix.texi:1234
msgid "The number of build users determines how many build jobs may run in parallel, as specified by the @option{--max-jobs} option (@pxref{Invoking guix-daemon, @option{--max-jobs}}).  To use @command{guix system vm} and related commands, you may need to add the build users to the @code{kvm} group so they can access @file{/dev/kvm}, using @code{-G guixbuild,kvm} instead of @code{-G guixbuild} (@pxref{Invoking guix system})."
msgstr "O número de usuários de compilação determina quantos trabalhos de compilação podem ser executados em paralelo, conforme especificado pela opção @option{--max-jobs} (@pxref{Invocando guix-daemon, @option{--max-jobs}}). Para usar @command{guix system vm} e comandos relacionados, você pode precisar adicionar os usuários de compilação ao grupo @code{kvm} para que eles possam acessar @file{/dev/kvm}, usando @code{-G guixbuild,kvm} em vez de @code{-G guixbuild} (@pxref{Invocando guix system})."

#. type: Plain text
#: guix-git/doc/guix.texi:1243
#, fuzzy
#| msgid "The @code{guix-daemon} program may then be run as @code{root} with the following command@footnote{If your machine uses the systemd init system, dropping the @file{@var{prefix}/lib/systemd/system/guix-daemon.service} file in @file{/etc/systemd/system} will ensure that @command{guix-daemon} is automatically started.  Similarly, if your machine uses the Upstart init system, drop the @file{@var{prefix}/lib/upstart/system/guix-daemon.conf} file in @file{/etc/init}.}:"
msgid "The @code{guix-daemon} program may then be run as @code{root} with the following command@footnote{If your machine uses the systemd init system, copying the @file{@var{prefix}/lib/systemd/system/guix-daemon.service} file to @file{/etc/systemd/system} will ensure that @command{guix-daemon} is automatically started.  Similarly, if your machine uses the Upstart init system, copy the @file{@var{prefix}/lib/upstart/system/guix-daemon.conf} file to @file{/etc/init}.}:"
msgstr "O programa @code{guix-daemon} pode então ser executado como @code{root} com o seguinte comando@footnote{Se sua máquina usa o sistema init systemd, colocar o arquivo @file{@var{prefixo}/lib/systemd/system/guix-daemon.service} em @file{/etc/systemd/system} irá assegurar que @command{guix-daemon} seja iniciado automaticamente. Da mesma forma, se a sua máquina usa o sistema init Upstart, coloque o arquivo @file{@var{prefixo}/lib/upstart/system/guix-daemon.conf} em @file{/etc/init}.}:"

#. type: example
#: guix-git/doc/guix.texi:1246 guix-git/doc/guix.texi:1669
#, no-wrap
msgid "# guix-daemon --build-users-group=guixbuild\n"
msgstr "# guix-daemon --build-users-group=guixbuild\n"

#. type: cindex
#: guix-git/doc/guix.texi:1248 guix-git/doc/guix.texi:1678
#, no-wrap
msgid "chroot"
msgstr "chroot"

#. type: Plain text
#: guix-git/doc/guix.texi:1253
msgid "This way, the daemon starts build processes in a chroot, under one of the @code{guixbuilder} users.  On GNU/Linux, by default, the chroot environment contains nothing but:"
msgstr "Dessa forma, o daemon inicia os processos de compilação em um chroot, sob um dos usuários @code{guixbuilder}. No GNU/Linux, por padrão, o ambiente chroot contém nada além de:"

#. type: itemize
#: guix-git/doc/guix.texi:1261
msgid "a minimal @code{/dev} directory, created mostly independently from the host @code{/dev}@footnote{``Mostly'', because while the set of files that appear in the chroot's @code{/dev} is fixed, most of these files can only be created if the host has them.};"
msgstr "um diretório @code{/dev} mínimo, criado principalmente independentemente do @code{/dev} do hospedeiro@footnote{``Principalmente'' porque enquanto o conjunto de arquivos que aparece no @code{/dev} do chroot é corrigido, a maioria desses arquivos só pode ser criada se o hospedeiro os possuir.};"

#. type: itemize
#: guix-git/doc/guix.texi:1265
msgid "the @code{/proc} directory; it only shows the processes of the container since a separate PID name space is used;"
msgstr "o diretório @code{/proc}; mostra apenas os processos do contêiner desde que um espaço de nome PID separado é usado;"

#. type: itemize
#: guix-git/doc/guix.texi:1269
msgid "@file{/etc/passwd} with an entry for the current user and an entry for user @file{nobody};"
msgstr "@file{/etc/passwd} com uma entrada para o usuário atual e uma entrada para o usuário @file{nobody};"

#. type: itemize
#: guix-git/doc/guix.texi:1272
msgid "@file{/etc/group} with an entry for the user's group;"
msgstr "@file{/etc/group} com uma entrada para o grupo de usuários;"

#. type: itemize
#: guix-git/doc/guix.texi:1276
msgid "@file{/etc/hosts} with an entry that maps @code{localhost} to @code{127.0.0.1};"
msgstr "@file{/etc/hosts} com uma entrada que mapeia @code{localhost} para @code{127.0.0.1};"

#. type: itemize
#: guix-git/doc/guix.texi:1279
msgid "a writable @file{/tmp} directory."
msgstr "um diretório @file{/tmp} com permissão de escrita."

#. type: Plain text
#: guix-git/doc/guix.texi:1285
msgid "The chroot does not contain a @file{/home} directory, and the @env{HOME} environment variable is set to the non-existent @file{/homeless-shelter}.  This helps to highlight inappropriate uses of @env{HOME} in the build scripts of packages."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1293
msgid "You can influence the directory where the daemon stores build trees @i{via} the @env{TMPDIR} environment variable.  However, the build tree within the chroot is always called @file{/tmp/guix-build-@var{name}.drv-0}, where @var{name} is the derivation name---e.g., @code{coreutils-8.24}.  This way, the value of @env{TMPDIR} does not leak inside build environments, which avoids discrepancies in cases where build processes capture the name of their build tree."
msgstr ""

#. type: vindex
#: guix-git/doc/guix.texi:1294 guix-git/doc/guix.texi:4279
#, no-wrap
msgid "http_proxy"
msgstr "http_proxy"

#. type: vindex
#: guix-git/doc/guix.texi:1295 guix-git/doc/guix.texi:4280
#, no-wrap
msgid "https_proxy"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1300
msgid "The daemon also honors the @env{http_proxy} and @env{https_proxy} environment variables for HTTP and HTTPS downloads it performs, be it for fixed-output derivations (@pxref{Derivations}) or for substitutes (@pxref{Substitutes})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1308
msgid "If you are installing Guix as an unprivileged user, it is still possible to run @command{guix-daemon} provided you pass @option{--disable-chroot}.  However, build processes will not be isolated from one another, and not from the rest of the system.  Thus, build processes may interfere with each other, and may access programs, libraries, and other files available on the system---making it much harder to view them as @emph{pure} functions."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:1311
#, no-wrap
msgid "Using the Offload Facility"
msgstr "Usando o recurso de descarregamento"

#. type: cindex
#: guix-git/doc/guix.texi:1313 guix-git/doc/guix.texi:1739
#, no-wrap
msgid "offloading"
msgstr "descarregamento"

#. type: cindex
#: guix-git/doc/guix.texi:1314
#, no-wrap
msgid "build hook"
msgstr "hook de compilação"

#. type: Plain text
#: guix-git/doc/guix.texi:1333
msgid "When desired, the build daemon can @dfn{offload} derivation builds to other machines running Guix, using the @code{offload} @dfn{build hook}@footnote{This feature is available only when @uref{https://github.com/artyom-poptsov/guile-ssh, Guile-SSH} is present.}.  When that feature is enabled, a list of user-specified build machines is read from @file{/etc/guix/machines.scm}; every time a build is requested, for instance via @code{guix build}, the daemon attempts to offload it to one of the machines that satisfy the constraints of the derivation, in particular its system types---e.g., @code{x86_64-linux}.  A single machine can have multiple system types, either because its architecture natively supports it, via emulation (@pxref{transparent-emulation-qemu, Transparent Emulation with QEMU}), or both.  Missing prerequisites for the build are copied over SSH to the target machine, which then proceeds with the build; upon success the output(s) of the build are copied back to the initial machine.  The offload facility comes with a basic scheduler that attempts to select the best machine.  The best machine is chosen among the available machines based on criteria such as:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:1339
msgid "The availability of a build slot.  A build machine can have as many build slots (connections) as the value of the @code{parallel-builds} field of its @code{build-machine} object."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:1343
msgid "Its relative speed, as defined via the @code{speed} field of its @code{build-machine} object."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:1348
msgid "Its load.  The normalized machine load must be lower than a threshold value, configurable via the @code{overload-threshold} field of its @code{build-machine} object."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:1351
msgid "Disk space availability.  More than a 100 MiB must be available."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1354
msgid "The @file{/etc/guix/machines.scm} file typically looks like this:"
msgstr "O arquivo @file{/etc/guix/machines.scm} geralmente se parece com isso:"

#. type: lisp
#: guix-git/doc/guix.texi:1362
#, no-wrap
msgid ""
"(list (build-machine\n"
"        (name \"eightysix.example.org\")\n"
"        (systems (list \"x86_64-linux\" \"i686-linux\"))\n"
"        (host-key \"ssh-ed25519 AAAAC3Nza@dots{}\")\n"
"        (user \"bob\")\n"
"        (speed 2.))     ;incredibly fast!\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:1368
#, no-wrap
msgid ""
"      (build-machine\n"
"        (name \"armeight.example.org\")\n"
"        (systems (list \"aarch64-linux\"))\n"
"        (host-key \"ssh-rsa AAAAB3Nza@dots{}\")\n"
"        (user \"alice\")\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:1372
#, no-wrap
msgid ""
"        ;; Remember 'guix offload' is spawned by\n"
"        ;; 'guix-daemon' as root.\n"
"        (private-key \"/root/.ssh/identity-for-guix\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1378
msgid "In the example above we specify a list of two build machines, one for the @code{x86_64} and @code{i686} architectures and one for the @code{aarch64} architecture."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1387
msgid "In fact, this file is---not surprisingly!---a Scheme file that is evaluated when the @code{offload} hook is started.  Its return value must be a list of @code{build-machine} objects.  While this example shows a fixed list of build machines, one could imagine, say, using DNS-SD to return a list of potential build machines discovered in the local network (@pxref{Introduction, Guile-Avahi,, guile-avahi, Using Avahi in Guile Scheme Programs}).  The @code{build-machine} data type is detailed below."
msgstr "De fato, esse arquivo é -- não surpreendentemente! -- um arquivo de esquema que é avaliado quando o hook @code{offload} é iniciado. Seu valor de retorno deve ser uma lista de objetos de @code{build-machine}. Embora este exemplo mostre uma lista fixa de máquinas de compilação, pode-se imaginar, digamos, usando DNS-SD para retornar uma lista de possíveis máquinas de compilação descobertas na rede local (@pxref{Introduction, Guile-Avahi ,, guile-avahi, Using Avahi in Guile Scheme Programs}). O tipo de dados de @code{build-machine} está detalhado abaixo."

#. type: deftp
#: guix-git/doc/guix.texi:1388
#, no-wrap
msgid "{Data Type} build-machine"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:1391
msgid "This data type represents build machines to which the daemon may offload builds.  The important fields are:"
msgstr "Esse tipo de dados representa máquinas de compilação nas quais o daemon pode descarregar compilações. Os campos importantes são:"

#. type: code{#1}
#: guix-git/doc/guix.texi:1394 guix-git/doc/guix.texi:7766
#: guix-git/doc/guix.texi:8689 guix-git/doc/guix.texi:17672
#: guix-git/doc/guix.texi:17771 guix-git/doc/guix.texi:18011
#: guix-git/doc/guix.texi:20030 guix-git/doc/guix.texi:20672
#: guix-git/doc/guix.texi:20932 guix-git/doc/guix.texi:24848
#: guix-git/doc/guix.texi:27777 guix-git/doc/guix.texi:29318
#: guix-git/doc/guix.texi:30115 guix-git/doc/guix.texi:30482
#: guix-git/doc/guix.texi:30526 guix-git/doc/guix.texi:32697
#: guix-git/doc/guix.texi:35478 guix-git/doc/guix.texi:35516
#: guix-git/doc/guix.texi:38457 guix-git/doc/guix.texi:38474
#: guix-git/doc/guix.texi:39276 guix-git/doc/guix.texi:41221
#: guix-git/doc/guix.texi:41546 guix-git/doc/guix.texi:44606
#, no-wrap
msgid "name"
msgstr "name"

#. type: table
#: guix-git/doc/guix.texi:1396
msgid "The host name of the remote machine."
msgstr "O nome de host da máquina remota."

#. type: item
#: guix-git/doc/guix.texi:1397
#, no-wrap
msgid "systems"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1400
msgid "The system types the remote machine supports---e.g., @code{(list \"x86_64-linux\" \"i686-linux\")}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:1401 guix-git/doc/guix.texi:20682
#, no-wrap
msgid "user"
msgstr "user"

#. type: table
#: guix-git/doc/guix.texi:1405
msgid "The user account to use when connecting to the remote machine over SSH.  Note that the SSH key pair must @emph{not} be passphrase-protected, to allow non-interactive logins."
msgstr "A conta de usuário a ser usada ao conectar-se à máquina remota por SSH. Observe que o par de chaves SSH deve @emph{não} protegido por senha, para permitir logins não interativos."

#. type: item
#: guix-git/doc/guix.texi:1406
#, no-wrap
msgid "host-key"
msgstr "host-key"

#. type: table
#: guix-git/doc/guix.texi:1410
msgid "This must be the machine's SSH @dfn{public host key} in OpenSSH format.  This is used to authenticate the machine when we connect to it.  It is a long string that looks like this:"
msgstr "Essa deve ser a SSH @dfn{chave pública do host} da máquina no formato OpenSSH. Isso é usado para autenticar a máquina quando nos conectamos a ela. É uma string longa que se parece com isso:"

#. type: example
#: guix-git/doc/guix.texi:1413
#, no-wrap
msgid "ssh-ed25519 AAAAC3NzaC@dots{}mde+UhL hint@@example.org\n"
msgstr "ssh-ed25519 AAAAC3NzaC@dots{}mde+UhL hint@@example.org\n"

#. type: table
#: guix-git/doc/guix.texi:1418
msgid "If the machine is running the OpenSSH daemon, @command{sshd}, the host key can be found in a file such as @file{/etc/ssh/ssh_host_ed25519_key.pub}."
msgstr "Se a máquina estiver executando o daemon OpenSSH, @command{sshd}, a chave do host poderá ser encontrada em um arquivo como @file{/etc/ssh/ssh_host_ed25519_key.pub}."

#. type: table
#: guix-git/doc/guix.texi:1423
msgid "If the machine is running the SSH daemon of GNU@tie{}lsh, @command{lshd}, the host key is in @file{/etc/lsh/host-key.pub} or a similar file.  It can be converted to the OpenSSH format using @command{lsh-export-key} (@pxref{Converting keys,,, lsh, LSH Manual}):"
msgstr "Se a máquina estiver executando o daemon SSH do GNU@tie{}lsh, @command{lshd}, a chave do host estará em @file{/etc/lsh/host-key.pub} ou em um arquivo semelhante. Ele pode ser convertido para o formato OpenSSH usando o @command{lsh-export-key} (@pxref{Converting keys,,, lsh, LSH Manual}):"

#. type: example
#: guix-git/doc/guix.texi:1427
#, no-wrap
msgid ""
"$ lsh-export-key --openssh < /etc/lsh/host-key.pub\n"
"ssh-rsa AAAAB3NzaC1yc2EAAAAEOp8FoQAAAQEAs1eB46LV@dots{}\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:1432
msgid "A number of optional fields may be specified:"
msgstr "Vários campos opcionais podem ser especificados:"

#. type: item
#: guix-git/doc/guix.texi:1435 guix-git/doc/guix.texi:40697
#, no-wrap
msgid "@code{port} (default: @code{22})"
msgstr "@code{port} (padrão: @code{22})"

#. type: table
#: guix-git/doc/guix.texi:1437
msgid "Port number of SSH server on the machine."
msgstr "O número da porta para o servidor SSH na máquina."

#. type: item
#: guix-git/doc/guix.texi:1438
#, no-wrap
msgid "@code{private-key} (default: @file{~root/.ssh/id_rsa})"
msgstr "@code{private-key} (padrão: @file{~root/.ssh/id_rsa})"

#. type: table
#: guix-git/doc/guix.texi:1441
msgid "The SSH private key file to use when connecting to the machine, in OpenSSH format.  This key must not be protected with a passphrase."
msgstr "O arquivo de chave privada SSH a ser usado ao conectar-se à máquina, no formato OpenSSH. Esta chave não deve ser protegida com uma senha."

#. type: table
#: guix-git/doc/guix.texi:1444
msgid "Note that the default value is the private key @emph{of the root account}.  Make sure it exists if you use the default."
msgstr "Observe que o valor padrão é a chave privada @emph{da usuário root}. Verifique se ele existe se você usar o padrão."

#. type: item
#: guix-git/doc/guix.texi:1445
#, no-wrap
msgid "@code{compression} (default: @code{\"zlib@@openssh.com,zlib\"})"
msgstr "@code{compression} (padrão: @code{\"zlib@@openssh.com,zlib\"})"

#. type: itemx
#: guix-git/doc/guix.texi:1446
#, no-wrap
msgid "@code{compression-level} (default: @code{3})"
msgstr "@code{compression-level} (padrão: @code{3})"

#. type: table
#: guix-git/doc/guix.texi:1448
msgid "The SSH-level compression methods and compression level requested."
msgstr "Os métodos de compactação no nível SSH e o nível de compactação solicitado."

#. type: table
#: guix-git/doc/guix.texi:1451
msgid "Note that offloading relies on SSH compression to reduce bandwidth usage when transferring files to and from build machines."
msgstr "Observe que o descarregamento depende da compactação SSH para reduzir o uso da largura de banda ao transferir arquivos de e para máquinas de compilação."

#. type: item
#: guix-git/doc/guix.texi:1452
#, no-wrap
msgid "@code{daemon-socket} (default: @code{\"/var/guix/daemon-socket/socket\"})"
msgstr "@code{daemon-socket} (padrão: @code{\"/var/guix/daemon-socket/socket\"})"

#. type: table
#: guix-git/doc/guix.texi:1455
msgid "File name of the Unix-domain socket @command{guix-daemon} is listening to on that machine."
msgstr "O nome do arquivo do soquete do domínio Unix @command{guix-daemon} está escutando nessa máquina."

#. type: item
#: guix-git/doc/guix.texi:1456
#, fuzzy, no-wrap
#| msgid "@code{no-resolv?} (default: @code{#f})"
msgid "@code{overload-threshold} (default: @code{0.8})"
msgstr "@code{no-resolv?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:1462
msgid "The load threshold above which a potential offload machine is disregarded by the offload scheduler.  The value roughly translates to the total processor usage of the build machine, ranging from 0.0 (0%) to 1.0 (100%).  It can also be disabled by setting @code{overload-threshold} to @code{#f}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1463
#, no-wrap
msgid "@code{parallel-builds} (default: @code{1})"
msgstr "@code{parallel-builds} (padrão: @code{1})"

#. type: table
#: guix-git/doc/guix.texi:1465
msgid "The number of builds that may run in parallel on the machine."
msgstr "O número de compilações que podem ser executadas paralelamente na máquina."

#. type: item
#: guix-git/doc/guix.texi:1466
#, no-wrap
msgid "@code{speed} (default: @code{1.0})"
msgstr "@code{speed} (padrão: @code{1.0})"

#. type: table
#: guix-git/doc/guix.texi:1469
msgid "A ``relative speed factor''.  The offload scheduler will tend to prefer machines with a higher speed factor."
msgstr "Um ``fator de velocidade relativo''. O agendador de descarregamento tenderá a preferir máquinas com um fator de velocidade mais alto."

#. type: item
#: guix-git/doc/guix.texi:1470
#, no-wrap
msgid "@code{features} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:1475
msgid "A list of strings denoting specific features supported by the machine.  An example is @code{\"kvm\"} for machines that have the KVM Linux modules and corresponding hardware support.  Derivations can request features by name, and they will be scheduled on matching build machines."
msgstr "Uma lista de strgins que denotam recursos específicos suportados pela máquina. Um exemplo é @code{\"kvm\"} para máquinas que possuem os módulos KVM Linux e o suporte de hardware correspondente. As derivações podem solicitar recursos pelo nome e serão agendadas nas máquinas de compilação correspondentes."

#. type: Plain text
#: guix-git/doc/guix.texi:1481
msgid "The @command{guix} command must be in the search path on the build machines.  You can check whether this is the case by running:"
msgstr "O comando @command{guix} deve estar no caminho de pesquisa nas máquinas de compilação. Você pode verificar se este é o caso executando:"

#. type: example
#: guix-git/doc/guix.texi:1484
#, no-wrap
msgid "ssh build-machine guix repl --version\n"
msgstr "ssh build-machine guix repl --version\n"

#. type: Plain text
#: guix-git/doc/guix.texi:1491
msgid "There is one last thing to do once @file{machines.scm} is in place.  As explained above, when offloading, files are transferred back and forth between the machine stores.  For this to work, you first need to generate a key pair on each machine to allow the daemon to export signed archives of files from the store (@pxref{Invoking guix archive}):"
msgstr "Há uma última coisa a fazer quando o @file{machines.scm} está em vigor. Como explicado acima, ao descarregar, os arquivos são transferidos entre os armazéns das máquinas. Para que isso funcione, primeiro você precisa gerar um par de chaves em cada máquina para permitir que o daemon exporte arquivos assinados de arquivos do armazém (@pxref{Invocando guix archive}):"

#. type: example
#: guix-git/doc/guix.texi:1494 guix-git/doc/guix.texi:40601
#, no-wrap
msgid "# guix archive --generate-key\n"
msgstr "# guix archive --generate-key\n"

#. type: Plain text
#: guix-git/doc/guix.texi:1499
msgid "Each build machine must authorize the key of the master machine so that it accepts store items it receives from the master:"
msgstr "Cada máquina de construção deve autorizar a chave da máquina principal para que ela aceite itens do armazém que recebe do mestre:"

#. type: example
#: guix-git/doc/guix.texi:1502
#, no-wrap
msgid "# guix archive --authorize < master-public-key.txt\n"
msgstr "# guix archive --authorize < master-public-key.txt\n"

#. type: Plain text
#: guix-git/doc/guix.texi:1506
msgid "Likewise, the master machine must authorize the key of each build machine."
msgstr "Da mesma forma, a máquina principal deve autorizar a chave de cada máquina de compilação."

#. type: Plain text
#: guix-git/doc/guix.texi:1512
msgid "All the fuss with keys is here to express pairwise mutual trust relations between the master and the build machines.  Concretely, when the master receives files from a build machine (and @i{vice versa}), its build daemon can make sure they are genuine, have not been tampered with, and that they are signed by an authorized key."
msgstr "Todo esse barulho com as chaves está aqui para expressar relações de confiança mútua de pares entre a máquina mestre e as de compilação. Concretamente, quando o mestre recebe arquivos de uma máquina de compilação (e @i{vice-versa}), seu daemon de compilação pode garantir que eles sejam genuínos, não tenham sido violados e que sejam assinados por uma chave autorizada."

#. type: cindex
#: guix-git/doc/guix.texi:1513
#, no-wrap
msgid "offload test"
msgstr "offload test"

#. type: Plain text
#: guix-git/doc/guix.texi:1516
msgid "To test whether your setup is operational, run this command on the master node:"
msgstr "Para testar se sua configuração está operacional, execute este comando no nó principal:"

#. type: example
#: guix-git/doc/guix.texi:1519
#, no-wrap
msgid "# guix offload test\n"
msgstr "# guix offload test\n"

#. type: Plain text
#: guix-git/doc/guix.texi:1525
msgid "This will attempt to connect to each of the build machines specified in @file{/etc/guix/machines.scm}, make sure Guix is available on each machine, attempt to export to the machine and import from it, and report any error in the process."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1528
msgid "If you want to test a different machine file, just specify it on the command line:"
msgstr "Se você quiser testar um arquivo de máquina diferente, basta especificá-lo na linha de comando:"

#. type: example
#: guix-git/doc/guix.texi:1531
#, no-wrap
msgid "# guix offload test machines-qualif.scm\n"
msgstr "# guix offload test machines-qualif.scm\n"

#. type: Plain text
#: guix-git/doc/guix.texi:1535
msgid "Last, you can test the subset of the machines whose name matches a regular expression like this:"
msgstr "Por fim, você pode testar o subconjunto das máquinas cujo nome corresponde a uma expressão regular como esta:"

#. type: example
#: guix-git/doc/guix.texi:1538
#, no-wrap
msgid "# guix offload test machines.scm '\\.gnu\\.org$'\n"
msgstr "# guix offload test machines.scm '\\.gnu\\.org$'\n"

#. type: cindex
#: guix-git/doc/guix.texi:1540
#, no-wrap
msgid "offload status"
msgstr "offload status"

#. type: Plain text
#: guix-git/doc/guix.texi:1543
msgid "To display the current load of all build hosts, run this command on the main node:"
msgstr "Para exibir o carregamento atual de todos os hosts de compilação, execute este comando no nó principal:"

#. type: example
#: guix-git/doc/guix.texi:1546
#, no-wrap
msgid "# guix offload status\n"
msgstr "# guix offload status\n"

#. type: cindex
#: guix-git/doc/guix.texi:1552
#, no-wrap
msgid "SELinux, daemon policy"
msgstr "SELinux, política de daemons"

#. type: cindex
#: guix-git/doc/guix.texi:1553
#, no-wrap
msgid "mandatory access control, SELinux"
msgstr "controle de acesso obrigatório, SELinux"

#. type: cindex
#: guix-git/doc/guix.texi:1554
#, no-wrap
msgid "security, guix-daemon"
msgstr "segurança, guix-daemon"

#. type: Plain text
#: guix-git/doc/guix.texi:1560
msgid "Guix includes an SELinux policy file at @file{etc/guix-daemon.cil} that can be installed on a system where SELinux is enabled, in order to label Guix files and to specify the expected behavior of the daemon.  Since Guix System does not provide an SELinux base policy, the daemon policy cannot be used on Guix System."
msgstr "O Guix inclui um arquivo de políticas do SELinux em @file{etc/guix-daemon.cil} que pode ser instalado em um sistema em que o SELinux está ativado, para rotular os arquivos do Guix e especificar o comportamento esperado do daemon. Como o Guix System não fornece uma política básica do SELinux, a política do daemon não pode ser usada no Guix System."

#. type: subsubsection
#: guix-git/doc/guix.texi:1561
#, no-wrap
msgid "Installing the SELinux policy"
msgstr "Instalando a política do SELinux"

#. type: cindex
#: guix-git/doc/guix.texi:1562
#, no-wrap
msgid "SELinux, policy installation"
msgstr "SELinux, instalação de política"

#. type: quotation
#: guix-git/doc/guix.texi:1567
msgid "The @code{guix-install.sh} binary installation script offers to perform the steps below for you (@pxref{Binary Installation})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1570
msgid "To install the policy run this command as root:"
msgstr "Para instalar a política, execute esse comando como root:"

#. type: example
#: guix-git/doc/guix.texi:1573
#, fuzzy, no-wrap
#| msgid ""
#| "# mkdir -p /usr/local/bin\n"
#| "# cd /usr/local/bin\n"
#| "# ln -s /var/guix/profiles/per-user/root/current-guix/bin/guix\n"
msgid "semodule -i /var/guix/profiles/per-user/root/current-guix/share/selinux/guix-daemon.cil\n"
msgstr ""
"# mkdir -p /usr/local/bin\n"
"# cd /usr/local/bin\n"
"# ln -s /var/guix/profiles/per-user/root/current-guix/bin/guix\n"

#. type: Plain text
#: guix-git/doc/guix.texi:1577
msgid "Then, as root, relabel the file system, possibly after making it writable:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:1581
#, no-wrap
msgid ""
"mount -o remount,rw /gnu/store\n"
"restorecon -R /gnu /var/guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1586
msgid "At this point you can start or restart @command{guix-daemon}; on a distribution that uses systemd as its service manager, you can do that with:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:1589
#, fuzzy, no-wrap
#| msgid "security, guix-daemon"
msgid "systemctl restart guix-daemon\n"
msgstr "segurança, guix-daemon"

#. type: Plain text
#: guix-git/doc/guix.texi:1595
msgid "Once the policy is installed, the file system has been relabeled, and the daemon has been restarted, it should be running in the @code{guix_daemon_t} context.  You can confirm this with the following command:"
msgstr "Depois que a política é instalada, o sistema de arquivos foi rotulado novamente e o daemon foi reiniciado, ele deve estar em execução no contexto @code{guix_daemon_t}. Você pode confirmar isso com o seguinte comando:"

#. type: example
#: guix-git/doc/guix.texi:1598
#, no-wrap
msgid "ps -Zax | grep guix-daemon\n"
msgstr "ps -Zax | grep guix-daemon\n"

#. type: Plain text
#: guix-git/doc/guix.texi:1603
msgid "Monitor the SELinux log files as you run a command like @code{guix build hello} to convince yourself that SELinux permits all necessary operations."
msgstr "Monitore os arquivos de log do SELinux enquanto executa um comando como @code{guix build hello} para se convencer de que o SELinux permite todas as operações necessárias."

#. type: cindex
#: guix-git/doc/guix.texi:1605
#, no-wrap
msgid "SELinux, limitations"
msgstr "SELinux, limitações"

#. type: Plain text
#: guix-git/doc/guix.texi:1610
msgid "This policy is not perfect.  Here is a list of limitations or quirks that should be considered when deploying the provided SELinux policy for the Guix daemon."
msgstr "Esta política não é perfeita. Aqui está uma lista de limitações ou peculiaridades que devem ser consideradas ao implementar a política SELinux fornecida para o daemon Guix."

#. type: enumerate
#: guix-git/doc/guix.texi:1617
#, fuzzy
msgid "@code{guix_daemon_socket_t} isn’t actually used.  None of the socket operations involve contexts that have anything to do with @code{guix_daemon_socket_t}.  It doesn’t hurt to have this unused label, but it would be preferable to define socket rules for only this label."
msgstr "@code{guix_daemon_socket_t} não é realmente usado. Nenhuma das operações de soquete envolve contextos que têm algo a ver com @code{guix_daemon_socket_t}. Não faz mal ter esse rótulo não utilizado, mas seria preferível definir regras de soquete apenas para esse rótulo."

#. type: enumerate
#: guix-git/doc/guix.texi:1628
#, fuzzy
#| msgid "@code{guix gc} cannot access arbitrary links to profiles.  By design, the file label of the destination of a symlink is independent of the file label of the link itself.  Although all profiles under $localstatedir are labelled, the links to these profiles inherit the label of the directory they are in.  For links in the user’s home directory this will be @code{user_home_t}.  But for links from the root user’s home directory, or @file{/tmp}, or the HTTP server’s working directory, etc, this won’t work.  @code{guix gc} would be prevented from reading and following these links."
msgid "@code{guix gc} cannot access arbitrary links to profiles.  By design, the file label of the destination of a symlink is independent of the file label of the link itself.  Although all profiles under @file{$localstatedir} are labelled, the links to these profiles inherit the label of the directory they are in.  For links in the user’s home directory this will be @code{user_home_t}.  But for links from the root user’s home directory, or @file{/tmp}, or the HTTP server’s working directory, etc, this won’t work.  @code{guix gc} would be prevented from reading and following these links."
msgstr "@code{guix gc} não pode acessar links arbitrários para perfis. Por design, o rótulo do arquivo do destino de um link simbólico é independente do rótulo do arquivo do próprio link. Embora todos os perfis em $localstatedir estejam rotulados, os links para esses perfis herdam o rótulo do diretório em que estão. Para os links no diretório inicial do usuário, será @code{user_home_t}. Mas, para links do diretório inicial do usuário raiz, ou @file{/tmp}, ou do diretório de trabalho do servidor HTTP etc., isso não funcionará. @code{guix gc} seria impedido de ler e seguir esses links."

#. type: enumerate
#: guix-git/doc/guix.texi:1633
msgid "The daemon’s feature to listen for TCP connections might no longer work.  This might require extra rules, because SELinux treats network sockets differently from files."
msgstr "O recurso do daemon de escutar conexões TCP pode não funcionar mais. Isso pode exigir regras extras, porque o SELinux trata os soquetes de rede de maneira diferente dos arquivos."

#. type: enumerate
#: guix-git/doc/guix.texi:1644
msgid "Currently all files with a name matching the regular expression @code{/gnu/store/.+-(guix-.+|profile)/bin/guix-daemon} are assigned the label @code{guix_daemon_exec_t}; this means that @emph{any} file with that name in any profile would be permitted to run in the @code{guix_daemon_t} domain.  This is not ideal.  An attacker could build a package that provides this executable and convince a user to install and run it, which lifts it into the @code{guix_daemon_t} domain.  At that point SELinux could not prevent it from accessing files that are allowed for processes in that domain."
msgstr "Atualmente, todos os arquivos com um nome correspondente à expressão regular @code{/gnu/store/.+-(guix-.+|profile)/bin/guix-daemon} recebem o rótulo @code{guix_daemon_exec_t}; isso significa que @emph{qualquer} arquivo com esse nome em qualquer perfil poderá ser executado no domínio de @code{guix_daemon_t}. Isto não é o ideal. Um invasor pode criar um pacote que forneça esse executável e convencer um usuário a instalar e executá-lo, o que o eleva ao domínio de @code{guix_daemon_t}. Nesse ponto, o SELinux não poderia impedir o acesso a arquivos permitidos para processos nesse domínio."

#. type: enumerate
#: guix-git/doc/guix.texi:1649
msgid "You will need to relabel the store directory after all upgrades to @file{guix-daemon}, such as after running @code{guix pull}.  Assuming the store is in @file{/gnu}, you can do this with @code{restorecon -vR /gnu}, or by other means provided by your operating system."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:1657
msgid "We could generate a much more restrictive policy at installation time, so that only the @emph{exact} file name of the currently installed @code{guix-daemon} executable would be labelled with @code{guix_daemon_exec_t}, instead of using a broad regular expression.  The downside is that root would have to install or upgrade the policy at installation time whenever the Guix package that provides the effectively running @code{guix-daemon} executable is upgraded."
msgstr "Poderíamos gerar uma política muito mais restritiva no momento da instalação, para que apenas o nome do arquivo @emph{exato} do executável @code{guix-daemon} atualmente instalado seja rotulado com @code{guix_daemon_exec_t}, em vez de usar um amplo expressão regular. A desvantagem é que o root precisaria instalar ou atualizar a política no momento da instalação sempre que o pacote Guix que fornece o executável @code{guix-daemon} em execução efetiva for atualizado."

#. type: section
#: guix-git/doc/guix.texi:1660
#, no-wrap
msgid "Invoking @command{guix-daemon}"
msgstr "Invocando @command{guix-daemon}"

#. type: command{#1}
#: guix-git/doc/guix.texi:1661
#, fuzzy, no-wrap
#| msgid "Invoking guix-daemon"
msgid "guix-daemon"
msgstr "Invocando guix-daemon"

#. type: Plain text
#: guix-git/doc/guix.texi:1666
msgid "The @command{guix-daemon} program implements all the functionality to access the store.  This includes launching build processes, running the garbage collector, querying the availability of a build result, etc.  It is normally run as @code{root} like this:"
msgstr "O programa @command{guix-daemon} implementa todas as funcionalidades para acessar o armazém. Isso inclui iniciar processos de compilação, executar o coletor de lixo, consultar a disponibilidade de um resultado da compilação etc. É normalmente executado como @code{root}, assim:"

#. type: cindex
#: guix-git/doc/guix.texi:1671
#, fuzzy, no-wrap
#| msgid "Invoking @command{guix-daemon}"
msgid "socket activation, for @command{guix-daemon}"
msgstr "Invocando @command{guix-daemon}"

#. type: Plain text
#: guix-git/doc/guix.texi:1675
msgid "This daemon can also be started following the systemd ``socket activation'' protocol (@pxref{Service De- and Constructors, @code{make-systemd-constructor},, shepherd, The GNU Shepherd Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1677
msgid "For details on how to set it up, @pxref{Setting Up the Daemon}."
msgstr "Para detalhes sobre como configurá-lo, @pxref{Configurando o daemon}."

#. type: cindex
#: guix-git/doc/guix.texi:1679
#, no-wrap
msgid "container, build environment"
msgstr "contêiner, ambiente de compilação"

#. type: cindex
#: guix-git/doc/guix.texi:1681 guix-git/doc/guix.texi:3359
#: guix-git/doc/guix.texi:4260 guix-git/doc/guix.texi:15716
#, no-wrap
msgid "reproducible builds"
msgstr "compilações reproduzíveis"

#. type: Plain text
#: guix-git/doc/guix.texi:1693
msgid "By default, @command{guix-daemon} launches build processes under different UIDs, taken from the build group specified with @option{--build-users-group}.  In addition, each build process is run in a chroot environment that only contains the subset of the store that the build process depends on, as specified by its derivation (@pxref{Programming Interface, derivation}), plus a set of specific system directories.  By default, the latter contains @file{/dev} and @file{/dev/pts}.  Furthermore, on GNU/Linux, the build environment is a @dfn{container}: in addition to having its own file system tree, it has a separate mount name space, its own PID name space, network name space, etc.  This helps achieve reproducible builds (@pxref{Features})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1699
msgid "When the daemon performs a build on behalf of the user, it creates a build directory under @file{/tmp} or under the directory specified by its @env{TMPDIR} environment variable.  This directory is shared with the container for the duration of the build, though within the container, the build tree is always called @file{/tmp/guix-build-@var{name}.drv-0}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1703
msgid "The build directory is automatically deleted upon completion, unless the build failed and the client specified @option{--keep-failed} (@pxref{Common Build Options, @option{--keep-failed}})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1709
msgid "The daemon listens for connections and spawns one sub-process for each session started by a client (one of the @command{guix} sub-commands).  The @command{guix processes} command allows you to get an overview of the activity on your system by viewing each of the active sessions and clients.  @xref{Invoking guix processes}, for more information."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1711
msgid "The following command-line options are supported:"
msgstr "As seguintes opções de linha de comando são suportadas:"

#. type: item
#: guix-git/doc/guix.texi:1713
#, no-wrap
msgid "--build-users-group=@var{group}"
msgstr "--build-users-group=@var{grupo}"

#. type: table
#: guix-git/doc/guix.texi:1716
msgid "Take users from @var{group} to run build processes (@pxref{Setting Up the Daemon, build users})."
msgstr "Obtém os usuários do @var{grupo} para executar os processos de compilação (@pxref{Configurando o daemon, usuários de compilação})."

#. type: item
#: guix-git/doc/guix.texi:1717 guix-git/doc/guix.texi:12608
#, no-wrap
msgid "--no-substitutes"
msgstr "--no-substitutes"

#. type: cindex
#: guix-git/doc/guix.texi:1718 guix-git/doc/guix.texi:3371
#: guix-git/doc/guix.texi:4013
#, no-wrap
msgid "substitutes"
msgstr "substitutos"

#. type: table
#: guix-git/doc/guix.texi:1722 guix-git/doc/guix.texi:12612
msgid "Do not use substitutes for build products.  That is, always build things locally instead of allowing downloads of pre-built binaries (@pxref{Substitutes})."
msgstr "Não use substitutos para compilar produtos. Ou seja, sempre crie coisas localmente, em vez de permitir downloads de binários pré-compilados (@pxref{Substitutos})."

#. type: table
#: guix-git/doc/guix.texi:1726
msgid "When the daemon runs with @option{--no-substitutes}, clients can still explicitly enable substitution @i{via} the @code{set-build-options} remote procedure call (@pxref{The Store})."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:1728
msgid "daemon-substitute-urls"
msgstr "daemon-substitute-urls"

#. type: item
#: guix-git/doc/guix.texi:1728 guix-git/doc/guix.texi:12595
#: guix-git/doc/guix.texi:15118 guix-git/doc/guix.texi:15868
#: guix-git/doc/guix.texi:16095
#, no-wrap
msgid "--substitute-urls=@var{urls}"
msgstr "--substitute-urls=@var{urls}"

#. type: table
#: guix-git/doc/guix.texi:1732
#, fuzzy
#| msgid "Consider @var{urls} the default whitespace-separated list of substitute source URLs.  When this option is omitted, @indicateurl{https://@value{SUBSTITUTE-SERVER}} is used."
msgid "Consider @var{urls} the default whitespace-separated list of substitute source URLs.  When this option is omitted, @indicateurl{@value{SUBSTITUTE-URLS}} is used."
msgstr "Considere @var{urls} a lista padrão separada por espaços em branco de URLs de fontes substitutos. Quando essa opção é omitida, @indicateurl{https://@value{SUBSTITUTE-SERVER}} é usado."

#. type: table
#: guix-git/doc/guix.texi:1735
msgid "This means that substitutes may be downloaded from @var{urls}, as long as they are signed by a trusted signature (@pxref{Substitutes})."
msgstr "Isso significa que os substitutos podem ser baixados de @var{urls}, desde que assinados por uma assinatura confiável (@pxref{Substitutos})."

#. type: table
#: guix-git/doc/guix.texi:1738
msgid "@xref{Getting Substitutes from Other Servers}, for more information on how to configure the daemon to get substitutes from other servers."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1740 guix-git/doc/guix.texi:12631
#, no-wrap
msgid "--no-offload"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1744 guix-git/doc/guix.texi:12635
msgid "Do not use offload builds to other machines (@pxref{Daemon Offload Setup}).  That is, always build things locally instead of offloading builds to remote machines."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1745
#, no-wrap
msgid "--cache-failures"
msgstr "--cache-failures"

#. type: table
#: guix-git/doc/guix.texi:1747
msgid "Cache build failures.  By default, only successful builds are cached."
msgstr "Armazena em cache as compilações que falharam. Por padrão, apenas compilações bem-sucedidas são armazenadas em cache."

#. type: table
#: guix-git/doc/guix.texi:1752
msgid "When this option is used, @command{guix gc --list-failures} can be used to query the set of store items marked as failed; @command{guix gc --clear-failures} removes store items from the set of cached failures.  @xref{Invoking guix gc}."
msgstr "Quando essa opção é usada, o @command{guix gc --list-failures} pode ser usado para consultar o conjunto de itens do armazém marcados como com falha; O @command{guix gc --clear-failures} remove os itens do armazém do conjunto de falhas em cache. @xref{Invocando guix gc}."

#. type: item
#: guix-git/doc/guix.texi:1753 guix-git/doc/guix.texi:12661
#, no-wrap
msgid "--cores=@var{n}"
msgstr "--cores=@var{n}"

#. type: itemx
#: guix-git/doc/guix.texi:1754 guix-git/doc/guix.texi:12662
#, no-wrap
msgid "-c @var{n}"
msgstr "-c @var{n}"

#. type: table
#: guix-git/doc/guix.texi:1757
msgid "Use @var{n} CPU cores to build each derivation; @code{0} means as many as available."
msgstr "Usa @var{n} núcleos de CPU para compilar cada derivação; @code{0} significa todos disponíveis."

#. type: table
#: guix-git/doc/guix.texi:1761
msgid "The default value is @code{0}, but it may be overridden by clients, such as the @option{--cores} option of @command{guix build} (@pxref{Invoking guix build})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1765
msgid "The effect is to define the @env{NIX_BUILD_CORES} environment variable in the build process, which can then use it to exploit internal parallelism---for instance, by running @code{make -j$NIX_BUILD_CORES}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1766 guix-git/doc/guix.texi:12666
#, no-wrap
msgid "--max-jobs=@var{n}"
msgstr "--max-jobs=@var{n}"

#. type: itemx
#: guix-git/doc/guix.texi:1767 guix-git/doc/guix.texi:12667
#, no-wrap
msgid "-M @var{n}"
msgstr "-M @var{n}"

#. type: table
#: guix-git/doc/guix.texi:1772
msgid "Allow at most @var{n} build jobs in parallel.  The default value is @code{1}.  Setting it to @code{0} means that no builds will be performed locally; instead, the daemon will offload builds (@pxref{Daemon Offload Setup}), or simply fail."
msgstr "Permite no máximo @var{n} tarefas de compilação em paralelo. O valor padrão é @code{1}. Definir como @code{0} significa que nenhuma compilação será executada localmente; em vez disso, o daemon descarregará as compilações (@pxref{Configuração de descarregamento de daemon}) ou simplesmente falhará."

#. type: item
#: guix-git/doc/guix.texi:1773 guix-git/doc/guix.texi:12636
#, no-wrap
msgid "--max-silent-time=@var{seconds}"
msgstr "--max-silent-time=@var{segundos}"

#. type: table
#: guix-git/doc/guix.texi:1776 guix-git/doc/guix.texi:12639
msgid "When the build or substitution process remains silent for more than @var{seconds}, terminate it and report a build failure."
msgstr "Quando o processo de compilação ou substituição permanecer em silêncio por mais de @var{segundos}, encerra-o e relata uma falha de compilação."

#. type: table
#: guix-git/doc/guix.texi:1778 guix-git/doc/guix.texi:1787
msgid "The default value is @code{0}, which disables the timeout."
msgstr "O valor padrão é @code{0}, que desativa o tempo limite."

#. type: table
#: guix-git/doc/guix.texi:1781
msgid "The value specified here can be overridden by clients (@pxref{Common Build Options, @option{--max-silent-time}})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1782 guix-git/doc/guix.texi:12643
#, no-wrap
msgid "--timeout=@var{seconds}"
msgstr "--timeout=@var{segundos}"

#. type: table
#: guix-git/doc/guix.texi:1785 guix-git/doc/guix.texi:12646
msgid "Likewise, when the build or substitution process lasts for more than @var{seconds}, terminate it and report a build failure."
msgstr "Da mesma forma, quando o processo de compilação ou substituição durar mais que @var{segundos}, encerra-o e relata uma falha de compilação."

#. type: table
#: guix-git/doc/guix.texi:1790
msgid "The value specified here can be overridden by clients (@pxref{Common Build Options, @option{--timeout}})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1791
#, no-wrap
msgid "--rounds=@var{N}"
msgstr "--rounds=@var{N}"

#. type: table
#: guix-git/doc/guix.texi:1796
msgid "Build each derivation @var{n} times in a row, and raise an error if consecutive build results are not bit-for-bit identical.  Note that this setting can be overridden by clients such as @command{guix build} (@pxref{Invoking guix build})."
msgstr "Compila cada derivação @var{n} vezes seguidas e gera um erro se os resultados consecutivos da compilação não forem idênticos bit a bit. Observe que essa configuração pode ser substituída por clientes como @command{guix build} (@pxref{Invocando guix build})."

#. type: table
#: guix-git/doc/guix.texi:1800 guix-git/doc/guix.texi:12630
#: guix-git/doc/guix.texi:13314
msgid "When used in conjunction with @option{--keep-failed}, the differing output is kept in the store, under @file{/gnu/store/@dots{}-check}.  This makes it easy to look for differences between the two results."
msgstr "Quando usado em conjunto com @option{--keep-failed}, uma saída de comparação é mantida no armazém, sob  @file{/gnu/store/@dots{}-check}. Isso facilita procurar por diferenças entre os dois resultados."

#. type: item
#: guix-git/doc/guix.texi:1801
#, no-wrap
msgid "--debug"
msgstr "--debug"

#. type: table
#: guix-git/doc/guix.texi:1803
msgid "Produce debugging output."
msgstr "Produz uma saída de depuração."

#. type: table
#: guix-git/doc/guix.texi:1807
msgid "This is useful to debug daemon start-up issues, but then it may be overridden by clients, for example the @option{--verbosity} option of @command{guix build} (@pxref{Invoking guix build})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1808
#, no-wrap
msgid "--chroot-directory=@var{dir}"
msgstr "--chroot-directory=@var{dir}"

#. type: table
#: guix-git/doc/guix.texi:1810
msgid "Add @var{dir} to the build chroot."
msgstr "adiciona @var{dir} ao chroot de compilação."

#. type: table
#: guix-git/doc/guix.texi:1816
msgid "Doing this may change the result of build processes---for instance if they use optional dependencies found in @var{dir} when it is available, and not otherwise.  For that reason, it is not recommended to do so.  Instead, make sure that each derivation declares all the inputs that it needs."
msgstr "Isso pode alterar o resultado dos processos de compilação -- por exemplo, se eles usam dependências opcionais encontradas em @var{dir} quando estão disponíveis, e não o contrário. Por esse motivo, não é recomendável fazê-lo. Em vez disso, verifique se cada derivação declara todas as entradas necessárias."

#. type: item
#: guix-git/doc/guix.texi:1817
#, no-wrap
msgid "--disable-chroot"
msgstr "--disable-chroot"

#. type: table
#: guix-git/doc/guix.texi:1819
msgid "Disable chroot builds."
msgstr "Desabilita compilações em chroot."

#. type: table
#: guix-git/doc/guix.texi:1824
msgid "Using this option is not recommended since, again, it would allow build processes to gain access to undeclared dependencies.  It is necessary, though, when @command{guix-daemon} is running under an unprivileged user account."
msgstr "O uso dessa opção não é recomendado, pois, novamente, isso permitiria que os processos de compilação obtivessem acesso a dependências não declaradas. Porém, é necessário quando o @command{guix-daemon} está sendo executado em uma conta de usuário sem privilégios."

#. type: item
#: guix-git/doc/guix.texi:1825
#, no-wrap
msgid "--log-compression=@var{type}"
msgstr "--log-compression=@var{tipo}"

#. type: table
#: guix-git/doc/guix.texi:1828
msgid "Compress build logs according to @var{type}, one of @code{gzip}, @code{bzip2}, or @code{none}."
msgstr "Compacta logs de compilação de aconrdo com @var{tipo}, que pode ser um entre @code{gzip}, @code{bzip2} e @code{none}."

#. type: table
#: guix-git/doc/guix.texi:1832
msgid "Unless @option{--lose-logs} is used, all the build logs are kept in the @var{localstatedir}.  To save space, the daemon automatically compresses them with gzip by default."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1833
#, no-wrap
msgid "--discover[=yes|no]"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1836 guix-git/doc/guix.texi:18875
msgid "Whether to discover substitute servers on the local network using mDNS and DNS-SD."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1839
msgid "This feature is still experimental.  However, here are a few considerations."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:1843
msgid "It might be faster/less expensive than fetching from remote servers;"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:1846
msgid "There are no security risks, only genuine substitutes will be used (@pxref{Substitute Authentication});"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:1850
msgid "An attacker advertising @command{guix publish} on your LAN cannot serve you malicious binaries, but they can learn what software you’re installing;"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:1853
msgid "Servers may serve substitute over HTTP, unencrypted, so anyone on the LAN can see what software you’re installing."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1857
msgid "It is also possible to enable or disable substitute server discovery at run-time by running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:1861
#, no-wrap
msgid ""
"herd discover guix-daemon on\n"
"herd discover guix-daemon off\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1863
#, no-wrap
msgid "--disable-deduplication"
msgstr "--disable-deduplication"

#. type: cindex
#: guix-git/doc/guix.texi:1864 guix-git/doc/guix.texi:4619
#, no-wrap
msgid "deduplication"
msgstr "deduplicação"

#. type: table
#: guix-git/doc/guix.texi:1866
msgid "Disable automatic file ``deduplication'' in the store."
msgstr "Desabilita ``deduplicação'' automática de arquivos no armazém."

#. type: table
#: guix-git/doc/guix.texi:1873
msgid "By default, files added to the store are automatically ``deduplicated'': if a newly added file is identical to another one found in the store, the daemon makes the new file a hard link to the other file.  This can noticeably reduce disk usage, at the expense of slightly increased input/output load at the end of a build process.  This option disables this optimization."
msgstr "Por padrão, os arquivos adicionados ao armazém são automaticamente ``deduplicados'': se um arquivo recém-adicionado for idêntico a outro encontrado no armazém, o daemon tornará o novo arquivo um link físico para o outro arquivo. Isso pode reduzir notavelmente o uso do disco, às custas de um leve aumento na carga de entrada/saída no final de um processo de criação. Esta opção desativa essa otimização."

#. type: item
#: guix-git/doc/guix.texi:1874
#, no-wrap
msgid "--gc-keep-outputs[=yes|no]"
msgstr "--gc-keep-outputs[=yes|no]"

#. type: table
#: guix-git/doc/guix.texi:1877
msgid "Tell whether the garbage collector (GC) must keep outputs of live derivations."
msgstr "Diz se o coletor de lixo (GC) deve manter as saídas de derivações vivas."

#. type: cindex
#: guix-git/doc/guix.texi:1878 guix-git/doc/guix.texi:4431
#, no-wrap
msgid "GC roots"
msgstr "raízes de GC"

#. type: cindex
#: guix-git/doc/guix.texi:1879 guix-git/doc/guix.texi:4432
#, no-wrap
msgid "garbage collector roots"
msgstr "raízes de coletor de lixo"

#. type: table
#: guix-git/doc/guix.texi:1885
msgid "When set to @code{yes}, the GC will keep the outputs of any live derivation available in the store---the @file{.drv} files.  The default is @code{no}, meaning that derivation outputs are kept only if they are reachable from a GC root.  @xref{Invoking guix gc}, for more on GC roots."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1886
#, no-wrap
msgid "--gc-keep-derivations[=yes|no]"
msgstr "--gc-keep-derivations[=yes|no]"

#. type: table
#: guix-git/doc/guix.texi:1889
msgid "Tell whether the garbage collector (GC) must keep derivations corresponding to live outputs."
msgstr "Diz se o coletor de lixo (GC) deve manter as derivações correspondentes às saídas vivas."

#. type: table
#: guix-git/doc/guix.texi:1895
msgid "When set to @code{yes}, as is the case by default, the GC keeps derivations---i.e., @file{.drv} files---as long as at least one of their outputs is live.  This allows users to keep track of the origins of items in their store.  Setting it to @code{no} saves a bit of disk space."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1904
msgid "In this way, setting @option{--gc-keep-derivations} to @code{yes} causes liveness to flow from outputs to derivations, and setting @option{--gc-keep-outputs} to @code{yes} causes liveness to flow from derivations to outputs.  When both are set to @code{yes}, the effect is to keep all the build prerequisites (the sources, compiler, libraries, and other build-time tools) of live objects in the store, regardless of whether these prerequisites are reachable from a GC root.  This is convenient for developers since it saves rebuilds or downloads."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1905
#, no-wrap
msgid "--impersonate-linux-2.6"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1908
msgid "On Linux-based systems, impersonate Linux 2.6.  This means that the kernel's @command{uname} system call will report 2.6 as the release number."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1911
msgid "This might be helpful to build programs that (usually wrongfully) depend on the kernel version number."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1912
#, no-wrap
msgid "--lose-logs"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1915
msgid "Do not keep build logs.  By default they are kept under @file{@var{localstatedir}/guix/log}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1916 guix-git/doc/guix.texi:4876
#: guix-git/doc/guix.texi:6304 guix-git/doc/guix.texi:6801
#: guix-git/doc/guix.texi:7269 guix-git/doc/guix.texi:13250
#: guix-git/doc/guix.texi:15145 guix-git/doc/guix.texi:15410
#: guix-git/doc/guix.texi:16100 guix-git/doc/guix.texi:40309
#, no-wrap
msgid "--system=@var{system}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1920
msgid "Assume @var{system} as the current system type.  By default it is the architecture/kernel pair found at configure time, such as @code{x86_64-linux}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1921 guix-git/doc/guix.texi:12310
#, no-wrap
msgid "--listen=@var{endpoint}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1926
msgid "Listen for connections on @var{endpoint}.  @var{endpoint} is interpreted as the file name of a Unix-domain socket if it starts with @code{/} (slash sign).  Otherwise, @var{endpoint} is interpreted as a host name or host name and port to listen to.  Here are a few examples:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1928
#, no-wrap
msgid "--listen=/gnu/var/daemon"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1931
msgid "Listen for connections on the @file{/gnu/var/daemon} Unix-domain socket, creating it if needed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1932
#, no-wrap
msgid "--listen=localhost"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:1933 guix-git/doc/guix.texi:10974
#, no-wrap
msgid "daemon, remote access"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:1934 guix-git/doc/guix.texi:10975
#, no-wrap
msgid "remote access to the daemon"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:1935 guix-git/doc/guix.texi:10976
#, no-wrap
msgid "daemon, cluster setup"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:1936 guix-git/doc/guix.texi:10977
#, no-wrap
msgid "clusters, daemon setup"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1939
msgid "Listen for TCP connections on the network interface corresponding to @code{localhost}, on port 44146."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:1940
#, no-wrap
msgid "--listen=128.0.0.42:1234"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1943
msgid "Listen for TCP connections on the network interface corresponding to @code{128.0.0.42}, on port 1234."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1950
msgid "This option can be repeated multiple times, in which case @command{guix-daemon} accepts connections on all the specified endpoints.  Users can tell client commands what endpoint to connect to by setting the @env{GUIX_DAEMON_SOCKET} environment variable (@pxref{The Store, @env{GUIX_DAEMON_SOCKET}})."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:1957
msgid "The daemon protocol is @emph{unauthenticated and unencrypted}.  Using @option{--listen=@var{host}} is suitable on local networks, such as clusters, where only trusted nodes may connect to the build daemon.  In other cases where remote access to the daemon is needed, we recommend using Unix-domain sockets along with SSH."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:1962
msgid "When @option{--listen} is omitted, @command{guix-daemon} listens for connections on the Unix-domain socket located at @file{@var{localstatedir}/guix/daemon-socket/socket}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1972
msgid "When using Guix on top of GNU/Linux distribution other than Guix System---a so-called @dfn{foreign distro}---a few additional steps are needed to get everything in place.  Here are some of them."
msgstr "Ao usar Guix sobre uma distribuição GNU/Linux que não seja um Guix System --- uma chamada @dfn{distro alheia} --- algumas etapas adicionais são necessárias para colocar tudo no seu lugar. Aqui estão algumas delas."

#. type: anchor{#1}
#: guix-git/doc/guix.texi:1976
msgid "locales-and-locpath"
msgstr "locales-and-locpath"

#. type: cindex
#: guix-git/doc/guix.texi:1976
#, no-wrap
msgid "locales, when not on Guix System"
msgstr "locales, quando não está no Guix System"

#. type: vindex
#: guix-git/doc/guix.texi:1977 guix-git/doc/guix.texi:17995
#, no-wrap
msgid "LOCPATH"
msgstr "LOCPATH"

#. type: vindex
#: guix-git/doc/guix.texi:1978
#, no-wrap
msgid "GUIX_LOCPATH"
msgstr "GUIX_LOCPATH"

#. type: Plain text
#: guix-git/doc/guix.texi:1983
msgid "Packages installed @i{via} Guix will not use the locale data of the host system.  Instead, you must first install one of the locale packages available with Guix and then define the @env{GUIX_LOCPATH} environment variable:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:1987
#, no-wrap
msgid ""
"$ guix install glibc-locales\n"
"$ export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:1999
msgid "Note that the @code{glibc-locales} package contains data for all the locales supported by the GNU@tie{}libc and weighs in at around 930@tie{}MiB@footnote{The size of the @code{glibc-locales} package is reduced down to about 213@tie{}MiB with store deduplication and further down to about 67@tie{}MiB when using a zstd-compressed Btrfs file system.}.  If you only need a few locales, you can define your custom locales package via the @code{make-glibc-utf8-locales} procedure from the @code{(gnu packages base)} module.  The following example defines a package containing the various Canadian UTF-8 locales known to the GNU@tie{}libc, that weighs around 14@tie{}MiB:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:2002
#, fuzzy, no-wrap
#| msgid "./pre-inst-env guile -c '(use-modules (gnu packages gnew))'\n"
msgid ""
"(use-modules (gnu packages base))\n"
"\n"
msgstr "./pre-inst-env guile -c '(use-modules (gnu packages gnew))'\n"

#. type: lisp
#: guix-git/doc/guix.texi:2008
#, no-wrap
msgid ""
"(define my-glibc-locales\n"
"  (make-glibc-utf8-locales\n"
"   glibc\n"
"   #:locales (list \"en_CA\" \"fr_CA\" \"ik_CA\" \"iu_CA\" \"shs_CA\")\n"
"   #:name \"glibc-canadian-utf8-locales\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2013
msgid "The @env{GUIX_LOCPATH} variable plays a role similar to @env{LOCPATH} (@pxref{Locale Names, @env{LOCPATH},, libc, The GNU C Library Reference Manual}).  There are two important differences though:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:2020
msgid "@env{GUIX_LOCPATH} is honored only by the libc in Guix, and not by the libc provided by foreign distros.  Thus, using @env{GUIX_LOCPATH} allows you to make sure the programs of the foreign distro will not end up loading incompatible locale data."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:2027
msgid "libc suffixes each entry of @env{GUIX_LOCPATH} with @code{/X.Y}, where @code{X.Y} is the libc version---e.g., @code{2.22}.  This means that, should your Guix profile contain a mixture of programs linked against different libc version, each libc version will only try to load locale data in the right format."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2031
msgid "This is important because the locale data format used by different libc versions may be incompatible."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2034
#, no-wrap
msgid "name service switch, glibc"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2035
#, no-wrap
msgid "NSS (name service switch), glibc"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2036 guix-git/doc/guix.texi:18633
#, fuzzy, no-wrap
#| msgid "Web Services"
msgid "@abbr{nscd, name service cache daemon}"
msgstr "Serviços Web"

#. type: Plain text
#: guix-git/doc/guix.texi:2043
msgid "When using Guix on a foreign distro, we @emph{strongly recommend} that the system run the GNU C library's @dfn{name service cache daemon}, @command{nscd}, which should be listening on the @file{/var/run/nscd/socket} socket.  Failing to do that, applications installed with Guix may fail to look up host names or user accounts, or may even crash.  The next paragraphs explain why."
msgstr "Ao usar o Guix em uma distro alheia, nós @emph{recomendamos fortemente} que o sistema use o @dfn{daemon de cache de serviço de nomes} da biblioteca C do GNU, @command{nscd}, que deve ouvir no soquete @file{/var/run/nscd/socket}. Caso não faça isso, os aplicativos instalados com Guix podem falhar em procurar nomes de máquina e contas de usuário, ou até mesmo travar. Os próximos parágrafos explicam o porquê."

#. type: file{#1}
#: guix-git/doc/guix.texi:2044
#, no-wrap
msgid "nsswitch.conf"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2049
msgid "The GNU C library implements a @dfn{name service switch} (NSS), which is an extensible mechanism for ``name lookups'' in general: host name resolution, user accounts, and more (@pxref{Name Service Switch,,, libc, The GNU C Library Reference Manual})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2050
#, no-wrap
msgid "Network information service (NIS)"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2051
#, no-wrap
msgid "NIS (Network information service)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2060
msgid "Being extensible, the NSS supports @dfn{plugins}, which provide new name lookup implementations: for example, the @code{nss-mdns} plugin allow resolution of @code{.local} host names, the @code{nis} plugin allows user account lookup using the Network information service (NIS), and so on.  These extra ``lookup services'' are configured system-wide in @file{/etc/nsswitch.conf}, and all the programs running on the system honor those settings (@pxref{NSS Configuration File,,, libc, The GNU C Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2070
msgid "When they perform a name lookup---for instance by calling the @code{getaddrinfo} function in C---applications first try to connect to the nscd; on success, nscd performs name lookups on their behalf.  If the nscd is not running, then they perform the name lookup by themselves, by loading the name lookup services into their own address space and running it.  These name lookup services---the @file{libnss_*.so} files---are @code{dlopen}'d, but they may come from the host system's C library, rather than from the C library the application is linked against (the C library coming from Guix)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2075
msgid "And this is where the problem is: if your application is linked against Guix's C library (say, glibc 2.24) and tries to load NSS plugins from another C library (say, @code{libnss_mdns.so} for glibc 2.22), it will likely crash or have its name lookups fail unexpectedly."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2080
msgid "Running @command{nscd} on the system, among other advantages, eliminates this binary incompatibility problem because those @code{libnss_*.so} files are loaded in the @command{nscd} process, not in applications themselves."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:2081
#, no-wrap
msgid "X11 Fonts"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2091
msgid "The majority of graphical applications use Fontconfig to locate and load fonts and perform X11-client-side rendering.  The @code{fontconfig} package in Guix looks for fonts in @file{$HOME/.guix-profile} by default.  Thus, to allow graphical applications installed with Guix to display fonts, you have to install fonts with Guix as well.  Essential font packages include @code{font-ghostscript}, @code{font-dejavu}, and @code{font-gnu-freefont}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:2092
#, no-wrap
msgid "fc-cache"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2093
#, no-wrap
msgid "font cache"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2097
msgid "Once you have installed or removed fonts, or when you notice an application that does not find fonts, you may need to install Fontconfig and to force an update of its font cache by running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2101
#, no-wrap
msgid ""
"guix install fontconfig\n"
"fc-cache -rv\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2109
msgid "To display text written in Chinese languages, Japanese, or Korean in graphical applications, consider installing @code{font-adobe-source-han-sans} or @code{font-wqy-zenhei}.  The former has multiple outputs, one per language family (@pxref{Packages with Multiple Outputs}).  For instance, the following command installs fonts for Chinese languages:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2112
#, no-wrap
msgid "guix install font-adobe-source-han-sans:cn\n"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:2114
#, no-wrap
msgid "xterm"
msgstr "xterm"

#. type: Plain text
#: guix-git/doc/guix.texi:2118
msgid "Older programs such as @command{xterm} do not use Fontconfig and instead rely on server-side font rendering.  Such programs require to specify a full name of a font using XLFD (X Logical Font Description), like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2121
#, no-wrap
msgid "-*-dejavu sans-medium-r-normal-*-*-100-*-*-*-*-*-1\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2125
msgid "To be able to use such full names for the TrueType fonts installed in your Guix profile, you need to extend the font path of the X server:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2130
#, no-wrap
msgid "xset +fp $(dirname $(readlink -f ~/.guix-profile/share/fonts/truetype/fonts.dir))\n"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:2132
#, no-wrap
msgid "xlsfonts"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2135
msgid "After that, you can run @code{xlsfonts} (from @code{xlsfonts} package)  to make sure your TrueType fonts are listed there."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:2139 guix-git/doc/guix.texi:39116
#, no-wrap
msgid "nss-certs"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2142
msgid "The @code{nss-certs} package provides X.509 certificates, which allow programs to authenticate Web servers accessed over HTTPS."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2147
msgid "When using Guix on a foreign distro, you can install this package and define the relevant environment variables so that packages know where to look for certificates.  @xref{X.509 Certificates}, for detailed information."
msgstr "Ao usar uma Guix em uma distro alheia, você pode instalar esse pacote e definir as variáveis de ambiente relevantes de forma que os pacotes saibam onde procurar por certificados. @xref{Certificados X.509}, para informações detalhadas."

#. type: code{#1}
#: guix-git/doc/guix.texi:2150
#, no-wrap
msgid "emacs"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2156
msgid "When you install Emacs packages with Guix, the Elisp files are placed under the @file{share/emacs/site-lisp/} directory of the profile in which they are installed.  The Elisp libraries are made available to Emacs through the @env{EMACSLOADPATH} environment variable, which is set when installing Emacs itself."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2163
msgid "Additionally, autoload definitions are automatically evaluated at the initialization of Emacs, by the Guix-specific @code{guix-emacs-autoload-packages} procedure.  If, for some reason, you want to avoid auto-loading the Emacs packages installed with Guix, you can do so by running Emacs with the @option{--no-site-file} option (@pxref{Init File,,, emacs, The GNU Emacs Manual})."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:2169
msgid "Emacs can now compile packages natively.  Under the default configuration, this means that Emacs packages will now be just-in-time (JIT) compiled as you use them, and the results stored in a subdirectory of your @code{user-emacs-directory}."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:2176
msgid "Furthermore, the build system for Emacs packages transparently supports native compilation, but note, that @code{emacs-minimal}---the default Emacs for building packages---has been configured without native compilation.  To natively compile your emacs packages ahead of time, use a transformation like @option{--with-input=emacs-minimal=emacs}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2181
#, no-wrap
msgid "Upgrading Guix, on a foreign distro"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2184
msgid "To upgrade Guix, run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2187 guix-git/doc/guix.texi:3167
#, no-wrap
msgid "guix pull\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2190
msgid "@xref{Invoking guix pull}, for more information."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2191
#, no-wrap
msgid "upgrading Guix for the root user, on a foreign distro"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2192
#, no-wrap
msgid "upgrading the Guix daemon, on a foreign distro"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2193
#, no-wrap
msgid "@command{guix pull} for the root user, on a foreign distro"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2196
msgid "On a foreign distro, you can upgrade the build daemon by running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2199
#, no-wrap
msgid "sudo -i guix pull\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2204
msgid "followed by (assuming your distro uses the systemd service management tool):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2207
#, no-wrap
msgid "systemctl restart guix-daemon.service\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2211
msgid "On Guix System, upgrading the daemon is achieved by reconfiguring the system (@pxref{Invoking guix system, @code{guix system reconfigure}})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2218
#, no-wrap
msgid "installing Guix System"
msgstr "instalando o Guix System"

#. type: cindex
#: guix-git/doc/guix.texi:2219
#, no-wrap
msgid "Guix System, installation"
msgstr "Guix System, instalação"

#. type: Plain text
#: guix-git/doc/guix.texi:2224
msgid "This section explains how to install Guix System on a machine.  Guix, as a package manager, can also be installed on top of a running GNU/Linux system, @pxref{Installation}."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:2233
msgid "You are reading this documentation with an Info reader.  For details on how to use it, hit the @key{RET} key (``return'' or ``enter'') on the link that follows: @pxref{Top, Info reader,, info-stnd, Stand-alone GNU Info}.  Hit @kbd{l} afterwards to come back here."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:2236
msgid "Alternatively, run @command{info info} in another tty to keep the manual available."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2257
msgid "We consider Guix System to be ready for a wide range of ``desktop'' and server use cases.  The reliability guarantees it provides---transactional upgrades and rollbacks, reproducibility---make it a solid foundation."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2260
msgid "Nevertheless, before you proceed with the installation, be aware of the following noteworthy limitations applicable to version @value{VERSION}:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:2265
msgid "More and more system services are provided (@pxref{Services}), but some may be missing."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:2270
msgid "GNOME, Xfce, LXDE, and Enlightenment are available (@pxref{Desktop Services}), as well as a number of X11 window managers.  However, KDE is currently missing."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2275
msgid "More than a disclaimer, this is an invitation to report issues (and success stories!), and to join us in improving it.  @xref{Contributing}, for more info."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2280
#, no-wrap
msgid "hardware support on Guix System"
msgstr "suporte a hardware no Guix System"

#. type: Plain text
#: guix-git/doc/guix.texi:2289
msgid "GNU@tie{}Guix focuses on respecting the user's computing freedom.  It builds around the kernel Linux-libre, which means that only hardware for which free software drivers and firmware exist is supported.  Nowadays, a wide range of off-the-shelf hardware is supported on GNU/Linux-libre---from keyboards to graphics cards to scanners and Ethernet controllers.  Unfortunately, there are still areas where hardware vendors deny users control over their own computing, and such hardware is not supported on Guix System."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2290
#, no-wrap
msgid "WiFi, hardware support"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2299
msgid "One of the main areas where free drivers or firmware are lacking is WiFi devices.  WiFi devices known to work include those using Atheros chips (AR9271 and AR7010), which corresponds to the @code{ath9k} Linux-libre driver, and those using Broadcom/AirForce chips (BCM43xx with Wireless-Core Revision 5), which corresponds to the @code{b43-open} Linux-libre driver.  Free firmware exists for both and is available out-of-the-box on Guix System, as part of @code{%base-firmware} (@pxref{operating-system Reference, @code{firmware}})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2302
msgid "The installer warns you early on if it detects devices that are known @emph{not} to work due to the lack of free firmware or free drivers."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2303
#, no-wrap
msgid "RYF, Respects Your Freedom"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2309
msgid "The @uref{https://www.fsf.org/, Free Software Foundation} runs @uref{https://www.fsf.org/ryf, @dfn{Respects Your Freedom}} (RYF), a certification program for hardware products that respect your freedom and your privacy and ensure that you have control over your device.  We encourage you to check the list of RYF-certified devices."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2313
msgid "Another useful resource is the @uref{https://www.h-node.org/, H-Node} web site.  It contains a catalog of hardware devices with information about their support in GNU/Linux."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2322
msgid "An ISO-9660 installation image that can be written to a USB stick or burnt to a DVD can be downloaded from @indicateurl{@value{BASE-URL}/guix-system-install-@value{VERSION}.x86_64-linux.iso}, where you can replace @code{x86_64-linux} with one of:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:2326
msgid "for a GNU/Linux system on Intel/AMD-compatible 64-bit CPUs;"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:2329
msgid "for a 32-bit GNU/Linux system on Intel-compatible CPUs."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2334
msgid "Make sure to download the associated @file{.sig} file and to verify the authenticity of the image against it, along these lines:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2338
#, no-wrap
msgid ""
"$ wget @value{BASE-URL}/guix-system-install-@value{VERSION}.x86_64-linux.iso.sig\n"
"$ gpg --verify guix-system-install-@value{VERSION}.x86_64-linux.iso.sig\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2346
#, no-wrap
msgid ""
"$ wget @value{OPENPGP-SIGNING-KEY-URL} \\\n"
"      -qO - | gpg --import -\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2358
msgid "This image contains the tools necessary for an installation.  It is meant to be copied @emph{as is} to a large-enough USB stick or DVD."
msgstr ""

#. type: unnumberedsubsec
#: guix-git/doc/guix.texi:2359
#, no-wrap
msgid "Copying to a USB Stick"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2364
msgid "Insert a USB stick of 1@tie{}GiB or more into your machine, and determine its device name.  Assuming that the USB stick is known as @file{/dev/sdX}, copy the image with:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2368
#, no-wrap
msgid ""
"dd if=guix-system-install-@value{VERSION}.x86_64-linux.iso of=/dev/sdX status=progress\n"
"sync\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2371
msgid "Access to @file{/dev/sdX} usually requires root privileges."
msgstr ""

#. type: unnumberedsubsec
#: guix-git/doc/guix.texi:2372
#, no-wrap
msgid "Burning on a DVD"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2377
msgid "Insert a blank DVD into your machine, and determine its device name.  Assuming that the DVD drive is known as @file{/dev/srX}, copy the image with:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2380
#, no-wrap
msgid "growisofs -dvd-compat -Z /dev/srX=guix-system-install-@value{VERSION}.x86_64-linux.iso\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2383
msgid "Access to @file{/dev/srX} usually requires root privileges."
msgstr ""

#. type: unnumberedsubsec
#: guix-git/doc/guix.texi:2384
#, no-wrap
msgid "Booting"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2391
msgid "Once this is done, you should be able to reboot the system and boot from the USB stick or DVD@.  The latter usually requires you to get in the BIOS or UEFI boot menu, where you can choose to boot from the USB stick.  In order to boot from Libreboot, switch to the command mode by pressing the @kbd{c} key and type @command{search_grub usb}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2394
msgid "@xref{Installing Guix in a VM}, if, instead, you would like to install Guix System in a virtual machine (VM)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2404
msgid "Once you have booted, you can use the guided graphical installer, which makes it easy to get started (@pxref{Guided Graphical Installation}).  Alternatively, if you are already familiar with GNU/Linux and if you want more control than what the graphical installer provides, you can choose the ``manual'' installation process (@pxref{Manual Installation})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2412
msgid "The graphical installer is available on TTY1.  You can obtain root shells on TTYs 3 to 6 by hitting @kbd{ctrl-alt-f3}, @kbd{ctrl-alt-f4}, etc.  TTY2 shows this documentation and you can reach it with @kbd{ctrl-alt-f2}.  Documentation is browsable using the Info reader commands (@pxref{Top,,, info-stnd, Stand-alone GNU Info}).  The installation system runs the GPM mouse daemon, which allows you to select text with the left mouse button and to paste it with the middle button."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:2417
msgid "Installation requires access to the Internet so that any missing dependencies of your system configuration can be downloaded.  See the ``Networking'' section below."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2424
msgid "The graphical installer is a text-based user interface.  It will guide you, with dialog boxes, through the steps needed to install GNU@tie{}Guix System."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2429
msgid "The first dialog boxes allow you to set up the system as you use it during the installation: you can choose the language, keyboard layout, and set up networking, which will be used during the installation.  The image below shows the networking dialog."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2431
msgid "@image{images/installer-network,5in,, networking setup with the graphical installer}"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2436
msgid "Later steps allow you to partition your hard disk, as shown in the image below, to choose whether or not to use encrypted file systems, to enter the host name and root password, and to create an additional account, among other things."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2438
msgid "@image{images/installer-partitions,5in,, partitioning with the graphical installer}"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2441
msgid "Note that, at any time, the installer allows you to exit the current installation step and resume at a previous step, as show in the image below."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2443
msgid "@image{images/installer-resume,5in,, resuming the installation process}"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2448
msgid "Once you're done, the installer produces an operating system configuration and displays it (@pxref{Using the Configuration System}).  At that point you can hit ``OK'' and installation will proceed.  On success, you can reboot into the new system and enjoy.  @xref{After System Installation}, for what's next!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2458
msgid "This section describes how you would ``manually'' install GNU@tie{}Guix System on your machine.  This option requires familiarity with GNU/Linux, with the shell, and with common administration tools.  If you think this is not for you, consider using the guided graphical installer (@pxref{Guided Graphical Installation})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2464
msgid "The installation system provides root shells on TTYs 3 to 6; press @kbd{ctrl-alt-f3}, @kbd{ctrl-alt-f4}, and so on to reach them.  It includes many common tools needed to install the system, but is also a full-blown Guix System.  This means that you can install additional packages, should you need it, using @command{guix package} (@pxref{Invoking guix package})."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:2471
#, no-wrap
msgid "Keyboard Layout, Networking, and Partitioning"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2476
msgid "Before you can install the system, you may want to adjust the keyboard layout, set up networking, and partition your target hard disk.  This section will guide you through this."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2479 guix-git/doc/guix.texi:17810
#, no-wrap
msgid "keyboard layout"
msgstr "disposição do teclado"

#. type: Plain text
#: guix-git/doc/guix.texi:2483
msgid "The installation image uses the US qwerty keyboard layout.  If you want to change it, you can use the @command{loadkeys} command.  For example, the following command selects the Dvorak keyboard layout:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2486
#, no-wrap
msgid "loadkeys dvorak\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2491
msgid "See the files under @file{/run/current-system/profile/share/keymaps} for a list of available keyboard layouts.  Run @command{man loadkeys} for more information."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:2493
#, fuzzy
#| msgid "Manual Installation"
msgid "manual-installation-networking"
msgstr "Instalação manual"

#. type: subsubsection
#: guix-git/doc/guix.texi:2493
#, no-wrap
msgid "Networking"
msgstr "Rede"

#. type: Plain text
#: guix-git/doc/guix.texi:2496
msgid "Run the following command to see what your network interfaces are called:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2499
#, no-wrap
msgid "ifconfig -a\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:2503 guix-git/doc/guix.texi:2525
msgid "@dots{} or, using the GNU/Linux-specific @command{ip} command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2506
#, no-wrap
msgid "ip address\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2513
msgid "Wired interfaces have a name starting with @samp{e}; for example, the interface corresponding to the first on-board Ethernet controller is called @samp{eno1}.  Wireless interfaces have a name starting with @samp{w}, like @samp{w1p2s0}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:2515
#, no-wrap
msgid "Wired connection"
msgstr "Conexão cabeada"

#. type: table
#: guix-git/doc/guix.texi:2518
msgid "To configure a wired network run the following command, substituting @var{interface} with the name of the wired interface you want to use."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2521
#, no-wrap
msgid "ifconfig @var{interface} up\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2528
#, no-wrap
msgid "ip link set @var{interface} up\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:2530
#, no-wrap
msgid "Wireless connection"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2531
#, no-wrap
msgid "wireless"
msgstr "sem fio"

#. type: cindex
#: guix-git/doc/guix.texi:2532
#, no-wrap
msgid "WiFi"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:2537
msgid "To configure wireless networking, you can create a configuration file for the @command{wpa_supplicant} configuration tool (its location is not important) using one of the available text editors such as @command{nano}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2540
#, no-wrap
msgid "nano wpa_supplicant.conf\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:2545
msgid "As an example, the following stanza can go to this file and will work for many wireless networks, provided you give the actual SSID and passphrase for the network you are connecting to:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2552
#, no-wrap
msgid ""
"network=@{\n"
"  ssid=\"@var{my-ssid}\"\n"
"  key_mgmt=WPA-PSK\n"
"  psk=\"the network's secret passphrase\"\n"
"@}\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:2557
msgid "Start the wireless service and run it in the background with the following command (substitute @var{interface} with the name of the network interface you want to use):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2560
#, no-wrap
msgid "wpa_supplicant -c wpa_supplicant.conf -i @var{interface} -B\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:2563
msgid "Run @command{man wpa_supplicant} for more information."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2565
#, no-wrap
msgid "DHCP"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2568
msgid "At this point, you need to acquire an IP address.  On a network where IP addresses are automatically assigned @i{via} DHCP, you can run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2571
#, no-wrap
msgid "dhclient -v @var{interface}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2574
msgid "Try to ping a server to see if networking is up and running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2577
#, no-wrap
msgid "ping -c 3 gnu.org\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2581
msgid "Setting up network access is almost always a requirement because the image does not contain all the software and tools that may be needed."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2582
#, no-wrap
msgid "proxy, during system installation"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2585
msgid "If you need HTTP and HTTPS access to go through a proxy, run the following command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2588
#, no-wrap
msgid "herd set-http-proxy guix-daemon @var{URL}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2593
msgid "where @var{URL} is the proxy URL, for example @code{http://example.org:8118}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2594
#, no-wrap
msgid "installing over SSH"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2597
msgid "If you want to, you can continue the installation remotely by starting an SSH server:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2600
#, no-wrap
msgid "herd start ssh-daemon\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2604
msgid "Make sure to either set a password with @command{passwd}, or configure OpenSSH public key authentication before logging in."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix.texi:2605
#, no-wrap
msgid "Disk Partitioning"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2609
msgid "Unless this has already been done, the next step is to partition, and then format the target partition(s)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2614
msgid "The installation image includes several partitioning tools, including Parted (@pxref{Overview,,, parted, GNU Parted User Manual}), @command{fdisk}, and @command{cfdisk}.  Run it and set up your disk with the partition layout you want:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2617
#, no-wrap
msgid "cfdisk\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2623
msgid "If your disk uses the GUID Partition Table (GPT) format and you plan to install BIOS-based GRUB (which is the default), make sure a BIOS Boot Partition is available (@pxref{BIOS installation,,, grub, GNU GRUB manual})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2624
#, no-wrap
msgid "EFI, installation"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2625
#, no-wrap
msgid "UEFI, installation"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2626
#, no-wrap
msgid "ESP, EFI system partition"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2630
msgid "If you instead wish to use EFI-based GRUB, a FAT32 @dfn{EFI System Partition} (ESP) is required.  This partition can be mounted at @file{/boot/efi} for instance and must have the @code{esp} flag set.  E.g., for @command{parted}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2633
#, no-wrap
msgid "parted /dev/sda set 1 esp on\n"
msgstr ""

#. type: vindex
#: guix-git/doc/guix.texi:2636 guix-git/doc/guix.texi:39543
#, no-wrap
msgid "grub-bootloader"
msgstr ""

#. type: vindex
#: guix-git/doc/guix.texi:2637 guix-git/doc/guix.texi:39547
#, no-wrap
msgid "grub-efi-bootloader"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:2644
msgid "Unsure whether to use EFI- or BIOS-based GRUB? If the directory @file{/sys/firmware/efi} exists in the installation image, then you should probably perform an EFI installation, using @code{grub-efi-bootloader}.  Otherwise you should use the BIOS-based GRUB, known as @code{grub-bootloader}.  @xref{Bootloader Configuration}, for more info on bootloaders."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2652
msgid "Once you are done partitioning the target hard disk drive, you have to create a file system on the relevant partition(s)@footnote{Currently Guix System only supports ext4, btrfs, JFS, F2FS, and XFS file systems.  In particular, code that reads file system UUIDs and labels only works for these file system types.}.  For the ESP, if you have one and assuming it is @file{/dev/sda1}, run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2655
#, no-wrap
msgid "mkfs.fat -F32 /dev/sda1\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2662
msgid "For the root file system, ext4 is the most widely used format.  Other file systems, such as Btrfs, support compression, which is reported to nicely complement file deduplication that the daemon performs independently of the file system (@pxref{Invoking guix-daemon, deduplication})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2669
msgid "Preferably, assign file systems a label so that you can easily and reliably refer to them in @code{file-system} declarations (@pxref{File Systems}).  This is typically done using the @code{-L} option of @command{mkfs.ext4} and related commands.  So, assuming the target root partition lives at @file{/dev/sda2}, a file system with the label @code{my-root} can be created with:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2672
#, no-wrap
msgid "mkfs.ext4 -L my-root /dev/sda2\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2674 guix-git/doc/guix.texi:16609
#, no-wrap
msgid "encrypted disk"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2679
msgid "If you are instead planning to encrypt the root partition, you can use the Cryptsetup/LUKS utilities to do that (see @inlinefmtifelse{html, @uref{https://linux.die.net/man/8/cryptsetup, @code{man cryptsetup}}, @code{man cryptsetup}} for more information)."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:2680 guix-git/doc/guix.texi:5651
#: guix-git/doc/guix.texi:7081 guix-git/doc/guix.texi:7121
#: guix-git/doc/guix.texi:13069 guix-git/doc/guix.texi:16740
#: guix-git/doc/guix.texi:24559 guix-git/doc/guix.texi:24566
#: guix-git/doc/guix.texi:32284 guix-git/doc/guix.texi:37976
#, no-wrap
msgid "Warning"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:2687
msgid "Note that GRUB can unlock LUKS2 devices since version 2.06, but only supports the PBKDF2 key derivation function, which is not the default for @command{cryptsetup luksFormat}.  You can check which key derivation function is being used by a device by running @command{cryptsetup luksDump @var{device}}, and looking for the PBKDF field of your keyslots."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2692
msgid "Assuming you want to store the root partition on @file{/dev/sda2}, the command sequence to format it as a LUKS2 partition would be along these lines:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2697
#, no-wrap
msgid ""
"cryptsetup luksFormat --type luks2 --pbkdf pbkdf2 /dev/sda2\n"
"cryptsetup open /dev/sda2 my-partition\n"
"mkfs.ext4 -L my-root /dev/mapper/my-partition\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2702
msgid "Once that is done, mount the target file system under @file{/mnt} with a command like (again, assuming @code{my-root} is the label of the root file system):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2705
#, no-wrap
msgid "mount LABEL=my-root /mnt\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2711
msgid "Also mount any other file systems you would like to use on the target system relative to this path.  If you have opted for @file{/boot/efi} as an EFI mount point for example, mount it at @file{/mnt/boot/efi} now so it is found by @code{guix system init} afterwards."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2715
msgid "Finally, if you plan to use one or more swap partitions (@pxref{Swap Space}), make sure to initialize them with @command{mkswap}.  Assuming you have one swap partition on @file{/dev/sda3}, you would run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2719
#, no-wrap
msgid ""
"mkswap /dev/sda3\n"
"swapon /dev/sda3\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2727
msgid "Alternatively, you may use a swap file.  For example, assuming that in the new system you want to use the file @file{/swapfile} as a swap file, you would run@footnote{This example will work for many types of file systems (e.g., ext4).  However, for copy-on-write file systems (e.g., btrfs), the required steps may be different.  For details, see the manual pages for @command{mkswap} and @command{swapon}.}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2735
#, no-wrap
msgid ""
"# This is 10 GiB of swap space.  Adjust \"count\" to change the size.\n"
"dd if=/dev/zero of=/mnt/swapfile bs=1MiB count=10240\n"
"# For security, make the file readable and writable only by root.\n"
"chmod 600 /mnt/swapfile\n"
"mkswap /mnt/swapfile\n"
"swapon /mnt/swapfile\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2740
msgid "Note that if you have encrypted the root partition and created a swap file in its file system as described above, then the encryption also protects the swap file, just like any other file in that file system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2746
msgid "With the target partitions ready and the target root mounted on @file{/mnt}, we're ready to go.  First, run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2749
#, no-wrap
msgid "herd start cow-store /mnt\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2756
msgid "This makes @file{/gnu/store} copy-on-write, such that packages added to it during the installation phase are written to the target disk on @file{/mnt} rather than kept in memory.  This is necessary because the first phase of the @command{guix system init} command (see below) entails downloads or builds to @file{/gnu/store} which, initially, is an in-memory file system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2767
msgid "Next, you have to edit a file and provide the declaration of the operating system to be installed.  To that end, the installation system comes with three text editors.  We recommend GNU nano (@pxref{Top,,, nano, GNU nano Manual}), which supports syntax highlighting and parentheses matching; other editors include mg (an Emacs clone), and nvi (a clone of the original BSD @command{vi} editor).  We strongly recommend storing that file on the target root file system, say, as @file{/mnt/etc/config.scm}.  Failing to do that, you will have lost your configuration file once you have rebooted into the newly-installed system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2774
msgid "@xref{Using the Configuration System}, for an overview of the configuration file.  The example configurations discussed in that section are available under @file{/etc/configuration} in the installation image.  Thus, to get started with a system configuration providing a graphical display server (a ``desktop'' system), you can run something along these lines:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2779
#, no-wrap
msgid ""
"# mkdir /mnt/etc\n"
"# cp /etc/configuration/desktop.scm /mnt/etc/config.scm\n"
"# nano /mnt/etc/config.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2783
msgid "You should pay attention to what your configuration file contains, and in particular:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:2795
msgid "Make sure the @code{bootloader-configuration} form refers to the targets you want to install GRUB on.  It should mention @code{grub-bootloader} if you are installing GRUB in the legacy way, or @code{grub-efi-bootloader} for newer UEFI systems.  For legacy systems, the @code{targets} field contain the names of the devices, like @code{(list \"/dev/sda\")}; for UEFI systems it names the paths to mounted EFI partitions, like @code{(list \"/boot/efi\")}; do make sure the paths are currently mounted and a @code{file-system} entry is specified in your configuration."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:2801
msgid "Be sure that your file system labels match the value of their respective @code{device} fields in your @code{file-system} configuration, assuming your @code{file-system} configuration uses the @code{file-system-label} procedure in its @code{device} field."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:2805
msgid "If there are encrypted or RAID partitions, make sure to add a @code{mapped-devices} field to describe them (@pxref{Mapped Devices})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2810
msgid "Once you are done preparing the configuration file, the new system must be initialized (remember that the target root file system is mounted under @file{/mnt}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2813
#, no-wrap
msgid "guix system init /mnt/etc/config.scm /mnt\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2820
msgid "This copies all the necessary files and installs GRUB on @file{/dev/sdX}, unless you pass the @option{--no-bootloader} option.  For more information, @pxref{Invoking guix system}.  This command may trigger downloads or builds of missing packages, which can take some time."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2828
msgid "Once that command has completed---and hopefully succeeded!---you can run @command{reboot} and boot into the new system.  The @code{root} password in the new system is initially empty; other users' passwords need to be initialized by running the @command{passwd} command as @code{root}, unless your configuration specifies otherwise (@pxref{user-account-password, user account passwords}).  @xref{After System Installation}, for what's next!"
msgstr "Após a conclusão desse comando -- e esperamos que com sucesso! -- você pode executar o comando @command{reboot} e inicializar no novo sistema. A senha @code{root} no novo sistema está inicialmente vazia; as senhas de outros usuários precisam ser inicializadas executando o comando @command{passwd} como @code{root}, a menos que sua configuração especifique o contrário (@pxref{user-account-password, senhas de contas de usuário}). @xref{Após a instalação do sistema}, para o que vem a seguir!"

#. type: Plain text
#: guix-git/doc/guix.texi:2835
msgid "Success, you've now booted into Guix System! From then on, you can update the system whenever you want by running, say:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2839
#, no-wrap
msgid ""
"guix pull\n"
"sudo guix system reconfigure /etc/config.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2845
msgid "This builds a new system generation with the latest packages and services (@pxref{Invoking guix system}).  We recommend doing that regularly so that your system includes the latest security updates (@pxref{Security Updates})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2848
#, no-wrap
msgid "sudo vs. @command{guix pull}"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:2852
msgid "Note that @command{sudo guix} runs your user's @command{guix} command and @emph{not} root's, because @command{sudo} leaves @env{PATH} unchanged.  To explicitly run root's @command{guix}, type @command{sudo -i guix @dots{}}."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:2857
msgid "The difference matters here, because @command{guix pull} updates the @command{guix} command and package definitions only for the user it is run as.  This means that if you choose to use @command{guix system reconfigure} in root's login shell, you'll need to @command{guix pull} separately."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2862
msgid "Now, @pxref{Getting Started}, and join us on @code{#guix} on the Libera Chat IRC network or on @email{guix-devel@@gnu.org} to share your experience!"
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:2865
#, no-wrap
msgid "Installing Guix in a Virtual Machine"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2867
#, no-wrap
msgid "virtual machine, Guix System installation"
msgstr "máquina virtual, instalação do Guix System"

#. type: cindex
#: guix-git/doc/guix.texi:2868
#, no-wrap
msgid "virtual private server (VPS)"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2869
#, no-wrap
msgid "VPS (virtual private server)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2873
msgid "If you'd like to install Guix System in a virtual machine (VM) or on a virtual private server (VPS) rather than on your beloved machine, this section is for you."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2876
msgid "To boot a @uref{https://qemu.org/,QEMU} VM for installing Guix System in a disk image, follow these steps:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:2881
msgid "First, retrieve and decompress the Guix system installation image as described previously (@pxref{USB Stick and DVD Installation})."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:2885
msgid "Create a disk image that will hold the installed system.  To make a qcow2-formatted disk image, use the @command{qemu-img} command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2888
#, no-wrap
msgid "qemu-img create -f qcow2 guix-system.img 50G\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:2892
msgid "The resulting file will be much smaller than 50 GB (typically less than 1 MB), but it will grow as the virtualized storage device is filled up."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:2895
msgid "Boot the USB installation image in an VM:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2901
#, no-wrap
msgid ""
"qemu-system-x86_64 -m 1024 -smp 1 -enable-kvm \\\n"
"  -nic user,model=virtio-net-pci -boot menu=on,order=d \\\n"
"  -drive file=guix-system.img \\\n"
"  -drive media=cdrom,file=guix-system-install-@value{VERSION}.@var{system}.iso\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:2905
msgid "@code{-enable-kvm} is optional, but significantly improves performance, @pxref{Running Guix in a VM}."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:2909
msgid "You're now root in the VM, proceed with the installation process.  @xref{Preparing for Installation}, and follow the instructions."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2914
msgid "Once installation is complete, you can boot the system that's on your @file{guix-system.img} image.  @xref{Running Guix in a VM}, for how to do that."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2918
#, no-wrap
msgid "installation image"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2921
msgid "The installation image described above was built using the @command{guix system} command, specifically:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2924
#, no-wrap
msgid "guix system image -t iso9660 gnu/system/install.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2929
msgid "Have a look at @file{gnu/system/install.scm} in the source tree, and see also @ref{Invoking guix system} for more information about the installation image."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:2930
#, no-wrap
msgid "Building the Installation Image for ARM Boards"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2934
msgid "Many ARM boards require a specific variant of the @uref{https://www.denx.de/wiki/U-Boot/, U-Boot} bootloader."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2938
msgid "If you build a disk image and the bootloader is not available otherwise (on another boot drive etc), it's advisable to build an image that includes the bootloader, specifically:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:2941
#, no-wrap
msgid "guix system image --system=armhf-linux -e '((@@ (gnu system install) os-with-u-boot) (@@ (gnu system install) installation-os) \"A20-OLinuXino-Lime2\")'\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2945
msgid "@code{A20-OLinuXino-Lime2} is the name of the board.  If you specify an invalid board, a list of possible boards will be printed."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2947
#, fuzzy, no-wrap
#| msgid "Invoking guix system"
msgid "troubleshooting, guix system"
msgstr "Invocando guix system"

#. type: cindex
#: guix-git/doc/guix.texi:2948
#, fuzzy, no-wrap
#| msgid "guix system vm"
msgid "guix system troubleshooting"
msgstr "guix system vm"

#. type: Plain text
#: guix-git/doc/guix.texi:2960
msgid "Guix System allows rebooting into a previous generation should the last one be malfunctioning, which makes it quite robust against being broken irreversibly.  This feature depends on GRUB being correctly functioning though, which means that if for whatever reasons your GRUB installation becomes corrupted during a system reconfiguration, you may not be able to easily boot into a previous generation.  A technique that can be used in this case is to @i{chroot} into your broken system and reconfigure it from there.  Such technique is explained below."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:2961
#, fuzzy, no-wrap
#| msgid "Invoking guix system"
msgid "chroot, guix system"
msgstr "Invocando guix system"

#. type: cindex
#: guix-git/doc/guix.texi:2962
#, fuzzy, no-wrap
#| msgid "Invoking guix system"
msgid "chrooting, guix system"
msgstr "Invocando guix system"

#. type: cindex
#: guix-git/doc/guix.texi:2963
#, no-wrap
msgid "repairing GRUB, via chroot"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:2976
msgid "This section details how to @i{chroot} to an already installed Guix System with the aim of reconfiguring it, for example to fix a broken GRUB installation.  The process is similar to how it would be done on other GNU/Linux systems, but there are some Guix System particularities such as the daemon and profiles that make it worthy of explaining here."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:2985
msgid "Obtain a bootable image of Guix System.  It is recommended the latest development snapshot so the kernel and the tools used are at least as as new as those of your installed system; it can be retrieved from the @url{https://ci.guix.gnu.org/search/latest/ISO-9660?query=spec:images+status:success+system:x86_64-linux+image.iso, https://ci.guix.gnu.org} URL.  Follow the @pxref{USB Stick and DVD Installation} section for copying it to a bootable media."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:2994
msgid "Boot the image, and proceed with the graphical text-based installer until your network is configured.  Alternatively, you could configure the network manually by following the @ref{manual-installation-networking} section.  If you get the error @samp{RTNETLINK answers: Operation not possible due to RF-kill}, try @samp{rfkill list} followed by @samp{rfkill unblock 0}, where @samp{0} is your device identifier (ID)."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:3000
msgid "Switch to a virtual console (tty) if you haven't already by pressing simultaneously the @kbd{Control + Alt + F4} keys.  Mount your file system at @file{/mnt}.  Assuming your root partition is @file{/dev/sda2}, you would do:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3003
#, no-wrap
msgid "mount /dev/sda2 /mnt\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:3007
msgid "Mount special block devices and Linux-specific directories:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3012
#, no-wrap
msgid ""
"mount --rbind /proc /mnt/proc\n"
"mount --rbind /sys /mnt/sys\n"
"mount --rbind /dev /mnt/dev\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:3016
msgid "If your system is EFI-based, you must also mount the ESP partition.  Assuming it is @file{/dev/sda1}, you can do so with:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3019
#, no-wrap
msgid "mount /dev/sda1 /mnt/boot/efi\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:3023
msgid "Enter your system via chroot:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3026
#, no-wrap
msgid "chroot /mnt /bin/sh\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:3032
msgid "Source the system profile as well as your @var{user} profile to setup the environment, where @var{user} is the user name used for the Guix System you are attempting to repair:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3036
#, no-wrap
msgid ""
"source /var/guix/profiles/system/profile/etc/profile\n"
"source /home/@var{user}/.guix-profile/etc/profile\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:3040
msgid "To ensure you are working with the Guix revision you normally would as your normal user, also source your current Guix profile:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3043
#, no-wrap
msgid "source /home/@var{user}/.config/guix/current/etc/profile\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:3047
msgid "Start a minimal @command{guix-daemon} in the background:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3050
#, fuzzy, no-wrap
#| msgid "# guix-daemon --build-users-group=guixbuild\n"
msgid "guix-daemon --build-users-group=guixbuild --disable-chroot &\n"
msgstr "# guix-daemon --build-users-group=guixbuild\n"

#. type: enumerate
#: guix-git/doc/guix.texi:3054
msgid "Edit your Guix System configuration if needed, then reconfigure with:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3057
#, fuzzy, no-wrap
#| msgid "$ guix system list-generations 10d\n"
msgid "guix system reconfigure your-config.scm\n"
msgstr "$ guix system list-generations 10d\n"

#. type: enumerate
#: guix-git/doc/guix.texi:3061
msgid "Finally, you should be good to reboot the system to test your fix."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3073
msgid "Presumably, you've reached this section because either you have installed Guix on top of another distribution (@pxref{Installation}), or you've installed the standalone Guix System (@pxref{System Installation}).  It's time for you to get started using Guix and this section aims to help you do that and give you a feel of what it's like."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3077
msgid "Guix is about installing software, so probably the first thing you'll want to do is to actually look for software.  Let's say you're looking for a text editor, you can run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3080
#, no-wrap
msgid "guix search text editor\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3087
msgid "This command shows you a number of matching @dfn{packages}, each time showing the package's name, version, a description, and additional info.  Once you've found out the one you want to use, let's say Emacs (ah ha!), you can go ahead and install it (run this command as a regular user, @emph{no need for root privileges}!):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3090
#, no-wrap
msgid "guix install emacs\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3092 guix-git/doc/guix.texi:3404
#: guix-git/doc/guix.texi:3457
#, no-wrap
msgid "profile"
msgstr "perfil"

#. type: Plain text
#: guix-git/doc/guix.texi:3100
msgid "You've installed your first package, congrats! The package is now visible in your default @dfn{profile}, @file{$HOME/.guix-profile}---a profile is a directory containing installed packages.  In the process, you've probably noticed that Guix downloaded pre-built binaries; or, if you explicitly chose to @emph{not} use pre-built binaries, then probably Guix is still building software (@pxref{Substitutes}, for more info)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3103
msgid "Unless you're using Guix System, the @command{guix install} command must have printed this hint:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3106
#, no-wrap
msgid ""
"hint: Consider setting the necessary environment variables by running:\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3109
#, no-wrap
msgid ""
"     GUIX_PROFILE=\"$HOME/.guix-profile\"\n"
"     . \"$GUIX_PROFILE/etc/profile\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3111
#, no-wrap
msgid "Alternately, see `guix package --search-paths -p \"$HOME/.guix-profile\"'.\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3125
msgid "Indeed, you must now tell your shell where @command{emacs} and other programs installed with Guix are to be found.  Pasting the two lines above will do just that: it will add @code{$HOME/.guix-profile/bin}---which is where the installed package is---to the @code{PATH} environment variable.  You can paste these two lines in your shell so they take effect right away, but more importantly you should add them to @file{~/.bash_profile} (or equivalent file if you do not use Bash) so that environment variables are set next time you spawn a shell.  You only need to do this once and other search paths environment variables will be taken care of similarly---e.g., if you eventually install @code{python} and Python libraries, @env{GUIX_PYTHONPATH} will be defined."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3128
msgid "You can go on installing packages at your will.  To list installed packages, run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3131
#, no-wrap
msgid "guix package --list-installed\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3136
msgid "To remove a package, you would unsurprisingly run @command{guix remove}.  A distinguishing feature is the ability to @dfn{roll back} any operation you made---installation, removal, upgrade---by simply typing:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3139
#, no-wrap
msgid "guix package --roll-back\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3144
msgid "This is because each operation is in fact a @dfn{transaction} that creates a new @dfn{generation}.  These generations and the difference between them can be displayed by running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3147
#, no-wrap
msgid "guix package --list-generations\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3150
msgid "Now you know the basics of package management!"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:3151 guix-git/doc/guix.texi:3210
#: guix-git/doc/guix.texi:7689
#, no-wrap
msgid "Going further"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:3159
msgid "@xref{Package Management}, for more about package management.  You may like @dfn{declarative} package management with @command{guix package --manifest}, managing separate @dfn{profiles} with @option{--profile}, deleting old generations, collecting garbage, and other nifty features that will come in handy as you become more familiar with Guix.  If you are a developer, @pxref{Development} for additional tools.  And if you're curious, @pxref{Features}, to peek under the hood."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3164
msgid "Once you've installed a set of packages, you will want to periodically @emph{upgrade} them to the latest and greatest version.  To do that, you will first pull the latest revision of Guix and its package collection:"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3174
msgid "The end result is a new @command{guix} command, under @file{~/.config/guix/current/bin}.  Unless you're on Guix System, the first time you run @command{guix pull}, be sure to follow the hint that the command prints and, similar to what we saw above, paste these two lines in your terminal and @file{.bash_profile}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3178
#, no-wrap
msgid ""
"GUIX_PROFILE=\"$HOME/.config/guix/current\"\n"
". \"$GUIX_PROFILE/etc/profile\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3182
msgid "You must also instruct your shell to point to this new @command{guix}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3185
#, no-wrap
msgid "hash guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3189
msgid "At this point, you're running a brand new Guix.  You can thus go ahead and actually upgrade all the packages you previously installed:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3192
#, no-wrap
msgid "guix upgrade\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3198
msgid "As you run this command, you will see that binaries are downloaded (or perhaps some packages are built), and eventually you end up with the upgraded packages.  Should one of these upgraded packages not be to your liking, remember you can always roll back!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3201
msgid "You can display the exact revision of Guix you're currently using by running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3204
#, no-wrap
msgid "guix describe\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3209
msgid "The information it displays is @emph{all it takes to reproduce the exact same Guix}, be it at a different point in time or on a different machine."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:3215
msgid "@xref{Invoking guix pull}, for more information.  @xref{Channels}, on how to specify additional @dfn{channels} to pull packages from, how to replicate Guix, and more.  You may also find @command{time-machine} handy (@pxref{Invoking guix time-machine})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3220
msgid "If you installed Guix System, one of the first things you'll want to do is to upgrade your system.  Once you've run @command{guix pull} to get the latest Guix, you can upgrade the system like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3223
#, no-wrap
msgid "sudo guix system reconfigure /etc/config.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3232
msgid "Upon completion, the system runs the latest versions of its software packages.  When you eventually reboot, you'll notice a sub-menu in the bootloader that reads ``Old system generations'': it's what allows you to boot @emph{an older generation of your system}, should the latest generation be ``broken'' or otherwise unsatisfying.  Just like for packages, you can always @emph{roll back} to a previous generation @emph{of the whole system}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3235
#, no-wrap
msgid "sudo guix system roll-back\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3242
msgid "There are many things you'll probably want to tweak on your system: adding new user accounts, adding new system services, fiddling with the configuration of those services, etc.  The system configuration is @emph{entirely} described in the @file{/etc/config.scm} file.  @xref{Using the Configuration System}, to learn how to change it."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3244
msgid "Now you know enough to get started!"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:3245
#, no-wrap
msgid "Resources"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:3248
msgid "The rest of this manual provides a reference for all things Guix.  Here are some additional resources you may find useful:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:3253
msgid "@xref{Top,,, guix-cookbook, The GNU Guix Cookbook}, for a list of ``how-to'' style of recipes for a variety of applications."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:3258
msgid "The @uref{https://guix.gnu.org/guix-refcard.pdf, GNU Guix Reference Card} lists in two pages most of the commands and options you'll ever need."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:3263
msgid "The web site contains @uref{https://guix.gnu.org/en/videos/, instructional videos} covering topics such as everyday use of Guix, how to get help, and how to become a contributor."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:3267
msgid "@xref{Documentation}, to learn how to access documentation on your computer."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:3270
msgid "We hope you will enjoy Guix as much as the community enjoys building it!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3281
msgid "The purpose of GNU Guix is to allow users to easily install, upgrade, and remove software packages, without having to know about their build procedures or dependencies.  Guix also goes beyond this obvious set of features."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3289
msgid "This chapter describes the main features of Guix, as well as the package management tools it provides.  Along with the command-line interface described below (@pxref{Invoking guix package, @code{guix package}}), you may also use the Emacs-Guix interface (@pxref{Top,,, emacs-guix, The Emacs-Guix Reference Manual}), after installing @code{emacs-guix} package (run @kbd{M-x guix-help} command to start with it):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3292
#, no-wrap
msgid "guix install emacs-guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3313
msgid "Here we assume you've already made your first steps with Guix (@pxref{Getting Started}) and would like to get an overview about what's going on under the hood."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3317
msgid "When using Guix, each package ends up in the @dfn{package store}, in its own directory---something that resembles @file{/gnu/store/xxx-package-1.2}, where @code{xxx} is a base32 string."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3322
msgid "Instead of referring to these directories, users have their own @dfn{profile}, which points to the packages that they actually want to use.  These profiles are stored within each user's home directory, at @code{$HOME/.guix-profile}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3330
msgid "For example, @code{alice} installs GCC 4.7.2.  As a result, @file{/home/alice/.guix-profile/bin/gcc} points to @file{/gnu/store/@dots{}-gcc-4.7.2/bin/gcc}.  Now, on the same machine, @code{bob} had already installed GCC 4.8.0.  The profile of @code{bob} simply continues to point to @file{/gnu/store/@dots{}-gcc-4.8.0/bin/gcc}---i.e., both versions of GCC coexist on the same system without any interference."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3334
msgid "The @command{guix package} command is the central tool to manage packages (@pxref{Invoking guix package}).  It operates on the per-user profiles, and can be used @emph{with normal user privileges}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3335 guix-git/doc/guix.texi:3419
#, no-wrap
msgid "transactions"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3342
msgid "The command provides the obvious install, remove, and upgrade operations.  Each invocation is actually a @emph{transaction}: either the specified operation succeeds, or nothing happens.  Thus, if the @command{guix package} process is terminated during the transaction, or if a power outage occurs during the transaction, then the user's profile remains in its previous state, and remains usable."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3350
msgid "In addition, any package transaction may be @emph{rolled back}.  So, if, for example, an upgrade installs a new version of a package that turns out to have a serious bug, users may roll back to the previous instance of their profile, which was known to work well.  Similarly, the global system configuration on Guix is subject to transactional upgrades and roll-back (@pxref{Using the Configuration System})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3357
msgid "All packages in the package store may be @emph{garbage-collected}.  Guix can determine which packages are still referenced by user profiles, and remove those that are provably no longer referenced (@pxref{Invoking guix gc}).  Users may also explicitly remove old generations of their profile so that the packages they refer to can be collected."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3370
msgid "Guix takes a @dfn{purely functional} approach to package management, as described in the introduction (@pxref{Introduction}).  Each @file{/gnu/store} package directory name contains a hash of all the inputs that were used to build that package---compiler, libraries, build scripts, etc.  This direct correspondence allows users to make sure a given package installation matches the current state of their distribution.  It also helps maximize @dfn{build reproducibility}: thanks to the isolated build environments that are used, a given build is likely to yield bit-identical files when performed on different machines (@pxref{Invoking guix-daemon, container})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3381
msgid "This foundation allows Guix to support @dfn{transparent binary/source deployment}.  When a pre-built binary for a @file{/gnu/store} item is available from an external source---a @dfn{substitute}, Guix just downloads it and unpacks it; otherwise, it builds the package from source, locally (@pxref{Substitutes}).  Because build results are usually bit-for-bit reproducible, users do not have to trust servers that provide substitutes: they can force a local build and @emph{challenge} providers (@pxref{Invoking guix challenge})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3387
msgid "Control over the build environment is a feature that is also useful for developers.  The @command{guix shell} command allows developers of a package to quickly set up the right development environment for their package, without having to manually install the dependencies of the package into their profile (@pxref{Invoking guix shell})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3388
#, no-wrap
msgid "replication, of software environments"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3389
#, no-wrap
msgid "provenance tracking, of software artifacts"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3396
msgid "All of Guix and its package definitions is version-controlled, and @command{guix pull} allows you to ``travel in time'' on the history of Guix itself (@pxref{Invoking guix pull}).  This makes it possible to replicate a Guix instance on a different machine or at a later point in time, which in turn allows you to @emph{replicate complete software environments}, while retaining precise @dfn{provenance tracking} of the software."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:3398
#, no-wrap
msgid "Invoking @command{guix package}"
msgstr "Invocando @command{guix package}"

#. type: cindex
#: guix-git/doc/guix.texi:3400
#, no-wrap
msgid "installing packages"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3401
#, no-wrap
msgid "removing packages"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3402
#, no-wrap
msgid "package installation"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3403
#, no-wrap
msgid "package removal"
msgstr ""

#. type: command{#1}
#: guix-git/doc/guix.texi:3405
#, fuzzy, no-wrap
#| msgid "Invoking guix package"
msgid "guix package"
msgstr "Invocando guix package"

#. type: Plain text
#: guix-git/doc/guix.texi:3414
msgid "The @command{guix package} command is the tool that allows users to install, upgrade, and remove packages, as well as rolling back to previous configurations.  These operations work on a user @dfn{profile}---a directory of installed packages.  Each user has a default profile in @file{$HOME/.guix-profile}.  The command operates only on the user's own profile, and works with normal user privileges (@pxref{Features}).  Its syntax is:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3417
#, no-wrap
msgid "guix package @var{options}\n"
msgstr "guix package @var{opções}\n"

#. type: Plain text
#: guix-git/doc/guix.texi:3424
msgid "Primarily, @var{options} specifies the operations to be performed during the transaction.  Upon completion, a new profile is created, but previous @dfn{generations} of the profile remain available, should the user want to roll back."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3427
msgid "For example, to remove @code{lua} and install @code{guile} and @code{guile-cairo} in a single transaction:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3430
#, no-wrap
msgid "guix package -r lua -i guile guile-cairo\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3432
#, no-wrap
msgid "aliases, for @command{guix package}"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3434
msgid "For your convenience, we also provide the following aliases:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:3438
msgid "@command{guix search} is an alias for @command{guix package -s},"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:3440
msgid "@command{guix install} is an alias for @command{guix package -i},"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:3442
msgid "@command{guix remove} is an alias for @command{guix package -r},"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:3444
msgid "@command{guix upgrade} is an alias for @command{guix package -u},"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:3446
msgid "and @command{guix show} is an alias for @command{guix package --show=}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3451
msgid "These aliases are less expressive than @command{guix package} and provide fewer options, so in some cases you'll probably want to use @command{guix package} directly."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3456
msgid "@command{guix package} also supports a @dfn{declarative approach} whereby the user specifies the exact set of packages to be available and passes it @i{via} the @option{--manifest} option (@pxref{profile-manifest, @option{--manifest}})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3463
msgid "For each user, a symlink to the user's default profile is automatically created in @file{$HOME/.guix-profile}.  This symlink always points to the current generation of the user's default profile.  Thus, users can add @file{$HOME/.guix-profile/bin} to their @env{PATH} environment variable, and so on."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3463 guix-git/doc/guix.texi:3689
#, no-wrap
msgid "search paths"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3468
msgid "If you are not using Guix System, consider adding the following lines to your @file{~/.bash_profile} (@pxref{Bash Startup Files,,, bash, The GNU Bash Reference Manual}) so that newly-spawned shells get all the right environment variable definitions:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3472
#, no-wrap
msgid ""
"GUIX_PROFILE=\"$HOME/.guix-profile\" ; \\\n"
"source \"$GUIX_PROFILE/etc/profile\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3483
msgid "In a multi-user setup, user profiles are stored in a place registered as a @dfn{garbage-collector root}, which @file{$HOME/.guix-profile} points to (@pxref{Invoking guix gc}).  That directory is normally @code{@var{localstatedir}/guix/profiles/per-user/@var{user}}, where @var{localstatedir} is the value passed to @code{configure} as @option{--localstatedir}, and @var{user} is the user name.  The @file{per-user} directory is created when @command{guix-daemon} is started, and the @var{user} sub-directory is created by @command{guix package}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3485
msgid "The @var{options} can be among the following:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3488
#, no-wrap
msgid "--install=@var{package} @dots{}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:3489
#, no-wrap
msgid "-i @var{package} @dots{}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3491
msgid "Install the specified @var{package}s."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3496
msgid "Each @var{package} may specify a simple package name, such as @code{guile}, optionally followed by an at-sign and version number, such as @code{guile@@3.0.7} or simply @code{guile@@3.0}.  In the latter case, the newest version prefixed by @code{3.0} is selected."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3502
msgid "If no version number is specified, the newest available version will be selected.  In addition, such a @var{package} specification may contain a colon, followed by the name of one of the outputs of the package, as in @code{gcc:doc} or @code{binutils@@2.22:lib} (@pxref{Packages with Multiple Outputs})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3506
msgid "Packages with a corresponding name (and optionally version) are searched for among the GNU distribution modules (@pxref{Package Modules})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3510
msgid "Alternatively, a @var{package} can directly specify a store file name such as @file{/gnu/store/...-guile-3.0.7}, as produced by, e.g., @code{guix build}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3511
#, no-wrap
msgid "propagated inputs"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3517
msgid "Sometimes packages have @dfn{propagated inputs}: these are dependencies that automatically get installed along with the required package (@pxref{package-propagated-inputs, @code{propagated-inputs} in @code{package} objects}, for information about propagated inputs in package definitions)."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:3524
msgid "package-cmd-propagated-inputs"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3524
msgid "An example is the GNU MPC library: its C header files refer to those of the GNU MPFR library, which in turn refer to those of the GMP library.  Thus, when installing MPC, the MPFR and GMP libraries also get installed in the profile; removing MPC also removes MPFR and GMP---unless they had also been explicitly installed by the user."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3529
msgid "Besides, packages sometimes rely on the definition of environment variables for their search paths (see explanation of @option{--search-paths} below).  Any missing or possibly incorrect environment variable definitions are reported here."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3530
#, no-wrap
msgid "--install-from-expression=@var{exp}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:3531
#, no-wrap
msgid "-e @var{exp}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3533
msgid "Install the package @var{exp} evaluates to."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3538
msgid "@var{exp} must be a Scheme expression that evaluates to a @code{<package>} object.  This option is notably useful to disambiguate between same-named variants of a package, with expressions such as @code{(@@ (gnu packages base) guile-final)}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3542
msgid "Note that this option installs the first output of the specified package, which may be insufficient when needing a specific output of a multiple-output package."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3543
#, no-wrap
msgid "--install-from-file=@var{file}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:3544 guix-git/doc/guix.texi:6193
#: guix-git/doc/guix.texi:13141
#, no-wrap
msgid "-f @var{file}"
msgstr "-f @var{arquivo}"

#. type: table
#: guix-git/doc/guix.texi:3546
msgid "Install the package that the code within @var{file} evaluates to."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3549 guix-git/doc/guix.texi:6199
#: guix-git/doc/guix.texi:6724
msgid "As an example, @var{file} might contain a definition like this (@pxref{Defining Packages}):"
msgstr ""

#. type: include
#: guix-git/doc/guix.texi:3551 guix-git/doc/guix.texi:13149
#, no-wrap
msgid "package-hello.scm"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3558
msgid "Developers may find it useful to include such a @file{guix.scm} file in the root of their project source tree that can be used to test development snapshots and create reproducible development environments (@pxref{Invoking guix shell})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3563
msgid "The @var{file} may also contain a JSON representation of one or more package definitions.  Running @code{guix package -f} on @file{hello.json} with the following contents would result in installing the package @code{greeter} after building @code{myhello}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3566 guix-git/doc/guix.texi:13159
#, no-wrap
msgid "@verbatiminclude package-hello.json\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3568
#, no-wrap
msgid "--remove=@var{package} @dots{}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:3569
#, no-wrap
msgid "-r @var{package} @dots{}"
msgstr "-r @var{pacote} @dots{}"

#. type: table
#: guix-git/doc/guix.texi:3571
msgid "Remove the specified @var{package}s."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3576
msgid "As for @option{--install}, each @var{package} may specify a version number and/or output name in addition to the package name.  For instance, @samp{-r glibc:debug} would remove the @code{debug} output of @code{glibc}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3577
#, no-wrap
msgid "--upgrade[=@var{regexp} @dots{}]"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:3578
#, no-wrap
msgid "-u [@var{regexp} @dots{}]"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3579
#, no-wrap
msgid "upgrading packages"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3583
msgid "Upgrade all the installed packages.  If one or more @var{regexp}s are specified, upgrade only installed packages whose name matches a @var{regexp}.  Also see the @option{--do-not-upgrade} option below."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3588
msgid "Note that this upgrades package to the latest version of packages found in the distribution currently installed.  To update your distribution, you should regularly run @command{guix pull} (@pxref{Invoking guix pull})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3589
#, no-wrap
msgid "package transformations, upgrades"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3594
msgid "When upgrading, package transformations that were originally applied when creating the profile are automatically re-applied (@pxref{Package Transformation Options}).  For example, assume you first installed Emacs from the tip of its development branch with:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3597
#, no-wrap
msgid "guix install emacs-next --with-branch=emacs-next=master\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3602
msgid "Next time you run @command{guix upgrade}, Guix will again pull the tip of the Emacs development branch and build @code{emacs-next} from that checkout."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3607
msgid "Note that transformation options such as @option{--with-branch} and @option{--with-source} depend on external state; it is up to you to ensure that they work as expected.  You can also discard a transformations that apply to a package by running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3610
#, no-wrap
msgid "guix install @var{package}\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3612
#, no-wrap
msgid "--do-not-upgrade[=@var{regexp} @dots{}]"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3617
msgid "When used together with the @option{--upgrade} option, do @emph{not} upgrade any packages whose name matches a @var{regexp}.  For example, to upgrade all packages in the current profile except those containing the substring ``emacs'':"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3620
#, no-wrap
msgid "$ guix package --upgrade . --do-not-upgrade emacs\n"
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:3622
#, no-wrap
msgid "profile-manifest"
msgstr "profile-manifest"

#. type: item
#: guix-git/doc/guix.texi:3622 guix-git/doc/guix.texi:6212
#: guix-git/doc/guix.texi:6729 guix-git/doc/guix.texi:7250
#: guix-git/doc/guix.texi:14375 guix-git/doc/guix.texi:16106
#, no-wrap
msgid "--manifest=@var{file}"
msgstr "--manifest=@var{arquivo}"

#. type: itemx
#: guix-git/doc/guix.texi:3623 guix-git/doc/guix.texi:6213
#: guix-git/doc/guix.texi:6730 guix-git/doc/guix.texi:7251
#: guix-git/doc/guix.texi:14376
#, no-wrap
msgid "-m @var{file}"
msgstr "-m @var{arquivo}"

#. type: cindex
#: guix-git/doc/guix.texi:3624
#, no-wrap
msgid "profile declaration"
msgstr "declaração de perfil"

#. type: cindex
#: guix-git/doc/guix.texi:3625
#, no-wrap
msgid "profile manifest"
msgstr "manifsto de perfil"

#. type: table
#: guix-git/doc/guix.texi:3629
msgid "Create a new generation of the profile from the manifest object returned by the Scheme code in @var{file}.  This option can be repeated several times, in which case the manifests are concatenated."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3635
msgid "This allows you to @emph{declare} the profile's contents rather than constructing it through a sequence of @option{--install} and similar commands.  The advantage is that @var{file} can be put under version control, copied to different machines to reproduce the same profile, and so on."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3638
msgid "@var{file} must return a @dfn{manifest} object, which is roughly a list of packages:"
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:3639
#, no-wrap
msgid "packages->manifest"
msgstr "packages->manifest"

#. type: lisp
#: guix-git/doc/guix.texi:3642
#, no-wrap
msgid ""
"(use-package-modules guile emacs)\n"
"\n"
msgstr ""
"(use-package-modules guile emacs)\n"
"\n"

#. type: lisp
#: guix-git/doc/guix.texi:3648
#, no-wrap
msgid ""
"(packages->manifest\n"
" (list emacs\n"
"       guile-2.0\n"
"       ;; Use a specific package output.\n"
"       (list guile-2.0 \"debug\")))\n"
msgstr ""
"(packages->manifest\n"
" (list emacs\n"
"       guile-2.0\n"
"       ;; Usa uma saída de pacote específica.\n"
"       (list guile-2.0 \"debug\")))\n"

#. type: table
#: guix-git/doc/guix.texi:3653
msgid "@xref{Writing Manifests}, for information on how to write a manifest.  @xref{export-manifest, @option{--export-manifest}}, to learn how to obtain a manifest file from an existing profile."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3654 guix-git/doc/guix.texi:4801
#, no-wrap
msgid "--roll-back"
msgstr "--roll-back"

#. type: cindex
#: guix-git/doc/guix.texi:3655 guix-git/doc/guix.texi:4802
#: guix-git/doc/guix.texi:40055 guix-git/doc/guix.texi:43939
#, no-wrap
msgid "rolling back"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3656 guix-git/doc/guix.texi:4803
#, no-wrap
msgid "undoing transactions"
msgstr "desfazendo transações"

#. type: cindex
#: guix-git/doc/guix.texi:3657 guix-git/doc/guix.texi:4804
#, no-wrap
msgid "transactions, undoing"
msgstr "transações, desfazendo"

#. type: table
#: guix-git/doc/guix.texi:3660
msgid "Roll back to the previous @dfn{generation} of the profile---i.e., undo the last transaction."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3663
msgid "When combined with options such as @option{--install}, roll back occurs before any other actions."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3667
msgid "When rolling back from the first generation that actually contains installed packages, the profile is made to point to the @dfn{zeroth generation}, which contains no files apart from its own metadata."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3671
msgid "After having rolled back, installing, removing, or upgrading packages overwrites previous future generations.  Thus, the history of the generations in a profile is always linear."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3672 guix-git/doc/guix.texi:4808
#, no-wrap
msgid "--switch-generation=@var{pattern}"
msgstr "--switch-generation=@var{padrão}"

#. type: itemx
#: guix-git/doc/guix.texi:3673 guix-git/doc/guix.texi:4809
#, no-wrap
msgid "-S @var{pattern}"
msgstr "-S @var{padrão}"

#. type: cindex
#: guix-git/doc/guix.texi:3674 guix-git/doc/guix.texi:3907
#: guix-git/doc/guix.texi:4810 guix-git/doc/guix.texi:40013
#, no-wrap
msgid "generations"
msgstr "gerações"

#. type: table
#: guix-git/doc/guix.texi:3676 guix-git/doc/guix.texi:4812
msgid "Switch to a particular generation defined by @var{pattern}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3682 guix-git/doc/guix.texi:4818
msgid "@var{pattern} may be either a generation number or a number prefixed with ``+'' or ``-''.  The latter means: move forward/backward by a specified number of generations.  For example, if you want to return to the latest generation after @option{--roll-back}, use @option{--switch-generation=+1}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3687
msgid "The difference between @option{--roll-back} and @option{--switch-generation=-1} is that @option{--switch-generation} will not make a zeroth generation, so if a specified generation does not exist, the current generation will not be changed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3688
#, no-wrap
msgid "--search-paths[=@var{kind}]"
msgstr "--search-paths[=@var{tipo}]"

#. type: table
#: guix-git/doc/guix.texi:3694
msgid "Report environment variable definitions, in Bash syntax, that may be needed in order to use the set of installed packages.  These environment variables are used to specify @dfn{search paths} for files used by some of the installed packages."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3703
msgid "For example, GCC needs the @env{CPATH} and @env{LIBRARY_PATH} environment variables to be defined so it can look for headers and libraries in the user's profile (@pxref{Environment Variables,,, gcc, Using the GNU Compiler Collection (GCC)}).  If GCC and, say, the C library are installed in the profile, then @option{--search-paths} will suggest setting these variables to @file{@var{profile}/include} and @file{@var{profile}/lib}, respectively (@pxref{Search Paths}, for info on search path specifications associated with packages.)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3706
msgid "The typical use case is to define these environment variables in the shell:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3709
#, fuzzy, no-wrap
#| msgid "$ eval `guix package --search-paths`\n"
msgid "$ eval $(guix package --search-paths)\n"
msgstr "$ eval `guix package --search-paths`\n"

#. type: table
#: guix-git/doc/guix.texi:3715
msgid "@var{kind} may be one of @code{exact}, @code{prefix}, or @code{suffix}, meaning that the returned environment variable definitions will either be exact settings, or prefixes or suffixes of the current value of these variables.  When omitted, @var{kind} defaults to @code{exact}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3718
msgid "This option can also be used to compute the @emph{combined} search paths of several profiles.  Consider this example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3723
#, no-wrap
msgid ""
"$ guix package -p foo -i guile\n"
"$ guix package -p bar -i guile-json\n"
"$ guix package -p foo -p bar --search-paths\n"
msgstr ""
"$ guix package -p foo -i guile\n"
"$ guix package -p bar -i guile-json\n"
"$ guix package -p foo -p bar --search-paths\n"

#. type: table
#: guix-git/doc/guix.texi:3728
msgid "The last command above reports about the @env{GUILE_LOAD_PATH} variable, even though, taken individually, neither @file{foo} nor @file{bar} would lead to that recommendation."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3730
#, fuzzy, no-wrap
msgid "profile, choosing"
msgstr "declaração de perfil"

#. type: item
#: guix-git/doc/guix.texi:3731 guix-git/doc/guix.texi:4838
#: guix-git/doc/guix.texi:5193 guix-git/doc/guix.texi:6272
#: guix-git/doc/guix.texi:6769
#, no-wrap
msgid "--profile=@var{profile}"
msgstr "--profile=@var{perfil}"

#. type: itemx
#: guix-git/doc/guix.texi:3732 guix-git/doc/guix.texi:4839
#: guix-git/doc/guix.texi:5194 guix-git/doc/guix.texi:6273
#: guix-git/doc/guix.texi:6770
#, no-wrap
msgid "-p @var{profile}"
msgstr "-p @var{perfil}"

#. type: table
#: guix-git/doc/guix.texi:3734
msgid "Use @var{profile} instead of the user's default profile."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3739
msgid "@var{profile} must be the name of a file that will be created upon completion.  Concretely, @var{profile} will be a mere symbolic link (``symlink'') pointing to the actual profile where packages are installed:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3745
#, no-wrap
msgid ""
"$ guix install hello -p ~/code/my-profile\n"
"@dots{}\n"
"$ ~/code/my-profile/bin/hello\n"
"Hello, world!\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3749
msgid "All it takes to get rid of the profile is to remove this symlink and its siblings that point to specific generations:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3752
#, no-wrap
msgid "$ rm ~/code/my-profile ~/code/my-profile-*-link\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3754
#, no-wrap
msgid "--list-profiles"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3756
msgid "List all the user's profiles:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3763
#, no-wrap
msgid ""
"$ guix package --list-profiles\n"
"/home/charlie/.guix-profile\n"
"/home/charlie/code/my-profile\n"
"/home/charlie/code/devel-profile\n"
"/home/charlie/tmp/test\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3766
msgid "When running as root, list all the profiles of all the users."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3767
#, no-wrap
msgid "collisions, in a profile"
msgstr "colisões, em um perfil"

#. type: cindex
#: guix-git/doc/guix.texi:3768
#, no-wrap
msgid "colliding packages in profiles"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3769
#, no-wrap
msgid "profile collisions"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3770
#, no-wrap
msgid "--allow-collisions"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3772
msgid "Allow colliding packages in the new profile.  Use at your own risk!"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3776
msgid "By default, @command{guix package} reports as an error @dfn{collisions} in the profile.  Collisions happen when two or more different versions or variants of a given package end up in the profile."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3777 guix-git/doc/guix.texi:4881
#: guix-git/doc/guix.texi:7342
#, no-wrap
msgid "--bootstrap"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3780
msgid "Use the bootstrap Guile to build the profile.  This option is only useful to distribution developers."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:3786
msgid "In addition to these actions, @command{guix package} supports the following options to query the current state of a profile, or the availability of packages:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3789
#, no-wrap
msgid "--search=@var{regexp}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:3790
#, no-wrap
msgid "-s @var{regexp}"
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:3792
msgid "guix-search"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3792
#, no-wrap
msgid "searching for packages"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3798
msgid "List the available packages whose name, synopsis, or description matches @var{regexp} (in a case-insensitive fashion), sorted by relevance.  Print all the metadata of matching packages in @code{recutils} format (@pxref{Top, GNU recutils databases,, recutils, GNU recutils manual})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3801
msgid "This allows specific fields to be extracted using the @command{recsel} command, for instance:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3807
#, no-wrap
msgid ""
"$ guix package -s malloc | recsel -p name,version,relevance\n"
"name: jemalloc\n"
"version: 4.5.0\n"
"relevance: 6\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3811
#, no-wrap
msgid ""
"name: glibc\n"
"version: 2.25\n"
"relevance: 1\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3815
#, no-wrap
msgid ""
"name: libgc\n"
"version: 7.6.0\n"
"relevance: 1\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3819
msgid "Similarly, to show the name of all the packages available under the terms of the GNU@tie{}LGPL version 3:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3823
#, no-wrap
msgid ""
"$ guix package -s \"\" | recsel -p name -e 'license ~ \"LGPL 3\"'\n"
"name: elfutils\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3826
#, no-wrap
msgid ""
"name: gmp\n"
"@dots{}\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3832
msgid "It is also possible to refine search results using several @code{-s} flags to @command{guix package}, or several arguments to @command{guix search}.  For example, the following command returns a list of board games (this time using the @command{guix search} alias):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3837
#, no-wrap
msgid ""
"$ guix search '\\<board\\>' game | recsel -p name\n"
"name: gnubg\n"
"@dots{}\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3843
msgid "If we were to omit @code{-s game}, we would also get software packages that deal with printed circuit boards; removing the angle brackets around @code{board} would further add packages that have to do with keyboards."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3847
msgid "And now for a more elaborate example.  The following command searches for cryptographic libraries, filters out Haskell, Perl, Python, and Ruby libraries, and prints the name and synopsis of the matching packages:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3851
#, no-wrap
msgid ""
"$ guix search crypto library | \\\n"
"    recsel -e '! (name ~ \"^(ghc|perl|python|ruby)\")' -p name,synopsis\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3856
msgid "@xref{Selection Expressions,,, recutils, GNU recutils manual}, for more information on @dfn{selection expressions} for @code{recsel -e}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3857
#, no-wrap
msgid "--show=@var{package}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3861
msgid "Show details about @var{package}, taken from the list of available packages, in @code{recutils} format (@pxref{Top, GNU recutils databases,, recutils, GNU recutils manual})."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3866
#, no-wrap
msgid ""
"$ guix package --show=guile | recsel -p name,version\n"
"name: guile\n"
"version: 3.0.5\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3869
#, fuzzy, no-wrap
#| msgid ""
#| "name: python\n"
#| "version: 3.3.5\n"
msgid ""
"name: guile\n"
"version: 3.0.2\n"
"\n"
msgstr ""
"name: guile\n"
"version: 3.0.2\n"
"\n"

#. type: example
#: guix-git/doc/guix.texi:3873
#, fuzzy, no-wrap
#| msgid ""
#| "name: python\n"
#| "version: 3.3.5\n"
msgid ""
"name: guile\n"
"version: 2.2.7\n"
"@dots{}\n"
msgstr ""
"name: guile\n"
"version: 2.2.7\n"
"@dots{}\n"

#. type: table
#: guix-git/doc/guix.texi:3877
msgid "You may also specify the full name of a package to only get details about a specific version of it (this time using the @command{guix show} alias):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:3881
#, no-wrap
msgid ""
"$ guix show guile@@3.0.5 | recsel -p name,version\n"
"name: guile\n"
"version: 3.0.5\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3883
#, no-wrap
msgid "--list-installed[=@var{regexp}]"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:3884
#, no-wrap
msgid "-I [@var{regexp}]"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3888
msgid "List the currently installed packages in the specified profile, with the most recently installed packages shown last.  When @var{regexp} is specified, list only installed packages whose name matches @var{regexp}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3894
msgid "For each installed package, print the following items, separated by tabs: the package name, its version string, the part of the package that is installed (for instance, @code{out} for the default output, @code{include} for its headers, etc.), and the path of this package in the store."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3895
#, no-wrap
msgid "--list-available[=@var{regexp}]"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:3896
#, no-wrap
msgid "-A [@var{regexp}]"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3900
msgid "List packages currently available in the distribution for this system (@pxref{GNU Distribution}).  When @var{regexp} is specified, list only available packages whose name matches @var{regexp}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3904
msgid "For each package, print the following items separated by tabs: its name, its version string, the parts of the package (@pxref{Packages with Multiple Outputs}), and the source location of its definition."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3905 guix-git/doc/guix.texi:4784
#, no-wrap
msgid "--list-generations[=@var{pattern}]"
msgstr "--list-generations[=@var{padrão}]"

#. type: itemx
#: guix-git/doc/guix.texi:3906 guix-git/doc/guix.texi:4785
#, no-wrap
msgid "-l [@var{pattern}]"
msgstr "-l [@var{padrão}]"

#. type: table
#: guix-git/doc/guix.texi:3912
msgid "Return a list of generations along with their creation dates; for each generation, show the installed packages, with the most recently installed packages shown last.  Note that the zeroth generation is never shown."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3917
msgid "For each installed package, print the following items, separated by tabs: the name of a package, its version string, the part of the package that is installed (@pxref{Packages with Multiple Outputs}), and the location of this package in the store."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3920
msgid "When @var{pattern} is used, the command returns only matching generations.  Valid patterns include:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3922
#, no-wrap
msgid "@emph{Integers and comma-separated integers}.  Both patterns denote"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:3925
msgid "generation numbers.  For instance, @option{--list-generations=1} returns the first one."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:3928
msgid "And @option{--list-generations=1,8,2} outputs three generations in the specified order.  Neither spaces nor trailing commas are allowed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3929
#, no-wrap
msgid "@emph{Ranges}.  @option{--list-generations=2..9} prints the"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:3932
msgid "specified generations and everything in between.  Note that the start of a range must be smaller than its end."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:3936
msgid "It is also possible to omit the endpoint.  For example, @option{--list-generations=2..}, returns all generations starting from the second one."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3937
#, no-wrap
msgid "@emph{Durations}.  You can also get the last @emph{N}@tie{}days, weeks,"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:3941
msgid "or months by passing an integer along with the first letter of the duration.  For example, @option{--list-generations=20d} lists generations that are up to 20 days old."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3943 guix-git/doc/guix.texi:4819
#, no-wrap
msgid "--delete-generations[=@var{pattern}]"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:3944 guix-git/doc/guix.texi:4820
#, no-wrap
msgid "-d [@var{pattern}]"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3947 guix-git/doc/guix.texi:4823
msgid "When @var{pattern} is omitted, delete all generations except the current one."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3953 guix-git/doc/guix.texi:4829
msgid "This command accepts the same patterns as @option{--list-generations}.  When @var{pattern} is specified, delete the matching generations.  When @var{pattern} specifies a duration, generations @emph{older} than the specified duration match.  For instance, @option{--delete-generations=1m} deletes generations that are more than one month old."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3956
msgid "If the current generation matches, it is @emph{not} deleted.  Also, the zeroth generation is never deleted."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3959 guix-git/doc/guix.texi:4834
msgid "Note that deleting generations prevents rolling back to them.  Consequently, this command must be used with care."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3960 guix-git/doc/guix.texi:6225
#, no-wrap
msgid "manifest, exporting"
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:3962
msgid "export-manifest"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3962 guix-git/doc/guix.texi:6227
#, no-wrap
msgid "--export-manifest"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3965
msgid "Write to standard output a manifest suitable for @option{--manifest} corresponding to the chosen profile(s)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3969
msgid "This option is meant to help you migrate from the ``imperative'' operating mode---running @command{guix install}, @command{guix upgrade}, etc.---to the declarative mode that @option{--manifest} offers."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3974
msgid "Be aware that the resulting manifest @emph{approximates} what your profile actually contains; for instance, depending on how your profile was created, it can refer to packages or package versions that are not exactly what you specified."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3979
msgid "Keep in mind that a manifest is purely symbolic: it only contains package names and possibly versions, and their meaning varies over time.  If you wish to ``pin'' channels to the revisions that were used to build the profile(s), see @option{--export-channels} below."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:3980
#, no-wrap
msgid "pinning, channel revisions of a profile"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:3981
#, no-wrap
msgid "--export-channels"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3985
msgid "Write to standard output the list of channels used by the chosen profile(s), in a format suitable for @command{guix pull --channels} or @command{guix time-machine --channels} (@pxref{Channels})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3989
msgid "Together with @option{--export-manifest}, this option provides information allowing you to replicate the current profile (@pxref{Replicating Guix})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:3997
msgid "However, note that the output of this command @emph{approximates} what was actually used to build this profile.  In particular, a single profile might have been built from several different revisions of the same channel.  In that case, @option{--export-manifest} chooses the last one and writes the list of other revisions in a comment.  If you really need to pick packages from different channel revisions, you can use inferiors in your manifest to do so (@pxref{Inferiors})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4002
msgid "Together with @option{--export-manifest}, this is a good starting point if you are willing to migrate from the ``imperative'' model to the fully declarative model consisting of a manifest file along with a channels file pinning the exact channel revision(s) you want."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4009
msgid "Finally, since @command{guix package} may actually start build processes, it supports all the common build options (@pxref{Common Build Options}).  It also supports package transformation options, such as @option{--with-source}, and preserves them across upgrades (@pxref{Package Transformation Options})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4014
#, no-wrap
msgid "pre-built binaries"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4020
msgid "Guix supports transparent source/binary deployment, which means that it can either build things locally, or download pre-built items from a server, or both.  We call these pre-built items @dfn{substitutes}---they are substitutes for local build results.  In many cases, downloading a substitute is much faster than building things locally."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4025
msgid "Substitutes can be anything resulting from a derivation build (@pxref{Derivations}).  Of course, in the common case, they are pre-built package binaries, but source tarballs, for instance, which also result from derivation builds, can be available as substitutes."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4039
#, no-wrap
msgid "build farm"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4050
msgid "@code{@value{SUBSTITUTE-SERVER-1}} and @code{@value{SUBSTITUTE-SERVER-2}} are both front-ends to official build farms that build packages from Guix continuously for some architectures, and make them available as substitutes.  These are the default source of substitutes; which can be overridden by passing the @option{--substitute-urls} option either to @command{guix-daemon} (@pxref{daemon-substitute-urls,, @code{guix-daemon --substitute-urls}})  or to client tools such as @command{guix package} (@pxref{client-substitute-urls,, client @option{--substitute-urls} option})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4056
msgid "Substitute URLs can be either HTTP or HTTPS.  HTTPS is recommended because communications are encrypted; conversely, using HTTP makes all communications visible to an eavesdropper, who could use the information gathered to determine, for instance, whether your system has unpatched security vulnerabilities."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4065
msgid "Substitutes from the official build farms are enabled by default when using Guix System (@pxref{GNU Distribution}).  However, they are disabled by default when using Guix on a foreign distribution, unless you have explicitly enabled them via one of the recommended installation steps (@pxref{Installation}).  The following paragraphs describe how to enable or disable substitutes for the official build farm; the same procedure can also be used to enable substitutes for any other substitute server."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4069
#, no-wrap
msgid "security"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4071
#, no-wrap
msgid "access control list (ACL), for substitutes"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4072
#, no-wrap
msgid "ACL (access control list), for substitutes"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4078
msgid "To allow Guix to download substitutes from @code{@value{SUBSTITUTE-SERVER-1}}, @code{@value{SUBSTITUTE-SERVER-2}} or a mirror, you must add the relevant public key to the access control list (ACL) of archive imports, using the @command{guix archive} command (@pxref{Invoking guix archive}).  Doing so implies that you trust the substitute server to not be compromised and to serve genuine substitutes."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:4083
msgid "If you are using Guix System, you can skip this section: Guix System authorizes substitutes from @code{@value{SUBSTITUTE-SERVER-1}} and @code{@value{SUBSTITUTE-SERVER-2}} by default."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4091
msgid "The public keys for each of the project maintained substitute servers are installed along with Guix, in @code{@var{prefix}/share/guix/}, where @var{prefix} is the installation prefix of Guix.  If you installed Guix from source, make sure you checked the GPG signature of @file{guix-@value{VERSION}.tar.gz}, which contains this public key file.  Then, you can run something like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4095
#, fuzzy, no-wrap
#| msgid ""
#| "# guix archive --authorize < \\\n"
#| "     ~root/.config/guix/current/share/guix/@value{SUBSTITUTE-SERVER}.pub\n"
msgid ""
"# guix archive --authorize < @var{prefix}/share/guix/@value{SUBSTITUTE-SERVER-1}.pub\n"
"# guix archive --authorize < @var{prefix}/share/guix/@value{SUBSTITUTE-SERVER-2}.pub\n"
msgstr ""
"# guix archive --authorize < @var{prefix}/share/guix/@value{SUBSTITUTE-SERVER-1}.pub\n"
"# guix archive --authorize < @var{prefix}/share/guix/@value{SUBSTITUTE-SERVER-2}.pub\n"

#. type: Plain text
#: guix-git/doc/guix.texi:4099
msgid "Once this is in place, the output of a command like @code{guix build} should change from something like:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4108
#, no-wrap
msgid ""
"$ guix build emacs --dry-run\n"
"The following derivations would be built:\n"
"   /gnu/store/yr7bnx8xwcayd6j95r2clmkdl1qh688w-emacs-24.3.drv\n"
"   /gnu/store/x8qsh1hlhgjx6cwsjyvybnfv2i37z23w-dbus-1.6.4.tar.gz.drv\n"
"   /gnu/store/1ixwp12fl950d15h2cj11c73733jay0z-alsa-lib-1.0.27.1.tar.bz2.drv\n"
"   /gnu/store/nlma1pw0p603fpfiqy7kn4zm105r5dmw-util-linux-2.21.drv\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4112
msgid "to something like:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4121
#, no-wrap
msgid ""
"$ guix build emacs --dry-run\n"
"112.3 MB would be downloaded:\n"
"   /gnu/store/pk3n22lbq6ydamyymqkkz7i69wiwjiwi-emacs-24.3\n"
"   /gnu/store/2ygn4ncnhrpr61rssa6z0d9x22si0va3-libjpeg-8d\n"
"   /gnu/store/71yz6lgx4dazma9dwn2mcjxaah9w77jq-cairo-1.12.16\n"
"   /gnu/store/7zdhgp0n1518lvfn8mb96sxqfmvqrl7v-libxrender-0.9.7\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4128
msgid "The text changed from ``The following derivations would be built'' to ``112.3 MB would be downloaded''.  This indicates that substitutes from the configured substitute servers are usable and will be downloaded, when possible, for future builds."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4129
#, no-wrap
msgid "substitutes, how to disable"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4135
msgid "The substitute mechanism can be disabled globally by running @code{guix-daemon} with @option{--no-substitutes} (@pxref{Invoking guix-daemon}).  It can also be disabled temporarily by passing the @option{--no-substitutes} option to @command{guix package}, @command{guix build}, and other command-line tools."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4139
#, no-wrap
msgid "substitute servers, adding more"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4146
msgid "Guix can look up and fetch substitutes from several servers.  This is useful when you are using packages from additional channels for which the official server does not have substitutes but another server provides them.  Another situation where this is useful is when you would prefer to download from your organization's substitute server, resorting to the official server only as a fallback or dismissing it altogether."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4151
msgid "You can give Guix a list of substitute server URLs and it will check them in the specified order.  You also need to explicitly authorize the public keys of substitute servers to instruct Guix to accept the substitutes they sign."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4158
msgid "On Guix System, this is achieved by modifying the configuration of the @code{guix} service.  Since the @code{guix} service is part of the default lists of services, @code{%base-services} and @code{%desktop-services}, you can use @code{modify-services} to change its configuration and add the URLs and substitute keys that you want (@pxref{Service Reference, @code{modify-services}})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4164
msgid "As an example, suppose you want to fetch substitutes from @code{guix.example.org} and to authorize the signing key of that server, in addition to the default @code{@value{SUBSTITUTE-SERVER-1}} and @code{@value{SUBSTITUTE-SERVER-2}}.  The resulting operating system configuration will look something like:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:4181
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (services\n"
"    ;; Assume we're starting from '%desktop-services'.  Replace it\n"
"    ;; with the list of services you're actually using.\n"
"    (modify-services %desktop-services\n"
"      (guix-service-type config =>\n"
"                        (guix-configuration\n"
"                          (inherit config)\n"
"                          (substitute-urls\n"
"                            (append (list \"https://guix.example.org\")\n"
"                                    %default-substitute-urls))\n"
"                          (authorized-keys\n"
"                            (append (list (local-file \"./key.pub\"))\n"
"                                    %default-authorized-guix-keys)))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4188
msgid "This assumes that the file @file{key.pub} contains the signing key of @code{guix.example.org}.  With this change in place in your operating system configuration file (say @file{/etc/config.scm}), you can reconfigure and restart the @code{guix-daemon} service or reboot so the changes take effect:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4192
#, no-wrap
msgid ""
"$ sudo guix system reconfigure /etc/config.scm\n"
"$ sudo herd restart guix-daemon\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4196
msgid "If you're running Guix on a ``foreign distro'', you would instead take the following steps to get substitutes from additional servers:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:4205
msgid "Edit the service configuration file for @code{guix-daemon}; when using systemd, this is normally @file{/etc/systemd/system/guix-daemon.service}.  Add the @option{--substitute-urls} option on the @command{guix-daemon} command line and list the URLs of interest (@pxref{daemon-substitute-urls, @code{guix-daemon --substitute-urls}}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4208
#, no-wrap
msgid "@dots{} --substitute-urls='https://guix.example.org @value{SUBSTITUTE-URLS}'\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:4212
msgid "Restart the daemon.  For systemd, it goes like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4216
#, no-wrap
msgid ""
"systemctl daemon-reload\n"
"systemctl restart guix-daemon.service\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:4220
msgid "Authorize the key of the new server (@pxref{Invoking guix archive}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4223
#, no-wrap
msgid "guix archive --authorize < key.pub\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:4227
msgid "Again this assumes @file{key.pub} contains the public key that @code{guix.example.org} uses to sign substitutes."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4236
msgid "Now you're all set! Substitutes will be preferably taken from @code{https://guix.example.org}, using @code{@value{SUBSTITUTE-SERVER-1}} then @code{@value{SUBSTITUTE-SERVER-2}} as fallback options.  Of course you can list as many substitute servers as you like, with the caveat that substitute lookup can be slowed down if too many servers need to be contacted."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4240
msgid "Note that there are also situations where one may want to add the URL of a substitute server @emph{without} authorizing its key.  @xref{Substitute Authentication}, to understand this fine point."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4244
#, no-wrap
msgid "digital signatures"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4248
msgid "Guix detects and raises an error when attempting to use a substitute that has been tampered with.  Likewise, it ignores substitutes that are not signed, or that are not signed by one of the keys listed in the ACL."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4254
msgid "There is one exception though: if an unauthorized server provides substitutes that are @emph{bit-for-bit identical} to those provided by an authorized server, then the unauthorized server becomes eligible for downloads.  For example, assume we have chosen two substitute servers with this option:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4257
#, no-wrap
msgid "--substitute-urls=\"https://a.example.org https://b.example.org\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4268
msgid "If the ACL contains only the key for @samp{b.example.org}, and if @samp{a.example.org} happens to serve the @emph{exact same} substitutes, then Guix will download substitutes from @samp{a.example.org} because it comes first in the list and can be considered a mirror of @samp{b.example.org}.  In practice, independent build machines usually produce the same binaries, thanks to bit-reproducible builds (see below)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4275
msgid "When using HTTPS, the server's X.509 certificate is @emph{not} validated (in other words, the server is not authenticated), contrary to what HTTPS clients such as Web browsers usually do.  This is because Guix authenticates substitute information itself, as explained above, which is what we care about (whereas X.509 certificates are about authenticating bindings between domain names and public keys)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4287
msgid "Substitutes are downloaded over HTTP or HTTPS@.  The @env{http_proxy} and @env{https_proxy} environment variables can be set in the environment of @command{guix-daemon} and are honored for downloads of substitutes.  Note that the value of those environment variables in the environment where @command{guix build}, @command{guix package}, and other client commands are run has @emph{absolutely no effect}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4296
msgid "Even when a substitute for a derivation is available, sometimes the substitution attempt will fail.  This can happen for a variety of reasons: the substitute server might be offline, the substitute may recently have been deleted, the connection might have been interrupted, etc."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4310
msgid "When substitutes are enabled and a substitute for a derivation is available, but the substitution attempt fails, Guix will attempt to build the derivation locally depending on whether or not @option{--fallback} was given (@pxref{fallback-option,, common build option @option{--fallback}}).  Specifically, if @option{--fallback} was omitted, then no local build will be performed, and the derivation is considered to have failed.  However, if @option{--fallback} was given, then Guix will attempt to build the derivation locally, and the success or failure of the derivation depends on the success or failure of the local build.  Note that when substitutes are disabled or no substitute is available for the derivation in question, a local build will @emph{always} be performed, regardless of whether or not @option{--fallback} was given."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4315
msgid "To get an idea of how many substitutes are available right now, you can try running the @command{guix weather} command (@pxref{Invoking guix weather}).  This command provides statistics on the substitutes provided by a server."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4319
#, no-wrap
msgid "trust, of pre-built binaries"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4329
msgid "Today, each individual's control over their own computing is at the mercy of institutions, corporations, and groups with enough power and determination to subvert the computing infrastructure and exploit its weaknesses.  While using substitutes can be convenient, we encourage users to also build on their own, or even run their own build farm, such that the project run substitute servers are less of an interesting target.  One way to help is by publishing the software you build using @command{guix publish} so that others have one more choice of server to download substitutes from (@pxref{Invoking guix publish})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4341
msgid "Guix has the foundations to maximize build reproducibility (@pxref{Features}).  In most cases, independent builds of a given package or derivation should yield bit-identical results.  Thus, through a diverse set of independent package builds, we can strengthen the integrity of our systems.  The @command{guix challenge} command aims to help users assess substitute servers, and to assist developers in finding out about non-deterministic package builds (@pxref{Invoking guix challenge}).  Similarly, the @option{--check} option of @command{guix build} allows users to check whether previously-installed substitutes are genuine by rebuilding them locally (@pxref{build-check, @command{guix build --check}})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4345
msgid "In the future, we want Guix to have support to publish and retrieve binaries to/from other users, in a peer-to-peer fashion.  If you would like to discuss this project, join us on @email{guix-devel@@gnu.org}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4349
#, no-wrap
msgid "multiple-output packages"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4350
#, no-wrap
msgid "package outputs"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4351
#, no-wrap
msgid "outputs"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4361
msgid "Often, packages defined in Guix have a single @dfn{output}---i.e., the source package leads to exactly one directory in the store.  When running @command{guix install glibc}, one installs the default output of the GNU libc package; the default output is called @code{out}, but its name can be omitted as shown in this command.  In this particular case, the default output of @code{glibc} contains all the C header files, shared libraries, static libraries, Info documentation, and other supporting files."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4369
msgid "Sometimes it is more appropriate to separate the various types of files produced from a single source package into separate outputs.  For instance, the GLib C library (used by GTK+ and related packages)  installs more than 20 MiB of reference documentation as HTML pages.  To save space for users who do not need it, the documentation goes to a separate output, called @code{doc}.  To install the main GLib output, which contains everything but the documentation, one would run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4372
#, no-wrap
msgid "guix install glib\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4376
msgid "The command to install its documentation is:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4379
#, no-wrap
msgid "guix install glib:doc\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4388
msgid "While the colon syntax works for command-line specification of package outputs, it will not work when using a package @emph{variable} in Scheme code.  For example, to add the documentation of @code{glib} to the globally installed packages of an @code{operating-system} (see @ref{operating-system Reference}), a list of two items, the first one being the package @emph{variable} and the second one the name of the output to select (a string), must be used instead:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:4398
#, no-wrap
msgid ""
"(use-modules (gnu packages glib))\n"
";; glib-with-documentation is the Guile symbol for the glib package\n"
"(operating-system\n"
" ...\n"
" (packages\n"
"  (append\n"
"   (list (list glib-with-documentation \"doc\"))\n"
"         %base-packages)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4409
msgid "Some packages install programs with different ``dependency footprints''.  For instance, the WordNet package installs both command-line tools and graphical user interfaces (GUIs).  The former depend solely on the C library, whereas the latter depend on Tcl/Tk and the underlying X libraries.  In this case, we leave the command-line tools in the default output, whereas the GUIs are in a separate output.  This allows users who do not need the GUIs to save space.  The @command{guix size} command can help find out about such situations (@pxref{Invoking guix size}).  @command{guix graph} can also be helpful (@pxref{Invoking guix graph})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4417
msgid "There are several such multiple-output packages in the GNU distribution.  Other conventional output names include @code{lib} for libraries and possibly header files, @code{bin} for stand-alone programs, and @code{debug} for debugging information (@pxref{Installing Debugging Files}).  The outputs of a packages are listed in the third column of the output of @command{guix package --list-available} (@pxref{Invoking guix package})."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:4420
#, no-wrap
msgid "Invoking @command{guix gc}"
msgstr "Invocando @command{guix gc}"

#. type: cindex
#: guix-git/doc/guix.texi:4422
#, no-wrap
msgid "garbage collector"
msgstr "coletor de lixo"

#. type: cindex
#: guix-git/doc/guix.texi:4423
#, no-wrap
msgid "disk space"
msgstr ""

#. type: command{#1}
#: guix-git/doc/guix.texi:4424
#, fuzzy, no-wrap
#| msgid "guix"
msgid "guix gc"
msgstr "guix"

#. type: Plain text
#: guix-git/doc/guix.texi:4430
msgid "Packages that are installed, but not used, may be @dfn{garbage-collected}.  The @command{guix gc} command allows users to explicitly run the garbage collector to reclaim space from the @file{/gnu/store} directory.  It is the @emph{only} way to remove files from @file{/gnu/store}---removing files or directories manually may break it beyond repair!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4441
msgid "The garbage collector has a set of known @dfn{roots}: any file under @file{/gnu/store} reachable from a root is considered @dfn{live} and cannot be deleted; any other file is considered @dfn{dead} and may be deleted.  The set of garbage collector roots (``GC roots'' for short)  includes default user profiles; by default, the symlinks under @file{/var/guix/gcroots} represent these GC roots.  New GC roots can be added with @command{guix build --root}, for example (@pxref{Invoking guix build}).  The @command{guix gc --list-roots} command lists them."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4447
msgid "Prior to running @code{guix gc --collect-garbage} to make space, it is often useful to remove old generations from user profiles; that way, old package builds referenced by those generations can be reclaimed.  This is achieved by running @code{guix package --delete-generations} (@pxref{Invoking guix package})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4451
msgid "Our recommendation is to run a garbage collection periodically, or when you are short on disk space.  For instance, to guarantee that at least 5@tie{}GB are available on your disk, simply run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4454
#, no-wrap
msgid "guix gc -F 5G\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4463
msgid "It is perfectly safe to run as a non-interactive periodic job (@pxref{Scheduled Job Execution}, for how to set up such a job).  Running @command{guix gc} with no arguments will collect as much garbage as it can, but that is often inconvenient: you may find yourself having to rebuild or re-download software that is ``dead'' from the GC viewpoint but that is necessary to build other pieces of software---e.g., the compiler tool chain."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4469
msgid "The @command{guix gc} command has three modes of operation: it can be used to garbage-collect any dead files (the default), to delete specific files (the @option{--delete} option), to print garbage-collector information, or for more advanced queries.  The garbage collection options are as follows:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4471
#, no-wrap
msgid "--collect-garbage[=@var{min}]"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:4472
#, no-wrap
msgid "-C [@var{min}]"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4476
msgid "Collect garbage---i.e., unreachable @file{/gnu/store} files and sub-directories.  This is the default operation when no option is specified."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4481
msgid "When @var{min} is given, stop once @var{min} bytes have been collected.  @var{min} may be a number of bytes, or it may include a unit as a suffix, such as @code{MiB} for mebibytes and @code{GB} for gigabytes (@pxref{Block size, size specifications,, coreutils, GNU Coreutils})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4483
msgid "When @var{min} is omitted, collect all the garbage."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4484
#, no-wrap
msgid "--free-space=@var{free}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:4485
#, no-wrap
msgid "-F @var{free}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4489
msgid "Collect garbage until @var{free} space is available under @file{/gnu/store}, if possible; @var{free} denotes storage space, such as @code{500MiB}, as described above."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4492
msgid "When @var{free} or more is already available in @file{/gnu/store}, do nothing and exit immediately."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4493
#, no-wrap
msgid "--delete-generations[=@var{duration}]"
msgstr "--delete-generations[=@var{duração}]"

#. type: itemx
#: guix-git/doc/guix.texi:4494
#, no-wrap
msgid "-d [@var{duration}]"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4499
msgid "Before starting the garbage collection process, delete all the generations older than @var{duration}, for all the user profiles and home environment generations; when run as root, this applies to all the profiles @emph{of all the users}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4503
msgid "For example, this command deletes all the generations of all your profiles that are older than 2 months (except generations that are current), and then proceeds to free space until at least 10 GiB are available:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4506
#, no-wrap
msgid "guix gc -d 2m -F 10G\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4508
#, no-wrap
msgid "--delete"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:4509 guix-git/doc/guix.texi:6148
#, no-wrap
msgid "-D"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4513
msgid "Attempt to delete all the store files and directories specified as arguments.  This fails if some of the files are not in the store, or if they are still live."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4514
#, no-wrap
msgid "--list-failures"
msgstr "--list-failures"

#. type: table
#: guix-git/doc/guix.texi:4516
msgid "List store items corresponding to cached build failures."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4520
msgid "This prints nothing unless the daemon was started with @option{--cache-failures} (@pxref{Invoking guix-daemon, @option{--cache-failures}})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4521
#, no-wrap
msgid "--list-roots"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4524
msgid "List the GC roots owned by the user; when run as root, list @emph{all} the GC roots."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4525
#, no-wrap
msgid "--list-busy"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4528
msgid "List store items in use by currently running processes.  These store items are effectively considered GC roots: they cannot be deleted."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4529
#, no-wrap
msgid "--clear-failures"
msgstr "--clear-failures"

#. type: table
#: guix-git/doc/guix.texi:4531
msgid "Remove the specified store items from the failed-build cache."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4534
msgid "Again, this option only makes sense when the daemon is started with @option{--cache-failures}.  Otherwise, it does nothing."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4535
#, no-wrap
msgid "--list-dead"
msgstr "--list-dead"

#. type: table
#: guix-git/doc/guix.texi:4538
msgid "Show the list of dead files and directories still present in the store---i.e., files and directories no longer reachable from any root."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4539
#, no-wrap
msgid "--list-live"
msgstr "--list-live"

#. type: table
#: guix-git/doc/guix.texi:4541
msgid "Show the list of live store files and directories."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4545
msgid "In addition, the references among existing store files can be queried:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4548
#, no-wrap
msgid "--references"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:4549
#, no-wrap
msgid "--referrers"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4550 guix-git/doc/guix.texi:15163
#, no-wrap
msgid "package dependencies"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4553
msgid "List the references (respectively, the referrers) of store files given as arguments."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4554
#, no-wrap
msgid "--requisites"
msgstr "--requisites"

#. type: itemx
#: guix-git/doc/guix.texi:4555 guix-git/doc/guix.texi:7135
#, no-wrap
msgid "-R"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4556 guix-git/doc/guix.texi:15019
#: guix-git/doc/guix.texi:15047 guix-git/doc/guix.texi:15128
#, no-wrap
msgid "closure"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4561
msgid "List the requisites of the store files passed as arguments.  Requisites include the store files themselves, their references, and the references of these, recursively.  In other words, the returned list is the @dfn{transitive closure} of the store files."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4565
msgid "@xref{Invoking guix size}, for a tool to profile the size of the closure of an element.  @xref{Invoking guix graph}, for a tool to visualize the graph of references."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4566
#, no-wrap
msgid "--derivers"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4567 guix-git/doc/guix.texi:7458
#: guix-git/doc/guix.texi:14865 guix-git/doc/guix.texi:15272
#, no-wrap
msgid "derivation"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4570
msgid "Return the derivation(s) leading to the given store items (@pxref{Derivations})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4572
msgid "For example, this command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4575
#, no-wrap
msgid "guix gc --derivers $(guix package -I ^emacs$ | cut -f4)\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4580
msgid "returns the @file{.drv} file(s) leading to the @code{emacs} package installed in your profile."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4584
msgid "Note that there may be zero matching @file{.drv} files, for instance because these files have been garbage-collected.  There can also be more than one matching @file{.drv} due to fixed-output derivations."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4588
msgid "Lastly, the following options allow you to check the integrity of the store and to control disk usage."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4591
#, no-wrap
msgid "--verify[=@var{options}]"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4592
#, no-wrap
msgid "integrity, of the store"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4593
#, no-wrap
msgid "integrity checking"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4595
msgid "Verify the integrity of the store."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4598
msgid "By default, make sure that all the store items marked as valid in the database of the daemon actually exist in @file{/gnu/store}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4601
msgid "When provided, @var{options} must be a comma-separated list containing one or more of @code{contents} and @code{repair}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4607
msgid "When passing @option{--verify=contents}, the daemon computes the content hash of each store item and compares it against its hash in the database.  Hash mismatches are reported as data corruptions.  Because it traverses @emph{all the files in the store}, this command can take a long time, especially on systems with a slow disk drive."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4608
#, no-wrap
msgid "repairing the store"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4609 guix-git/doc/guix.texi:13317
#, no-wrap
msgid "corruption, recovering from"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4617
msgid "Using @option{--verify=repair} or @option{--verify=contents,repair} causes the daemon to try to repair corrupt store items by fetching substitutes for them (@pxref{Substitutes}).  Because repairing is not atomic, and thus potentially dangerous, it is available only to the system administrator.  A lightweight alternative, when you know exactly which items in the store are corrupt, is @command{guix build --repair} (@pxref{Invoking guix build})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4618
#, no-wrap
msgid "--optimize"
msgstr "--optimize"

#. type: table
#: guix-git/doc/guix.texi:4622
msgid "Optimize the store by hard-linking identical files---this is @dfn{deduplication}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4628
msgid "The daemon performs deduplication after each successful build or archive import, unless it was started with @option{--disable-deduplication} (@pxref{Invoking guix-daemon, @option{--disable-deduplication}}).  Thus, this option is primarily useful when the daemon was running with @option{--disable-deduplication}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4629
#, no-wrap
msgid "--vacuum-database"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4630
#, no-wrap
msgid "vacuum the store database"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4640
msgid "Guix uses an sqlite database to keep track of the items in (@pxref{The Store}).  Over time it is possible that the database may grow to a large size and become fragmented.  As a result, one may wish to clear the freed space and join the partially used pages in the database left behind from removed packages or after running the garbage collector.  Running @command{sudo guix gc --vacuum-database} will lock the database and @code{VACUUM} the store, defragmenting the database and purging freed pages, unlocking the database when it finishes."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:4644
#, no-wrap
msgid "Invoking @command{guix pull}"
msgstr "Invocando @command{guix pull}"

#. type: cindex
#: guix-git/doc/guix.texi:4646
#, no-wrap
msgid "upgrading Guix"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4647
#, no-wrap
msgid "updating Guix"
msgstr ""

#. type: command{#1}
#: guix-git/doc/guix.texi:4648
#, no-wrap
msgid "guix pull"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4649
#, no-wrap
msgid "pull"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4650
#, no-wrap
msgid "security, @command{guix pull}"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4651
#, no-wrap
msgid "authenticity, of code obtained with @command{guix pull}"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4661
msgid "Packages are installed or upgraded to the latest version available in the distribution currently available on your local machine.  To update that distribution, along with the Guix tools, you must run @command{guix pull}: the command downloads the latest Guix source code and package descriptions, and deploys it.  Source code is downloaded from a @uref{https://git-scm.com/book/en/, Git} repository, by default the official GNU@tie{}Guix repository, though this can be customized.  @command{guix pull} ensures that the code it downloads is @emph{authentic} by verifying that commits are signed by Guix developers."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4664
msgid "Specifically, @command{guix pull} downloads code from the @dfn{channels} (@pxref{Channels}) specified by one of the followings, in this order:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:4668
msgid "the @option{--channels} option;"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:4670
msgid "the user's @file{~/.config/guix/channels.scm} file;"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:4672
msgid "the system-wide @file{/etc/guix/channels.scm} file;"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:4675
msgid "the built-in default channels specified in the @code{%default-channels} variable."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4682
msgid "On completion, @command{guix package} will use packages and package versions from this just-retrieved copy of Guix.  Not only that, but all the Guix commands and Scheme modules will also be taken from that latest version.  New @command{guix} sub-commands added by the update also become available."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4688
msgid "Any user can update their Guix copy using @command{guix pull}, and the effect is limited to the user who ran @command{guix pull}.  For instance, when user @code{root} runs @command{guix pull}, this has no effect on the version of Guix that user @code{alice} sees, and vice versa."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4694
msgid "The result of running @command{guix pull} is a @dfn{profile} available under @file{~/.config/guix/current} containing the latest Guix.  Thus, make sure to add it to the beginning of your search path so that you use the latest version, and similarly for the Info manual (@pxref{Documentation}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4698
#, no-wrap
msgid ""
"export PATH=\"$HOME/.config/guix/current/bin:$PATH\"\n"
"export INFOPATH=\"$HOME/.config/guix/current/share/info:$INFOPATH\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4702
msgid "The @option{--list-generations} or @option{-l} option lists past generations produced by @command{guix pull}, along with details about their provenance:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4710
#, no-wrap
msgid ""
"$ guix pull -l\n"
"Generation 1\tJun 10 2018 00:18:18\n"
"  guix 65956ad\n"
"    repository URL: https://git.savannah.gnu.org/git/guix.git\n"
"    branch: origin/master\n"
"    commit: 65956ad3526ba09e1f7a40722c96c6ef7c0936fe\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4716
#, no-wrap
msgid ""
"Generation 2\tJun 11 2018 11:02:49\n"
"  guix e0cc7f6\n"
"    repository URL: https://git.savannah.gnu.org/git/guix.git\n"
"    branch: origin/master\n"
"    commit: e0cc7f669bec22c37481dd03a7941c7d11a64f1d\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4722
#, no-wrap
msgid ""
"Generation 3\tJun 13 2018 23:31:07\t(current)\n"
"  guix 844cc1c\n"
"    repository URL: https://git.savannah.gnu.org/git/guix.git\n"
"    branch: origin/master\n"
"    commit: 844cc1c8f394f03b404c5bb3aee086922373490c\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4726
msgid "@xref{Invoking guix describe, @command{guix describe}}, for other ways to describe the current status of Guix."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4731
msgid "This @code{~/.config/guix/current} profile works exactly like the profiles created by @command{guix package} (@pxref{Invoking guix package}).  That is, you can list generations, roll back to the previous generation---i.e., the previous Guix---and so on:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4737
#, no-wrap
msgid ""
"$ guix pull --roll-back\n"
"switched from generation 3 to 2\n"
"$ guix pull --delete-generations=1\n"
"deleting /var/guix/profiles/per-user/charlie/current-guix-1-link\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4741
msgid "You can also use @command{guix package} (@pxref{Invoking guix package})  to manage the profile by naming it explicitly:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4746
#, no-wrap
msgid ""
"$ guix package -p ~/.config/guix/current --roll-back\n"
"switched from generation 3 to 2\n"
"$ guix package -p ~/.config/guix/current --delete-generations=1\n"
"deleting /var/guix/profiles/per-user/charlie/current-guix-1-link\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4750
msgid "The @command{guix pull} command is usually invoked with no arguments, but it supports the following options:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4752 guix-git/doc/guix.texi:4948
#, no-wrap
msgid "--url=@var{url}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:4753 guix-git/doc/guix.texi:4949
#, no-wrap
msgid "--commit=@var{commit}"
msgstr "--commit=@var{commit}"

#. type: itemx
#: guix-git/doc/guix.texi:4754 guix-git/doc/guix.texi:4950
#, no-wrap
msgid "--branch=@var{branch}"
msgstr "--branch=@var{ramo}"

#. type: table
#: guix-git/doc/guix.texi:4758
msgid "Download code for the @code{guix} channel from the specified @var{url}, at the given @var{commit} (a valid Git commit ID represented as a hexadecimal string or the name of a tag), or @var{branch}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4759 guix-git/doc/guix.texi:5394
#, no-wrap
msgid "@file{channels.scm}, configuration file"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4760 guix-git/doc/guix.texi:5395
#, no-wrap
msgid "configuration file for channels"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4764
msgid "These options are provided for convenience, but you can also specify your configuration in the @file{~/.config/guix/channels.scm} file or using the @option{--channels} option (see below)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4765 guix-git/doc/guix.texi:4955
#, no-wrap
msgid "--channels=@var{file}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:4766 guix-git/doc/guix.texi:4956
#, no-wrap
msgid "-C @var{file}"
msgstr "-C @var{arquivo}"

#. type: table
#: guix-git/doc/guix.texi:4772
msgid "Read the list of channels from @var{file} instead of @file{~/.config/guix/channels.scm} or @file{/etc/guix/channels.scm}.  @var{file} must contain Scheme code that evaluates to a list of channel objects.  @xref{Channels}, for more information."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4773
#, no-wrap
msgid "channel news"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4774
#, no-wrap
msgid "--news"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:4775 guix-git/doc/guix.texi:6322
#: guix-git/doc/guix.texi:6819 guix-git/doc/guix.texi:40367
#: guix-git/doc/guix.texi:43817
#, no-wrap
msgid "-N"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4780
msgid "Display news written by channel authors for their users for changes made since the previous generation (@pxref{Channels, Writing Channel News}).  When @option{--details} is passed, additionally display new and upgraded packages."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4783
msgid "You can view that information for previous generations with @command{guix pull -l}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4790
msgid "List all the generations of @file{~/.config/guix/current} or, if @var{pattern} is provided, the subset of generations that match @var{pattern}.  The syntax of @var{pattern} is the same as with @code{guix package --list-generations} (@pxref{Invoking guix package})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4795
msgid "By default, this prints information about the channels used in each revision as well as the corresponding news entries.  If you pass @option{--details}, it will also print the list of packages added and upgraded in each generation compared to the previous one."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4796
#, no-wrap
msgid "--details"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4800
msgid "Instruct @option{--list-generations} or @option{--news} to display more information about the differences between subsequent generations---see above."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4807
msgid "Roll back to the previous @dfn{generation} of @file{~/.config/guix/current}---i.e., undo the last transaction."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4831
msgid "If the current generation matches, it is @emph{not} deleted."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4837
msgid "@xref{Invoking guix describe}, for a way to display information about the current generation only."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4841
msgid "Use @var{profile} instead of @file{~/.config/guix/current}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4842 guix-git/doc/guix.texi:12586
#: guix-git/doc/guix.texi:14703
#, no-wrap
msgid "--dry-run"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:4843 guix-git/doc/guix.texi:12587
#: guix-git/doc/guix.texi:14704 guix-git/doc/guix.texi:15001
#, no-wrap
msgid "-n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4846
msgid "Show which channel commit(s) would be used and what would be built or substituted but do not actually do it."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4847 guix-git/doc/guix.texi:40386
#: guix-git/doc/guix.texi:44064
#, no-wrap
msgid "--allow-downgrades"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4850
msgid "Allow pulling older or unrelated revisions of channels than those currently in use."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4851
#, no-wrap
msgid "downgrade attacks, protection against"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4856
msgid "By default, @command{guix pull} protects against so-called ``downgrade attacks'' whereby the Git repository of a channel would be reset to an earlier or unrelated revision of itself, potentially leading you to install older, known-vulnerable versions of software packages."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:4860 guix-git/doc/guix.texi:40400
msgid "Make sure you understand its security implications before using @option{--allow-downgrades}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:4862
#, no-wrap
msgid "--disable-authentication"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4864
msgid "Allow pulling channel code without authenticating it."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4865 guix-git/doc/guix.texi:5574
#, no-wrap
msgid "authentication, of channel code"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4870
msgid "By default, @command{guix pull} authenticates code downloaded from channels by verifying that its commits are signed by authorized developers, and raises an error if this is not the case.  This option instructs it to not perform any such verification."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:4874
msgid "Make sure you understand its security implications before using @option{--disable-authentication}."
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:4877 guix-git/doc/guix.texi:6305
#: guix-git/doc/guix.texi:6802 guix-git/doc/guix.texi:7270
#: guix-git/doc/guix.texi:13251 guix-git/doc/guix.texi:15146
#: guix-git/doc/guix.texi:15411 guix-git/doc/guix.texi:16101
#: guix-git/doc/guix.texi:40310
#, no-wrap
msgid "-s @var{system}"
msgstr "-s @var{sistema}"

#. type: table
#: guix-git/doc/guix.texi:4880 guix-git/doc/guix.texi:7273
msgid "Attempt to build for @var{system}---e.g., @code{i686-linux}---instead of the system type of the build host."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4884
msgid "Use the bootstrap Guile to build the latest Guix.  This option is only useful to Guix developers."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4890
msgid "The @dfn{channel} mechanism allows you to instruct @command{guix pull} which repository and branch to pull from, as well as @emph{additional} repositories containing package modules that should be deployed.  @xref{Channels}, for more information."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4893
msgid "In addition, @command{guix pull} supports all the common build options (@pxref{Common Build Options})."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:4895
#, no-wrap
msgid "Invoking @command{guix time-machine}"
msgstr ""

#. type: command{#1}
#: guix-git/doc/guix.texi:4897
#, no-wrap
msgid "guix time-machine"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4898 guix-git/doc/guix.texi:5513
#, no-wrap
msgid "pinning, channels"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4899 guix-git/doc/guix.texi:5106
#: guix-git/doc/guix.texi:5514
#, no-wrap
msgid "replicating Guix"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4900 guix-git/doc/guix.texi:5515
#, no-wrap
msgid "reproducibility, of Guix"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4908
msgid "The @command{guix time-machine} command provides access to other revisions of Guix, for example to install older versions of packages, or to reproduce a computation in an identical environment.  The revision of Guix to be used is defined by a commit or by a channel description file created by @command{guix describe} (@pxref{Invoking guix describe})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4912
msgid "Let's assume that you want to travel to those days of November 2020 when version 1.2.0 of Guix was released and, once you're there, run the @command{guile} of that time:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4916
#, no-wrap
msgid ""
"guix time-machine --commit=v1.2.0 -- \\\n"
"  environment -C --ad-hoc guile -- guile\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4927
msgid "The command above fetches Guix@tie{}1.2.0 and runs its @command{guix environment} command to spawn an environment in a container running @command{guile} (@command{guix environment} has since been subsumed by @command{guix shell}; @pxref{Invoking guix shell}).  It's like driving a DeLorean@footnote{If you don't know what a DeLorean is, consider traveling back to the 1980's.}! The first @command{guix time-machine} invocation can be expensive: it may have to download or even build a large number of packages; the result is cached though and subsequent commands targeting the same commit are almost instantaneous."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:4935
msgid "The history of Guix is immutable and @command{guix time-machine} provides the exact same software as they are in a specific Guix revision.  Naturally, no security fixes are provided for old versions of Guix or its channels.  A careless use of @command{guix time-machine} opens the door to security vulnerabilities.  @xref{Invoking guix pull, @option{--allow-downgrades}}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4938 guix-git/doc/guix.texi:6009
#: guix-git/doc/guix.texi:6536 guix-git/doc/guix.texi:7396
#: guix-git/doc/guix.texi:12239 guix-git/doc/guix.texi:12506
#: guix-git/doc/guix.texi:13550 guix-git/doc/guix.texi:13646
#: guix-git/doc/guix.texi:14683 guix-git/doc/guix.texi:14966
#: guix-git/doc/guix.texi:15469 guix-git/doc/guix.texi:15847
#: guix-git/doc/guix.texi:15943 guix-git/doc/guix.texi:15982
#: guix-git/doc/guix.texi:16080
msgid "The general syntax is:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4941
#, no-wrap
msgid "guix time-machine @var{options}@dots{} -- @var{command} @var {arg}@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4946
msgid "where @var{command} and @var{arg}@dots{} are passed unmodified to the @command{guix} command of the specified revision.  The @var{options} that define this revision are the same as for @command{guix pull} (@pxref{Invoking guix pull}):"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4954
msgid "Use the @code{guix} channel from the specified @var{url}, at the given @var{commit} (a valid Git commit ID represented as a hexadecimal string or the name of a tag), or @var{branch}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:4960
msgid "Read the list of channels from @var{file}.  @var{file} must contain Scheme code that evaluates to a list of channel objects.  @xref{Channels} for more information."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4964
msgid "As for @command{guix pull}, the absence of any options means that the latest commit on the master branch will be used.  The command"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:4967
#, no-wrap
msgid "guix time-machine -- build hello\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4972
msgid "will thus build the package @code{hello} as defined in the master branch, which is in general a newer revision of Guix than you have installed.  Time travel works in both directions!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4976
msgid "Note that @command{guix time-machine} can trigger builds of channels and their dependencies, and these are controlled by the standard build options (@pxref{Common Build Options})."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:4984
msgid "The functionality described here is a ``technology preview'' as of version @value{VERSION}.  As such, the interface is subject to change."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4986 guix-git/doc/guix.texi:12285
#, no-wrap
msgid "inferiors"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4987
#, no-wrap
msgid "composition of Guix revisions"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4992
msgid "Sometimes you might need to mix packages from the revision of Guix you're currently running with packages available in a different revision of Guix.  Guix @dfn{inferiors} allow you to achieve that by composing different Guix revisions in arbitrary ways."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:4993 guix-git/doc/guix.texi:5056
#, no-wrap
msgid "inferior packages"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:4999
msgid "Technically, an ``inferior'' is essentially a separate Guix process connected to your main Guix process through a REPL (@pxref{Invoking guix repl}).  The @code{(guix inferior)} module allows you to create inferiors and to communicate with them.  It also provides a high-level interface to browse and manipulate the packages that an inferior provides---@dfn{inferior packages}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5009
msgid "When combined with channels (@pxref{Channels}), inferiors provide a simple way to interact with a separate revision of Guix.  For example, let's assume you want to install in your profile the current @code{guile} package, along with the @code{guile-json} as it existed in an older revision of Guix---perhaps because the newer @code{guile-json} has an incompatible API and you want to run your code against the old API@.  To do that, you could write a manifest for use by @code{guix package --manifest} (@pxref{Writing Manifests}); in that manifest, you would create an inferior for that old Guix revision you care about, and you would look up the @code{guile-json} package in the inferior:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5013
#, no-wrap
msgid ""
"(use-modules (guix inferior) (guix channels)\n"
"             (srfi srfi-1))   ;for 'first'\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5022
#, no-wrap
msgid ""
"(define channels\n"
"  ;; This is the old revision from which we want to\n"
"  ;; extract guile-json.\n"
"  (list (channel\n"
"         (name 'guix)\n"
"         (url \"https://git.savannah.gnu.org/git/guix.git\")\n"
"         (commit\n"
"          \"65956ad3526ba09e1f7a40722c96c6ef7c0936fe\"))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5026
#, no-wrap
msgid ""
"(define inferior\n"
"  ;; An inferior representing the above revision.\n"
"  (inferior-for-channels channels))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5032
#, no-wrap
msgid ""
";; Now create a manifest with the current \"guile\" package\n"
";; and the old \"guile-json\" package.\n"
"(packages->manifest\n"
" (list (first (lookup-inferior-packages inferior \"guile-json\"))\n"
"       (specification->package \"guile\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5037
msgid "On its first run, @command{guix package --manifest} might have to build the channel you specified before it can create the inferior; subsequent runs will be much faster because the Guix revision will be cached."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5040
msgid "The @code{(guix inferior)} module provides the following procedures to open an inferior:"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:5041
#, no-wrap
msgid "inferior-for-channels channels [#:cache-directory] [#:ttl]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:5045
msgid "Return an inferior for @var{channels}, a list of channels.  Use the cache at @var{cache-directory}, where entries can be reclaimed after @var{ttl} seconds.  This procedure opens a new connection to the build daemon."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:5048
msgid "As a side effect, this procedure may build or substitute binaries for @var{channels}, which can take time."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:5050
#, no-wrap
msgid "open-inferior directory [#:command \"bin/guix\"]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:5054
msgid "Open the inferior Guix in @var{directory}, running @code{@var{directory}/@var{command} repl} or equivalent.  Return @code{#f} if the inferior could not be launched."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5059
msgid "The procedures listed below allow you to obtain and manipulate inferior packages."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:5060
#, no-wrap
msgid "inferior-packages inferior"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:5062
msgid "Return the list of packages known to @var{inferior}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:5064
#, no-wrap
msgid "lookup-inferior-packages inferior name [version]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:5068
msgid "Return the sorted list of inferior packages matching @var{name} in @var{inferior}, with highest version numbers first.  If @var{version} is true, return only packages with a version number prefixed by @var{version}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:5070
#, no-wrap
msgid "inferior-package? obj"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:5072
msgid "Return true if @var{obj} is an inferior package."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:5074
#, no-wrap
msgid "inferior-package-name package"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:5075
#, no-wrap
msgid "inferior-package-version package"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:5076
#, fuzzy, no-wrap
#| msgid "package synopsis"
msgid "inferior-package-synopsis package"
msgstr "sinopse do pacote"

#. type: defunx
#: guix-git/doc/guix.texi:5077
#, fuzzy, no-wrap
#| msgid "package description"
msgid "inferior-package-description package"
msgstr "descrição do pacote"

#. type: defunx
#: guix-git/doc/guix.texi:5078
#, no-wrap
msgid "inferior-package-home-page package"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:5079
#, no-wrap
msgid "inferior-package-location package"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:5080
#, no-wrap
msgid "inferior-package-inputs package"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:5081
#, no-wrap
msgid "inferior-package-native-inputs package"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:5082
#, no-wrap
msgid "inferior-package-propagated-inputs package"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:5083
#, no-wrap
msgid "inferior-package-transitive-propagated-inputs package"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:5084
#, no-wrap
msgid "inferior-package-native-search-paths package"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:5085
#, no-wrap
msgid "inferior-package-transitive-native-search-paths package"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:5086
#, no-wrap
msgid "inferior-package-search-paths package"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:5091
msgid "These procedures are the counterpart of package record accessors (@pxref{package Reference}).  Most of them work by querying the inferior @var{package} comes from, so the inferior must still be live when you call these procedures."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5101
msgid "Inferior packages can be used transparently like any other package or file-like object in G-expressions (@pxref{G-Expressions}).  They are also transparently handled by the @code{packages->manifest} procedure, which is commonly used in manifests (@pxref{Invoking guix package, the @option{--manifest} option of @command{guix package}}).  Thus you can insert an inferior package pretty much anywhere you would insert a regular package: in manifests, in the @code{packages} field of your @code{operating-system} declaration, and so on."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:5103
#, no-wrap
msgid "Invoking @command{guix describe}"
msgstr "Invocando @command{guix describe}"

#. type: command{#1}
#: guix-git/doc/guix.texi:5107
#, fuzzy, no-wrap
#| msgid "Invoking guix describe"
msgid "guix describe"
msgstr "guix home describe\n"

#. type: Plain text
#: guix-git/doc/guix.texi:5115
msgid "Often you may want to answer questions like: ``Which revision of Guix am I using?'' or ``Which channels am I using?'' This is useful information in many situations: if you want to @emph{replicate} an environment on a different machine or user account, if you want to report a bug or to determine what change in the channels you are using caused it, or if you want to record your system state for reproducibility purposes.  The @command{guix describe} command answers these questions."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5119
msgid "When run from a @command{guix pull}ed @command{guix}, @command{guix describe} displays the channel(s) that it was built from, including their repository URL and commit IDs (@pxref{Channels}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:5127
#, no-wrap
msgid ""
"$ guix describe\n"
"Generation 10\tSep 03 2018 17:32:44\t(current)\n"
"  guix e0fa68c\n"
"    repository URL: https://git.savannah.gnu.org/git/guix.git\n"
"    branch: master\n"
"    commit: e0fa68c7718fffd33d81af415279d6ddb518f727\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5136
msgid "If you're familiar with the Git version control system, this is similar in spirit to @command{git describe}; the output is also similar to that of @command{guix pull --list-generations}, but limited to the current generation (@pxref{Invoking guix pull, the @option{--list-generations} option}).  Because the Git commit ID shown above unambiguously refers to a snapshot of Guix, this information is all it takes to describe the revision of Guix you're using, and also to replicate it."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5139
msgid "To make it easier to replicate Guix, @command{guix describe} can also be asked to return a list of channels instead of the human-readable description above:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:5152
#, no-wrap
msgid ""
"$ guix describe -f channels\n"
"(list (channel\n"
"        (name 'guix)\n"
"        (url \"https://git.savannah.gnu.org/git/guix.git\")\n"
"        (commit\n"
"          \"e0fa68c7718fffd33d81af415279d6ddb518f727\")\n"
"        (introduction\n"
"          (make-channel-introduction\n"
"            \"9edb3f66fd807b096b48283debdcddccfea34bad\"\n"
"            (openpgp-fingerprint\n"
"              \"BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA\")))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5161
msgid "You can save this to a file and feed it to @command{guix pull -C} on some other machine or at a later point in time, which will instantiate @emph{this exact Guix revision} (@pxref{Invoking guix pull, the @option{-C} option}).  From there on, since you're able to deploy the same revision of Guix, you can just as well @emph{replicate a complete software environment}.  We humbly think that this is @emph{awesome}, and we hope you'll like it too!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5164
msgid "The details of the options supported by @command{guix describe} are as follows:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:5166 guix-git/doc/guix.texi:7021
#: guix-git/doc/guix.texi:16214
#, no-wrap
msgid "--format=@var{format}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:5167 guix-git/doc/guix.texi:7022
#: guix-git/doc/guix.texi:16215
#, no-wrap
msgid "-f @var{format}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5169 guix-git/doc/guix.texi:16217
msgid "Produce output in the specified @var{format}, one of:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:5171
#, no-wrap
msgid "human"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5173
msgid "produce human-readable output;"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5173 guix-git/doc/guix.texi:5393
#, no-wrap
msgid "channels"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5177
msgid "produce a list of channel specifications that can be passed to @command{guix pull -C} or installed as @file{~/.config/guix/channels.scm} (@pxref{Invoking guix pull});"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:5177
#, no-wrap
msgid "channels-sans-intro"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5183
msgid "like @code{channels}, but omit the @code{introduction} field; use it to produce a channel specification suitable for Guix version 1.1.0 or earlier---the @code{introduction} field has to do with channel authentication (@pxref{Channels, Channel Authentication}) and is not supported by these older versions;"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:5183 guix-git/doc/guix.texi:13873
#, no-wrap
msgid "json"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5184
#, no-wrap
msgid "JSON"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5186
msgid "produce a list of channel specifications in JSON format;"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:5186 guix-git/doc/guix.texi:16219
#, no-wrap
msgid "recutils"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5188
msgid "produce a list of channel specifications in Recutils format."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:5190
#, no-wrap
msgid "--list-formats"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5192
msgid "Display available formats for @option{--format} option."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5196
msgid "Display information about @var{profile}."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:5199
#, no-wrap
msgid "Invoking @command{guix archive}"
msgstr "Invocando @command{guix archive}"

#. type: command{#1}
#: guix-git/doc/guix.texi:5201
#, no-wrap
msgid "guix archive"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5202
#, no-wrap
msgid "archive"
msgstr "pacote"

#. type: cindex
#: guix-git/doc/guix.texi:5203
#, no-wrap
msgid "exporting files from the store"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5204
#, no-wrap
msgid "importing files to the store"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5210
msgid "The @command{guix archive} command allows users to @dfn{export} files from the store into a single archive, and to later @dfn{import} them on a machine that runs Guix.  In particular, it allows store files to be transferred from one machine to the store on another machine."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:5214
msgid "If you're looking for a way to produce archives in a format suitable for tools other than Guix, @pxref{Invoking guix pack}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5216
#, no-wrap
msgid "exporting store items"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5218
msgid "To export store files as an archive to standard output, run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:5221
#, no-wrap
msgid "guix archive --export @var{options} @var{specifications}...\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5228
msgid "@var{specifications} may be either store file names or package specifications, as for @command{guix package} (@pxref{Invoking guix package}).  For instance, the following command creates an archive containing the @code{gui} output of the @code{git} package and the main output of @code{emacs}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:5231
#, no-wrap
msgid "guix archive --export git:gui /gnu/store/...-emacs-24.3 > great.nar\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5236
msgid "If the specified packages are not built yet, @command{guix archive} automatically builds them.  The build process may be controlled with the common build options (@pxref{Common Build Options})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5239
msgid "To transfer the @code{emacs} package to a machine connected over SSH, one would run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:5242
#, no-wrap
msgid "guix archive --export -r emacs | ssh the-machine guix archive --import\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5247
msgid "Similarly, a complete user profile may be transferred from one machine to another like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:5251
#, no-wrap
msgid ""
"guix archive --export -r $(readlink -f ~/.guix-profile) | \\\n"
"  ssh the-machine guix archive --import\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5261
msgid "However, note that, in both examples, all of @code{emacs} and the profile as well as all of their dependencies are transferred (due to @option{-r}), regardless of what is already available in the store on the target machine.  The @option{--missing} option can help figure out which items are missing from the target store.  The @command{guix copy} command simplifies and optimizes this whole process, so this is probably what you should use in this case (@pxref{Invoking guix copy})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5262
#, no-wrap
msgid "nar, archive format"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5263
#, no-wrap
msgid "normalized archive (nar)"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5264
#, no-wrap
msgid "nar bundle, archive format"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5269
msgid "Each store item is written in the @dfn{normalized archive} or @dfn{nar} format (described below), and the output of @command{guix archive --export} (and input of @command{guix archive --import}) is a @dfn{nar bundle}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5279
msgid "The nar format is comparable in spirit to `tar', but with differences that make it more appropriate for our purposes.  First, rather than recording all Unix metadata for each file, the nar format only mentions the file type (regular, directory, or symbolic link); Unix permissions and owner/group are dismissed.  Second, the order in which directory entries are stored always follows the order of file names according to the C locale collation order.  This makes archive production fully deterministic."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5283
msgid "That nar bundle format is essentially the concatenation of zero or more nars along with metadata for each store item it contains: its file name, references, corresponding derivation, and a digital signature."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5289
msgid "When exporting, the daemon digitally signs the contents of the archive, and that digital signature is appended.  When importing, the daemon verifies the signature and rejects the import in case of an invalid signature or if the signing key is not authorized."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5291
msgid "The main options are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:5293
#, no-wrap
msgid "--export"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5296
msgid "Export the specified store files or packages (see below).  Write the resulting archive to the standard output."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5299
msgid "Dependencies are @emph{not} included in the output, unless @option{--recursive} is passed."
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:5300 guix-git/doc/guix.texi:13583
#: guix-git/doc/guix.texi:13710 guix-git/doc/guix.texi:13741
#: guix-git/doc/guix.texi:13773 guix-git/doc/guix.texi:13948
#: guix-git/doc/guix.texi:13989 guix-git/doc/guix.texi:14040
#: guix-git/doc/guix.texi:14065 guix-git/doc/guix.texi:14090
#: guix-git/doc/guix.texi:14106 guix-git/doc/guix.texi:14154
#: guix-git/doc/guix.texi:14190 guix-git/doc/guix.texi:14217
#: guix-git/doc/guix.texi:45058
#, no-wrap
msgid "-r"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:5301 guix-git/doc/guix.texi:13582
#: guix-git/doc/guix.texi:13709 guix-git/doc/guix.texi:13740
#: guix-git/doc/guix.texi:13772 guix-git/doc/guix.texi:13947
#: guix-git/doc/guix.texi:13988 guix-git/doc/guix.texi:14039
#: guix-git/doc/guix.texi:14064 guix-git/doc/guix.texi:14089
#: guix-git/doc/guix.texi:14105 guix-git/doc/guix.texi:14153
#: guix-git/doc/guix.texi:14189 guix-git/doc/guix.texi:14216
#: guix-git/doc/guix.texi:14265 guix-git/doc/guix.texi:45057
#, no-wrap
msgid "--recursive"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5306
msgid "When combined with @option{--export}, this instructs @command{guix archive} to include dependencies of the given items in the archive.  Thus, the resulting archive is self-contained: it contains the closure of the exported store items."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:5307
#, no-wrap
msgid "--import"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5312
msgid "Read an archive from the standard input, and import the files listed therein into the store.  Abort if the archive has an invalid digital signature, or if it is signed by a public key not among the authorized keys (see @option{--authorize} below)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:5313
#, no-wrap
msgid "--missing"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5317
msgid "Read a list of store file names from the standard input, one per line, and write on the standard output the subset of these files missing from the store."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:5318
#, no-wrap
msgid "--generate-key[=@var{parameters}]"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5319
#, no-wrap
msgid "signing, archives"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5326
msgid "Generate a new key pair for the daemon.  This is a prerequisite before archives can be exported with @option{--export}.  This operation is usually instantaneous but it can take time if the system's entropy pool needs to be refilled.  On Guix System, @code{guix-service-type} takes care of generating this key pair the first boot."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5336
msgid "The generated key pair is typically stored under @file{/etc/guix}, in @file{signing-key.pub} (public key) and @file{signing-key.sec} (private key, which must be kept secret).  When @var{parameters} is omitted, an ECDSA key using the Ed25519 curve is generated, or, for Libgcrypt versions before 1.6.0, it is a 4096-bit RSA key.  Alternatively, @var{parameters} can specify @code{genkey} parameters suitable for Libgcrypt (@pxref{General public-key related Functions, @code{gcry_pk_genkey},, gcrypt, The Libgcrypt Reference Manual})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:5337
#, no-wrap
msgid "--authorize"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5338
#, no-wrap
msgid "authorizing, archives"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5342
msgid "Authorize imports signed by the public key passed on standard input.  The public key must be in ``s-expression advanced format''---i.e., the same format as the @file{signing-key.pub} file."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5349
msgid "The list of authorized keys is kept in the human-editable file @file{/etc/guix/acl}.  The file contains @url{https://people.csail.mit.edu/rivest/Sexp.txt, ``advanced-format s-expressions''} and is structured as an access-control list in the @url{https://theworld.com/~cme/spki.txt, Simple Public-Key Infrastructure (SPKI)}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:5350
#, no-wrap
msgid "--extract=@var{directory}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:5351
#, no-wrap
msgid "-x @var{directory}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5355
msgid "Read a single-item archive as served by substitute servers (@pxref{Substitutes}) and extract it to @var{directory}.  This is a low-level operation needed in only very narrow use cases; see below."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5358
msgid "For example, the following command extracts the substitute for Emacs served by @code{@value{SUBSTITUTE-SERVER-1}} to @file{/tmp/emacs}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:5363
#, no-wrap
msgid ""
"$ wget -O - \\\n"
"  https://@value{SUBSTITUTE-SERVER-1}/nar/gzip/@dots{}-emacs-24.5 \\\n"
"  | gunzip | guix archive -x /tmp/emacs\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5370
msgid "Single-item archives are different from multiple-item archives produced by @command{guix archive --export}; they contain a single store item, and they do @emph{not} embed a signature.  Thus this operation does @emph{no} signature verification and its output should be considered unsafe."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5374
msgid "The primary purpose of this operation is to facilitate inspection of archive contents coming from possibly untrusted substitute servers (@pxref{Invoking guix challenge})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:5375
#, no-wrap
msgid "--list"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:5376 guix-git/doc/guix.texi:13935
#: guix-git/doc/guix.texi:13982
#, no-wrap
msgid "-t"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:5380
msgid "Read a single-item archive as served by substitute servers (@pxref{Substitutes}) and print the list of files it contains, as in this example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:5385
#, no-wrap
msgid ""
"$ wget -O - \\\n"
"  https://@value{SUBSTITUTE-SERVER-1}/nar/lzip/@dots{}-emacs-26.3 \\\n"
"  | lzip -d | guix archive -t\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5396
#, no-wrap
msgid "@command{guix pull}, configuration file"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5397
#, no-wrap
msgid "configuration of @command{guix pull}"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5408
msgid "Guix and its package collection are updated by running @command{guix pull} (@pxref{Invoking guix pull}).  By default @command{guix pull} downloads and deploys Guix itself from the official GNU@tie{}Guix repository.  This can be customized by defining @dfn{channels} in the @file{~/.config/guix/channels.scm} file.  A channel specifies a URL and branch of a Git repository to be deployed, and @command{guix pull} can be instructed to pull from one or more channels.  In other words, channels can be used to @emph{customize} and to @emph{extend} Guix, as we will see below.  Guix is able to take into account security concerns and deal with authenticated updates."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5426
#, no-wrap
msgid "extending the package collection (channels)"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5427
#, no-wrap
msgid "variant packages (channels)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5431
msgid "You can specify @emph{additional channels} to pull from.  To use a channel, write @code{~/.config/guix/channels.scm} to instruct @command{guix pull} to pull from it @emph{in addition} to the default Guix channel(s):"
msgstr ""

#. type: vindex
#: guix-git/doc/guix.texi:5432
#, no-wrap
msgid "%default-channels"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5439
#, no-wrap
msgid ""
";; Add variant packages to those Guix provides.\n"
"(cons (channel\n"
"        (name 'variant-packages)\n"
"        (url \"https://example.org/variant-packages.git\"))\n"
"      %default-channels)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5449
msgid "Note that the snippet above is (as always!)@: Scheme code; we use @code{cons} to add a channel the list of channels that the variable @code{%default-channels} is bound to (@pxref{Pairs, @code{cons} and lists,, guile, GNU Guile Reference Manual}).  With this file in place, @command{guix pull} builds not only Guix but also the package modules from your own repository.  The result in @file{~/.config/guix/current} is the union of Guix with your own package modules:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:5461
#, no-wrap
msgid ""
"$ guix describe\n"
"Generation 19\tAug 27 2018 16:20:48\n"
"  guix d894ab8\n"
"    repository URL: https://git.savannah.gnu.org/git/guix.git\n"
"    branch: master\n"
"    commit: d894ab8e9bfabcefa6c49d9ba2e834dd5a73a300\n"
"  variant-packages dd3df5e\n"
"    repository URL: https://example.org/variant-packages.git\n"
"    branch: master\n"
"    commit: dd3df5e2c8818760a8fc0bd699e55d3b69fef2bb\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5468
msgid "The output of @command{guix describe} above shows that we're now running Generation@tie{}19 and that it includes both Guix and packages from the @code{variant-personal-packages} channel (@pxref{Invoking guix describe})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5477
msgid "The channel called @code{guix} specifies where Guix itself---its command-line tools as well as its package collection---should be downloaded.  For instance, suppose you want to update from another copy of the Guix repository at @code{example.org}, and specifically the @code{super-hacks} branch, you can write in @code{~/.config/guix/channels.scm} this specification:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5484
#, no-wrap
msgid ""
";; Tell 'guix pull' to use another repo.\n"
"(list (channel\n"
"        (name 'guix)\n"
"        (url \"https://example.org/another-guix.git\")\n"
"        (branch \"super-hacks\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5490
msgid "From there on, @command{guix pull} will fetch code from the @code{super-hacks} branch of the repository at @code{example.org}.  The authentication concern is addressed below (@pxref{Channel Authentication})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5500
msgid "Note that you can specify a local directory on the @code{url} field above if the channel that you intend to use resides on a local file system.  However, in this case @command{guix} checks said directory for ownership before any further processing.  This means that if the user is not the directory owner, but wants to use it as their default, they will then need to set it as a safe directory in their global git configuration file.  Otherwise, @command{guix} will refuse to even read it.  Supposing your system-wide local directory is at @code{/src/guix.git}, you would then create a git configuration file at @code{~/.gitconfig} with the following contents:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:5504
#, no-wrap
msgid ""
"[safe]\n"
"        directory = /src/guix.git\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5509
msgid "This also applies to the root user unless when called with @command{sudo} by the directory owner."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5521
msgid "The @command{guix describe} command shows precisely which commits were used to build the instance of Guix we're using (@pxref{Invoking guix describe}).  We can replicate this instance on another machine or at a different point in time by providing a channel specification ``pinned'' to these commits that looks like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5532
#, no-wrap
msgid ""
";; Deploy specific commits of my channels of interest.\n"
"(list (channel\n"
"       (name 'guix)\n"
"       (url \"https://git.savannah.gnu.org/git/guix.git\")\n"
"       (commit \"6298c3ffd9654d3231a6f25390b056483e8f407c\"))\n"
"      (channel\n"
"       (name 'variant-packages)\n"
"       (url \"https://example.org/variant-packages.git\")\n"
"       (commit \"dd3df5e2c8818760a8fc0bd699e55d3b69fef2bb\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5537
msgid "To obtain this pinned channel specification, the easiest way is to run @command{guix describe} and to save its output in the @code{channels} format in a file, like so:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:5540
#, no-wrap
msgid "guix describe -f channels > channels.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5546
msgid "The resulting @file{channels.scm} file can be passed to the @option{-C} option of @command{guix pull} (@pxref{Invoking guix pull}) or @command{guix time-machine} (@pxref{Invoking guix time-machine}), as in this example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:5549
#, no-wrap
msgid "guix time-machine -C channels.scm -- shell python -- python3\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5555
msgid "Given the @file{channels.scm} file, the command above will always fetch the @emph{exact same Guix instance}, then use that instance to run the exact same Python (@pxref{Invoking guix shell}).  On any machine, at any time, it ends up running the exact same binaries, bit for bit."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5556
#, no-wrap
msgid "lock files"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5564
msgid "Pinned channels address a problem similar to ``lock files'' as implemented by some deployment tools---they let you pin and reproduce a set of packages.  In the case of Guix though, you are effectively pinning the entire package set as defined at the given channel commits; in fact, you are pinning all of Guix, including its core modules and command-line tools.  You're also getting strong guarantees that you are, indeed, obtaining the exact same software."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5569
msgid "This gives you super powers, allowing you to track the provenance of binary artifacts with very fine grain, and to reproduce software environments at will---some sort of ``meta reproducibility'' capabilities, if you will.  @xref{Inferiors}, for another way to take advantage of these super powers."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:5574
msgid "channel-authentication"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5580
msgid "The @command{guix pull} and @command{guix time-machine} commands @dfn{authenticate} the code retrieved from channels: they make sure each commit that is fetched is signed by an authorized developer.  The goal is to protect from unauthorized modifications to the channel that would lead users to run malicious code."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5585
msgid "As a user, you must provide a @dfn{channel introduction} in your channels file so that Guix knows how to authenticate its first commit.  A channel specification, including its introduction, looks something along these lines:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5595
#, no-wrap
msgid ""
"(channel\n"
"  (name 'some-channel)\n"
"  (url \"https://example.org/some-channel.git\")\n"
"  (introduction\n"
"   (make-channel-introduction\n"
"    \"6f0d8cc0d88abb59c324b2990bfee2876016bb86\"\n"
"    (openpgp-fingerprint\n"
"     \"CABB A931 C0FF EEC6 900D  0CFB 090B 1199 3D9A EBB5\"))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5601
msgid "The specification above shows the name and URL of the channel.  The call to @code{make-channel-introduction} above specifies that authentication of this channel starts at commit @code{6f0d8cc@dots{}}, which is signed by the OpenPGP key with fingerprint @code{CABB A931@dots{}}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5607
msgid "For the main channel, called @code{guix}, you automatically get that information from your Guix installation.  For other channels, include the channel introduction provided by the channel authors in your @file{channels.scm} file.  Make sure you retrieve the channel introduction from a trusted source since that is the root of your trust."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5609
msgid "If you're curious about the authentication mechanics, read on!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5620
msgid "When running @command{guix pull}, Guix will first compile the definitions of every available package.  This is an expensive operation for which substitutes (@pxref{Substitutes}) may be available.  The following snippet in @file{channels.scm} will ensure that @command{guix pull} uses the latest commit with available substitutes for the package definitions: this is done by querying the continuous integration server at @url{https://ci.guix.gnu.org}."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5623
#, no-wrap
msgid ""
"(use-modules (guix ci))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5627
#, no-wrap
msgid ""
"(list (channel-with-substitutes-available\n"
"       %default-guix-channel\n"
"       \"https://ci.guix.gnu.org\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5634
msgid "Note that this does not mean that all the packages that you will install after running @command{guix pull} will have available substitutes.  It only ensures that @command{guix pull} will not try to compile package definitions.  This is particularly useful when using machines with limited resources."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5638
#, no-wrap
msgid "personal packages (channels)"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5639
#, no-wrap
msgid "channels, for personal packages"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5647
msgid "Let's say you have a bunch of custom package variants or personal packages that you think would make little sense to contribute to the Guix project, but would like to have these packages transparently available to you at the command line.  You would first write modules containing those package definitions (@pxref{Package Modules}), maintain them in a Git repository, and then you and anyone else can use it as an additional channel to get packages from.  Neat, no?"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:5655
msgid "Before you, dear user, shout---``woow this is @emph{soooo coool}!''---and publish your personal channel to the world, we would like to share a few words of caution:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:5663
msgid "Before publishing a channel, please consider contributing your package definitions to Guix proper (@pxref{Contributing}).  Guix as a project is open to free software of all sorts, and packages in Guix proper are readily available to all Guix users and benefit from the project's quality assurance process."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:5672
msgid "When you maintain package definitions outside Guix, we, Guix developers, consider that @emph{the compatibility burden is on you}.  Remember that package modules and package definitions are just Scheme code that uses various programming interfaces (APIs).  We want to remain free to change these APIs to keep improving Guix, possibly in ways that break your channel.  We never change APIs gratuitously, but we will @emph{not} commit to freezing APIs either."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:5676
msgid "Corollary: if you're using an external channel and that channel breaks, please @emph{report the issue to the channel authors}, not to the Guix project."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:5683
msgid "You've been warned! Having said this, we believe external channels are a practical way to exert your freedom to augment Guix' package collection and to share your improvements, which are basic tenets of @uref{https://www.gnu.org/philosophy/free-sw.html, free software}.  Please email us at @email{guix-devel@@gnu.org} if you'd like to discuss this."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5695
msgid "To create a channel, create a Git repository containing your own package modules and make it available.  The repository can contain anything, but a useful channel will contain Guile modules that export packages.  Once you start using a channel, Guix will behave as if the root directory of that channel's Git repository has been added to the Guile load path (@pxref{Load Paths,,, guile, GNU Guile Reference Manual}).  For example, if your channel contains a file at @file{my-packages/my-tools.scm} that defines a Guile module, then the module will be available under the name @code{(my-packages my-tools)}, and you will be able to use it like any other module (@pxref{Modules,,, guile, GNU Guile Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5700
msgid "As a channel author, consider bundling authentication material with your channel so that users can authenticate it.  @xref{Channel Authentication}, and @ref{Specifying Channel Authorizations}, for info on how to do it."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5705
#, no-wrap
msgid "subdirectory, channels"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5709
msgid "As a channel author, you may want to keep your channel modules in a sub-directory.  If your modules are in the sub-directory @file{guix}, you must add a meta-data file @file{.guix-channel} that contains:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5714
#, no-wrap
msgid ""
"(channel\n"
"  (version 0)\n"
"  (directory \"guix\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5721
msgid "The modules must be @b{underneath} the specified directory, as the @code{directory} changes Guile's @code{load-path}.  For example, if @file{.guix-channel} has @code{(directory \"base\")}, then a module defined as @code{(define-module (gnu packages fun))} must be located at @code{base/gnu/packages/fun.scm}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5727
msgid "Doing this allows for only parts of a repository to be used as a channel, as Guix expects valid Guile modules when pulling.  For instance, @command{guix deploy} machine configuration files are not valid Guile modules, and treating them as such would make @command{guix pull} fail."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5731
#, no-wrap
msgid "dependencies, channels"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5732
#, no-wrap
msgid "meta-data, channels"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5737
msgid "Channel authors may decide to augment a package collection provided by other channels.  They can declare their channel to be dependent on other channels in a meta-data file @file{.guix-channel}, which is to be placed in the root of the channel repository."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5739
msgid "The meta-data file should contain a simple S-expression like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5747
#, no-wrap
msgid ""
"(channel\n"
" (version 0)\n"
" (dependencies\n"
"  (channel\n"
"   (name some-collection)\n"
"   (url \"https://example.org/first-collection.git\")\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5759
#, no-wrap
msgid ""
"   ;; The 'introduction' bit below is optional: you would\n"
"   ;; provide it for dependencies that can be authenticated.\n"
"   (introduction\n"
"    (channel-introduction\n"
"      (version 0)\n"
"      (commit \"a8883b58dc82e167c96506cf05095f37c2c2c6cd\")\n"
"      (signer \"CABB A931 C0FF EEC6 900D  0CFB 090B 1199 3D9A EBB5\"))))\n"
"  (channel\n"
"   (name some-other-collection)\n"
"   (url \"https://example.org/second-collection.git\")\n"
"   (branch \"testing\"))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5765
msgid "In the above example this channel is declared to depend on two other channels, which will both be fetched automatically.  The modules provided by the channel will be compiled in an environment where the modules of all these declared channels are available."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5769
msgid "For the sake of reliability and maintainability, you should avoid dependencies on channels that you don't control, and you should aim to keep the number of dependencies to a minimum."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5773
#, no-wrap
msgid "channel authorizations"
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:5787
msgid "channel-authorizations"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5787
msgid "As we saw above, Guix ensures the source code it pulls from channels comes from authorized developers.  As a channel author, you need to specify the list of authorized developers in the @file{.guix-authorizations} file in the channel's Git repository.  The authentication rule is simple: each commit must be signed by a key listed in the @file{.guix-authorizations} file of its parent commit(s)@footnote{Git commits form a @dfn{directed acyclic graph} (DAG).  Each commit can have zero or more parents; ``regular'' commits have one parent and merge commits have two parent commits.  Read @uref{https://eagain.net/articles/git-for-computer-scientists/, @i{Git for Computer Scientists}} for a great overview.} The @file{.guix-authorizations} file looks like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5790
#, no-wrap
msgid ""
";; Example '.guix-authorizations' file.\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5793
#, no-wrap
msgid ""
"(authorizations\n"
" (version 0)               ;current file format version\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5800
#, no-wrap
msgid ""
" ((\"AD17 A21E F8AE D8F1 CC02  DBD9 F8AE D8F1 765C 61E3\"\n"
"   (name \"alice\"))\n"
"  (\"2A39 3FFF 68F4 EF7A 3D29  12AF 68F4 EF7A 22FB B2D5\"\n"
"   (name \"bob\"))\n"
"  (\"CABB A931 C0FF EEC6 900D  0CFB 090B 1199 3D9A EBB5\"\n"
"   (name \"charlie\"))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5804
msgid "Each fingerprint is followed by optional key/value pairs, as in the example above.  Currently these key/value pairs are ignored."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5809
msgid "This authentication rule creates a chicken-and-egg issue: how do we authenticate the first commit? Related to that: how do we deal with channels whose repository history contains unsigned commits and lack @file{.guix-authorizations}? And how do we fork existing channels?"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5810
#, no-wrap
msgid "channel introduction"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5819
msgid "Channel introductions answer these questions by describing the first commit of a channel that should be authenticated.  The first time a channel is fetched with @command{guix pull} or @command{guix time-machine}, the command looks up the introductory commit and verifies that it is signed by the specified OpenPGP key.  From then on, it authenticates commits according to the rule above.  Authentication fails if the target commit is neither a descendant nor an ancestor of the introductory commit."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5826
msgid "Additionally, your channel must provide all the OpenPGP keys that were ever mentioned in @file{.guix-authorizations}, stored as @file{.key} files, which can be either binary or ``ASCII-armored''.  By default, those @file{.key} files are searched for in the branch named @code{keyring} but you can specify a different branch name in @code{.guix-channel} like so:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5831
#, no-wrap
msgid ""
"(channel\n"
"  (version 0)\n"
"  (keyring-reference \"my-keyring-branch\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5835
msgid "To summarize, as the author of a channel, there are three things you have to do to allow users to authenticate your code:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:5841
msgid "Export the OpenPGP keys of past and present committers with @command{gpg --export} and store them in @file{.key} files, by default in a branch named @code{keyring} (we recommend making it an @dfn{orphan branch})."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:5846
msgid "Introduce an initial @file{.guix-authorizations} in the channel's repository.  Do that in a signed commit (@pxref{Commit Access}, for information on how to sign Git commits.)"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:5852
msgid "Advertise the channel introduction, for instance on your channel's web page.  The channel introduction, as we saw above, is the commit/key pair---i.e., the commit that introduced @file{.guix-authorizations}, and the fingerprint of the OpenPGP used to sign it."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5857
msgid "Before pushing to your public Git repository, you can run @command{guix git-authenticate} to verify that you did sign all the commits you are about to push with an authorized key:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:5860
#, no-wrap
msgid "guix git authenticate @var{commit} @var{signer}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5865
msgid "where @var{commit} and @var{signer} are your channel introduction.  @xref{Invoking guix git authenticate}, for details."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5872
msgid "Publishing a signed channel requires discipline: any mistake, such as an unsigned commit or a commit signed by an unauthorized key, will prevent users from pulling from your channel---well, that's the whole point of authentication! Pay attention to merges in particular: merge commits are considered authentic if and only if they are signed by a key present in the @file{.guix-authorizations} file of @emph{both} branches."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5876
#, no-wrap
msgid "primary URL, channels"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5879
msgid "Channel authors can indicate the primary URL of their channel's Git repository in the @file{.guix-channel} file, like so:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5884
#, no-wrap
msgid ""
"(channel\n"
"  (version 0)\n"
"  (url \"https://example.org/guix.git\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5891
msgid "This allows @command{guix pull} to determine whether it is pulling code from a mirror of the channel; when that is the case, it warns the user that the mirror might be stale and displays the primary URL@.  That way, users cannot be tricked into fetching code from a stale mirror that does not receive security updates."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5895
msgid "This feature only makes sense for authenticated repositories, such as the official @code{guix} channel, for which @command{guix pull} ensures the code it fetches is authentic."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5899
#, no-wrap
msgid "news, for channels"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5903
msgid "Channel authors may occasionally want to communicate to their users information about important changes in the channel.  You'd send them all an email, but that's not convenient."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5908
msgid "Instead, channels can provide a @dfn{news file}; when the channel users run @command{guix pull}, that news file is automatically read and @command{guix pull --news} can display the announcements that correspond to the new commits that have been pulled, if any."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5911
msgid "To do that, channel authors must first declare the name of the news file in their @file{.guix-channel} file:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5916
#, no-wrap
msgid ""
"(channel\n"
"  (version 0)\n"
"  (news-file \"etc/news.txt\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5920
msgid "The news file itself, @file{etc/news.txt} in this example, must look something like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:5933
#, no-wrap
msgid ""
"(channel-news\n"
"  (version 0)\n"
"  (entry (tag \"the-bug-fix\")\n"
"         (title (en \"Fixed terrible bug\")\n"
"                (fr \"Oh la la\"))\n"
"         (body (en \"@@emph@{Good news@}!  It's fixed!\")\n"
"               (eo \"Certe ĝi pli bone funkcias nun!\")))\n"
"  (entry (commit \"bdcabe815cd28144a2d2b4bc3c5057b051fa9906\")\n"
"         (title (en \"Added a great package\")\n"
"                (ca \"Què vol dir guix?\"))\n"
"         (body (en \"Don't miss the @@code@{hello@} package!\"))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5940
msgid "While the news file is using the Scheme syntax, avoid naming it with a @file{.scm} extension or else it will get picked up when building the channel and yield an error since it is not a valid module.  Alternatively, you can move the channel module to a subdirectory and store the news file in another directory."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5945
msgid "The file consists of a list of @dfn{news entries}.  Each entry is associated with a commit or tag: it describes changes made in this commit, possibly in preceding commits as well.  Users see entries only the first time they obtain the commit the entry refers to."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5951
msgid "The @code{title} field should be a one-line summary while @code{body} can be arbitrarily long, and both can contain Texinfo markup (@pxref{Overview,,, texinfo, GNU Texinfo}).  Both the title and body are a list of language tag/message tuples, which allows @command{guix pull} to display news in the language that corresponds to the user's locale."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5957
msgid "If you want to translate news using a gettext-based workflow, you can extract translatable strings with @command{xgettext} (@pxref{xgettext Invocation,,, gettext, GNU Gettext Utilities}).  For example, assuming you write news entries in English first, the command below creates a PO file containing the strings to translate:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:5960
#, no-wrap
msgid "xgettext -o news.po -l scheme -ken etc/news.txt\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5964
msgid "To sum up, yes, you could use your channel as a blog.  But beware, this is @emph{not quite} what your users might expect."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5969
#, no-wrap
msgid "software development"
msgstr "desenvolvimento de software"

#. type: Plain text
#: guix-git/doc/guix.texi:5973
msgid "If you are a software developer, Guix provides tools that you should find helpful---independently of the language you're developing in.  This is what this chapter is about."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:5979
msgid "The @command{guix shell} command provides a convenient way to set up one-off software environments, be it for development purposes or to run a command without installing it in your profile.  The @command{guix pack} command allows you to create @dfn{application bundles} that can be easily distributed to users who do not run Guix."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:5989
#, fuzzy, no-wrap
#| msgid "Invoking @command{guix size}"
msgid "Invoking @command{guix shell}"
msgstr "Invocando @command{guix size}"

#. type: cindex
#: guix-git/doc/guix.texi:5991
#, no-wrap
msgid "reproducible build environments"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:5992
#, no-wrap
msgid "development environments"
msgstr ""

#. type: command{#1}
#: guix-git/doc/guix.texi:5993 guix-git/doc/guix.texi:6519
#, no-wrap
msgid "guix environment"
msgstr ""

#. type: command{#1}
#: guix-git/doc/guix.texi:5994
#, fuzzy, no-wrap
#| msgid "# guix install hello\n"
msgid "guix shell"
msgstr "# guix install hello\n"

#. type: cindex
#: guix-git/doc/guix.texi:5995
#, no-wrap
msgid "environment, package build environment"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6000
msgid "The purpose of @command{guix shell} is to make it easy to create one-off software environments, without changing one's profile.  It is typically used to create development environments; it is also a convenient way to run applications without ``polluting'' your profile."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:6006
msgid "The @command{guix shell} command was recently introduced to supersede @command{guix environment} (@pxref{Invoking guix environment}).  If you are familiar with @command{guix environment}, you will notice that it is similar but also---we hope!---more convenient."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6012
#, no-wrap
msgid "guix shell [@var{options}] [@var{package}@dots{}]\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6017
msgid "The following example creates an environment containing Python and NumPy, building or downloading any missing package, and runs the @command{python3} command in that environment:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6020
#, no-wrap
msgid "guix shell python python-numpy -- python3\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:6023
#, fuzzy, no-wrap
#| msgid "Invoking @command{guix size}"
msgid "shebang, for @command{guix shell}"
msgstr "Invocando @command{guix size}"

#. type: quotation
#: guix-git/doc/guix.texi:6027
msgid "@command{guix shell} can be also be used as a script interpreter, also known as @dfn{shebang}.  Here is an example self-contained Python script making use of this feature:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6032
#, no-wrap
msgid ""
"#!/usr/bin/env -S guix shell python python-numpy -- python3\n"
"import numpy\n"
"print(\"This is numpy\", numpy.version.version)\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:6036
msgid "You may pass any @command{guix shell} option, but there's one caveat: the Linux kernel has a limit of 127 bytes on shebang length."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6041
msgid "Development environments can be created as in the example below, which spawns an interactive shell containing all the dependencies and environment variables needed to work on Inkscape:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6044
#, no-wrap
msgid "guix shell --development inkscape\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6050
msgid "Exiting the shell places the user back in the original environment before @command{guix shell} was invoked.  The next garbage collection (@pxref{Invoking guix gc}) may clean up packages that were installed in the environment and that are no longer used outside of it."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6054
msgid "As an added convenience, @command{guix shell} will try to do what you mean when it is invoked interactively without any other arguments as in:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6057
#, fuzzy, no-wrap
#| msgid "# guix install hello\n"
msgid "guix shell\n"
msgstr "# guix install hello\n"

#. type: Plain text
#: guix-git/doc/guix.texi:6069
msgid "If it finds a @file{manifest.scm} in the current working directory or any of its parents, it uses this manifest as though it was given via @code{--manifest}.  Likewise, if it finds a @file{guix.scm} in the same directories, it uses it to build a development profile as though both @code{--development} and @code{--file} were present.  In either case, the file will only be loaded if the directory it resides in is listed in @file{~/.config/guix/shell-authorized-directories}.  This provides an easy way to define, share, and enter development environments."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6080
msgid "By default, the shell session or command runs in an @emph{augmented} environment, where the new packages are added to search path environment variables such as @code{PATH}.  You can, instead, choose to create an @emph{isolated} environment containing nothing but the packages you asked for.  Passing the @option{--pure} option clears environment variable definitions found in the parent environment@footnote{Be sure to use the @option{--check} option the first time you use @command{guix shell} interactively to make sure the shell does not undo the effect of @option{--pure}.}; passing @option{--container} goes one step further by spawning a @dfn{container} isolated from the rest of the system:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6083
#, no-wrap
msgid "guix shell --container emacs gcc-toolchain\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6091
msgid "The command above spawns an interactive shell in a container where nothing but @code{emacs}, @code{gcc-toolchain}, and their dependencies is available.  The container lacks network access and shares no files other than the current working directory with the surrounding environment.  This is useful to prevent access to system-wide resources such as @file{/usr/bin} on foreign distros."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6098
msgid "This @option{--container} option can also prove useful if you wish to run a security-sensitive application, such as a web browser, in an isolated environment.  For example, the command below launches Ungoogled-Chromium in an isolated environment, this time sharing network access with the host and preserving its @code{DISPLAY} environment variable, but without even sharing the current directory:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6102
#, no-wrap
msgid ""
"guix shell --container --network --no-cwd ungoogled-chromium \\\n"
"  --preserve='^DISPLAY$' -- chromium\n"
msgstr ""

#. type: vindex
#: guix-git/doc/guix.texi:6104 guix-git/doc/guix.texi:6570
#, no-wrap
msgid "GUIX_ENVIRONMENT"
msgstr "GUIX_ENVIRONMENT"

#. type: Plain text
#: guix-git/doc/guix.texi:6110
msgid "@command{guix shell} defines the @env{GUIX_ENVIRONMENT} variable in the shell it spawns; its value is the file name of the profile of this environment.  This allows users to, say, define a specific prompt for development environments in their @file{.bashrc} (@pxref{Bash Startup Files,,, bash, The GNU Bash Reference Manual}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6116 guix-git/doc/guix.texi:6582
#, no-wrap
msgid ""
"if [ -n \"$GUIX_ENVIRONMENT\" ]\n"
"then\n"
"    export PS1=\"\\u@@\\h \\w [dev]\\$ \"\n"
"fi\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6120 guix-git/doc/guix.texi:6586
msgid "...@: or to browse the profile:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6123 guix-git/doc/guix.texi:6589
#, no-wrap
msgid "$ ls \"$GUIX_ENVIRONMENT/bin\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6126 guix-git/doc/guix.texi:6665
msgid "The available options are summarized below."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6128 guix-git/doc/guix.texi:6667
#: guix-git/doc/guix.texi:13299
#, no-wrap
msgid "--check"
msgstr "--check"

#. type: table
#: guix-git/doc/guix.texi:6133
msgid "Set up the environment and check whether the shell would clobber environment variables.  It's a good idea to use this option the first time you run @command{guix shell} for an interactive session to make sure your setup is correct."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6137
msgid "For example, if the shell modifies the @env{PATH} environment variable, report it since you would get a different environment than what you asked for."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6145
msgid "Such problems usually indicate that the shell startup files are unexpectedly modifying those environment variables.  For example, if you are using Bash, make sure that environment variables are set or modified in @file{~/.bash_profile} and @emph{not} in @file{~/.bashrc}---the former is sourced only by log-in shells.  @xref{Bash Startup Files,,, bash, The GNU Bash Reference Manual}, for details on Bash start-up files."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:6147
#, fuzzy
#| msgid "Development"
msgid "shell-development-option"
msgstr "Desenvolvimento"

#. type: item
#: guix-git/doc/guix.texi:6147
#, fuzzy, no-wrap
#| msgid "Development"
msgid "--development"
msgstr "Desenvolvimento"

#. type: table
#: guix-git/doc/guix.texi:6154
msgid "Cause @command{guix shell} to include in the environment the dependencies of the following package rather than the package itself.  This can be combined with other packages.  For instance, the command below starts an interactive shell containing the build-time dependencies of GNU@tie{}Guile, plus Autoconf, Automake, and Libtool:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6157
#, no-wrap
msgid "guix shell -D guile autoconf automake libtool\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6159 guix-git/doc/guix.texi:6688
#: guix-git/doc/guix.texi:7241 guix-git/doc/guix.texi:13166
#: guix-git/doc/guix.texi:14329 guix-git/doc/guix.texi:14792
#: guix-git/doc/guix.texi:14990 guix-git/doc/guix.texi:15400
#: guix-git/doc/guix.texi:40301 guix-git/doc/guix.texi:44058
#, no-wrap
msgid "--expression=@var{expr}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:6160 guix-git/doc/guix.texi:6689
#: guix-git/doc/guix.texi:7242 guix-git/doc/guix.texi:13167
#: guix-git/doc/guix.texi:14330 guix-git/doc/guix.texi:14793
#: guix-git/doc/guix.texi:14991 guix-git/doc/guix.texi:15401
#: guix-git/doc/guix.texi:40302 guix-git/doc/guix.texi:44059
#, no-wrap
msgid "-e @var{expr}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6163 guix-git/doc/guix.texi:6692
msgid "Create an environment for the package or list of packages that @var{expr} evaluates to."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6165 guix-git/doc/guix.texi:6694
#: guix-git/doc/guix.texi:14797
msgid "For example, running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6168
#, no-wrap
msgid "guix shell -D -e '(@@ (gnu packages maths) petsc-openmpi)'\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6172 guix-git/doc/guix.texi:6701
msgid "starts a shell with the environment for this specific variant of the PETSc package."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6174 guix-git/doc/guix.texi:6703
msgid "Running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6177
#, no-wrap
msgid "guix shell -e '(@@ (gnu) %base-packages)'\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6180 guix-git/doc/guix.texi:6709
msgid "starts a shell with all the base system packages available."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6183 guix-git/doc/guix.texi:6712
msgid "The above commands only use the default output of the given packages.  To select other outputs, two element tuples can be specified:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6186
#, no-wrap
msgid "guix shell -e '(list (@@ (gnu packages bash) bash) \"include\")'\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6191
msgid "@xref{package-development-manifest, @code{package->development-manifest}}, for information on how to write a manifest for the development environment of a package."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6192 guix-git/doc/guix.texi:13140
#, no-wrap
msgid "--file=@var{file}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6196
msgid "Create an environment containing the package or list of packages that the code within @var{file} evaluates to."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:6202 guix-git/doc/guix.texi:6727
#, no-wrap
msgid "@verbatiminclude environment-gdb.scm\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6206
msgid "With the file above, you can enter a development environment for GDB by running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6209
#, no-wrap
msgid "guix shell -D -f gdb-devel.scm\n"
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:6212
#, fuzzy
#| msgid "profile-manifest"
msgid "shell-manifest"
msgstr "profile-manifest"

#. type: table
#: guix-git/doc/guix.texi:6217 guix-git/doc/guix.texi:6734
msgid "Create an environment for the packages contained in the manifest object returned by the Scheme code in @var{file}.  This option can be repeated several times, in which case the manifests are concatenated."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6221 guix-git/doc/guix.texi:6738
msgid "This is similar to the same-named option in @command{guix package} (@pxref{profile-manifest, @option{--manifest}}) and uses the same manifest files."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6224
msgid "@xref{Writing Manifests}, for information on how to write a manifest.  See @option{--export-manifest} below on how to obtain a first manifest."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:6227
msgid "shell-export-manifest"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6230
msgid "Write to standard output a manifest suitable for @option{--manifest} corresponding to given command-line options."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6234
msgid "This is a way to ``convert'' command-line arguments into a manifest.  For example, imagine you are tired of typing long lines and would like to get a manifest equivalent to this command line:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6237
#, fuzzy, no-wrap
#| msgid "guix package -i emacs guile emacs-geiser\n"
msgid "guix shell -D guile git emacs emacs-geiser emacs-geiser-guile\n"
msgstr "guix package -i emacs guile emacs-geiser\n"

#. type: table
#: guix-git/doc/guix.texi:6240
msgid "Just add @option{--export-manifest} to the command line above:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6244
#, fuzzy, no-wrap
#| msgid "guix package -i emacs guile emacs-geiser\n"
msgid ""
"guix shell --export-manifest \\\n"
"  -D guile git emacs emacs-geiser emacs-geiser-guile\n"
msgstr "guix package -i emacs guile emacs-geiser\n"

#. type: table
#: guix-git/doc/guix.texi:6248
#, fuzzy
#| msgid "Installing goes along these lines:"
msgid "... and you get a manifest along these lines:"
msgstr "A instalação segue as seguintes linhas:"

#. type: lisp
#: guix-git/doc/guix.texi:6258
#, no-wrap
msgid ""
"(concatenate-manifests\n"
"  (list (specifications->manifest\n"
"          (list \"git\"\n"
"                \"emacs\"\n"
"                \"emacs-geiser\"\n"
"                \"emacs-geiser-guile\"))\n"
"        (package->development-manifest\n"
"          (specification->package \"guile\"))))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6263
msgid "You can store it into a file, say @file{manifest.scm}, and from there pass it to @command{guix shell} or indeed pretty much any @command{guix} command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6266 guix-git/doc/guix.texi:8563
#, no-wrap
msgid "guix shell -m manifest.scm\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6271
msgid "Voilà, you've converted a long command line into a manifest! That conversion process honors package transformation options (@pxref{Package Transformation Options}) so it should be lossless."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6277 guix-git/doc/guix.texi:6774
msgid "Create an environment containing the packages installed in @var{profile}.  Use @command{guix package} (@pxref{Invoking guix package}) to create and manage profiles."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6278 guix-git/doc/guix.texi:6775
#, no-wrap
msgid "--pure"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6282 guix-git/doc/guix.texi:6779
msgid "Unset existing environment variables when building the new environment, except those specified with @option{--preserve} (see below).  This has the effect of creating an environment in which search paths only contain package inputs."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6283 guix-git/doc/guix.texi:6780
#, no-wrap
msgid "--preserve=@var{regexp}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:6284 guix-git/doc/guix.texi:6781
#, no-wrap
msgid "-E @var{regexp}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6289 guix-git/doc/guix.texi:6786
msgid "When used alongside @option{--pure}, preserve the environment variables matching @var{regexp}---in other words, put them on a ``white list'' of environment variables that must be preserved.  This option can be repeated several times."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6293
#, no-wrap
msgid ""
"guix shell --pure --preserve=^SLURM openmpi @dots{} \\\n"
"  -- mpirun @dots{}\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6299 guix-git/doc/guix.texi:6796
msgid "This example runs @command{mpirun} in a context where the only environment variables defined are @env{PATH}, environment variables whose name starts with @samp{SLURM}, as well as the usual ``precious'' variables (@env{HOME}, @env{USER}, etc.)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6300 guix-git/doc/guix.texi:6797
#, no-wrap
msgid "--search-paths"
msgstr "--search-paths"

#. type: table
#: guix-git/doc/guix.texi:6303 guix-git/doc/guix.texi:6800
msgid "Display the environment variable definitions that make up the environment."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6307 guix-git/doc/guix.texi:6804
msgid "Attempt to build for @var{system}---e.g., @code{i686-linux}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6308 guix-git/doc/guix.texi:6805
#, no-wrap
msgid "--container"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:6309 guix-git/doc/guix.texi:6806
#, no-wrap
msgid "-C"
msgstr "-C"

#. type: item
#: guix-git/doc/guix.texi:6310 guix-git/doc/guix.texi:6631
#: guix-git/doc/guix.texi:6807 guix-git/doc/guix.texi:15968
#: guix-git/doc/guix.texi:40265 guix-git/doc/guix.texi:43798
#, no-wrap
msgid "container"
msgstr "recipiente"

#. type: table
#: guix-git/doc/guix.texi:6316 guix-git/doc/guix.texi:6813
msgid "Run @var{command} within an isolated container.  The current working directory outside the container is mapped inside the container.  Additionally, unless overridden with @option{--user}, a dummy home directory is created that matches the current user's home directory, and @file{/etc/passwd} is configured accordingly."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6320 guix-git/doc/guix.texi:6817
msgid "The spawned process runs as the current user outside the container.  Inside the container, it has the same UID and GID as the current user, unless @option{--user} is passed (see below)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6321 guix-git/doc/guix.texi:6818
#: guix-git/doc/guix.texi:40366 guix-git/doc/guix.texi:43816
#, no-wrap
msgid "--network"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6326 guix-git/doc/guix.texi:6823
msgid "For containers, share the network namespace with the host system.  Containers created without this flag only have access to the loopback device."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6327 guix-git/doc/guix.texi:6824
#, no-wrap
msgid "--link-profile"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:6328 guix-git/doc/guix.texi:6825
#, no-wrap
msgid "-P"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6336
msgid "For containers, link the environment profile to @file{~/.guix-profile} within the container and set @code{GUIX_ENVIRONMENT} to that.  This is equivalent to making @file{~/.guix-profile} a symlink to the actual profile within the container.  Linking will fail and abort the environment if the directory already exists, which will certainly be the case if @command{guix shell} was invoked in the user's home directory."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6342 guix-git/doc/guix.texi:6839
msgid "Certain packages are configured to look in @file{~/.guix-profile} for configuration files and data;@footnote{For example, the @code{fontconfig} package inspects @file{~/.guix-profile/share/fonts} for additional fonts.} @option{--link-profile} allows these programs to behave as expected within the environment."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6343 guix-git/doc/guix.texi:6840
#: guix-git/doc/guix.texi:15538
#, no-wrap
msgid "--user=@var{user}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:6344 guix-git/doc/guix.texi:6841
#: guix-git/doc/guix.texi:15539
#, no-wrap
msgid "-u @var{user}"
msgstr "-u @var{usuário}"

#. type: table
#: guix-git/doc/guix.texi:6351 guix-git/doc/guix.texi:6848
msgid "For containers, use the username @var{user} in place of the current user.  The generated @file{/etc/passwd} entry within the container will contain the name @var{user}, the home directory will be @file{/home/@var{user}}, and no user GECOS data will be copied.  Furthermore, the UID and GID inside the container are 1000.  @var{user} need not exist on the system."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6356 guix-git/doc/guix.texi:6853
msgid "Additionally, any shared or exposed path (see @option{--share} and @option{--expose} respectively) whose target is within the current user's home directory will be remapped relative to @file{/home/USER}; this includes the automatic mapping of the current working directory."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6363
#, no-wrap
msgid ""
"# will expose paths as /home/foo/wd, /home/foo/test, and /home/foo/target\n"
"cd $HOME/wd\n"
"guix shell --container --user=foo \\\n"
"     --expose=$HOME/test \\\n"
"     --expose=/tmp/target=$HOME/target\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6368 guix-git/doc/guix.texi:6865
msgid "While this will limit the leaking of user identity through home paths and each of the user fields, this is only one useful component of a broader privacy/anonymity solution---not one in and of itself."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6369 guix-git/doc/guix.texi:6866
#, no-wrap
msgid "--no-cwd"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6376 guix-git/doc/guix.texi:6873
msgid "For containers, the default behavior is to share the current working directory with the isolated container and immediately change to that directory within the container.  If this is undesirable, @option{--no-cwd} will cause the current working directory to @emph{not} be automatically shared and will change to the user's home directory within the container instead.  See also @option{--user}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6377 guix-git/doc/guix.texi:6874
#: guix-git/doc/guix.texi:43820
#, no-wrap
msgid "--expose=@var{source}[=@var{target}]"
msgstr "--expose=@var{fonte}[=@var{alvo}]"

#. type: itemx
#: guix-git/doc/guix.texi:6378 guix-git/doc/guix.texi:6875
#: guix-git/doc/guix.texi:43821
#, no-wrap
msgid "--share=@var{source}[=@var{target}]"
msgstr "--share=@var{fonte}[=@var{alvo}]"

#. type: table
#: guix-git/doc/guix.texi:6384 guix-git/doc/guix.texi:6881
msgid "For containers, @option{--expose} (resp. @option{--share}) exposes the file system @var{source} from the host system as the read-only (resp. writable) file system @var{target} within the container.  If @var{target} is not specified, @var{source} is used as the target mount point in the container."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6388 guix-git/doc/guix.texi:6885
msgid "The example below spawns a Guile REPL in a container in which the user's home directory is accessible read-only via the @file{/exchange} directory:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6391
#, no-wrap
msgid "guix shell --container --expose=$HOME=/exchange guile -- guile\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:6393
#, fuzzy, no-wrap
#| msgid "Invoking guix size"
msgid "symbolic links, guix shell"
msgstr "Invocando guix size"

#. type: item
#: guix-git/doc/guix.texi:6394 guix-git/doc/guix.texi:7287
#, no-wrap
msgid "--symlink=@var{spec}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:6395 guix-git/doc/guix.texi:7288
#, no-wrap
msgid "-S @var{spec}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6398
msgid "For containers, create the symbolic links specified by @var{spec}, as documented in @ref{pack-symlink-option}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:6399
#, no-wrap
msgid "file system hierarchy standard (FHS)"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:6400
#, no-wrap
msgid "FHS (file system hierarchy standard)"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6401 guix-git/doc/guix.texi:6890
#, fuzzy, no-wrap
#| msgid "templates"
msgid "--emulate-fhs"
msgstr "modelos"

#. type: item
#: guix-git/doc/guix.texi:6402 guix-git/doc/guix.texi:6891
#, no-wrap
msgid "-F"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6408
msgid "When used with @option{--container}, emulate a @uref{https://refspecs.linuxfoundation.org/fhs.shtml, Filesystem Hierarchy Standard (FHS)} configuration within the container, providing @file{/bin}, @file{/lib}, and other directories and files specified by the FHS."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6419
msgid "As Guix deviates from the FHS specification, this option sets up the container to more closely mimic that of other GNU/Linux distributions.  This is useful for reproducing other development environments, testing, and using programs which expect the FHS specification to be followed.  With this option, the container will include a version of glibc that will read @file{/etc/ld.so.cache} within the container for the shared library cache (contrary to glibc in regular Guix usage) and set up the expected FHS directories: @file{/bin}, @file{/etc}, @file{/lib}, and @file{/usr} from the container's profile."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:6420
#, fuzzy, no-wrap
#| msgid "Invoking @command{guix size}"
msgid "nested containers, for @command{guix shell}"
msgstr "Invocando @command{guix size}"

#. type: cindex
#: guix-git/doc/guix.texi:6421
#, fuzzy, no-wrap
#| msgid "Invoking @command{guix size}"
msgid "container nesting, for @command{guix shell}"
msgstr "Invocando @command{guix size}"

#. type: item
#: guix-git/doc/guix.texi:6422
#, no-wrap
msgid "--nesting"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:6423
#, no-wrap
msgid "-W"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6429
msgid "When used with @option{--container}, provide Guix @emph{inside} the container and arrange so that it can interact with the build daemon that runs outside the container.  This is useful if you want, within your isolated container, to create other containers, as in this sample session:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6435
#, no-wrap
msgid ""
"$ guix shell -CW coreutils\n"
"[env]$ guix shell -C guile -- guile -c '(display \"hello!\\n\")'\n"
"hello!\n"
"[env]$ exit\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6440
msgid "The session above starts a container with @code{coreutils} programs available in @env{PATH}.  From there, we spawn @command{guix shell} to create a @emph{nested} container that provides nothing but Guile."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6443
msgid "Another example is evaluating a @file{guix.scm} file that is untrusted, as shown here:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6446
#, no-wrap
msgid "guix shell -CW -- guix build -f guix.scm\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6450
msgid "The @command{guix build} command as executed above can only access the current directory."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6452
msgid "Under the hood, the @option{-W} option does several things:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:6457
#, fuzzy
#| msgid "@code{daemon-socket} (default: @code{\"/var/guix/daemon-socket/socket\"})"
msgid "map the daemon's socket (by default @file{/var/guix/daemon-socket/socket}) inside the container;"
msgstr "@code{daemon-socket} (padrão: @code{\"/var/guix/daemon-socket/socket\"})"

#. type: itemize
#: guix-git/doc/guix.texi:6461
msgid "map the whole store (by default @file{/gnu/store}) inside the container such that store items made available by nested @command{guix} invocations are visible;"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:6465
msgid "add the currently-used @command{guix} command to the profile in the container, such that @command{guix describe} returns the same state inside and outside the container;"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:6469
msgid "share the cache (by default @file{~/.cache/guix}) with the host, to speed up operations such as @command{guix time-machine} and @command{guix shell}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6471
#, fuzzy, no-wrap
#| msgid "build-check"
msgid "--rebuild-cache"
msgstr "build-check"

#. type: cindex
#: guix-git/doc/guix.texi:6472
#, no-wrap
msgid "caching, of profiles"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:6473
#, fuzzy, no-wrap
#| msgid "Invoking @command{guix size}"
msgid "caching, in @command{guix shell}"
msgstr "Invocando @command{guix size}"

#. type: table
#: guix-git/doc/guix.texi:6479
msgid "In most cases, @command{guix shell} caches the environment so that subsequent uses are instantaneous.  Least-recently used cache entries are periodically removed.  The cache is also invalidated, when using @option{--file} or @option{--manifest}, anytime the corresponding file is modified."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6485
msgid "The @option{--rebuild-cache} forces the cached environment to be refreshed.  This is useful when using @option{--file} or @option{--manifest} and the @command{guix.scm} or @command{manifest.scm} file has external dependencies, or if its behavior depends, say, on environment variables."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6486 guix-git/doc/guix.texi:6672
#: guix-git/doc/guix.texi:7316 guix-git/doc/guix.texi:13328
#: guix-git/doc/guix.texi:40371
#, no-wrap
msgid "--root=@var{file}"
msgstr "--root=@var{arquivo}"

#. type: itemx
#: guix-git/doc/guix.texi:6487 guix-git/doc/guix.texi:6673
#: guix-git/doc/guix.texi:7317 guix-git/doc/guix.texi:13329
#: guix-git/doc/guix.texi:40372
#, no-wrap
msgid "-r @var{file}"
msgstr "-r @var{arquivo}"

#. type: cindex
#: guix-git/doc/guix.texi:6488 guix-git/doc/guix.texi:6674
#, no-wrap
msgid "persistent environment"
msgstr "ambiente persistente"

#. type: cindex
#: guix-git/doc/guix.texi:6489 guix-git/doc/guix.texi:6675
#, no-wrap
msgid "garbage collector root, for environments"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6492 guix-git/doc/guix.texi:6678
msgid "Make @var{file} a symlink to the profile for this environment, and register it as a garbage collector root."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6495 guix-git/doc/guix.texi:6681
msgid "This is useful if you want to protect your environment from garbage collection, to make it ``persistent''."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6501
msgid "When this option is omitted, @command{guix shell} caches profiles so that subsequent uses of the same environment are instantaneous---this is comparable to using @option{--root} except that @command{guix shell} takes care of periodically removing the least-recently used garbage collector roots."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6508
msgid "In some cases, @command{guix shell} does not cache profiles---e.g., if transformation options such as @option{--with-latest} are used.  In those cases, the environment is protected from garbage collection only for the duration of the @command{guix shell} session.  This means that next time you recreate the same environment, you could have to rebuild or re-download packages."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6510
#, fuzzy
#| msgid "@xref{Invoking guix pack}, for more info on this handy tool."
msgid "@xref{Invoking guix gc}, for more on GC roots."
msgstr "@xref{Invocando guix pack}, para mais informações sobre essa ferramenta útil."

#. type: Plain text
#: guix-git/doc/guix.texi:6515
msgid "@command{guix shell} also supports all of the common build options that @command{guix build} supports (@pxref{Common Build Options}) as well as package transformation options (@pxref{Package Transformation Options})."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:6517
#, no-wrap
msgid "Invoking @command{guix environment}"
msgstr "Invocando @command{guix environment}"

#. type: Plain text
#: guix-git/doc/guix.texi:6523
msgid "The purpose of @command{guix environment} is to assist in creating development environments."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:6524
#, no-wrap
msgid "Deprecation warning"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:6528
msgid "The @command{guix environment} command is deprecated in favor of @command{guix shell}, which performs similar functions but is more convenient to use.  @xref{Invoking guix shell}."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:6533
msgid "Being deprecated, @command{guix environment} is slated for eventual removal, but the Guix project is committed to keeping it until May 1st, 2023.  Please get in touch with us at @email{guix-devel@@gnu.org} if you would like to discuss it."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6539
#, no-wrap
msgid "guix environment @var{options} @var{package}@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6543
msgid "The following example spawns a new shell set up for the development of GNU@tie{}Guile:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6546
#, no-wrap
msgid "guix environment guile\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6563
msgid "If the needed dependencies are not built yet, @command{guix environment} automatically builds them.  The environment of the new shell is an augmented version of the environment that @command{guix environment} was run in.  It contains the necessary search paths for building the given package added to the existing environment variables.  To create a ``pure'' environment, in which the original environment variables have been unset, use the @option{--pure} option@footnote{Users sometimes wrongfully augment environment variables such as @env{PATH} in their @file{~/.bashrc} file.  As a consequence, when @command{guix environment} launches it, Bash may read @file{~/.bashrc}, thereby introducing ``impurities'' in these environment variables.  It is an error to define such environment variables in @file{.bashrc}; instead, they should be defined in @file{.bash_profile}, which is sourced only by log-in shells.  @xref{Bash Startup Files,,, bash, The GNU Bash Reference Manual}, for details on Bash start-up files.}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6569
msgid "Exiting from a Guix environment is the same as exiting from the shell, and will place the user back in the old environment before @command{guix environment} was invoked.  The next garbage collection (@pxref{Invoking guix gc}) will clean up packages that were installed from within the environment and are no longer used outside of it."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6576
msgid "@command{guix environment} defines the @env{GUIX_ENVIRONMENT} variable in the shell it spawns; its value is the file name of the profile of this environment.  This allows users to, say, define a specific prompt for development environments in their @file{.bashrc} (@pxref{Bash Startup Files,,, bash, The GNU Bash Reference Manual}):"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6595
msgid "Additionally, more than one package may be specified, in which case the union of the inputs for the given packages are used.  For example, the command below spawns a shell where all of the dependencies of both Guile and Emacs are available:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6598
#, no-wrap
msgid "guix environment guile emacs\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6603
msgid "Sometimes an interactive shell session is not desired.  An arbitrary command may be invoked by placing the @code{--} token to separate the command from the rest of the arguments:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6606
#, no-wrap
msgid "guix environment guile -- make -j4\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6612
msgid "In other situations, it is more convenient to specify the list of packages needed in the environment.  For example, the following command runs @command{python} from an environment containing Python@tie{}3 and NumPy:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6615
#, no-wrap
msgid "guix environment --ad-hoc python-numpy python -- python3\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6626
msgid "Furthermore, one might want the dependencies of a package and also some additional packages that are not build-time or runtime dependencies, but are useful when developing nonetheless.  Because of this, the @option{--ad-hoc} flag is positional.  Packages appearing before @option{--ad-hoc} are interpreted as packages whose dependencies will be added to the environment.  Packages appearing after are interpreted as packages that will be added to the environment directly.  For example, the following command creates a Guix development environment that additionally includes Git and strace:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6629
#, no-wrap
msgid "guix environment --pure guix --ad-hoc git strace\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6639
msgid "Sometimes it is desirable to isolate the environment as much as possible, for maximal purity and reproducibility.  In particular, when using Guix on a host distro that is not Guix System, it is desirable to prevent access to @file{/usr/bin} and other system-wide resources from the development environment.  For example, the following command spawns a Guile REPL in a ``container'' where only the store and the current working directory are mounted:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6642
#, no-wrap
msgid "guix environment --ad-hoc --container guile -- guile\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:6646
msgid "The @option{--container} option requires Linux-libre 3.19 or newer."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:6648
#, no-wrap
msgid "certificates"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6655
msgid "Another typical use case for containers is to run security-sensitive applications such as a web browser.  To run Eolie, we must expose and share some files and directories; we include @code{nss-certs} and expose @file{/etc/ssl/certs/} for HTTPS authentication; finally we preserve the @env{DISPLAY} environment variable since containerized graphical applications won't display without it."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6662
#, no-wrap
msgid ""
"guix environment --preserve='^DISPLAY$' --container --network \\\n"
"  --expose=/etc/machine-id \\\n"
"  --expose=/etc/ssl/certs/ \\\n"
"  --share=$HOME/.local/share/eolie/=$HOME/.local/share/eolie/ \\\n"
"  --ad-hoc eolie nss-certs dbus --  eolie\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6671
msgid "Set up the environment and check whether the shell would clobber environment variables.  @xref{Invoking guix shell, @option{--check}}, for more info."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6687
msgid "When this option is omitted, the environment is protected from garbage collection only for the duration of the @command{guix environment} session.  This means that next time you recreate the same environment, you could have to rebuild or re-download packages.  @xref{Invoking guix gc}, for more on GC roots."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6697
#, no-wrap
msgid "guix environment -e '(@@ (gnu packages maths) petsc-openmpi)'\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6706
#, no-wrap
msgid "guix environment --ad-hoc -e '(@@ (gnu) %base-packages)'\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6715
#, no-wrap
msgid "guix environment --ad-hoc -e '(list (@@ (gnu packages bash) bash) \"include\")'\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6717
#, no-wrap
msgid "--load=@var{file}"
msgstr "--load=@var{arquivo}"

#. type: itemx
#: guix-git/doc/guix.texi:6718
#, no-wrap
msgid "-l @var{file}"
msgstr "-l @var{arquivo}"

#. type: table
#: guix-git/doc/guix.texi:6721
msgid "Create an environment for the package or list of packages that the code within @var{file} evaluates to."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6742
msgid "@xref{shell-export-manifest, @command{guix shell --export-manifest}}, for information on how to ``convert'' command-line options into a manifest."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:6743
#, no-wrap
msgid "--ad-hoc"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6748
msgid "Include all specified packages in the resulting environment, as if an @i{ad hoc} package were defined with them as inputs.  This option is useful for quickly creating an environment without having to write a package expression to contain the desired inputs."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6750
msgid "For instance, the command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6753
#, no-wrap
msgid "guix environment --ad-hoc guile guile-sdl -- guile\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6757
msgid "runs @command{guile} in an environment where Guile and Guile-SDL are available."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6762
msgid "Note that this example implicitly asks for the default output of @code{guile} and @code{guile-sdl}, but it is possible to ask for a specific output---e.g., @code{glib:bin} asks for the @code{bin} output of @code{glib} (@pxref{Packages with Multiple Outputs})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6768
msgid "This option may be composed with the default behavior of @command{guix environment}.  Packages appearing before @option{--ad-hoc} are interpreted as packages whose dependencies will be added to the environment, the default behavior.  Packages appearing after are interpreted as packages that will be added to the environment directly."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6790
#, no-wrap
msgid ""
"guix environment --pure --preserve=^SLURM --ad-hoc openmpi @dots{} \\\n"
"  -- mpirun @dots{}\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6833
msgid "For containers, link the environment profile to @file{~/.guix-profile} within the container and set @code{GUIX_ENVIRONMENT} to that.  This is equivalent to making @file{~/.guix-profile} a symlink to the actual profile within the container.  Linking will fail and abort the environment if the directory already exists, which will certainly be the case if @command{guix environment} was invoked in the user's home directory."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6860
#, no-wrap
msgid ""
"# will expose paths as /home/foo/wd, /home/foo/test, and /home/foo/target\n"
"cd $HOME/wd\n"
"guix environment --container --user=foo \\\n"
"     --expose=$HOME/test \\\n"
"     --expose=/tmp/target=$HOME/target\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6888
#, no-wrap
msgid "guix environment --container --expose=$HOME=/exchange --ad-hoc guile -- guile\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:6905
msgid "For containers, emulate a Filesystem Hierarchy Standard (FHS)  configuration within the container, see @uref{https://refspecs.linuxfoundation.org/fhs.shtml, the official specification}.  As Guix deviates from the FHS specification, this option sets up the container to more closely mimic that of other GNU/Linux distributions.  This is useful for reproducing other development environments, testing, and using programs which expect the FHS specification to be followed.  With this option, the container will include a version of @code{glibc} which will read @code{/etc/ld.so.cache} within the container for the shared library cache (contrary to @code{glibc} in regular Guix usage) and set up the expected FHS directories: @code{/bin}, @code{/etc}, @code{/lib}, and @code{/usr} from the container's profile."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6912
msgid "@command{guix environment} also supports all of the common build options that @command{guix build} supports (@pxref{Common Build Options}) as well as package transformation options (@pxref{Package Transformation Options})."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:6914
#, no-wrap
msgid "Invoking @command{guix pack}"
msgstr "Invocando @command{guix pack}"

#. type: command{#1}
#: guix-git/doc/guix.texi:6916
#, fuzzy, no-wrap
#| msgid "Invoking guix pack"
msgid "guix pack"
msgstr "Invocando guix pack"

#. type: Plain text
#: guix-git/doc/guix.texi:6922
msgid "Occasionally you want to pass software to people who are not (yet!)  lucky enough to be using Guix.  You'd tell them to run @command{guix package -i @var{something}}, but that's not possible in this case.  This is where @command{guix pack} comes in."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:6927
msgid "If you are looking for ways to exchange binaries among machines that already run Guix, @pxref{Invoking guix copy}, @ref{Invoking guix publish}, and @ref{Invoking guix archive}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:6929
#, no-wrap
msgid "pack"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:6930
#, no-wrap
msgid "bundle"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:6931
#, no-wrap
msgid "application bundle"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:6932
#, no-wrap
msgid "software bundle"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6941
msgid "The @command{guix pack} command creates a shrink-wrapped @dfn{pack} or @dfn{software bundle}: it creates a tarball or some other archive containing the binaries of the software you're interested in, and all its dependencies.  The resulting archive can be used on any machine that does not have Guix, and people can run the exact same binaries as those you have with Guix.  The pack itself is created in a bit-reproducible fashion, so anyone can verify that it really contains the build results that you pretend to be shipping."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6944
msgid "For example, to create a bundle containing Guile, Emacs, Geiser, and all their dependencies, you can run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6949
#, no-wrap
msgid ""
"$ guix pack guile emacs emacs-geiser\n"
"@dots{}\n"
"/gnu/store/@dots{}-pack.tar.gz\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6957
msgid "The result here is a tarball containing a @file{/gnu/store} directory with all the relevant packages.  The resulting tarball contains a @dfn{profile} with the three packages of interest; the profile is the same as would be created by @command{guix package -i}.  It is this mechanism that is used to create Guix's own standalone binary tarball (@pxref{Binary Installation})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6962
msgid "Users of this pack would have to run @file{/gnu/store/@dots{}-profile/bin/guile} to run Guile, which you may find inconvenient.  To work around it, you can create, say, a @file{/opt/gnu/bin} symlink to the profile:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6965
#, fuzzy, no-wrap
#| msgid "guix package -i emacs guile emacs-geiser\n"
msgid "guix pack -S /opt/gnu/bin=bin guile emacs emacs-geiser\n"
msgstr "guix package -i emacs guile emacs-geiser\n"

#. type: Plain text
#: guix-git/doc/guix.texi:6969
msgid "That way, users can happily type @file{/opt/gnu/bin/guile} and enjoy."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:6970
#, no-wrap
msgid "relocatable binaries, with @command{guix pack}"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6978
msgid "What if the recipient of your pack does not have root privileges on their machine, and thus cannot unpack it in the root file system? In that case, you will want to use the @option{--relocatable} option (see below).  This option produces @dfn{relocatable binaries}, meaning they they can be placed anywhere in the file system hierarchy: in the example above, users can unpack your tarball in their home directory and directly run @file{./opt/gnu/bin/guile}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:6979
#, no-wrap
msgid "Docker, build an image with guix pack"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6982
msgid "Alternatively, you can produce a pack in the Docker image format using the following command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6985
#, no-wrap
msgid "guix pack -f docker -S /bin=bin guile guile-readline\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:6990
msgid "The result is a tarball that can be passed to the @command{docker load} command, followed by @code{docker run}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:6994
#, no-wrap
msgid ""
"docker load < @var{file}\n"
"docker run -ti guile-guile-readline /bin/guile\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7001
msgid "where @var{file} is the image returned by @var{guix pack}, and @code{guile-guile-readline} is its ``image tag''.  See the @uref{https://docs.docker.com/engine/reference/commandline/load/, Docker documentation} for more information."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7002
#, no-wrap
msgid "Singularity, build an image with guix pack"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7003
#, no-wrap
msgid "SquashFS, build an image with guix pack"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7006
msgid "Yet another option is to produce a SquashFS image with the following command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:7009
#, fuzzy, no-wrap
#| msgid "guix package -i emacs guile emacs-geiser\n"
msgid "guix pack -f squashfs bash guile emacs emacs-geiser\n"
msgstr "guix package -i emacs guile emacs-geiser\n"

#. type: Plain text
#: guix-git/doc/guix.texi:7017
msgid "The result is a SquashFS file system image that can either be mounted or directly be used as a file system container image with the @uref{https://www.sylabs.io/docs/, Singularity container execution environment}, using commands like @command{singularity shell} or @command{singularity exec}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7019
msgid "Several command-line options allow you to customize your pack:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7024
msgid "Produce a pack in the given @var{format}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7026
msgid "The available formats are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7028
#, no-wrap
msgid "tarball"
msgstr "tarball"

#. type: table
#: guix-git/doc/guix.texi:7031
msgid "This is the default format.  It produces a tarball containing all the specified binaries and symlinks."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7032
#, no-wrap
msgid "docker"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7038
msgid "This produces a tarball that follows the @uref{https://github.com/docker/docker/blob/master/image/spec/v1.2.md, Docker Image Specification}.  The ``repository name'' as it appears in the output of the @command{docker images} command is computed from package names passed on the command line or in the manifest file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7039
#, no-wrap
msgid "squashfs"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7043
msgid "This produces a SquashFS image containing all the specified binaries and symlinks, as well as empty mount points for virtual file systems like procfs."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:7049
msgid "Singularity @emph{requires} you to provide @file{/bin/sh} in the image.  For that reason, @command{guix pack -f squashfs} always implies @code{-S /bin=bin}.  Thus, your @command{guix pack} invocation must always start with something like:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:7052
#, no-wrap
msgid "guix pack -f squashfs bash @dots{}\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:7057
msgid "If you forget the @code{bash} (or similar) package, @command{singularity run} and @command{singularity exec} will fail with an unhelpful ``no such file or directory'' message."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7059
#, fuzzy, no-wrap
#| msgid "debug"
msgid "deb"
msgstr "depuração"

#. type: cindex
#: guix-git/doc/guix.texi:7060
#, no-wrap
msgid "Debian, build a .deb package with guix pack"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7068
msgid "This produces a Debian archive (a package with the @samp{.deb} file extension) containing all the specified binaries and symbolic links, that can be installed on top of any dpkg-based GNU(/Linux) distribution.  Advanced options can be revealed via the @option{--help-deb-format} option.  They allow embedding control files for more fine-grained control, such as activating specific triggers or providing a maintainer configure script to run arbitrary setup code upon installation."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:7071
#, no-wrap
msgid "guix pack -f deb -C xz -S /usr/bin/hello=bin/hello hello\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:7079
msgid "Because archives produced with @command{guix pack} contain a collection of store items and because each @command{dpkg} package must not have conflicting files, in practice that means you likely won't be able to install more than one such archive on a given system.  You can nonetheless pack as many Guix packages as you want in one such archive."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:7087
msgid "@command{dpkg} will assume ownership of any files contained in the pack that it does @emph{not} know about.  It is unwise to install Guix-produced @samp{.deb} files on a system where @file{/gnu/store} is shared by other software, such as a Guix installation or other, non-deb packs."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7089
#, no-wrap
msgid "rpm"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7090
#, no-wrap
msgid "RPM, build an RPM archive with guix pack"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7096
msgid "This produces an RPM archive (a package with the @samp{.rpm} file extension) containing all the specified binaries and symbolic links, that can be installed on top of any RPM-based GNU/Linux distribution.  The RPM format embeds checksums for every file it contains, which the @command{rpm} command uses to validate the integrity of the archive."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7101
msgid "Advanced RPM-related options are revealed via the @option{--help-rpm-format} option.  These options allow embedding maintainer scripts that can run before or after the installation of the RPM archive, for example."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7105
msgid "The RPM format supports relocatable packages via the @option{--prefix} option of the @command{rpm} command, which can be handy to install an RPM package to a specific prefix."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:7108
#, no-wrap
msgid "guix pack -f rpm -R -C xz -S /usr/bin/hello=bin/hello hello\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:7112
#, no-wrap
msgid "sudo rpm --install --prefix=/opt /gnu/store/...-hello.rpm\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:7119
msgid "Contrary to Debian packages, conflicting but @emph{identical} files in RPM packages can be installed simultaneously, which means multiple @command{guix pack}-produced RPM packages can usually be installed side by side without any problem."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:7129
msgid "@command{rpm} assumes ownership of any files contained in the pack, which means it will remove @file{/gnu/store} upon uninstalling a Guix-generated RPM package, unless the RPM package was installed with the @option{--prefix} option of the @command{rpm} command.  It is unwise to install Guix-produced @samp{.rpm} packages on a system where @file{/gnu/store} is shared by other software, such as a Guix installation or other, non-rpm packs."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7133
#, no-wrap
msgid "relocatable binaries"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7134
#, no-wrap
msgid "--relocatable"
msgstr "--relocatable"

#. type: table
#: guix-git/doc/guix.texi:7138
msgid "Produce @dfn{relocatable binaries}---i.e., binaries that can be placed anywhere in the file system hierarchy and run from there."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7146
msgid "When this option is passed once, the resulting binaries require support for @dfn{user namespaces} in the kernel Linux; when passed @emph{twice}@footnote{Here's a trick to memorize it: @code{-RR}, which adds PRoot support, can be thought of as the abbreviation of ``Really Relocatable''.  Neat, isn't it?}, relocatable binaries fall to back to other techniques if user namespaces are unavailable, and essentially work anywhere---see below for the implications."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7148
msgid "For example, if you create a pack containing Bash with:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:7151
#, no-wrap
msgid "guix pack -RR -S /mybin=bin bash\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7156
msgid "...@: you can copy that pack to a machine that lacks Guix, and from your home directory as a normal user, run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:7160
#, no-wrap
msgid ""
"tar xf pack.tar.gz\n"
"./mybin/sh\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7168
msgid "In that shell, if you type @code{ls /gnu/store}, you'll notice that @file{/gnu/store} shows up and contains all the dependencies of @code{bash}, even though the machine actually lacks @file{/gnu/store} altogether! That is probably the simplest way to deploy Guix-built software on a non-Guix machine."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:7174
msgid "By default, relocatable binaries rely on the @dfn{user namespace} feature of the kernel Linux, which allows unprivileged users to mount or change root.  Old versions of Linux did not support it, and some GNU/Linux distributions turn it off."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:7180
msgid "To produce relocatable binaries that work even in the absence of user namespaces, pass @option{--relocatable} or @option{-R} @emph{twice}.  In that case, binaries will try user namespace support and fall back to another @dfn{execution engine} if user namespaces are not supported.  The following execution engines are supported:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7182 guix-git/doc/guix.texi:20115
#, no-wrap
msgid "default"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7185
msgid "Try user namespaces and fall back to PRoot if user namespaces are not supported (see below)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7186
#, no-wrap
msgid "performance"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7189
msgid "Try user namespaces and fall back to Fakechroot if user namespaces are not supported (see below)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7190
#, no-wrap
msgid "userns"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7193
msgid "Run the program through user namespaces and abort if they are not supported."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7194
#, no-wrap
msgid "proot"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7201
msgid "Run through PRoot.  The @uref{https://proot-me.github.io/, PRoot} program provides the necessary support for file system virtualization.  It achieves that by using the @code{ptrace} system call on the running program.  This approach has the advantage to work without requiring special kernel support, but it incurs run-time overhead every time a system call is made."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7202
#, no-wrap
msgid "fakechroot"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7210
msgid "Run through Fakechroot.  @uref{https://github.com/dex4er/fakechroot/, Fakechroot} virtualizes file system accesses by intercepting calls to C library functions such as @code{open}, @code{stat}, @code{exec}, and so on.  Unlike PRoot, it incurs very little overhead.  However, it does not always work: for example, some file system accesses made from within the C library are not intercepted, and file system accesses made @i{via} direct syscalls are not intercepted either, leading to erratic behavior."
msgstr ""

#. type: vindex
#: guix-git/doc/guix.texi:7212
#, no-wrap
msgid "GUIX_EXECUTION_ENGINE"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:7216
msgid "When running a wrapped program, you can explicitly request one of the execution engines listed above by setting the @env{GUIX_EXECUTION_ENGINE} environment variable accordingly."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7218
#, no-wrap
msgid "entry point, for Docker images"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7219
#, no-wrap
msgid "--entry-point=@var{command}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7224
msgid "Use @var{command} as the @dfn{entry point} of the resulting pack, if the pack format supports it---currently @code{docker} and @code{squashfs} (Singularity)  support it.  @var{command} must be relative to the profile contained in the pack."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7228
msgid "The entry point specifies the command that tools like @code{docker run} or @code{singularity run} automatically start by default.  For example, you can do:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:7231
#, no-wrap
msgid "guix pack -f docker --entry-point=bin/guile guile\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7235
msgid "The resulting pack can easily be loaded and @code{docker run} with no extra arguments will spawn @code{bin/guile}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:7239
#, no-wrap
msgid ""
"docker load -i pack.tar.gz\n"
"docker run @var{image-id}\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7244 guix-git/doc/guix.texi:14332
#: guix-git/doc/guix.texi:14993 guix-git/doc/guix.texi:15403
msgid "Consider the package @var{expr} evaluates to."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7248
msgid "This has the same purpose as the same-named option in @command{guix build} (@pxref{Additional Build Options, @option{--expression} in @command{guix build}})."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:7250
#, fuzzy
#| msgid "packages->manifest"
msgid "pack-manifest"
msgstr "packages->manifest"

#. type: table
#: guix-git/doc/guix.texi:7255
msgid "Use the packages contained in the manifest object returned by the Scheme code in @var{file}.  This option can be repeated several times, in which case the manifests are concatenated."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7263
msgid "This has a similar purpose as the same-named option in @command{guix package} (@pxref{profile-manifest, @option{--manifest}}) and uses the same manifest files.  It allows you to define a collection of packages once and use it both for creating profiles and for creating archives for use on machines that do not have Guix installed.  Note that you can specify @emph{either} a manifest file @emph{or} a list of packages, but not both."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7268
msgid "@xref{Writing Manifests}, for information on how to write a manifest.  @xref{shell-export-manifest, @command{guix shell --export-manifest}}, for information on how to ``convert'' command-line options into a manifest."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7274 guix-git/doc/guix.texi:13284
#: guix-git/doc/guix.texi:40314
#, no-wrap
msgid "--target=@var{triplet}"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7275 guix-git/doc/guix.texi:7734
#: guix-git/doc/guix.texi:13285
#, no-wrap
msgid "cross-compilation"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7279 guix-git/doc/guix.texi:40318
msgid "Cross-build for @var{triplet}, which must be a valid GNU triplet, such as @code{\"aarch64-linux-gnu\"} (@pxref{Specifying target triplets, GNU configuration triplets,, autoconf, Autoconf})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7280
#, no-wrap
msgid "--compression=@var{tool}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:7281
#, no-wrap
msgid "-C @var{tool}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7285
msgid "Compress the resulting tarball using @var{tool}---one of @code{gzip}, @code{zstd}, @code{bzip2}, @code{xz}, @code{lzip}, or @code{none} for no compression."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:7287
msgid "pack-symlink-option"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7291
msgid "Add the symlinks specified by @var{spec} to the pack.  This option can appear several times."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7295
msgid "@var{spec} has the form @code{@var{source}=@var{target}}, where @var{source} is the symlink that will be created and @var{target} is the symlink target."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7298
msgid "For instance, @code{-S /opt/gnu/bin=bin} creates a @file{/opt/gnu/bin} symlink pointing to the @file{bin} sub-directory of the profile."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7299 guix-git/doc/guix.texi:40325
#, no-wrap
msgid "--save-provenance"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7303
msgid "Save provenance information for the packages passed on the command line.  Provenance information includes the URL and commit of the channels in use (@pxref{Channels})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7309
msgid "Provenance information is saved in the @file{/gnu/store/@dots{}-profile/manifest} file in the pack, along with the usual package metadata---the name and version of each package, their propagated inputs, and so on.  It is useful information to the recipient of the pack, who then knows how the pack was (supposedly) obtained."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7315
msgid "This option is not enabled by default because, like timestamps, provenance information contributes nothing to the build process.  In other words, there is an infinity of channel URLs and commit IDs that can lead to the same pack.  Recording such ``silent'' metadata in the output thus potentially breaks the source-to-binary bitwise reproducibility property."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7318
#, no-wrap
msgid "garbage collector root, for packs"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7321
msgid "Make @var{file} a symlink to the resulting pack, and register it as a garbage collector root."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7322
#, no-wrap
msgid "--localstatedir"
msgstr "--localstatedir"

#. type: itemx
#: guix-git/doc/guix.texi:7323
#, no-wrap
msgid "--profile-name=@var{name}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7328
msgid "Include the ``local state directory'', @file{/var/guix}, in the resulting pack, and notably the @file{/var/guix/profiles/per-user/root/@var{name}} profile---by default @var{name} is @code{guix-profile}, which corresponds to @file{~root/.guix-profile}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7334
msgid "@file{/var/guix} contains the store database (@pxref{The Store}) as well as garbage-collector roots (@pxref{Invoking guix gc}).  Providing it in the pack means that the store is ``complete'' and manageable by Guix; not providing it pack means that the store is ``dead'': items cannot be added to it or removed from it after extraction of the pack."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7337
msgid "One use case for this is the Guix self-contained binary tarball (@pxref{Binary Installation})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7338 guix-git/doc/guix.texi:40319
#, no-wrap
msgid "--derivation"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:7339 guix-git/doc/guix.texi:13324
#: guix-git/doc/guix.texi:40320
#, no-wrap
msgid "-d"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7341
msgid "Print the name of the derivation that builds the pack."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7345
msgid "Use the bootstrap binaries to build the pack.  This option is only useful to Guix developers."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7350
msgid "In addition, @command{guix pack} supports all the common build options (@pxref{Common Build Options}) and all the package transformation options (@pxref{Package Transformation Options})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7355
#, no-wrap
msgid "GCC"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7356
#, no-wrap
msgid "ld-wrapper"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7357
#, no-wrap
msgid "linker wrapper"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7358
#, no-wrap
msgid "toolchain, for C development"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7359
#, no-wrap
msgid "toolchain, for Fortran development"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7366
msgid "If you need a complete toolchain for compiling and linking C or C++ source code, use the @code{gcc-toolchain} package.  This package provides a complete GCC toolchain for C/C++ development, including GCC itself, the GNU C Library (headers and binaries, plus debugging symbols in the @code{debug} output), Binutils, and a linker wrapper."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7372
msgid "The wrapper's purpose is to inspect the @code{-L} and @code{-l} switches passed to the linker, add corresponding @code{-rpath} arguments, and invoke the actual linker with this new set of arguments.  You can instruct the wrapper to refuse to link against libraries not in the store by setting the @env{GUIX_LD_WRAPPER_ALLOW_IMPURITIES} environment variable to @code{no}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7376
msgid "The package @code{gfortran-toolchain} provides a complete GCC toolchain for Fortran development.  For other languages, please use @samp{guix search gcc toolchain} (@pxref{guix-search,, Invoking guix package})."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:7379
#, no-wrap
msgid "Invoking @command{guix git authenticate}"
msgstr ""

#. type: command{#1}
#: guix-git/doc/guix.texi:7381
#, fuzzy, no-wrap
#| msgid "Substitute Authentication"
msgid "guix git authenticate"
msgstr "Autenticação de substituto"

#. type: Plain text
#: guix-git/doc/guix.texi:7389
msgid "The @command{guix git authenticate} command authenticates a Git checkout following the same rule as for channels (@pxref{channel-authentication, channel authentication}).  That is, starting from a given commit, it ensures that all subsequent commits are signed by an OpenPGP key whose fingerprint appears in the @file{.guix-authorizations} file of its parent commit(s)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7394
msgid "You will find this command useful if you maintain a channel.  But in fact, this authentication mechanism is useful in a broader context, so you might want to use it for Git repositories that have nothing to do with Guix."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:7399
#, no-wrap
msgid "guix git authenticate @var{commit} @var{signer} [@var{options}@dots{}]\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7408
msgid "By default, this command authenticates the Git checkout in the current directory; it outputs nothing and exits with exit code zero on success and non-zero on failure.  @var{commit} above denotes the first commit where authentication takes place, and @var{signer} is the OpenPGP fingerprint of public key used to sign @var{commit}.  Together, they form a ``channel introduction'' (@pxref{channel-authentication, channel introduction}).  The options below allow you to fine-tune the process."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7410
#, no-wrap
msgid "--repository=@var{directory}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:7411
#, no-wrap
msgid "-r @var{directory}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7414
msgid "Open the Git repository in @var{directory} instead of the current directory."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7415
#, no-wrap
msgid "--keyring=@var{reference}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:7416
#, no-wrap
msgid "-k @var{reference}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7422
msgid "Load OpenPGP keyring from @var{reference}, the reference of a branch such as @code{origin/keyring} or @code{my-keyring}.  The branch must contain OpenPGP public keys in @file{.key} files, either in binary form or ``ASCII-armored''.  By default the keyring is loaded from the branch named @code{keyring}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7423
#, no-wrap
msgid "--stats"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7425
msgid "Display commit signing statistics upon completion."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7426
#, no-wrap
msgid "--cache-key=@var{key}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7430
msgid "Previously-authenticated commits are cached in a file under @file{~/.cache/guix/authentication}.  This option forces the cache to be stored in file @var{key} in that directory."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7431
#, no-wrap
msgid "--historical-authorizations=@var{file}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7438
msgid "By default, any commit whose parent commit(s) lack the @file{.guix-authorizations} file is considered inauthentic.  In contrast, this option considers the authorizations in @var{file} for any commit that lacks @file{.guix-authorizations}.  The format of @var{file} is the same as that of @file{.guix-authorizations} (@pxref{channel-authorizations, @file{.guix-authorizations} format})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7451
msgid "GNU Guix provides several Scheme programming interfaces (APIs) to define, build, and query packages.  The first interface allows users to write high-level package definitions.  These definitions refer to familiar packaging concepts, such as the name and version of a package, its build system, and its dependencies.  These definitions can then be turned into concrete build actions."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7457
msgid "Build actions are performed by the Guix daemon, on behalf of users.  In a standard setup, the daemon has write access to the store---the @file{/gnu/store} directory---whereas users do not.  The recommended setup also has the daemon perform builds in chroots, under specific build users, to minimize interference with the rest of the system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7466
msgid "Lower-level APIs are available to interact with the daemon and the store.  To instruct the daemon to perform a build action, users actually provide it with a @dfn{derivation}.  A derivation is a low-level representation of the build actions to be taken, and the environment in which they should occur---derivations are to package definitions what assembly is to C programs.  The term ``derivation'' comes from the fact that build results @emph{derive} from them."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7469
msgid "This chapter describes all these APIs in turn, starting from high-level package definitions."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7501
msgid "From a programming viewpoint, the package definitions of the GNU distribution are provided by Guile modules in the @code{(gnu packages @dots{})} name space@footnote{Note that packages under the @code{(gnu packages @dots{})} module name space are not necessarily ``GNU packages''.  This module naming scheme follows the usual Guile module naming convention: @code{gnu} means that these modules are distributed as part of the GNU system, and @code{packages} identifies modules that define packages.} (@pxref{Modules, Guile modules,, guile, GNU Guile Reference Manual}).  For instance, the @code{(gnu packages emacs)} module exports a variable named @code{emacs}, which is bound to a @code{<package>} object (@pxref{Defining Packages})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7508
msgid "The @code{(gnu packages @dots{})} module name space is automatically scanned for packages by the command-line tools.  For instance, when running @code{guix install emacs}, all the @code{(gnu packages @dots{})} modules are scanned until one that exports a package object whose name is @code{emacs} is found.  This package search facility is implemented in the @code{(gnu packages)} module."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7510
#, no-wrap
msgid "package module search path"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7519
msgid "Users can store package definitions in modules with different names---e.g., @code{(my-packages emacs)}@footnote{Note that the file name and module name must match.  For instance, the @code{(my-packages emacs)} module must be stored in a @file{my-packages/emacs.scm} file relative to the load path specified with @option{--load-path} or @env{GUIX_PACKAGE_PATH}.  @xref{Modules and the File System,,, guile, GNU Guile Reference Manual}, for details.}.  There are two ways to make these package definitions visible to the user interfaces:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:7526
msgid "By adding the directory containing your package modules to the search path with the @code{-L} flag of @command{guix package} and other commands (@pxref{Common Build Options}), or by setting the @env{GUIX_PACKAGE_PATH} environment variable described below."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:7532
msgid "By defining a @dfn{channel} and configuring @command{guix pull} so that it pulls from it.  A channel is essentially a Git repository containing package modules.  @xref{Channels}, for more information on how to define and use channels."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7535
msgid "@env{GUIX_PACKAGE_PATH} works similarly to other search path variables:"
msgstr ""

#. type: defvr
#: guix-git/doc/guix.texi:7536
#, no-wrap
msgid "{Environment Variable} GUIX_PACKAGE_PATH"
msgstr ""

#. type: defvr
#: guix-git/doc/guix.texi:7540
msgid "This is a colon-separated list of directories to search for additional package modules.  Directories listed in this variable take precedence over the own modules of the distribution."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7548
msgid "The distribution is fully @dfn{bootstrapped} and @dfn{self-contained}: each package is built based solely on other packages in the distribution.  The root of this dependency graph is a small set of @dfn{bootstrap binaries}, provided by the @code{(gnu packages bootstrap)} module.  For more information on bootstrapping, @pxref{Bootstrapping}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7556
msgid "The high-level interface to package definitions is implemented in the @code{(guix packages)} and @code{(guix build-system)} modules.  As an example, the package definition, or @dfn{recipe}, for the GNU Hello package looks like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:7564
#, no-wrap
msgid ""
"(define-module (gnu packages hello)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix download)\n"
"  #:use-module (guix build-system gnu)\n"
"  #:use-module (guix licenses)\n"
"  #:use-module (gnu packages gawk))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:7583
#, no-wrap
msgid ""
"(define-public hello\n"
"  (package\n"
"    (name \"hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (arguments '(#:configure-flags '(\"--enable-silent-rules\")))\n"
"    (inputs (list gawk))\n"
"    (synopsis \"Hello, GNU world: An example GNU package\")\n"
"    (description \"Guess what GNU Hello prints!\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7593
msgid "Without being a Scheme expert, the reader may have guessed the meaning of the various fields here.  This expression binds the variable @code{hello} to a @code{<package>} object, which is essentially a record (@pxref{SRFI-9, Scheme records,, guile, GNU Guile Reference Manual}).  This package object can be inspected using procedures found in the @code{(guix packages)} module; for instance, @code{(package-name hello)} returns---surprise!---@code{\"hello\"}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7597
msgid "With luck, you may be able to import part or all of the definition of the package you are interested in from another repository, using the @code{guix import} command (@pxref{Invoking guix import})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7603
msgid "In the example above, @code{hello} is defined in a module of its own, @code{(gnu packages hello)}.  Technically, this is not strictly necessary, but it is convenient to do so: all the packages defined in modules under @code{(gnu packages @dots{})} are automatically known to the command-line tools (@pxref{Package Modules})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7605
msgid "There are a few points worth noting in the above package definition:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:7612
msgid "The @code{source} field of the package is an @code{<origin>} object (@pxref{origin Reference}, for the complete reference).  Here, the @code{url-fetch} method from @code{(guix download)} is used, meaning that the source is a file to be downloaded over FTP or HTTP."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:7615
msgid "The @code{mirror://gnu} prefix instructs @code{url-fetch} to use one of the GNU mirrors defined in @code{(guix download)}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:7622
msgid "The @code{sha256} field specifies the expected SHA256 hash of the file being downloaded.  It is mandatory, and allows Guix to check the integrity of the file.  The @code{(base32 @dots{})} form introduces the base32 representation of the hash.  You can obtain this information with @code{guix download} (@pxref{Invoking guix download}) and @code{guix hash} (@pxref{Invoking guix hash})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7623
#, no-wrap
msgid "patches"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:7627
msgid "When needed, the @code{origin} form can also have a @code{patches} field listing patches to be applied, and a @code{snippet} field giving a Scheme expression to modify the source code."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7629
#, no-wrap
msgid "GNU Build System"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:7635
msgid "The @code{build-system} field specifies the procedure to build the package (@pxref{Build Systems}).  Here, @code{gnu-build-system} represents the familiar GNU Build System, where packages may be configured, built, and installed with the usual @code{./configure && make && make check && make install} command sequence."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:7639
msgid "When you start packaging non-trivial software, you may need tools to manipulate those build phases, manipulate files, and so on.  @xref{Build Utilities}, for more on this."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:7645
msgid "The @code{arguments} field specifies options for the build system (@pxref{Build Systems}).  Here it is interpreted by @code{gnu-build-system} as a request run @file{configure} with the @option{--enable-silent-rules} flag."
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:7646 guix-git/doc/guix.texi:7649
#, no-wrap
msgid "quote"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7647
#, no-wrap
msgid "quoting"
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:7648
#, no-wrap
msgid "'"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7650
#, no-wrap
msgid "backquote (quasiquote)"
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:7651
#, no-wrap
msgid "`"
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:7652
#, no-wrap
msgid "quasiquote"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7653
#, no-wrap
msgid "comma (unquote)"
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:7654
#, no-wrap
msgid ","
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:7655
#, no-wrap
msgid "unquote"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:7665
msgid "What about these quote (@code{'}) characters? They are Scheme syntax to introduce a literal list; @code{'} is synonymous with @code{quote}.  Sometimes you'll also see @code{`} (a backquote, synonymous with @code{quasiquote}) and @code{,} (a comma, synonymous with @code{unquote}).  @xref{Expression Syntax, quoting,, guile, GNU Guile Reference Manual}, for details.  Here the value of the @code{arguments} field is a list of arguments passed to the build system down the road, as with @code{apply} (@pxref{Fly Evaluation, @code{apply},, guile, GNU Guile Reference Manual})."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:7671
msgid "The hash-colon (@code{#:}) sequence defines a Scheme @dfn{keyword} (@pxref{Keywords,,, guile, GNU Guile Reference Manual}), and @code{#:configure-flags} is a keyword used to pass a keyword argument to the build system (@pxref{Coding With Keywords,,, guile, GNU Guile Reference Manual})."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:7677
msgid "The @code{inputs} field specifies inputs to the build process---i.e., build-time or run-time dependencies of the package.  Here, we add an input, a reference to the @code{gawk} variable; @code{gawk} is itself bound to a @code{<package>} object."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:7681
msgid "Note that GCC, Coreutils, Bash, and other essential tools do not need to be specified as inputs here.  Instead, @code{gnu-build-system} takes care of ensuring that they are present (@pxref{Build Systems})."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:7685
msgid "However, any other dependencies need to be specified in the @code{inputs} field.  Any dependency not specified here will simply be unavailable to the build process, possibly leading to a build failure."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7688
msgid "@xref{package Reference}, for a full description of possible fields."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7690
#, no-wrap
msgid "Scheme programming language, getting started"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:7695
msgid "Intimidated by the Scheme language or curious about it? The Cookbook has a short section to get started that recaps some of the things shown above and explains the fundamentals.  @xref{A Scheme Crash Course,,, guix-cookbook, GNU Guix Cookbook}, for more information."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7707
msgid "Once a package definition is in place, the package may actually be built using the @code{guix build} command-line tool (@pxref{Invoking guix build}), troubleshooting any build failures you encounter (@pxref{Debugging Build Failures}).  You can easily jump back to the package definition using the @command{guix edit} command (@pxref{Invoking guix edit}).  @xref{Packaging Guidelines}, for more information on how to test package definitions, and @ref{Invoking guix lint}, for information on how to check a definition for style conformance."
msgstr ""

#. type: vindex
#: guix-git/doc/guix.texi:7707
#, no-wrap
msgid "GUIX_PACKAGE_PATH"
msgstr "GUIX_PACKAGE_PATH"

#. type: Plain text
#: guix-git/doc/guix.texi:7711
msgid "Lastly, @pxref{Channels}, for information on how to extend the distribution by adding your own package definitions in a ``channel''."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7715
msgid "Finally, updating the package definition to a new upstream version can be partly automated by the @command{guix refresh} command (@pxref{Invoking guix refresh})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7721
msgid "Behind the scenes, a derivation corresponding to the @code{<package>} object is first computed by the @code{package-derivation} procedure.  That derivation is stored in a @file{.drv} file under @file{/gnu/store}.  The build actions it prescribes may then be realized by using the @code{build-derivations} procedure (@pxref{The Store})."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:7722
#, no-wrap
msgid "package-derivation store package [system]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:7725
msgid "Return the @code{<derivation>} object of @var{package} for @var{system} (@pxref{Derivations})."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:7731
msgid "@var{package} must be a valid @code{<package>} object, and @var{system} must be a string denoting the target system type---e.g., @code{\"x86_64-linux\"} for an x86_64 Linux-based GNU system.  @var{store} must be a connection to the daemon, which operates on the store (@pxref{The Store})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7737
msgid "Similarly, it is possible to compute a derivation that cross-builds a package for some other system:"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:7738
#, no-wrap
msgid "package-cross-derivation store package target [system]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:7741
msgid "Return the @code{<derivation>} object of @var{package} cross-built from @var{system} to @var{target}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:7745
msgid "@var{target} must be a valid GNU triplet denoting the target hardware and operating system, such as @code{\"aarch64-linux-gnu\"} (@pxref{Specifying Target Triplets,,, autoconf, Autoconf})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7749
msgid "Once you have package definitions, you can easily define @emph{variants} of those packages.  @xref{Defining Package Variants}, for more on that."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:7757
#, no-wrap
msgid "@code{package} Reference"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7761
msgid "This section summarizes all the options available in @code{package} declarations (@pxref{Defining Packages})."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:7762
#, no-wrap
msgid "{Data Type} package"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:7764
msgid "This is the data type representing a package recipe."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7768
msgid "The name of the package, as a string."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:7769 guix-git/doc/guix.texi:8690
#, no-wrap
msgid "version"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7772
msgid "The version of the package, as a string.  @xref{Version Numbers}, for guidelines."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:7773 guix-git/doc/guix.texi:14848
#: guix-git/doc/guix.texi:17325 guix-git/doc/guix.texi:18015
#, no-wrap
msgid "source"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7780
msgid "An object telling how the source code for the package should be acquired.  Most of the time, this is an @code{origin} object, which denotes a file fetched from the Internet (@pxref{origin Reference}).  It can also be any other ``file-like'' object such as a @code{local-file}, which denotes a file from the local file system (@pxref{G-Expressions, @code{local-file}})."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:7781
#, no-wrap
msgid "build-system"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7784
msgid "The build system that should be used to build the package (@pxref{Build Systems})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7785 guix-git/doc/guix.texi:20690
#, no-wrap
msgid "@code{arguments} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7789
msgid "The arguments that should be passed to the build system (@pxref{Build Systems}).  This is a list, typically containing sequential keyword-value pairs, as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:7798
#, no-wrap
msgid ""
"(package\n"
"  (name \"example\")\n"
"  ;; several fields omitted\n"
"  (arguments\n"
"    (list #:tests? #f                     ;skip tests\n"
"          #:make-flags #~'(\"VERBOSE=1\")   ;pass flags to 'make'\n"
"          #:configure-flags #~'(\"--enable-frobbing\"))))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7805
msgid "The exact set of supported keywords depends on the build system (@pxref{Build Systems}), but you will find that almost all of them honor @code{#:configure-flags}, @code{#:make-flags}, @code{#:tests?}, and @code{#:phases}.  The @code{#:phases} keyword in particular lets you modify the set of build phases for your package (@pxref{Build Phases})."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:7806 guix-git/doc/guix.texi:7843
#, no-wrap
msgid "Compatibility Note"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:7810
msgid "Until version 1.3.0, the @code{arguments} field would typically use @code{quote} (@code{'}) or @code{quasiquote} (@code{`}) and no G-expressions, like so:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:7817
#, no-wrap
msgid ""
"(package\n"
"  ;; several fields omitted\n"
"  (arguments   ;old-style quoted arguments\n"
"   '(#:tests? #f\n"
"     #:configure-flags '(\"--enable-frobbing\"))))\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:7822
msgid "To convert from that style to the one shown above, you can run @code{guix style -S arguments @var{package}} (@pxref{Invoking guix style})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7824
#, no-wrap
msgid "@code{inputs} (default: @code{'()})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:7825
#, no-wrap
msgid "@code{native-inputs} (default: @code{'()})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:7826
#, no-wrap
msgid "@code{propagated-inputs} (default: @code{'()})"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7827
#, no-wrap
msgid "inputs, of packages"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7834
msgid "These fields list dependencies of the package.  Each element of these lists is either a package, origin, or other ``file-like object'' (@pxref{G-Expressions}); to specify the output of that file-like object that should be used, pass a two-element list where the second element is the output (@pxref{Packages with Multiple Outputs}, for more on package outputs).  For example, the list below specifies three inputs:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:7838
#, no-wrap
msgid ""
"(list libffi libunistring\n"
"      `(,glib \"bin\"))      ;the \"bin\" output of GLib\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7842
msgid "In the example above, the @code{\"out\"} output of @code{libffi} and @code{libunistring} is used."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:7850
msgid "Until version 1.3.0, input lists were a list of tuples, where each tuple has a label for the input (a string) as its first element, a package, origin, or derivation as its second element, and optionally the name of the output thereof that should be used, which defaults to @code{\"out\"}.  For example, the list below is equivalent to the one above, but using the @dfn{old input style}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:7856
#, no-wrap
msgid ""
";; Old input style (deprecated).\n"
"`((\"libffi\" ,libffi)\n"
"  (\"libunistring\" ,libunistring)\n"
"  (\"glib:bin\" ,glib \"bin\"))  ;the \"bin\" output of GLib\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:7862
msgid "This style is now deprecated; it is still supported but support will be removed in a future version.  It should not be used for new package definitions.  @xref{Invoking guix style}, on how to migrate to the new style."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7864
#, no-wrap
msgid "cross compilation, package dependencies"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7870
msgid "The distinction between @code{native-inputs} and @code{inputs} is necessary when considering cross-compilation.  When cross-compiling, dependencies listed in @code{inputs} are built for the @emph{target} architecture; conversely, dependencies listed in @code{native-inputs} are built for the architecture of the @emph{build} machine."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7875
msgid "@code{native-inputs} is typically used to list tools needed at build time, but not at run time, such as Autoconf, Automake, pkg-config, Gettext, or Bison.  @command{guix lint} can report likely mistakes in this area (@pxref{Invoking guix lint})."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:7883
msgid "package-propagated-inputs"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7883
msgid "Lastly, @code{propagated-inputs} is similar to @code{inputs}, but the specified packages will be automatically installed to profiles (@pxref{Features, the role of profiles in Guix}) alongside the package they belong to (@pxref{package-cmd-propagated-inputs, @command{guix package}}, for information on how @command{guix package} deals with propagated inputs)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7887
msgid "For example this is necessary when packaging a C/C++ library that needs headers of another library to compile, or when a pkg-config file refers to another one @i{via} its @code{Requires} field."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7894
msgid "Another example where @code{propagated-inputs} is useful is for languages that lack a facility to record the run-time search path akin to the @code{RUNPATH} of ELF files; this includes Guile, Python, Perl, and more.  When packaging libraries written in those languages, ensure they can find library code they depend on at run time by listing run-time dependencies in @code{propagated-inputs} rather than @code{inputs}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7895
#, no-wrap
msgid "@code{outputs} (default: @code{'(\"out\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7898
msgid "The list of output names of the package.  @xref{Packages with Multiple Outputs}, for typical uses of additional outputs."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7899
#, no-wrap
msgid "@code{native-search-paths} (default: @code{'()})"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7900 guix-git/doc/guix.texi:8709
#, no-wrap
msgid "@code{search-paths} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7904
msgid "A list of @code{search-path-specification} objects describing search-path environment variables honored by the package.  @xref{Search Paths}, for more on search path specifications."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7910
msgid "As for inputs, the distinction between @code{native-search-paths} and @code{search-paths} only matters when cross-compiling.  In a cross-compilation context, @code{native-search-paths} applies exclusively to native inputs whereas @code{search-paths} applies only to host inputs."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7917
msgid "Packages such as cross-compilers care about target inputs---for instance, our (modified) GCC cross-compiler has @env{CROSS_C_INCLUDE_PATH} in @code{search-paths}, which allows it to pick @file{.h} files for the target system and @emph{not} those of native inputs.  For the majority of packages though, only @code{native-search-paths} makes sense."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7918
#, no-wrap
msgid "@code{replacement} (default: @code{#f})"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:7922
msgid "This must be either @code{#f} or a package object that will be used as a @dfn{replacement} for this package.  @xref{Security Updates, grafts}, for details."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7923 guix-git/doc/guix.texi:14840
#, no-wrap
msgid "synopsis"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7925
msgid "A one-line description of the package."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:7926 guix-git/doc/guix.texi:14841
#: guix-git/doc/guix.texi:41085 guix-git/doc/guix.texi:41245
#, no-wrap
msgid "description"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7929
msgid "A more elaborate description of the package, as a string in Texinfo syntax."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:7930
#, no-wrap
msgid "license"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7931
#, no-wrap
msgid "license, of packages"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7934
msgid "The license of the package; a value from @code{(guix licenses)}, or a list of such values."
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:7935 guix-git/doc/guix.texi:14849
#, no-wrap
msgid "home-page"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7937
msgid "The URL to the home-page of the package, as a string."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7938
#, no-wrap
msgid "@code{supported-systems} (default: @code{%supported-systems})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7941
msgid "The list of systems supported by the package, as strings of the form @code{architecture-kernel}, for example @code{\"x86_64-linux\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:7942
#, no-wrap
msgid "@code{location} (default: source location of the @code{package} form)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:7946
msgid "The source location of the package.  It is useful to override this when inheriting from another package, in which case this field is not automatically corrected."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:7949
#, fuzzy, no-wrap
#| msgid "package"
msgid "this-package"
msgstr "pacote"

#. type: defmac
#: guix-git/doc/guix.texi:7952
msgid "When used in the @emph{lexical scope} of a package field definition, this identifier resolves to the package being defined."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:7955
msgid "The example below shows how to add a package as a native input of itself when cross-compiling:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:7960
#, no-wrap
msgid ""
"(package\n"
"  (name \"guile\")\n"
"  ;; ...\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:7966
#, no-wrap
msgid ""
"  ;; When cross-compiled, Guile, for example, depends on\n"
"  ;; a native version of itself.  Add it here.\n"
"  (native-inputs (if (%current-target-system)\n"
"                     (list this-package)\n"
"                     '())))\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:7969
msgid "It is an error to refer to @code{this-package} outside a package definition."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:7973
msgid "The following helper procedures are provided to help deal with package inputs."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:7974
#, no-wrap
msgid "lookup-package-input package name"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:7975
#, no-wrap
msgid "lookup-package-native-input package name"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:7976
#, no-wrap
msgid "lookup-package-propagated-input package name"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:7977
#, no-wrap
msgid "lookup-package-direct-input package name"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:7980
msgid "Look up @var{name} among @var{package}'s inputs (or native, propagated, or direct inputs).  Return it if found, @code{#f} otherwise."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:7983
msgid "@var{name} is the name of a package depended on.  Here's how you might use it:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:7986
#, no-wrap
msgid ""
"(use-modules (guix packages) (gnu packages base))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:7989
#, no-wrap
msgid ""
"(lookup-package-direct-input coreutils \"gmp\")\n"
"@result{} #<package gmp@@6.2.1 @dots{}>\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:7993
msgid "In this example we obtain the @code{gmp} package that is among the direct inputs of @code{coreutils}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:7995
#, fuzzy, no-wrap
#| msgid "inputs, for Python packages"
msgid "development inputs, of a package"
msgstr "entradas, para pacotes Python"

#. type: cindex
#: guix-git/doc/guix.texi:7996
#, fuzzy, no-wrap
#| msgid "inputs, for Python packages"
msgid "implicit inputs, of a package"
msgstr "entradas, para pacotes Python"

#. type: Plain text
#: guix-git/doc/guix.texi:8001
msgid "Sometimes you will want to obtain the list of inputs needed to @emph{develop} a package---all the inputs that are visible when the package is compiled.  This is what the @code{package-development-inputs} procedure returns."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8002
#, no-wrap
msgid "package-development-inputs package [system] [#:target #f]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8008
msgid "Return the list of inputs required by @var{package} for development purposes on @var{system}.  When @var{target} is true, return the inputs needed to cross-compile @var{package} from @var{system} to @var{target}, where @var{target} is a triplet such as @code{\"aarch64-linux-gnu\"}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8012
msgid "Note that the result includes both explicit inputs and implicit inputs---inputs automatically added by the build system (@pxref{Build Systems}).  Let us take the @code{hello} package to illustrate that:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8015
#, no-wrap
msgid ""
"(use-modules (gnu packages base) (guix packages))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8018
#, no-wrap
msgid ""
"hello\n"
"@result{} #<package hello@@2.10 gnu/packages/base.scm:79 7f585d4f6790>\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8021
#, no-wrap
msgid ""
"(package-direct-inputs hello)\n"
"@result{} ()\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8024
#, no-wrap
msgid ""
"(package-development-inputs hello)\n"
"@result{} ((\"source\" @dots{}) (\"tar\" #<package tar@@1.32 @dots{}>) @dots{})\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8033
msgid "In this example, @code{package-direct-inputs} returns the empty list, because @code{hello} has zero explicit dependencies.  Conversely, @code{package-development-inputs} includes inputs implicitly added by @code{gnu-build-system} that are required to build @code{hello}: tar, gzip, GCC, libc, Bash, and more.  To visualize it, @command{guix graph hello} would show you explicit inputs, whereas @command{guix graph -t bag hello} would include implicit inputs (@pxref{Invoking guix graph})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8039
msgid "Because packages are regular Scheme objects that capture a complete dependency graph and associated build procedures, it is often useful to write procedures that take a package and return a modified version thereof according to some parameters.  Below are a few examples."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:8040
#, no-wrap
msgid "tool chain, choosing a package's tool chain"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8041
#, no-wrap
msgid "package-with-c-toolchain package toolchain"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8046
msgid "Return a variant of @var{package} that uses @var{toolchain} instead of the default GNU C/C++ toolchain.  @var{toolchain} must be a list of inputs (label/package tuples) providing equivalent functionality, such as the @code{gcc-toolchain} package."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8050
msgid "The example below returns a variant of the @code{hello} package built with GCC@tie{}10.x and the rest of the GNU tool chain (Binutils and the GNU C Library) instead of the default tool chain:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8054
#, no-wrap
msgid ""
"(let ((toolchain (specification->package \"gcc-toolchain@@10\")))\n"
"  (package-with-c-toolchain hello `((\"toolchain\" ,toolchain))))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8062
msgid "The build tool chain is part of the @dfn{implicit inputs} of packages---it's usually not listed as part of the various ``inputs'' fields and is instead pulled in by the build system.  Consequently, this procedure works by changing the build system of @var{package} so that it pulls in @var{toolchain} instead of the defaults.  @ref{Build Systems}, for more on build systems."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:8065
#, no-wrap
msgid "@code{origin} Reference"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8073
msgid "This section documents @dfn{origins}.  An @code{origin} declaration specifies data that must be ``produced''---downloaded, usually---and whose content hash is known in advance.  Origins are primarily used to represent the source code of packages (@pxref{Defining Packages}).  For that reason, the @code{origin} form allows you to declare patches to apply to the original source code as well as code snippets to modify it."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:8074
#, no-wrap
msgid "{Data Type} origin"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:8076
msgid "This is the data type representing a source code origin."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:8078 guix-git/doc/guix.texi:30504
#, no-wrap
msgid "uri"
msgstr "uri"

#. type: table
#: guix-git/doc/guix.texi:8083
msgid "An object containing the URI of the source.  The object type depends on the @code{method} (see below).  For example, when using the @var{url-fetch} method of @code{(guix download)}, the valid @code{uri} values are: a URL represented as a string, or a list thereof."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:8084
#, no-wrap
msgid "fixed-output derivations, for download"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:8085
#, no-wrap
msgid "method"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8092
msgid "A monadic procedure that handles the given URI@.  The procedure must accept at least three arguments: the value of the @code{uri} field and the hash algorithm and hash value specified by the @code{hash} field.  It must return a store item or a derivation in the store monad (@pxref{The Store Monad}); most methods return a fixed-output derivation (@pxref{Derivations})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8096
msgid "Commonly used methods include @code{url-fetch}, which fetches data from a URL, and @code{git-fetch}, which fetches data from a Git repository (see below)."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:8097
#, no-wrap
msgid "sha256"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8101
msgid "A bytevector containing the SHA-256 hash of the source.  This is equivalent to providing a @code{content-hash} SHA256 object in the @code{hash} field described below."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:8102
#, no-wrap
msgid "hash"
msgstr "hash (masc.)"

#. type: table
#: guix-git/doc/guix.texi:8105
msgid "The @code{content-hash} object of the source---see below for how to use @code{content-hash}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8109
msgid "You can obtain this information using @code{guix download} (@pxref{Invoking guix download}) or @code{guix hash} (@pxref{Invoking guix hash})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8110
#, no-wrap
msgid "@code{file-name} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8116
msgid "The file name under which the source code should be saved.  When this is @code{#f}, a sensible default value will be used in most cases.  In case the source is fetched from a URL, the file name from the URL will be used.  For version control checkouts, it is recommended to provide the file name explicitly because the default is not very descriptive."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8117
#, no-wrap
msgid "@code{patches} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8120
msgid "A list of file names, origins, or file-like objects (@pxref{G-Expressions, file-like objects}) pointing to patches to be applied to the source."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8124
msgid "This list of patches must be unconditional.  In particular, it cannot depend on the value of @code{%current-system} or @code{%current-target-system}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8125
#, no-wrap
msgid "@code{snippet} (default: @code{#f})"
msgstr "@code{snippet} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:8129
msgid "A G-expression (@pxref{G-Expressions}) or S-expression that will be run in the source directory.  This is a convenient way to modify the source, sometimes more convenient than a patch."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8130
#, no-wrap
msgid "@code{patch-flags} (default: @code{'(\"-p1\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8133
msgid "A list of command-line flags that should be passed to the @code{patch} command."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8134
#, no-wrap
msgid "@code{patch-inputs} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8138
msgid "Input packages or derivations to the patching process.  When this is @code{#f}, the usual set of inputs necessary for patching are provided, such as GNU@tie{}Patch."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8139 guix-git/doc/guix.texi:30373
#, no-wrap
msgid "@code{modules} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8142
msgid "A list of Guile modules that should be loaded during the patching process and while running the code in the @code{snippet} field."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8143
#, no-wrap
msgid "@code{patch-guile} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8146
msgid "The Guile package that should be used in the patching process.  When this is @code{#f}, a sensible default is used."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:8149
#, no-wrap
msgid "{Data Type} content-hash @var{value} [@var{algorithm}]"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:8153
msgid "Construct a content hash object for the given @var{algorithm}, and with @var{value} as its hash value.  When @var{algorithm} is omitted, assume it is @code{sha256}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:8156
msgid "@var{value} can be a literal string, in which case it is base32-decoded, or it can be a bytevector."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:8158
msgid "The following forms are all equivalent:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8167
#, no-wrap
msgid ""
"(content-hash \"05zxkyz9bv3j9h0xyid1rhvh3klhsmrpkf3bcs6frvlgyr2gwilj\")\n"
"(content-hash \"05zxkyz9bv3j9h0xyid1rhvh3klhsmrpkf3bcs6frvlgyr2gwilj\"\n"
"              sha256)\n"
"(content-hash (base32\n"
"               \"05zxkyz9bv3j9h0xyid1rhvh3klhsmrpkf3bcs6frvlgyr2gwilj\"))\n"
"(content-hash (base64 \"kkb+RPaP7uyMZmu4eXPVkM4BN8yhRd8BTHLslb6f/Rc=\")\n"
"              sha256)\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:8172
msgid "Technically, @code{content-hash} is currently implemented as a macro.  It performs sanity checks at macro-expansion time, when possible, such as ensuring that @var{value} has the right size for @var{algorithm}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8178
msgid "As we have seen above, how exactly the data an origin refers to is retrieved is determined by its @code{method} field.  The @code{(guix download)} module provides the most common method, @code{url-fetch}, described below."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8179
#, no-wrap
msgid "url-fetch url hash-algo hash [name] [#:executable? #f]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8186
msgid "Return a fixed-output derivation that fetches data from @var{url} (a string, or a list of strings denoting alternate URLs), which is expected to have hash @var{hash} of type @var{hash-algo} (a symbol).  By default, the file name is the base name of URL; optionally, @var{name} can specify a different file name.  When @var{executable?} is true, make the downloaded file executable."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8189
msgid "When one of the URL starts with @code{mirror://}, then its host part is interpreted as the name of a mirror scheme, taken from @file{%mirror-file}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8192
msgid "Alternatively, when URL starts with @code{file://}, return the corresponding file name in the store."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8198
msgid "Likewise, the @code{(guix git-download)} module defines the @code{git-fetch} origin method, which fetches data from a Git version control repository, and the @code{git-reference} data type to describe the repository and revision to fetch."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8199
#, no-wrap
msgid "git-fetch ref hash-algo hash"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8204
msgid "Return a fixed-output derivation that fetches @var{ref}, a @code{<git-reference>} object.  The output is expected to have recursive hash @var{hash} of type @var{hash-algo} (a symbol).  Use @var{name} as the file name, or a generic name if @code{#f}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:8206
#, no-wrap
msgid "{Data Type} git-reference"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:8209
msgid "This data type represents a Git reference for @code{git-fetch} to retrieve."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:8211 guix-git/doc/guix.texi:27784
#, no-wrap
msgid "url"
msgstr "url"

#. type: table
#: guix-git/doc/guix.texi:8213
msgid "The URL of the Git repository to clone."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:8214
#, no-wrap
msgid "commit"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8219
msgid "This string denotes either the commit to fetch (a hexadecimal string), or the tag to fetch.  You can also use a ``short'' commit ID or a @command{git describe} style identifier such as @code{v1.0.1-10-g58d7909c97}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8220
#, no-wrap
msgid "@code{recursive?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8222
msgid "This Boolean indicates whether to recursively fetch Git sub-modules."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:8226
msgid "The example below denotes the @code{v2.10} tag of the GNU@tie{}Hello repository:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8231
#, no-wrap
msgid ""
"(git-reference\n"
"  (url \"https://git.savannah.gnu.org/git/hello.git\")\n"
"  (commit \"v2.10\"))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:8235
msgid "This is equivalent to the reference below, which explicitly names the commit:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8240
#, no-wrap
msgid ""
"(git-reference\n"
"  (url \"https://git.savannah.gnu.org/git/hello.git\")\n"
"  (commit \"dc7dc56a00e48fe6f231a58f6537139fe2908fb9\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8246
msgid "For Mercurial repositories, the module @code{(guix hg-download)} defines the @code{hg-fetch} origin method and @code{hg-reference} data type for support of the Mercurial version control system."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8247
#, no-wrap
msgid "hg-fetch ref hash-algo hash [name]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8252
msgid "Return a fixed-output derivation that fetches @var{ref}, a @code{<hg-reference>} object.  The output is expected to have recursive hash @var{hash} of type @var{hash-algo} (a symbol).  Use @var{name} as the file name, or a generic name if @code{#false}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:8257
#, no-wrap
msgid "customizing packages"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:8258
#, no-wrap
msgid "variants, of packages"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8268
msgid "One of the nice things with Guix is that, given a package definition, you can easily @emph{derive} variants of that package---for a different upstream version, with different dependencies, different compilation options, and so on.  Some of these custom packages can be defined straight from the command line (@pxref{Package Transformation Options}).  This section describes how to define package variants in code.  This can be useful in ``manifests'' (@pxref{Writing Manifests})  and in your own package collection (@pxref{Creating a Channel}), among others!"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:8269
#, no-wrap
msgid "inherit, for package definitions"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8276
msgid "As discussed earlier, packages are first-class objects in the Scheme language.  The @code{(guix packages)} module provides the @code{package} construct to define new package objects (@pxref{package Reference}).  The easiest way to define a package variant is using the @code{inherit} keyword together with @code{package}.  This allows you to inherit from a package definition while overriding the fields you want."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8281
msgid "For example, given the @code{hello} variable, which contains a definition for the current version of GNU@tie{}Hello, here's how you would define a variant for version 2.2 (released in 2006, it's vintage!):"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8284
#, no-wrap
msgid ""
"(use-modules (gnu packages base))    ;for 'hello'\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8296
#, no-wrap
msgid ""
"(define hello-2.2\n"
"  (package\n"
"    (inherit hello)\n"
"    (version \"2.2\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0lappv4slgb5spyqbh6yl5r013zv72yqg2pcl30mginf3wdqd8k9\"))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8306
msgid "The example above corresponds to what the @option{--with-version} or @option{--with-source} package transformations option do.  Essentially @code{hello-2.2} preserves all the fields of @code{hello}, except @code{version} and @code{source}, which it overrides.  Note that the original @code{hello} variable is still there, in the @code{(gnu packages base)} module, unchanged.  When you define a custom package like this, you are really @emph{adding} a new package definition; the original one remains available."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8312
msgid "You can just as well define variants with a different set of dependencies than the original package.  For example, the default @code{gdb} package depends on @code{guile}, but since that is an optional dependency, you can define a variant that removes that dependency like so:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8315
#, no-wrap
msgid ""
"(use-modules (gnu packages gdb))   ;for 'gdb'\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8321
#, no-wrap
msgid ""
"(define gdb-sans-guile\n"
"  (package\n"
"    (inherit gdb)\n"
"    (inputs (modify-inputs (package-inputs gdb)\n"
"              (delete \"guile\")))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8327
msgid "The @code{modify-inputs} form above removes the @code{\"guile\"} package from the @code{inputs} field of @code{gdb}.  The @code{modify-inputs} macro is a helper that can prove useful anytime you want to remove, add, or replace package inputs."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:8328
#, no-wrap
msgid "modify-inputs inputs clauses"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:8332
msgid "Modify the given package inputs, as returned by @code{package-inputs} & co., according to the given clauses.  Each clause must have one of the following forms:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8334
#, fuzzy, no-wrap
#| msgid "-t @var{type}"
msgid "(delete @var{name}@dots{})"
msgstr "-t @var{tipo}"

#. type: table
#: guix-git/doc/guix.texi:8336
msgid "Delete from the inputs packages with the given @var{name}s (strings)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8337
#, fuzzy, no-wrap
#| msgid "-r @var{package} @dots{}"
msgid "(prepend @var{package}@dots{})"
msgstr "-r @var{pacote} @dots{}"

#. type: table
#: guix-git/doc/guix.texi:8339
msgid "Add @var{package}s to the front of the input list."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8340
#, fuzzy, no-wrap
#| msgid "-r @var{package} @dots{}"
msgid "(append @var{package}@dots{})"
msgstr "-r @var{pacote} @dots{}"

#. type: table
#: guix-git/doc/guix.texi:8342
msgid "Add @var{package}s to the end of the input list."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8343
#, fuzzy, no-wrap
#| msgid "-t @var{type}"
msgid "(replace @var{name} @var{replacement})"
msgstr "-t @var{tipo}"

#. type: table
#: guix-git/doc/guix.texi:8345
msgid "Replace the package called @var{name} with @var{replacement}."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:8349
msgid "The example below removes the GMP and ACL inputs of Coreutils and adds libcap to the front of the input list:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8354
#, no-wrap
msgid ""
"(modify-inputs (package-inputs coreutils)\n"
"  (delete \"gmp\" \"acl\")\n"
"  (prepend libcap))\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:8358
msgid "The example below replaces the @code{guile} package from the inputs of @code{guile-redis} with @code{guile-2.2}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8362
#, no-wrap
msgid ""
"(modify-inputs (package-inputs guile-redis)\n"
"  (replace \"guile\" guile-2.2))\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:8366
msgid "The last type of clause is @code{append}, to add inputs at the back of the list."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8375
msgid "In some cases, you may find it useful to write functions (``procedures'', in Scheme parlance) that return a package based on some parameters.  For example, consider the @code{luasocket} library for the Lua programming language.  We want to create @code{luasocket} packages for major versions of Lua.  One way to do that is to define a procedure that takes a Lua package and returns a @code{luasocket} package that depends on it:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8385
#, no-wrap
msgid ""
"(define (make-lua-socket name lua)\n"
"  ;; Return a luasocket package built with LUA.\n"
"  (package\n"
"    (name name)\n"
"    (version \"3.0\")\n"
"    ;; several fields omitted\n"
"    (inputs (list lua))\n"
"    (synopsis \"Socket library for Lua\")))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8388
#, no-wrap
msgid ""
"(define-public lua5.1-socket\n"
"  (make-lua-socket \"lua5.1-socket\" lua-5.1))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8391
#, no-wrap
msgid ""
"(define-public lua5.2-socket\n"
"  (make-lua-socket \"lua5.2-socket\" lua-5.2))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8399
msgid "Here we have defined packages @code{lua5.1-socket} and @code{lua5.2-socket} by calling @code{make-lua-socket} with different arguments.  @xref{Procedures,,, guile, GNU Guile Reference Manual}, for more info on procedures.  Having top-level public definitions for these two packages means that they can be referred to from the command line (@pxref{Package Modules})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:8400
#, no-wrap
msgid "package transformations"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8405
msgid "These are pretty simple package variants.  As a convenience, the @code{(guix transformations)} module provides a high-level interface that directly maps to the more sophisticated package transformation options (@pxref{Package Transformation Options}):"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8406
#, no-wrap
msgid "options->transformation opts"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8410
msgid "Return a procedure that, when passed an object to build (package, derivation, etc.), applies the transformations specified by @var{opts} and returns the resulting objects.  @var{opts} must be a list of symbol/string pairs such as:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8414
#, no-wrap
msgid ""
"((with-branch . \"guile-gcrypt=master\")\n"
" (without-tests . \"libgcrypt\"))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8418
msgid "Each symbol names a transformation and the corresponding string is an argument to that transformation."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8421
msgid "For instance, a manifest equivalent to this command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:8426
#, no-wrap
msgid ""
"guix build guix \\\n"
"  --with-branch=guile-gcrypt=master \\\n"
"  --with-debug-info=zlib\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8430
msgid "... would look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8433
#, no-wrap
msgid ""
"(use-modules (guix transformations))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8439
#, no-wrap
msgid ""
"(define transform\n"
"  ;; The package transformation procedure.\n"
"  (options->transformation\n"
"   '((with-branch . \"guile-gcrypt=master\")\n"
"     (with-debug-info . \"zlib\"))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8442
#, no-wrap
msgid ""
"(packages->manifest\n"
" (list (transform (specification->package \"guix\"))))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:8444
#, no-wrap
msgid "input rewriting"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:8445
#, no-wrap
msgid "dependency graph rewriting"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8452
msgid "The @code{options->transformation} procedure is convenient, but it's perhaps also not as flexible as you may like.  How is it implemented? The astute reader probably noticed that most package transformation options go beyond the superficial changes shown in the first examples of this section: they involve @dfn{input rewriting}, whereby the dependency graph of a package is rewritten by replacing specific inputs by others."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8456
msgid "Dependency graph rewriting, for the purposes of swapping packages in the graph, is what the @code{package-input-rewriting} procedure in @code{(guix packages)} implements."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8457
#, no-wrap
msgid "package-input-rewriting replacements [rewrite-name] [#:deep? #t]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8463
msgid "Return a procedure that, when passed a package, replaces its direct and indirect dependencies, including implicit inputs when @var{deep?} is true, according to @var{replacements}.  @var{replacements} is a list of package pairs; the first element of each pair is the package to replace, and the second one is the replacement."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8466
msgid "Optionally, @var{rewrite-name} is a one-argument procedure that takes the name of a package and returns its new name after rewrite."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8470 guix-git/doc/guix.texi:12910
msgid "Consider this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8476
#, no-wrap
msgid ""
"(define libressl-instead-of-openssl\n"
"  ;; This is a procedure to replace OPENSSL by LIBRESSL,\n"
"  ;; recursively.\n"
"  (package-input-rewriting `((,openssl . ,libressl))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8479
#, no-wrap
msgid ""
"(define git-with-libressl\n"
"  (libressl-instead-of-openssl git))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8487
msgid "Here we first define a rewriting procedure that replaces @var{openssl} with @var{libressl}.  Then we use it to define a @dfn{variant} of the @var{git} package that uses @var{libressl} instead of @var{openssl}.  This is exactly what the @option{--with-input} command-line option does (@pxref{Package Transformation Options, @option{--with-input}})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8490
msgid "The following variant of @code{package-input-rewriting} can match packages to be replaced by name rather than by identity."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:8491
#, no-wrap
msgid "{Scheme Procedure} package-input-rewriting/spec @var{replacements} [#:deep? #t]"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:8495
msgid "Return a procedure that, given a package, applies the given @var{replacements} to all the package graph, including implicit inputs unless @var{deep?} is false."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:8501
msgid "@var{replacements} is a list of spec/procedures pair; each spec is a package specification such as @code{\"gcc\"} or @code{\"guile@@2\"}, and each procedure takes a matching package and returns a replacement for that package.  Matching packages that have the @code{hidden?} property set are not replaced."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8504
msgid "The example above could be rewritten this way:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8509
#, no-wrap
msgid ""
"(define libressl-instead-of-openssl\n"
"  ;; Replace all the packages called \"openssl\" with LibreSSL.\n"
"  (package-input-rewriting/spec `((\"openssl\" . ,(const libressl)))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8514
msgid "The key difference here is that, this time, packages are matched by spec and not by identity.  In other words, any package in the graph that is called @code{openssl} will be replaced."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8518
msgid "A more generic procedure to rewrite a package dependency graph is @code{package-mapping}: it supports arbitrary changes to nodes in the graph."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8519
#, no-wrap
msgid "package-mapping proc [cut?] [#:deep? #f]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8524
msgid "Return a procedure that, given a package, applies @var{proc} to all the packages depended on and returns the resulting package.  The procedure stops recursion when @var{cut?} returns true for a given package.  When @var{deep?} is true, @var{proc} is applied to implicit inputs as well."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:8529
#, fuzzy, no-wrap
#| msgid "profile-manifest"
msgid "manifest"
msgstr "profile-manifest"

#. type: cindex
#: guix-git/doc/guix.texi:8530
#, no-wrap
msgid "bill of materials (manifests)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8541
msgid "@command{guix} commands let you specify package lists on the command line.  This is convenient, but as the command line becomes longer and less trivial, it quickly becomes more convenient to have that package list in what we call a @dfn{manifest}.  A manifest is some sort of a ``bill of materials'' that defines a package set.  You would typically come up with a code snippet that builds the manifest, store it in a file, say @file{manifest.scm}, and then pass that file to the @option{-m} (or @option{--manifest}) option that many @command{guix} commands support.  For example, here's what a manifest for a simple package set might look like:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8545
#, no-wrap
msgid ""
";; Manifest for three packages.\n"
"(specifications->manifest '(\"gcc-toolchain\" \"make\" \"git\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8551
msgid "Once you have that manifest, you can pass it, for example, to @command{guix package} to install just those three packages to your profile (@pxref{profile-manifest, @option{-m} option of @command{guix package}}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:8554
#, fuzzy, no-wrap
#| msgid "packages->manifest"
msgid "guix package -m manifest.scm\n"
msgstr "packages->manifest"

#. type: Plain text
#: guix-git/doc/guix.texi:8560
msgid "... or you can pass it to @command{guix shell} (@pxref{shell-manifest, @command{-m} option of @command{guix shell}}) to spawn an ephemeral environment:"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8570
msgid "... or you can pass it to @command{guix pack} in pretty much the same way (@pxref{pack-manifest, @option{-m} option of @command{guix pack}}).  You can store the manifest under version control, share it with others so they can easily get set up, etc."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8576
msgid "But how do you write your first manifest? To get started, maybe you'll want to write a manifest that mirrors what you already have in a profile.  Rather than start from a blank page, @command{guix package} can generate a manifest for you (@pxref{export-manifest, @command{guix package --export-manifest}}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:8581
#, no-wrap
msgid ""
"# Write to 'manifest.scm' a manifest corresponding to the\n"
"# default profile, ~/.guix-profile.\n"
"guix package --export-manifest > manifest.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8586
msgid "Or maybe you'll want to ``translate'' command-line arguments into a manifest.  In that case, @command{guix shell} can help (@pxref{shell-export-manifest, @command{guix shell --export-manifest}}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:8590
#, no-wrap
msgid ""
"# Write a manifest for the packages specified on the command line.\n"
"guix shell --export-manifest gcc-toolchain make git > manifest.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8596
msgid "In both cases, the @option{--export-manifest} option tries hard to generate a faithful manifest; in particular, it takes package transformation options into account (@pxref{Package Transformation Options})."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:8602
msgid "Manifests are @emph{symbolic}: they refer to packages of the channels @emph{currently in use} (@pxref{Channels}).  In the example above, @code{gcc-toolchain} might refer to version 11 today, but it might refer to version 13 two years from now."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:8607
msgid "If you want to ``pin'' your software environment to specific package versions and variants, you need an additional piece of information: the list of channel revisions in use, as returned by @command{guix describe}.  @xref{Replicating Guix}, for more information."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8612
msgid "Once you've obtained your first manifest, perhaps you'll want to customize it.  Since your manifest is code, you now have access to all the Guix programming interfaces!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8618
msgid "Let's assume you want a manifest to deploy a custom variant of GDB, the GNU Debugger, that does not depend on Guile, together with another package.  Building on the example seen in the previous section (@pxref{Defining Package Variants}), you can write a manifest along these lines:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8623
#, no-wrap
msgid ""
"(use-modules (guix packages)\n"
"             (gnu packages gdb)               ;for 'gdb'\n"
"             (gnu packages version-control))  ;for 'git'\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8630
#, no-wrap
msgid ""
";; Define a variant of GDB without a dependency on Guile.\n"
"(define gdb-sans-guile\n"
"  (package\n"
"    (inherit gdb)\n"
"    (inputs (modify-inputs (package-inputs gdb)\n"
"              (delete \"guile\")))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8633
#, no-wrap
msgid ""
";; Return a manifest containing that one package plus Git.\n"
"(packages->manifest (list gdb-sans-guile git))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8644
msgid "Note that in this example, the manifest directly refers to the @code{gdb} and @code{git} variables, which are bound to a @code{package} object (@pxref{package Reference}), instead of calling @code{specifications->manifest} to look up packages by name as we did before.  The @code{use-modules} form at the top lets us access the core package interface (@pxref{Defining Packages}) and the modules that define @code{gdb} and @code{git} (@pxref{Package Modules}).  Seamlessly, we're weaving all this together---the possibilities are endless, unleash your creativity!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8648
msgid "The data type for manifests as well as supporting procedures are defined in the @code{(guix profiles)} module, which is automatically available to code passed to @option{-m}.  The reference follows."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:8649
#, fuzzy, no-wrap
msgid "{Data Type} manifest"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:8651
#, fuzzy
msgid "Data type representing a manifest."
msgstr "Gerencie a configuração do sistema operacional."

#. type: deftp
#: guix-git/doc/guix.texi:8653
msgid "It currently has one field:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8655
#, no-wrap
msgid "entries"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8657
msgid "This must be a list of @code{manifest-entry} records---see below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:8660
#, fuzzy, no-wrap
#| msgid "{Data Type} build-machine"
msgid "{Data Type} manifest-entry"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:8666
msgid "Data type representing a manifest entry.  A manifest entry contains essential metadata: a name and version string, the object (usually a package) for that entry, the desired output (@pxref{Packages with Multiple Outputs}), and a number of optional pieces of information detailed below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:8671
msgid "Most of the time, you won't build a manifest entry directly; instead, you will pass a package to @code{package->manifest-entry}, described below.  In some unusual cases though, you might want to create manifest entries for things that are @emph{not} packages, as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8684
#, no-wrap
msgid ""
";; Manually build a single manifest entry for a non-package object.\n"
"(let ((hello (program-file \"hello\" #~(display \"Hi!\"))))\n"
"  (manifest-entry\n"
"    (name \"foo\")\n"
"    (version \"42\")\n"
"    (item\n"
"     (computed-file \"hello-directory\"\n"
"                     #~(let ((bin (string-append #$output \"/bin\")))\n"
"                         (mkdir #$output) (mkdir bin)\n"
"                          (symlink #$hello\n"
"                                   (string-append bin \"/hello\")))))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:8687
#, fuzzy
#| msgid "Packages are currently available on the following platforms:"
msgid "The available fields are the following:"
msgstr "Os pacotes estão atualmente disponíveis nas seguintes plataformas:"

#. type: table
#: guix-git/doc/guix.texi:8692
msgid "Name and version string for this entry."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:8693
#, no-wrap
msgid "item"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8696
msgid "A package or other file-like object (@pxref{G-Expressions, file-like objects})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8697
#, fuzzy, no-wrap
#| msgid "@code{hangup?} (default: @code{#f})"
msgid "@code{output} (default: @code{\"out\"})"
msgstr "@code{hangup?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:8700
msgid "Output of @code{item} to use, in case @code{item} has multiple outputs (@pxref{Packages with Multiple Outputs})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8701 guix-git/doc/guix.texi:17091
#: guix-git/doc/guix.texi:17504
#, no-wrap
msgid "@code{dependencies} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8704
msgid "List of manifest entries this entry depends on.  When building a profile, dependencies are added to the profile."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8708
msgid "Typically, the propagated inputs of a package (@pxref{package Reference, @code{propagated-inputs}}) end up having a corresponding manifest entry in among the dependencies of the package's own manifest entry."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8712
msgid "The list of search path specifications honored by this entry (@pxref{Search Paths})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8713
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{properties} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:8716
msgid "List of symbol/value pairs.  When building a profile, those properties get serialized."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8720
msgid "This can be used to piggyback additional metadata---e.g., the transformations applied to a package (@pxref{Package Transformation Options})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8721
#, fuzzy, no-wrap
msgid "@code{parent} (default: @code{(delay #f)})"
msgstr "@code{term} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:8723
msgid "A promise pointing to the ``parent'' manifest entry."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8726
msgid "This is used as a hint to provide context when reporting an error related to a manifest entry coming from a @code{dependencies} field."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8729
#, no-wrap
msgid "concatenate-manifests lst"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8732
msgid "Concatenate the manifests listed in @var{lst} and return the resulting manifest."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8736
#, no-wrap
msgid "package->manifest-entry package [output] [#:properties]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8744
msgid "Return a manifest entry for the @var{output} of package @var{package}, where @var{output} defaults to @code{\"out\"}, and with the given @var{properties}.  By default @var{properties} is the empty list or, if one or more package transformations were applied to @var{package}, it is an association list representing those transformations, suitable as an argument to @code{options->transformation} (@pxref{Defining Package Variants, @code{options->transformation}})."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8747
msgid "The code snippet below builds a manifest with an entry for the default output and the @code{send-email} output of the @code{git} package:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8750 guix-git/doc/guix.texi:8767
#, fuzzy, no-wrap
#| msgid "./pre-inst-env guile -c '(use-modules (gnu packages gnew))'\n"
msgid ""
"(use-modules (gnu packages version-control))\n"
"\n"
msgstr "./pre-inst-env guile -c '(use-modules (gnu packages gnew))'\n"

#. type: lisp
#: guix-git/doc/guix.texi:8753
#, no-wrap
msgid ""
"(manifest (list (package->manifest-entry git)\n"
"                (package->manifest-entry git \"send-email\")))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8756
#, fuzzy, no-wrap
#| msgid "packages->manifest"
msgid "packages->manifest packages"
msgstr "packages->manifest"

#. type: defun
#: guix-git/doc/guix.texi:8761
msgid "Return a list of manifest entries, one for each item listed in @var{packages}.  Elements of @var{packages} can be either package objects or package/string tuples denoting a specific output of a package."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8764
msgid "Using this procedure, the manifest above may be rewritten more concisely:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8769
#, no-wrap
msgid "(packages->manifest (list git `(,git \"send-email\")))\n"
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:8773
#, fuzzy
#| msgid "packages->manifest"
msgid "package-development-manifest"
msgstr "packages->manifest"

#. type: defun
#: guix-git/doc/guix.texi:8773
#, fuzzy, no-wrap
#| msgid "packages->manifest"
msgid "package->development-manifest package [system] [#:target]"
msgstr "packages->manifest"

#. type: defun
#: guix-git/doc/guix.texi:8778
msgid "Return a manifest for the @dfn{development inputs} of @var{package} for @var{system}, optionally when cross-compiling to @var{target}.  Development inputs include both explicit and implicit inputs of @var{package}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8786
msgid "Like the @option{-D} option of @command{guix shell} (@pxref{shell-development-option, @command{guix shell -D}}), the resulting manifest describes the environment in which one can develop @var{package}.  For example, suppose you're willing to set up a development environment for Inkscape, with the addition of Git for version control; you can describe that ``bill of materials'' with the following manifest:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8790
#, no-wrap
msgid ""
"(use-modules (gnu packages inkscape)          ;for 'inkscape'\n"
"             (gnu packages version-control))  ;for 'git'\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8794
#, no-wrap
msgid ""
"(concatenate-manifests\n"
" (list (package->development-manifest inkscape)\n"
"       (packages->manifest (list git))))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8801
msgid "In this example, the development manifest that @code{package->development-manifest} returns includes the compiler (GCC), the many supporting libraries (Boost, GLib, GTK, etc.), and a couple of additional development tools---these are the dependencies @command{guix show inkscape} lists."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8808
msgid "Last, the @code{(gnu packages)} module provides higher-level facilities to build manifests.  In particular, it lets you look up packages by name---see below."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8809
#, fuzzy, no-wrap
#| msgid ""
#| "(specifications->manifest\n"
#| " '(\"emacs\" \"guile@@2.2\" \"guile@@2.2:debug\"))\n"
msgid "specifications->manifest specs"
msgstr ""
"(specifications->manifest\n"
" '(\"emacs\" \"guile@@2.2\" \"guile@@2.2:debug\"))\n"

#. type: defun
#: guix-git/doc/guix.texi:8814
msgid "Given @var{specs}, a list of specifications such as @code{\"emacs@@25.2\"} or @code{\"guile:debug\"}, return a manifest.  Specs have the format that command-line tools such as @command{guix install} and @command{guix package} understand (@pxref{Invoking guix package})."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:8817
msgid "As an example, it lets you rewrite the Git manifest that we saw earlier like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:8820
#, fuzzy, no-wrap
#| msgid ""
#| "(specifications->manifest\n"
#| " '(\"emacs\" \"guile@@2.2\" \"guile@@2.2:debug\"))\n"
msgid "(specifications->manifest '(\"git\" \"git:send-email\"))\n"
msgstr ""
"(specifications->manifest\n"
" '(\"emacs\" \"guile@@2.2\" \"guile@@2.2:debug\"))\n"

#. type: defun
#: guix-git/doc/guix.texi:8826
msgid "Notice that we do not need to worry about @code{use-modules}, importing the right set of modules, and referring to the right variables.  Instead, we directly refer to packages in the same way as on the command line, which can often be more convenient."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:8834
#, no-wrap
msgid "build system"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8839
msgid "Each package definition specifies a @dfn{build system} and arguments for that build system (@pxref{Defining Packages}).  This @code{build-system} field represents the build procedure of the package, as well as implicit dependencies of that build procedure."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8843
msgid "Build systems are @code{<build-system>} objects.  The interface to create and manipulate them is provided by the @code{(guix build-system)} module, and actual build systems are exported by specific modules."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:8844
#, no-wrap
msgid "bag (low-level package representation)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8854
msgid "Under the hood, build systems first compile package objects to @dfn{bags}.  A @dfn{bag} is like a package, but with less ornamentation---in other words, a bag is a lower-level representation of a package, which includes all the inputs of that package, including some that were implicitly added by the build system.  This intermediate representation is then compiled to a derivation (@pxref{Derivations}).  The @code{package-with-c-toolchain} is an example of a way to change the implicit inputs that a package's build system pulls in (@pxref{package Reference, @code{package-with-c-toolchain}})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8862
msgid "Build systems accept an optional list of @dfn{arguments}.  In package definitions, these are passed @i{via} the @code{arguments} field (@pxref{Defining Packages}).  They are typically keyword arguments (@pxref{Optional Arguments, keyword arguments in Guile,, guile, GNU Guile Reference Manual}).  The value of these arguments is usually evaluated in the @dfn{build stratum}---i.e., by a Guile process launched by the daemon (@pxref{Derivations})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8866
msgid "The main build system is @code{gnu-build-system}, which implements the standard build procedure for GNU and many other packages.  It is provided by the @code{(guix build-system gnu)} module."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:8867
#, fuzzy, no-wrap
#| msgid "guix system vm"
msgid "gnu-build-system"
msgstr "guix system vm"

#. type: defvar
#: guix-git/doc/guix.texi:8871
msgid "@code{gnu-build-system} represents the GNU Build System, and variants thereof (@pxref{Configuration, configuration and makefile conventions,, standards, GNU Coding Standards})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:8872 guix-git/doc/guix.texi:9955
#: guix-git/doc/guix.texi:10570
#, no-wrap
msgid "build phases"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:8879
msgid "In a nutshell, packages using it are configured, built, and installed with the usual @code{./configure && make && make check && make install} command sequence.  In practice, a few additional steps are often needed.  All these steps are split up in separate @dfn{phases}.  @xref{Build Phases}, for more info on build phases and ways to customize them."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:8886
msgid "In addition, this build system ensures that the ``standard'' environment for GNU packages is available.  This includes tools such as GCC, libc, Coreutils, Bash, Make, Diffutils, grep, and sed (see the @code{(guix build-system gnu)} module for a complete list).  We call these the @dfn{implicit inputs} of a package, because package definitions do not have to mention them."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:8890
msgid "This build system supports a number of keyword arguments, which can be passed @i{via} the @code{arguments} field of a package.  Here are some of the main parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8892
#, no-wrap
msgid "#:phases"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8895
msgid "This argument specifies build-side code that evaluates to an alist of build phases.  @xref{Build Phases}, for more information."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8896
#, no-wrap
msgid "#:configure-flags"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8899
msgid "This is a list of flags (strings) passed to the @command{configure} script.  @xref{Defining Packages}, for an example."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8900
#, no-wrap
msgid "#:make-flags"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8904
msgid "This list of strings contains flags passed as arguments to @command{make} invocations in the @code{build}, @code{check}, and @code{install} phases."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8905
#, no-wrap
msgid "#:out-of-source?"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8908
msgid "This Boolean, @code{#f} by default, indicates whether to run builds in a build directory separate from the source tree."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8913
msgid "When it is true, the @code{configure} phase creates a separate build directory, changes to that directory, and runs the @code{configure} script from there.  This is useful for packages that require it, such as @code{glibc}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8914
#, no-wrap
msgid "#:tests?"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8917
msgid "This Boolean, @code{#t} by default, indicates whether the @code{check} phase should run the package's test suite."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8918
#, no-wrap
msgid "#:test-target"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8921
msgid "This string, @code{\"check\"} by default, gives the name of the makefile target used by the @code{check} phase."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8922
#, no-wrap
msgid "#:parallel-build?"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:8923
#, no-wrap
msgid "#:parallel-tests?"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8930
msgid "These Boolean values specify whether to build, respectively run the test suite, in parallel, with the @code{-j} flag of @command{make}.  When they are true, @code{make} is passed @code{-j@var{n}}, where @var{n} is the number specified as the @option{--cores} option of @command{guix-daemon} or that of the @command{guix} client command (@pxref{Common Build Options, @option{--cores}})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:8931 guix-git/doc/guix.texi:10092
#, no-wrap
msgid "RUNPATH, validation"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8932
#, no-wrap
msgid "#:validate-runpath?"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8938
msgid "This Boolean, @code{#t} by default, determines whether to ``validate'' the @code{RUNPATH} of ELF binaries (@code{.so} shared libraries as well as executables) previously installed by the @code{install} phase.  @xref{phase-validate-runpath, the @code{validate-runpath} phase}, for details."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8939
#, no-wrap
msgid "#:substitutable?"
msgstr "#:substituível?"

#. type: table
#: guix-git/doc/guix.texi:8943
msgid "This Boolean, @code{#t} by default, tells whether the package outputs should be substitutable---i.e., whether users should be able to obtain substitutes for them instead of building locally (@pxref{Substitutes})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:8944
#, no-wrap
msgid "#:allowed-references"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:8945
#, no-wrap
msgid "#:disallowed-references"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8950
msgid "When true, these arguments must be a list of dependencies that must not appear among the references of the build results.  If, upon build completion, some of these references are retained, the build process fails."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:8955
msgid "This is useful to ensure that a package does not erroneously keep a reference to some of it build-time inputs, in cases where doing so would, for example, unnecessarily increase its size (@pxref{Invoking guix size})."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:8958
msgid "Most other build systems support these keyword arguments."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:8965
msgid "Other @code{<build-system>} objects are defined to support other conventions and tools used by free software packages.  They inherit most of @code{gnu-build-system}, and differ mainly in the set of inputs implicitly added to the build process, and in the list of phases executed.  Some of these build systems are listed below."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:8966
#, fuzzy, no-wrap
#| msgid "operating-system"
msgid "ant-build-system"
msgstr "sistema operacional"

#. type: defvar
#: guix-git/doc/guix.texi:8970
msgid "This variable is exported by @code{(guix build-system ant)}.  It implements the build procedure for Java packages that can be built with @url{https://ant.apache.org/, Ant build tool}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:8975
msgid "It adds both @code{ant} and the @dfn{Java Development Kit} (JDK) as provided by the @code{icedtea} package to the set of inputs.  Different packages can be specified with the @code{#:ant} and @code{#:jdk} parameters, respectively."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:8981
msgid "When the original package does not provide a suitable Ant build file, the parameter @code{#:jar-name} can be used to generate a minimal Ant build file @file{build.xml} with tasks to build the specified jar archive.  In this case the parameter @code{#:source-dir} can be used to specify the source sub-directory, defaulting to ``src''."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:8989
msgid "The @code{#:main-class} parameter can be used with the minimal ant buildfile to specify the main class of the resulting jar.  This makes the jar file executable.  The @code{#:test-include} parameter can be used to specify the list of junit tests to run.  It defaults to @code{(list \"**/*Test.java\")}.  The @code{#:test-exclude} can be used to disable some tests.  It defaults to @code{(list \"**/Abstract*.java\")}, because abstract classes cannot be run as tests."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:8993
msgid "The parameter @code{#:build-target} can be used to specify the Ant task that should be run during the @code{build} phase.  By default the ``jar'' task will be run."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:8996
#, no-wrap
msgid "android-ndk-build-system"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:8997
#, no-wrap
msgid "Android distribution"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:8998
#, no-wrap
msgid "Android NDK build system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9002
msgid "This variable is exported by @code{(guix build-system android-ndk)}.  It implements a build procedure for Android NDK (native development kit)  packages using a Guix-specific build process."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9006
msgid "The build system assumes that packages install their public interface (header) files to the subdirectory @file{include} of the @code{out} output and their libraries to the subdirectory @file{lib} the @code{out} output."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9009
msgid "It's also assumed that the union of all the dependencies of a package has no conflicting files."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9012
msgid "For the time being, cross-compilation is not supported - so right now the libraries and header files are assumed to be host tools."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9015
#, no-wrap
msgid "asdf-build-system/source"
msgstr ""

#. type: defvarx
#: guix-git/doc/guix.texi:9016
#, no-wrap
msgid "asdf-build-system/sbcl"
msgstr ""

#. type: defvarx
#: guix-git/doc/guix.texi:9017
#, no-wrap
msgid "asdf-build-system/ecl"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9023
msgid "These variables, exported by @code{(guix build-system asdf)}, implement build procedures for Common Lisp packages using @url{https://common-lisp.net/project/asdf/, ``ASDF''}.  ASDF is a system definition facility for Common Lisp programs and libraries."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9030
msgid "The @code{asdf-build-system/source} system installs the packages in source form, and can be loaded using any common lisp implementation, via ASDF@.  The others, such as @code{asdf-build-system/sbcl}, install binary systems in the format which a particular implementation understands.  These build systems can also be used to produce executable programs, or lisp images which contain a set of packages pre-loaded."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9034
msgid "The build system uses naming conventions.  For binary packages, the package name should be prefixed with the lisp implementation, such as @code{sbcl-} for @code{asdf-build-system/sbcl}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9038
msgid "Additionally, the corresponding source package should be labeled using the same convention as python packages (see @ref{Python Modules}), using the @code{cl-} prefix."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9046
msgid "In order to create executable programs and images, the build-side procedures @code{build-program} and @code{build-image} can be used.  They should be called in a build phase after the @code{create-asdf-configuration} phase, so that the system which was just built can be used within the resulting image.  @code{build-program} requires a list of Common Lisp expressions to be passed as the @code{#:entry-program} argument."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9055
msgid "By default, all the @file{.asd} files present in the sources are read to find system definitions.  The @code{#:asd-files} parameter can be used to specify the list of @file{.asd} files to read.  Furthermore, if the package defines a system for its tests in a separate file, it will be loaded before the tests are run if it is specified by the @code{#:test-asd-file} parameter.  If it is not set, the files @code{<system>-tests.asd}, @code{<system>-test.asd}, @code{tests.asd}, and @code{test.asd} will be tried if they exist."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9060
msgid "If for some reason the package must be named in a different way than the naming conventions suggest, or if several systems must be compiled, the @code{#:asd-systems} parameter can be used to specify the list of system names."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9063
#, fuzzy, no-wrap
#| msgid "guix system vm"
msgid "cargo-build-system"
msgstr "guix system vm"

#. type: cindex
#: guix-git/doc/guix.texi:9064
#, no-wrap
msgid "Rust programming language"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:9065
#, no-wrap
msgid "Cargo (Rust build system)"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9069
msgid "This variable is exported by @code{(guix build-system cargo)}.  It supports builds of packages using Cargo, the build tool of the @uref{https://www.rust-lang.org, Rust programming language}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9072
msgid "It adds @code{rustc} and @code{cargo} to the set of inputs.  A different Rust package can be specified with the @code{#:rust} parameter."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9082
msgid "Regular cargo dependencies should be added to the package definition similarly to other packages; those needed only at build time to native-inputs, others to inputs.  If you need to add source-only crates then you should add them to via the @code{#:cargo-inputs} parameter as a list of name and spec pairs, where the spec can be a package or a source definition.  Note that the spec must evaluate to a path to a gzipped tarball which includes a @code{Cargo.toml} file at its root, or it will be ignored.  Similarly, cargo dev-dependencies should be added to the package definition via the @code{#:cargo-development-inputs} parameter."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9092
msgid "In its @code{configure} phase, this build system will make any source inputs specified in the @code{#:cargo-inputs} and @code{#:cargo-development-inputs} parameters available to cargo.  It will also remove an included @code{Cargo.lock} file to be recreated by @code{cargo} during the @code{build} phase.  The @code{package} phase will run @code{cargo package} to create a source crate for future use.  The @code{install} phase installs the binaries defined by the crate.  Unless @code{install-source? #f} is defined it will also install a source crate repository of itself and unpacked sources, to ease in future hacking on rust packages."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9094
#, fuzzy, no-wrap
msgid "chicken-build-system"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:9099
msgid "This variable is exported by @code{(guix build-system chicken)}.  It builds @uref{https://call-cc.org/, CHICKEN Scheme} modules, also called ``eggs'' or ``extensions''.  CHICKEN generates C source code, which then gets compiled by a C compiler, in this case GCC."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9102
msgid "This build system adds @code{chicken} to the package inputs, as well as the packages of @code{gnu-build-system}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9106
msgid "The build system can't (yet) deduce the egg's name automatically, so just like with @code{go-build-system} and its @code{#:import-path}, you should define @code{#:egg-name} in the package's @code{arguments} field."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9108
msgid "For example, if you are packaging the @code{srfi-1} egg:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:9111
#, no-wrap
msgid "(arguments '(#:egg-name \"srfi-1\"))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9116
msgid "Egg dependencies must be defined in @code{propagated-inputs}, not @code{inputs} because CHICKEN doesn't embed absolute references in compiled eggs.  Test dependencies should go to @code{native-inputs}, as usual."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9118
#, fuzzy, no-wrap
#| msgid "operating-system"
msgid "copy-build-system"
msgstr "sistema operacional"

#. type: defvar
#: guix-git/doc/guix.texi:9122
msgid "This variable is exported by @code{(guix build-system copy)}.  It supports builds of simple packages that don't require much compiling, mostly just moving files around."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9127
msgid "It adds much of the @code{gnu-build-system} packages to the set of inputs.  Because of this, the @code{copy-build-system} does not require all the boilerplate code often needed for the @code{trivial-build-system}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9132
msgid "To further simplify the file installation process, an @code{#:install-plan} argument is exposed to let the packager specify which files go where.  The install plan is a list of @code{(@var{source} @var{target} [@var{filters}])}.  @var{filters} are optional."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9134
#, no-wrap
msgid "When @var{source} matches a file or directory without trailing slash, install it to @var{target}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9136
#, no-wrap
msgid "If @var{target} has a trailing slash, install @var{source} basename beneath @var{target}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9137
#, no-wrap
msgid "Otherwise install @var{source} as @var{target}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9140
#, no-wrap
msgid "When @var{source} is a directory with a trailing slash, or when @var{filters} are used,"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9143
msgid "the trailing slash of @var{target} is implied with the same meaning as above."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9144
#, no-wrap
msgid "Without @var{filters}, install the full @var{source} @emph{content} to @var{target}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9145
#, no-wrap
msgid "With @var{filters} among @code{#:include}, @code{#:include-regexp}, @code{#:exclude},"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9148
msgid "@code{#:exclude-regexp}, only select files are installed depending on the filters.  Each filters is specified by a list of strings."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9149
#, no-wrap
msgid "With @code{#:include}, install all the files which the path suffix matches"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9151
msgid "at least one of the elements in the given list."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9151
#, no-wrap
msgid "With @code{#:include-regexp}, install all the files which the"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9154
msgid "subpaths match at least one of the regular expressions in the given list."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9154
#, no-wrap
msgid "The @code{#:exclude} and @code{#:exclude-regexp} filters"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9159
msgid "are the complement of their inclusion counterpart.  Without @code{#:include} flags, install all files but those matching the exclusion filters.  If both inclusions and exclusions are specified, the exclusions are done on top of the inclusions."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9163
msgid "In all cases, the paths relative to @var{source} are preserved within @var{target}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9166
msgid "Examples:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9168
#, no-wrap
msgid "@code{(\"foo/bar\" \"share/my-app/\")}: Install @file{bar} to @file{share/my-app/bar}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9169
#, no-wrap
msgid "@code{(\"foo/bar\" \"share/my-app/baz\")}: Install @file{bar} to @file{share/my-app/baz}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9170
#, no-wrap
msgid "@code{(\"foo/\" \"share/my-app\")}: Install the content of @file{foo} inside @file{share/my-app},"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9172
msgid "e.g., install @file{foo/sub/file} to @file{share/my-app/sub/file}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9172
#, no-wrap
msgid "@code{(\"foo/\" \"share/my-app\" #:include (\"sub/file\"))}: Install only @file{foo/sub/file} to"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9174
msgid "@file{share/my-app/sub/file}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9174
#, no-wrap
msgid "@code{(\"foo/sub\" \"share/my-app\" #:include (\"file\"))}: Install @file{foo/sub/file} to"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9176
msgid "@file{share/my-app/file}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:9180
#, no-wrap
msgid "Clojure (programming language)"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:9181
#, no-wrap
msgid "simple Clojure build system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9182
#, fuzzy, no-wrap
msgid "clojure-build-system"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:9187
msgid "This variable is exported by @code{(guix build-system clojure)}.  It implements a simple build procedure for @uref{https://clojure.org/, Clojure} packages using plain old @code{compile} in Clojure.  Cross-compilation is not supported yet."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9191
msgid "It adds @code{clojure}, @code{icedtea} and @code{zip} to the set of inputs.  Different packages can be specified with the @code{#:clojure}, @code{#:jdk} and @code{#:zip} parameters, respectively."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9197
msgid "A list of source directories, test directories and jar names can be specified with the @code{#:source-dirs}, @code{#:test-dirs} and @code{#:jar-names} parameters, respectively.  Compile directory and main class can be specified with the @code{#:compile-dir} and @code{#:main-class} parameters, respectively.  Other parameters are documented below."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9200
msgid "This build system is an extension of @code{ant-build-system}, but with the following phases changed:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9203 guix-git/doc/guix.texi:9765
#: guix-git/doc/guix.texi:9916 guix-git/doc/guix.texi:9965
#: guix-git/doc/guix.texi:10070 guix-git/doc/guix.texi:40091
#: guix-git/doc/guix.texi:43966
#, no-wrap
msgid "build"
msgstr "build"

#. type: table
#: guix-git/doc/guix.texi:9212
msgid "This phase calls @code{compile} in Clojure to compile source files and runs @command{jar} to create jars from both source files and compiled files according to the include list and exclude list specified in @code{#:aot-include} and @code{#:aot-exclude}, respectively.  The exclude list has priority over the include list.  These lists consist of symbols representing Clojure libraries or the special keyword @code{#:all} representing all Clojure libraries found under the source directories.  The parameter @code{#:omit-source?} decides if source should be included into the jars."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9213 guix-git/doc/guix.texi:9769
#: guix-git/doc/guix.texi:9920 guix-git/doc/guix.texi:10075
#, no-wrap
msgid "check"
msgstr "marcar"

#. type: table
#: guix-git/doc/guix.texi:9220
msgid "This phase runs tests according to the include list and exclude list specified in @code{#:test-include} and @code{#:test-exclude}, respectively.  Their meanings are analogous to that of @code{#:aot-include} and @code{#:aot-exclude}, except that the special keyword @code{#:all} now stands for all Clojure libraries found under the test directories.  The parameter @code{#:tests?} decides if tests should be run."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9221 guix-git/doc/guix.texi:9775
#: guix-git/doc/guix.texi:9926 guix-git/doc/guix.texi:9969
#: guix-git/doc/guix.texi:10081
#, no-wrap
msgid "install"
msgstr "instalar"

#. type: table
#: guix-git/doc/guix.texi:9223
msgid "This phase installs all jars built previously."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9226
msgid "Apart from the above, this build system also contains an additional phase:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9229
#, no-wrap
msgid "install-doc"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9234
msgid "This phase installs all top-level files with base name matching @code{%doc-regex}.  A different regex can be specified with the @code{#:doc-regex} parameter.  All files (recursively) inside the documentation directories specified in @code{#:doc-dirs} are installed as well."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9237
#, fuzzy, no-wrap
msgid "cmake-build-system"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:9241
msgid "This variable is exported by @code{(guix build-system cmake)}.  It implements the build procedure for packages using the @url{https://www.cmake.org, CMake build tool}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9245
msgid "It automatically adds the @code{cmake} package to the set of inputs.  Which package is used can be specified with the @code{#:cmake} parameter."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9252
msgid "The @code{#:configure-flags} parameter is taken as a list of flags passed to the @command{cmake} command.  The @code{#:build-type} parameter specifies in abstract terms the flags passed to the compiler; it defaults to @code{\"RelWithDebInfo\"} (short for ``release mode with debugging information''), which roughly means that code is compiled with @code{-O2 -g}, as is the case for Autoconf-based packages by default."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9254
#, fuzzy, no-wrap
#| msgid "Build Systems"
msgid "dune-build-system"
msgstr "Sistemas de compilação"

#. type: defvar
#: guix-git/doc/guix.texi:9261
msgid "This variable is exported by @code{(guix build-system dune)}.  It supports builds of packages using @uref{https://dune.build/, Dune}, a build tool for the OCaml programming language.  It is implemented as an extension of the @code{ocaml-build-system} which is described below.  As such, the @code{#:ocaml} and @code{#:findlib} parameters can be passed to this build system."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9265
msgid "It automatically adds the @code{dune} package to the set of inputs.  Which package is used can be specified with the @code{#:dune} parameter."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9269
msgid "There is no @code{configure} phase because dune packages typically don't need to be configured.  The @code{#:build-flags} parameter is taken as a list of flags passed to the @code{dune} command during the build."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9273
msgid "The @code{#:jbuild?} parameter can be passed to use the @code{jbuild} command instead of the more recent @code{dune} command while building a package.  Its default value is @code{#f}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9278
msgid "The @code{#:package} parameter can be passed to specify a package name, which is useful when a package contains multiple packages and you want to build only one of them.  This is equivalent to passing the @code{-p} argument to @code{dune}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9281
#, fuzzy, no-wrap
msgid "elm-build-system"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:9285
msgid "This variable is exported by @code{(guix build-system elm)}.  It implements a build procedure for @url{https://elm-lang.org, Elm} packages similar to @samp{elm install}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9293
msgid "The build system adds an Elm compiler package to the set of inputs.  The default compiler package (currently @code{elm-sans-reactor}) can be overridden using the @code{#:elm} argument.  Additionally, Elm packages needed by the build system itself are added as implicit inputs if they are not already present: to suppress this behavior, use the @code{#:implicit-elm-package-inputs?} argument, which is primarily useful for bootstrapping."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9297
msgid "The @code{\"dependencies\"} and @code{\"test-dependencies\"} in an Elm package's @file{elm.json} file correspond to @code{propagated-inputs} and @code{inputs}, respectively."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9301
msgid "Elm requires a particular structure for package names: @pxref{Elm Packages} for more details, including utilities provided by @code{(guix build-system elm)}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9303
msgid "There are currently a few noteworthy limitations to @code{elm-build-system}:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9314
msgid "The build system is focused on @dfn{packages} in the Elm sense of the word: Elm @dfn{projects} which declare @code{@{ \"type\": \"package\" @}} in their @file{elm.json} files.  Using @code{elm-build-system} to build Elm @dfn{applications} (which declare @code{@{ \"type\": \"application\" @}}) is possible, but requires ad-hoc modifications to the build phases.  For examples, see the definitions of the @code{elm-todomvc} example application and the @code{elm} package itself (because the front-end for the @samp{elm reactor} command is an Elm application)."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9326
msgid "Elm supports multiple versions of a package coexisting simultaneously under @env{ELM_HOME}, but this does not yet work well with @code{elm-build-system}.  This limitation primarily affects Elm applications, because they specify exact versions for their dependencies, whereas Elm packages specify supported version ranges.  As a workaround, the example applications mentioned above use the @code{patch-application-dependencies} procedure provided by @code{(guix build elm-build-system)} to rewrite their @file{elm.json} files to refer to the package versions actually present in the build environment.  Alternatively, Guix package transformations (@pxref{Defining Package Variants}) could be used to rewrite an application's entire dependency graph."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9332
msgid "We are not yet able to run tests for Elm projects because neither @url{https://github.com/mpizenberg/elm-test-rs, @command{elm-test-rs}} nor the Node.js-based @url{https://github.com/rtfeldman/node-test-runner, @command{elm-test}} runner has been packaged for Guix yet."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9335
#, fuzzy, no-wrap
#| msgid "guix system vm"
msgid "go-build-system"
msgstr "guix system vm"

#. type: defvar
#: guix-git/doc/guix.texi:9340
msgid "This variable is exported by @code{(guix build-system go)}.  It implements a build procedure for Go packages using the standard @url{https://golang.org/cmd/go/#hdr-Compile_packages_and_dependencies, Go build mechanisms}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9351
msgid "The user is expected to provide a value for the key @code{#:import-path} and, in some cases, @code{#:unpack-path}.  The @url{https://golang.org/doc/code.html#ImportPaths, import path} corresponds to the file system path expected by the package's build scripts and any referring packages, and provides a unique way to refer to a Go package.  It is typically based on a combination of the package source code's remote URI and file system hierarchy structure.  In some cases, you will need to unpack the package's source code to a different directory structure than the one indicated by the import path, and @code{#:unpack-path} should be used in such cases."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9356
msgid "Packages that provide Go libraries should install their source code into the built output.  The key @code{#:install-source?}, which defaults to @code{#t}, controls whether or not the source code is installed.  It can be set to @code{#f} for packages that only provide executable files."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9363
msgid "Packages can be cross-built, and if a specific architecture or operating system is desired then the keywords @code{#:goarch} and @code{#:goos} can be used to force the package to be built for that architecture and operating system.  The combinations known to Go can be found @url{https://golang.org/doc/install/source#environment, in their documentation}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9366
msgid "The key @code{#:go} can be used to specify the Go compiler package with which to build the package."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9369
#, no-wrap
msgid "glib-or-gtk-build-system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9372
msgid "This variable is exported by @code{(guix build-system glib-or-gtk)}.  It is intended for use with packages making use of GLib or GTK+."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9375
msgid "This build system adds the following two phases to the ones defined by @code{gnu-build-system}:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9377 guix-git/doc/guix.texi:9942
#, no-wrap
msgid "glib-or-gtk-wrap"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9384
msgid "The phase @code{glib-or-gtk-wrap} ensures that programs in @file{bin/} are able to find GLib ``schemas'' and @uref{https://developer.gnome.org/gtk3/stable/gtk-running.html, GTK+ modules}.  This is achieved by wrapping the programs in launch scripts that appropriately set the @env{XDG_DATA_DIRS} and @env{GTK_PATH} environment variables."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9391
msgid "It is possible to exclude specific package outputs from that wrapping process by listing their names in the @code{#:glib-or-gtk-wrap-excluded-outputs} parameter.  This is useful when an output is known not to contain any GLib or GTK+ binaries, and where wrapping would gratuitously add a dependency of that output on GLib and GTK+."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9392 guix-git/doc/guix.texi:9946
#, no-wrap
msgid "glib-or-gtk-compile-schemas"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9400
msgid "The phase @code{glib-or-gtk-compile-schemas} makes sure that all @uref{https://developer.gnome.org/gio/stable/glib-compile-schemas.html, GSettings schemas} of GLib are compiled.  Compilation is performed by the @command{glib-compile-schemas} program.  It is provided by the package @code{glib:bin} which is automatically imported by the build system.  The @code{glib} package providing @command{glib-compile-schemas} can be specified with the @code{#:glib} parameter."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9403
msgid "Both phases are executed after the @code{install} phase."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9405
#, fuzzy, no-wrap
#| msgid "guix system vm"
msgid "guile-build-system"
msgstr "guix system vm"

#. type: defvar
#: guix-git/doc/guix.texi:9412
msgid "This build system is for Guile packages that consist exclusively of Scheme code and that are so lean that they don't even have a makefile, let alone a @file{configure} script.  It compiles Scheme code using @command{guild compile} (@pxref{Compilation,,, guile, GNU Guile Reference Manual}) and installs the @file{.scm} and @file{.go} files in the right place.  It also installs documentation."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9415
msgid "This build system supports cross-compilation by using the @option{--target} option of @samp{guild compile}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9418
msgid "Packages built with @code{guile-build-system} must provide a Guile package in their @code{native-inputs} field."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9420
#, no-wrap
msgid "julia-build-system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9427
msgid "This variable is exported by @code{(guix build-system julia)}.  It implements the build procedure used by @uref{https://julialang.org/, julia} packages, which essentially is similar to running @samp{julia -e 'using Pkg; Pkg.add(package)'} in an environment where @env{JULIA_LOAD_PATH} contains the paths to all Julia package inputs.  Tests are run by calling @code{/test/runtests.jl}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9432
msgid "The Julia package name and uuid is read from the file @file{Project.toml}.  These values can be overridden by passing the argument @code{#:julia-package-name} (which must be correctly capitalized) or @code{#:julia-package-uuid}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9436
msgid "Julia packages usually manage their binary dependencies via @code{JLLWrappers.jl}, a Julia package that creates a module (named after the wrapped library followed by @code{_jll.jl}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9441
msgid "To add the binary path @code{_jll.jl} packages, you need to patch the files under @file{src/wrappers/}, replacing the call to the macro @code{JLLWrappers.@@generate_wrapper_header}, adding as a second argument containing the store path the binary."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9445
msgid "As an example, in the MbedTLS Julia package, we add a build phase (@pxref{Build Phases}) to insert the absolute file name of the wrapped MbedTLS package:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:9457
#, no-wrap
msgid ""
"(add-after 'unpack 'override-binary-path\n"
"  (lambda* (#:key inputs #:allow-other-keys)\n"
"    (for-each (lambda (wrapper)\n"
"                (substitute* wrapper\n"
"                  ((\"generate_wrapper_header.*\")\n"
"                   (string-append\n"
"                    \"generate_wrapper_header(\\\"MbedTLS\\\", \\\"\"\n"
"                    (assoc-ref inputs \"mbedtls-apache\") \"\\\")\\n\"))))\n"
"              ;; There's a Julia file for each platform, override them all.\n"
"              (find-files \"src/wrappers/\" \"\\\\.jl$\"))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9463
msgid "Some older packages that aren't using @file{Project.toml} yet, will require this file to be created, too.  It is internally done if the arguments @code{#:julia-package-name} and @code{#:julia-package-uuid} are provided."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9465
#, fuzzy, no-wrap
msgid "maven-build-system"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:9472
msgid "This variable is exported by @code{(guix build-system maven)}.  It implements a build procedure for @uref{https://maven.apache.org, Maven} packages.  Maven is a dependency and lifecycle management tool for Java.  A user of Maven specifies dependencies and plugins in a @file{pom.xml} file that Maven reads.  When Maven does not have one of the dependencies or plugins in its repository, it will download them and use them to build the package."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9482
msgid "The maven build system ensures that maven will not try to download any dependency by running in offline mode.  Maven will fail if a dependency is missing.  Before running Maven, the @file{pom.xml} (and subprojects) are modified to specify the version of dependencies and plugins that match the versions available in the guix build environment.  Dependencies and plugins must be installed in the fake maven repository at @file{lib/m2}, and are symlinked into a proper repository before maven is run.  Maven is instructed to use that repository for the build and installs built artifacts there.  Changed files are copied to the @file{lib/m2} directory of the package output."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9485
msgid "You can specify a @file{pom.xml} file with the @code{#:pom-file} argument, or let the build system use the default @file{pom.xml} file in the sources."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9491
msgid "In case you need to specify a dependency's version manually, you can use the @code{#:local-packages} argument.  It takes an association list where the key is the groupId of the package and its value is an association list where the key is the artifactId of the package and its value is the version you want to override in the @file{pom.xml}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9497
msgid "Some packages use dependencies or plugins that are not useful at runtime nor at build time in Guix.  You can alter the @file{pom.xml} file to remove them using the @code{#:exclude} argument.  Its value is an association list where the key is the groupId of the plugin or dependency you want to remove, and the value is a list of artifactId you want to remove."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9500
msgid "You can override the default @code{jdk} and @code{maven} packages with the corresponding argument, @code{#:jdk} and @code{#:maven}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9505
msgid "The @code{#:maven-plugins} argument is a list of maven plugins used during the build, with the same format as the @code{inputs} fields of the package declaration.  Its default value is @code{(default-maven-plugins)} which is also exported."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9507
#, fuzzy, no-wrap
msgid "minetest-mod-build-system"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:9513
msgid "This variable is exported by @code{(guix build-system minetest)}.  It implements a build procedure for @uref{https://www.minetest.net, Minetest} mods, which consists of copying Lua code, images and other resources to the location Minetest searches for mods.  The build system also minimises PNG images and verifies that Minetest can load the mod without errors."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9515
#, no-wrap
msgid "minify-build-system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9518
msgid "This variable is exported by @code{(guix build-system minify)}.  It implements a minification procedure for simple JavaScript packages."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9524
msgid "It adds @code{uglify-js} to the set of inputs and uses it to compress all JavaScript files in the @file{src} directory.  A different minifier package can be specified with the @code{#:uglify-js} parameter, but it is expected that the package writes the minified code to the standard output."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9528
msgid "When the input JavaScript files are not all located in the @file{src} directory, the parameter @code{#:javascript-files} can be used to specify a list of file names to feed to the minifier."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9530
#, fuzzy, no-wrap
#| msgid "guix system vm"
msgid "mozilla-build-system"
msgstr "guix system vm"

#. type: defvar
#: guix-git/doc/guix.texi:9537
msgid "This variable is exported by @code{(guix build-system mozilla)}.  It sets the @code{--target} and @code{--host} configuration flags to what software developed by Mozilla expects -- due to historical reasons, Mozilla software expects @code{--host} to be the system that is cross-compiled from and @code{--target} to be the system that is cross-compiled to, contrary to the standard Autotools conventions."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9539
#, fuzzy, no-wrap
msgid "ocaml-build-system"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:9545
msgid "This variable is exported by @code{(guix build-system ocaml)}.  It implements a build procedure for @uref{https://ocaml.org, OCaml} packages, which consists of choosing the correct set of commands to run for each package.  OCaml packages can expect many different commands to be run.  This build system will try some of them."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9555
msgid "When the package has a @file{setup.ml} file present at the top-level, it will run @code{ocaml setup.ml -configure}, @code{ocaml setup.ml -build} and @code{ocaml setup.ml -install}.  The build system will assume that this file was generated by @uref{http://oasis.forge.ocamlcore.org/, OASIS} and will take care of setting the prefix and enabling tests if they are not disabled.  You can pass configure and build flags with the @code{#:configure-flags} and @code{#:build-flags}.  The @code{#:test-flags} key can be passed to change the set of flags used to enable tests.  The @code{#:use-make?} key can be used to bypass this system in the build and install phases."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9560
msgid "When the package has a @file{configure} file, it is assumed that it is a hand-made configure script that requires a different argument format than in the @code{gnu-build-system}.  You can add more flags with the @code{#:configure-flags} key."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9564
msgid "When the package has a @file{Makefile} file (or @code{#:use-make?} is @code{#t}), it will be used and more flags can be passed to the build and install phases with the @code{#:make-flags} key."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9572
msgid "Finally, some packages do not have these files and use a somewhat standard location for its build system.  In that case, the build system will run @code{ocaml pkg/pkg.ml} or @code{ocaml pkg/build.ml} and take care of providing the path to the required findlib module.  Additional flags can be passed via the @code{#:build-flags} key.  Install is taken care of by @command{opam-installer}.  In this case, the @code{opam} package must be added to the @code{native-inputs} field of the package definition."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9580
msgid "Note that most OCaml packages assume they will be installed in the same directory as OCaml, which is not what we want in guix.  In particular, they will install @file{.so} files in their module's directory, which is usually fine because it is in the OCaml compiler directory.  In guix though, these libraries cannot be found and we use @env{CAML_LD_LIBRARY_PATH}.  This variable points to @file{lib/ocaml/site-lib/stubslibs} and this is where @file{.so} libraries should be installed."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9582
#, no-wrap
msgid "python-build-system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9587
msgid "This variable is exported by @code{(guix build-system python)}.  It implements the more or less standard build procedure used by Python packages, which consists in running @code{python setup.py build} and then @code{python setup.py install --prefix=/gnu/store/@dots{}}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9592
msgid "For packages that install stand-alone Python programs under @code{bin/}, it takes care of wrapping these programs so that their @env{GUIX_PYTHONPATH} environment variable points to all the Python libraries they depend on."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9598
msgid "Which Python package is used to perform the build can be specified with the @code{#:python} parameter.  This is a useful way to force a package to be built for a specific version of the Python interpreter, which might be necessary if the package is only compatible with a single interpreter version."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9603
msgid "By default guix calls @code{setup.py} under control of @code{setuptools}, much like @command{pip} does.  Some packages are not compatible with setuptools (and pip), thus you can disable this by setting the @code{#:use-setuptools?} parameter to @code{#f}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9609
msgid "If a @code{\"python\"} output is available, the package is installed into it instead of the default @code{\"out\"} output. This is useful for packages that include a Python package as only a part of the software, and thus want to combine the phases of @code{python-build-system} with another build system.  Python bindings are a common usecase."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9611
#, fuzzy, no-wrap
msgid "pyproject-build-system"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:9616
msgid "This is a variable exported by @code{guix build-system pyproject}.  It is based on @var{python-build-system}, and adds support for @file{pyproject.toml} and @url{https://peps.python.org/pep-0517/, PEP 517}.  It also supports a variety of build backends and test frameworks."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9618
msgid "The API is slightly different from @var{python-build-system}:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9621
msgid "@code{#:use-setuptools?} and @code{#:test-target} is removed."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9624
msgid "@code{#:build-backend} is added.  It defaults to @code{#false} and will try to guess the appropriate backend based on @file{pyproject.toml}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9627
msgid "@code{#:test-backend} is added.  It defaults to @code{#false} and will guess an appropriate test backend based on what is available in package inputs."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:9631
msgid "@code{#:test-flags} is added.  The default is @code{'()}.  These flags are passed as arguments to the test command.  Note that flags for verbose output is always enabled on supported backends."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9637
msgid "It is considered ``experimental'' in that the implementation details are not set in stone yet, however users are encouraged to try it for new Python projects (even those using @file{setup.py}).  The API is subject to change, but any breaking changes in the Guix channel will be dealt with."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9640
msgid "Eventually this build system will be deprecated and merged back into @var{python-build-system}, probably some time in 2024."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9642
#, fuzzy, no-wrap
#| msgid "operating-system"
msgid "perl-build-system"
msgstr "sistema operacional"

#. type: defvar
#: guix-git/doc/guix.texi:9654
msgid "This variable is exported by @code{(guix build-system perl)}.  It implements the standard build procedure for Perl packages, which either consists in running @code{perl Build.PL --prefix=/gnu/store/@dots{}}, followed by @code{Build} and @code{Build install}; or in running @code{perl Makefile.PL PREFIX=/gnu/store/@dots{}}, followed by @code{make} and @code{make install}, depending on which of @code{Build.PL} or @code{Makefile.PL} is present in the package distribution.  Preference is given to the former if both @code{Build.PL} and @code{Makefile.PL} exist in the package distribution.  This preference can be reversed by specifying @code{#t} for the @code{#:make-maker?} parameter."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9658
msgid "The initial @code{perl Makefile.PL} or @code{perl Build.PL} invocation passes flags specified by the @code{#:make-maker-flags} or @code{#:module-build-flags} parameter, respectively."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9660
msgid "Which Perl package is used can be specified with @code{#:perl}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9662
#, no-wrap
msgid "renpy-build-system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9666
msgid "This variable is exported by @code{(guix build-system renpy)}.  It implements the more or less standard build procedure used by Ren'py games, which consists of loading @code{#:game} once, thereby creating bytecode for it."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9669
msgid "It further creates a wrapper script in @code{bin/} and a desktop entry in @code{share/applications}, both of which can be used to launch the game."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9673
msgid "Which Ren'py package is used can be specified with @code{#:renpy}.  Games can also be installed in outputs other than ``out'' by using @code{#:output}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9675
#, fuzzy, no-wrap
#| msgid "Build Systems"
msgid "qt-build-system"
msgstr "Sistemas de compilação"

#. type: defvar
#: guix-git/doc/guix.texi:9678
msgid "This variable is exported by @code{(guix build-system qt)}.  It is intended for use with applications using Qt or KDE."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9681
msgid "This build system adds the following two phases to the ones defined by @code{cmake-build-system}:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9683
#, no-wrap
msgid "check-setup"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9690
msgid "The phase @code{check-setup} prepares the environment for running the checks as commonly used by Qt test programs.  For now this only sets some environment variables: @code{QT_QPA_PLATFORM=offscreen}, @code{DBUS_FATAL_WARNINGS=0} and @code{CTEST_OUTPUT_ON_FAILURE=1}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9693
msgid "This phase is added before the @code{check} phase.  It's a separate phase to ease adjusting if necessary."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9694
#, no-wrap
msgid "qt-wrap"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9700
msgid "The phase @code{qt-wrap} searches for Qt5 plugin paths, QML paths and some XDG in the inputs and output.  In case some path is found, all programs in the output's @file{bin/}, @file{sbin/}, @file{libexec/} and @file{lib/libexec/} directories are wrapped in scripts defining the necessary environment variables."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9706
msgid "It is possible to exclude specific package outputs from that wrapping process by listing their names in the @code{#:qt-wrap-excluded-outputs} parameter.  This is useful when an output is known not to contain any Qt binaries, and where wrapping would gratuitously add a dependency of that output on Qt, KDE, or such."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9708
msgid "This phase is added after the @code{install} phase."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9711
#, fuzzy, no-wrap
#| msgid "Build Systems"
msgid "r-build-system"
msgstr "Sistemas de compilação"

#. type: defvar
#: guix-git/doc/guix.texi:9719
msgid "This variable is exported by @code{(guix build-system r)}.  It implements the build procedure used by @uref{https://r-project.org, R} packages, which essentially is little more than running @samp{R CMD INSTALL --library=/gnu/store/@dots{}} in an environment where @env{R_LIBS_SITE} contains the paths to all R package inputs.  Tests are run after installation using the R function @code{tools::testInstalledPackage}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9721
#, no-wrap
msgid "rakudo-build-system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9729
msgid "This variable is exported by @code{(guix build-system rakudo)}.  It implements the build procedure used by @uref{https://rakudo.org/, Rakudo} for @uref{https://perl6.org/, Perl6} packages.  It installs the package to @code{/gnu/store/@dots{}/NAME-VERSION/share/perl6} and installs the binaries, library files and the resources, as well as wrap the files under the @code{bin/} directory.  Tests can be skipped by passing @code{#f} to the @code{tests?} parameter."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9737
msgid "Which rakudo package is used can be specified with @code{rakudo}.  Which perl6-tap-harness package used for the tests can be specified with @code{#:prove6} or removed by passing @code{#f} to the @code{with-prove6?} parameter.  Which perl6-zef package used for tests and installing can be specified with @code{#:zef} or removed by passing @code{#f} to the @code{with-zef?} parameter."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9739
#, fuzzy, no-wrap
msgid "rebar-build-system"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:9743
msgid "This variable is exported by @code{(guix build-system rebar)}.  It implements a build procedure around @uref{https://rebar3.org,rebar3}, a build system for programs written in the Erlang language."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9747
msgid "It adds both @code{rebar3} and the @code{erlang} to the set of inputs.  Different packages can be specified with the @code{#:rebar} and @code{#:erlang} parameters, respectively."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9750
msgid "This build system is based on @code{gnu-build-system}, but with the following phases changed:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9753 guix-git/doc/guix.texi:10055
#, no-wrap
msgid "unpack"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9759
msgid "This phase, after unpacking the source like the @code{gnu-build-system} does, checks for a file @code{contents.tar.gz} at the top-level of the source.  If this file exists, it will be unpacked, too.  This eases handling of package hosted at @uref{https://hex.pm/}, the Erlang and Elixir package repository."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9760
#, fuzzy, no-wrap
#| msgid "Bootstrapping"
msgid "bootstrap"
msgstr "Inicializando"

#. type: item
#: guix-git/doc/guix.texi:9761 guix-git/doc/guix.texi:9910
#: guix-git/doc/guix.texi:9961 guix-git/doc/guix.texi:10065
#, no-wrap
msgid "configure"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9764
msgid "There are no @code{bootstrap} and @code{configure} phase because erlang packages typically don’t need to be configured."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9768
msgid "This phase runs @code{rebar3 compile} with the flags listed in @code{#:rebar-flags}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9774
msgid "Unless @code{#:tests? #f} is passed, this phase runs @code{rebar3 eunit}, or some other target specified with @code{#:test-target}, with the flags listed in @code{#:rebar-flags},"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9778
msgid "This installs the files created in the @i{default} profile, or some other profile specified with @code{#:install-profile}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9782
#, no-wrap
msgid "texlive-build-system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9787
msgid "This variable is exported by @code{(guix build-system texlive)}.  It is used to build TeX packages in batch mode with a specified engine.  The build system sets the @env{TEXINPUTS} variable to find all TeX source files in the inputs."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9796
msgid "By default it runs @code{luatex} on all files ending on @code{ins}.  A different engine and format can be specified with the @code{#:tex-format} argument.  Different build targets can be specified with the @code{#:build-targets} argument, which expects a list of file names.  The build system adds only @code{texlive-bin} and @code{texlive-latex-base} (both from @code{(gnu packages tex}) to the inputs.  Both can be overridden with the arguments @code{#:texlive-bin} and @code{#:texlive-latex-base}, respectively."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9799
msgid "The @code{#:tex-directory} parameter tells the build system where to install the built files under the texmf tree."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9801
#, fuzzy, no-wrap
#| msgid "Build Systems"
msgid "ruby-build-system"
msgstr "Sistemas de compilação"

#. type: defvar
#: guix-git/doc/guix.texi:9805
msgid "This variable is exported by @code{(guix build-system ruby)}.  It implements the RubyGems build procedure used by Ruby packages, which involves running @code{gem build} followed by @code{gem install}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9813
msgid "The @code{source} field of a package that uses this build system typically references a gem archive, since this is the format that Ruby developers use when releasing their software.  The build system unpacks the gem archive, potentially patches the source, runs the test suite, repackages the gem, and installs it.  Additionally, directories and tarballs may be referenced to allow building unreleased gems from Git or a traditional source release tarball."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9817
msgid "Which Ruby package is used can be specified with the @code{#:ruby} parameter.  A list of additional flags to be passed to the @command{gem} command can be specified with the @code{#:gem-flags} parameter."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9819
#, fuzzy, no-wrap
#| msgid "Build Systems"
msgid "waf-build-system"
msgstr "Sistemas de compilação"

#. type: defvar
#: guix-git/doc/guix.texi:9825
msgid "This variable is exported by @code{(guix build-system waf)}.  It implements a build procedure around the @code{waf} script.  The common phases---@code{configure}, @code{build}, and @code{install}---are implemented by passing their names as arguments to the @code{waf} script."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9829
msgid "The @code{waf} script is executed by the Python interpreter.  Which Python package is used to run the script can be specified with the @code{#:python} parameter."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9831
#, no-wrap
msgid "scons-build-system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9837
msgid "This variable is exported by @code{(guix build-system scons)}.  It implements the build procedure used by the SCons software construction tool.  This build system runs @code{scons} to build the package, @code{scons test} to run tests, and then @code{scons install} to install the package."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9844
msgid "Additional flags to be passed to @code{scons} can be specified with the @code{#:scons-flags} parameter.  The default build and install targets can be overridden with @code{#:build-targets} and @code{#:install-targets} respectively.  The version of Python used to run SCons can be specified by selecting the appropriate SCons package with the @code{#:scons} parameter."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9846
#, fuzzy, no-wrap
msgid "haskell-build-system"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:9860
msgid "This variable is exported by @code{(guix build-system haskell)}.  It implements the Cabal build procedure used by Haskell packages, which involves running @code{runhaskell Setup.hs configure --prefix=/gnu/store/@dots{}} and @code{runhaskell Setup.hs build}.  Instead of installing the package by running @code{runhaskell Setup.hs install}, to avoid trying to register libraries in the read-only compiler store directory, the build system uses @code{runhaskell Setup.hs copy}, followed by @code{runhaskell Setup.hs register}.  In addition, the build system generates the package documentation by running @code{runhaskell Setup.hs haddock}, unless @code{#:haddock? #f} is passed.  Optional Haddock parameters can be passed with the help of the @code{#:haddock-flags} parameter.  If the file @code{Setup.hs} is not found, the build system looks for @code{Setup.lhs} instead."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9863
msgid "Which Haskell compiler is used can be specified with the @code{#:haskell} parameter which defaults to @code{ghc}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9865
#, fuzzy, no-wrap
#| msgid "Build Systems"
msgid "dub-build-system"
msgstr "Sistemas de compilação"

#. type: defvar
#: guix-git/doc/guix.texi:9870
msgid "This variable is exported by @code{(guix build-system dub)}.  It implements the Dub build procedure used by D packages, which involves running @code{dub build} and @code{dub run}.  Installation is done by copying the files manually."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9873
msgid "Which D compiler is used can be specified with the @code{#:ldc} parameter which defaults to @code{ldc}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9876
#, no-wrap
msgid "emacs-build-system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9880
msgid "This variable is exported by @code{(guix build-system emacs)}.  It implements an installation procedure similar to the packaging system of Emacs itself (@pxref{Packages,,, emacs, The GNU Emacs Manual})."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9886
msgid "It first creates the @code{@code{package}-autoloads.el} file, then it byte compiles all Emacs Lisp files.  Differently from the Emacs packaging system, the Info documentation files are moved to the standard documentation directory and the @file{dir} file is deleted.  The Elisp package files are installed directly under @file{share/emacs/site-lisp}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9888
#, fuzzy, no-wrap
#| msgid "operating-system"
msgid "font-build-system"
msgstr "sistema operacional"

#. type: defvar
#: guix-git/doc/guix.texi:9894
msgid "This variable is exported by @code{(guix build-system font)}.  It implements an installation procedure for font packages where upstream provides pre-compiled TrueType, OpenType, etc.@: font files that merely need to be copied into place.  It copies font files to standard locations in the output directory."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9896
#, no-wrap
msgid "meson-build-system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9900
msgid "This variable is exported by @code{(guix build-system meson)}.  It implements the build procedure for packages that use @url{https://mesonbuild.com, Meson} as their build system."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9904
msgid "It adds both Meson and @uref{https://ninja-build.org/, Ninja} to the set of inputs, and they can be changed with the parameters @code{#:meson} and @code{#:ninja} if needed."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9907
msgid "This build system is an extension of @code{gnu-build-system}, but with the following phases changed to some specific for Meson:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9915
msgid "The phase runs @code{meson} with the flags specified in @code{#:configure-flags}.  The flag @option{--buildtype} is always set to @code{debugoptimized} unless something else is specified in @code{#:build-type}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9919
msgid "The phase runs @code{ninja} to build the package in parallel by default, but this can be changed with @code{#:parallel-build?}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9925
msgid "The phase runs @samp{meson test} with a base set of options that cannot be overridden.  This base set of options can be extended via the @code{#:test-options} argument, for example to select or skip a specific test suite."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9928
msgid "The phase runs @code{ninja install} and can not be changed."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9931
msgid "Apart from that, the build system also adds the following phases:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:9934
#, no-wrap
msgid "fix-runpath"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9941
msgid "This phase ensures that all binaries can find the libraries they need.  It searches for required libraries in subdirectories of the package being built, and adds those to @code{RUNPATH} where needed.  It also removes references to libraries left over from the build phase by @code{meson}, such as test dependencies, that aren't actually required for the program to run."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9945 guix-git/doc/guix.texi:9949
msgid "This phase is the phase provided by @code{glib-or-gtk-build-system}, and it is not enabled by default.  It can be enabled with @code{#:glib-or-gtk?}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9952
#, no-wrap
msgid "linux-module-build-system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9954
msgid "@code{linux-module-build-system} allows building Linux kernel modules."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9958
msgid "This build system is an extension of @code{gnu-build-system}, but with the following phases changed:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9964
msgid "This phase configures the environment so that the Linux kernel's Makefile can be used to build the external kernel module."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9968
msgid "This phase uses the Linux kernel's Makefile in order to build the external kernel module."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:9972
msgid "This phase uses the Linux kernel's Makefile in order to install the external kernel module."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9977
msgid "It is possible and useful to specify the Linux kernel to use for building the module (in the @code{arguments} form of a package using the @code{linux-module-build-system}, use the key @code{#:linux} to specify it)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9979
#, fuzzy, no-wrap
#| msgid "operating-system"
msgid "node-build-system"
msgstr "sistema operacional"

#. type: defvar
#: guix-git/doc/guix.texi:9984
msgid "This variable is exported by @code{(guix build-system node)}.  It implements the build procedure used by @uref{https://nodejs.org, Node.js}, which implements an approximation of the @code{npm install} command, followed by an @code{npm test} command."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9988
msgid "Which Node.js package is used to interpret the @code{npm} commands can be specified with the @code{#:node} parameter which defaults to @code{node}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:9990
#, fuzzy, no-wrap
msgid "tree-sitter-build-system"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:9998
msgid "This variable is exported by @code{(guix build-system tree-sitter)}.  It implements procedures to compile grammars for the @url{https://tree-sitter.github.io/tree-sitter/, Tree-sitter} parsing library.  It essentially runs @code{tree-sitter generate} to translate @code{grammar.js} grammars to JSON and then to C.  Which it then compiles to native code."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:10002
msgid "Tree-sitter packages may support multiple grammars, so this build system supports a @code{#:grammar-directories} keyword to specify a list of locations where a @code{grammar.js} file may be found."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:10006
msgid "Grammars sometimes depend on each other, such as C++ depending on C and TypeScript depending on JavaScript.  You may use inputs to declare such dependencies."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10013
msgid "Lastly, for packages that do not need anything as sophisticated, a ``trivial'' build system is provided.  It is trivial in the sense that it provides basically no support: it does not pull any implicit inputs, and does not have a notion of build phases."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:10014
#, fuzzy, no-wrap
msgid "trivial-build-system"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:10016
msgid "This variable is exported by @code{(guix build-system trivial)}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:10021
msgid "This build system requires a @code{#:builder} argument.  This argument must be a Scheme expression that builds the package output(s)---as with @code{build-expression->derivation} (@pxref{Derivations, @code{build-expression->derivation}})."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:10023
#, fuzzy, no-wrap
msgid "channel-build-system"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:10025
msgid "This variable is exported by @code{(guix build-system channel)}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:10031
msgid "This build system is meant primarily for internal use.  A package using this build system must have a channel specification as its @code{source} field (@pxref{Channels}); alternatively, its source can be a directory name, in which case an additional @code{#:commit} argument must be supplied to specify the commit being built (a hexadecimal string)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:10034
msgid "The resulting package is a Guix instance of the given channel, similar to how @command{guix time-machine} would build it."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:10039
#, no-wrap
msgid "build phases, for packages"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10045
msgid "Almost all package build systems implement a notion @dfn{build phases}: a sequence of actions that the build system executes, when you build the package, leading to the installed byproducts in the store.  A notable exception is the ``bare-bones'' @code{trivial-build-system} (@pxref{Build Systems})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10049
msgid "As discussed in the previous section, those build systems provide a standard list of phases.  For @code{gnu-build-system}, the main build phases are the following:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:10051
#, fuzzy, no-wrap
#| msgid "--search-paths"
msgid "set-paths"
msgstr "--search-paths"

#. type: table
#: guix-git/doc/guix.texi:10054
msgid "Define search path environment variables for all the input packages, including @env{PATH} (@pxref{Search Paths})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10059
msgid "Unpack the source tarball, and change the current directory to the extracted source tree.  If the source is actually a directory, copy it to the build tree, and enter that directory."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:10060
#, no-wrap
msgid "patch-source-shebangs"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10064
msgid "Patch shebangs encountered in source files so they refer to the right store file names.  For instance, this changes @code{#!/bin/sh} to @code{#!/gnu/store/@dots{}-bash-4.3/bin/sh}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10069
msgid "Run the @file{configure} script with a number of default options, such as @option{--prefix=/gnu/store/@dots{}}, as well as the options specified by the @code{#:configure-flags} argument."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10074
msgid "Run @code{make} with the list of flags specified with @code{#:make-flags}.  If the @code{#:parallel-build?} argument is true (the default), build with @code{make -j}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10080
msgid "Run @code{make check}, or some other target specified with @code{#:test-target}, unless @code{#:tests? #f} is passed.  If the @code{#:parallel-tests?} argument is true (the default), run @code{make check -j}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10083
msgid "Run @code{make install} with the flags listed in @code{#:make-flags}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:10084
#, no-wrap
msgid "patch-shebangs"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10086
msgid "Patch shebangs on the installed executable files."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:10087
#, no-wrap
msgid "strip"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10091
msgid "Strip debugging symbols from ELF files (unless @code{#:strip-binaries?} is false), copying them to the @code{debug} output when available (@pxref{Installing Debugging Files})."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:10094
msgid "phase-validate-runpath"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:10094
#, no-wrap
msgid "validate-runpath"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10097
msgid "Validate the @code{RUNPATH} of ELF binaries, unless @code{#:validate-runpath?} is false (@pxref{Build Systems})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10105
msgid "This validation step consists in making sure that all the shared libraries needed by an ELF binary, which are listed as @code{DT_NEEDED} entries in its @code{PT_DYNAMIC} segment, appear in the @code{DT_RUNPATH} entry of that binary.  In other words, it ensures that running or using those binaries will not result in a ``file not found'' error at run time.  @xref{Options, @option{-rpath},, ld, The GNU Linker}, for more information on @code{RUNPATH}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10115
msgid "Other build systems have similar phases, with some variations.  For example, @code{cmake-build-system} has same-named phases but its @code{configure} phases runs @code{cmake} instead of @code{./configure}.  Others, such as @code{python-build-system}, have a wholly different list of standard phases.  All this code runs on the @dfn{build side}: it is evaluated when you actually build the package, in a dedicated build process spawned by the build daemon (@pxref{Invoking guix-daemon})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10122
msgid "Build phases are represented as association lists or ``alists'' (@pxref{Association Lists,,, guile, GNU Guile Reference Manual}) where each key is a symbol for the name of the phase and the associated value is a procedure that accepts an arbitrary number of arguments.  By convention, those procedures receive information about the build in the form of @dfn{keyword parameters}, which they can use or ignore."
msgstr ""

#. type: vindex
#: guix-git/doc/guix.texi:10123
#, no-wrap
msgid "%standard-phases"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10129
msgid "For example, here is how @code{(guix build gnu-build-system)} defines @code{%standard-phases}, the variable holding its alist of build phases@footnote{We present a simplified view of those build phases, but do take a look at @code{(guix build gnu-build-system)} to see all the details!}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10132
#, no-wrap
msgid ""
";; The build phases of 'gnu-build-system'.\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10136
#, no-wrap
msgid ""
"(define* (unpack #:key source #:allow-other-keys)\n"
"  ;; Extract the source tarball.\n"
"  (invoke \"tar\" \"xvf\" source))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10142
#, no-wrap
msgid ""
"(define* (configure #:key outputs #:allow-other-keys)\n"
"  ;; Run the 'configure' script.  Install to output \"out\".\n"
"  (let ((out (assoc-ref outputs \"out\")))\n"
"    (invoke \"./configure\"\n"
"            (string-append \"--prefix=\" out))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10146
#, no-wrap
msgid ""
"(define* (build #:allow-other-keys)\n"
"  ;; Compile.\n"
"  (invoke \"make\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10153
#, no-wrap
msgid ""
"(define* (check #:key (test-target \"check\") (tests? #true)\n"
"                #:allow-other-keys)\n"
"  ;; Run the test suite.\n"
"  (if tests?\n"
"      (invoke \"make\" test-target)\n"
"      (display \"test suite not run\\n\")))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10157
#, no-wrap
msgid ""
"(define* (install #:allow-other-keys)\n"
"  ;; Install files to the prefix 'configure' specified.\n"
"  (invoke \"make\" \"install\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10166
#, no-wrap
msgid ""
"(define %standard-phases\n"
"  ;; The list of standard phases (quite a few are omitted\n"
"  ;; for brevity).  Each element is a symbol/procedure pair.\n"
"  (list (cons 'unpack unpack)\n"
"        (cons 'configure configure)\n"
"        (cons 'build build)\n"
"        (cons 'check check)\n"
"        (cons 'install install)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10176
msgid "This shows how @code{%standard-phases} is defined as a list of symbol/procedure pairs (@pxref{Pairs,,, guile, GNU Guile Reference Manual}).  The first pair associates the @code{unpack} procedure with the @code{unpack} symbol---a name; the second pair defines the @code{configure} phase similarly, and so on.  When building a package that uses @code{gnu-build-system} with its default list of phases, those phases are executed sequentially.  You can see the name of each phase started and completed in the build log of packages that you build."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10182
msgid "Let's now look at the procedures themselves.  Each one is defined with @code{define*}: @code{#:key} lists keyword parameters the procedure accepts, possibly with a default value, and @code{#:allow-other-keys} specifies that other keyword parameters are ignored (@pxref{Optional Arguments,,, guile, GNU Guile Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10198
msgid "The @code{unpack} procedure honors the @code{source} parameter, which the build system uses to pass the file name of the source tarball (or version control checkout), and it ignores other parameters.  The @code{configure} phase only cares about the @code{outputs} parameter, an alist mapping package output names to their store file name (@pxref{Packages with Multiple Outputs}).  It extracts the file name of for @code{out}, the default output, and passes it to @command{./configure} as the installation prefix, meaning that @command{make install} will eventually copy all the files in that directory (@pxref{Configuration, configuration and makefile conventions,, standards, GNU Coding Standards}).  @code{build} and @code{install} ignore all their arguments.  @code{check} honors the @code{test-target} argument, which specifies the name of the Makefile target to run tests; it prints a message and skips tests when @code{tests?} is false."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:10199
#, no-wrap
msgid "build phases, customizing"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10208
msgid "The list of phases used for a particular package can be changed with the @code{#:phases} parameter of the build system.  Changing the set of build phases boils down to building a new alist of phases based on the @code{%standard-phases} alist described above.  This can be done with standard alist procedures such as @code{alist-delete} (@pxref{SRFI-1 Association Lists,,, guile, GNU Guile Reference Manual}); however, it is more convenient to do so with @code{modify-phases} (@pxref{Build Utilities, @code{modify-phases}})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10213
msgid "Here is an example of a package definition that removes the @code{configure} phase of @code{%standard-phases} and inserts a new phase before the @code{build} phase, called @code{set-prefix-in-makefile}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10237
#, no-wrap
msgid ""
"(define-public example\n"
"  (package\n"
"    (name \"example\")\n"
"    ;; other fields omitted\n"
"    (build-system gnu-build-system)\n"
"    (arguments\n"
"     (list\n"
"      #:phases\n"
"      #~(modify-phases %standard-phases\n"
"          (delete 'configure)\n"
"          (add-before 'build 'set-prefix-in-makefile\n"
"            (lambda* (#:key inputs #:allow-other-keys)\n"
"              ;; Modify the makefile so that its\n"
"              ;; 'PREFIX' variable points to #$output and\n"
"              ;; 'XMLLINT' points to the correct path.\n"
"              (substitute* \"Makefile\"\n"
"                ((\"PREFIX =.*\")\n"
"                 (string-append \"PREFIX = \" #$output \"\\n\"))\n"
"                ((\"XMLLINT =.*\")\n"
"                 (string-append \"XMLLINT = \"\n"
"                                (search-input-file inputs \"/bin/xmllint\")\n"
"                                \"\\n\"))))))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10246
msgid "The new phase that is inserted is written as an anonymous procedure, introduced with @code{lambda*}; it looks for the @file{xmllint} executable under a @file{/bin} directory among the package's inputs (@pxref{package Reference}).  It also honors the @code{outputs} parameter we have seen before.  @xref{Build Utilities}, for more about the helpers used by this phase, and for more examples of @code{modify-phases}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:10247 guix-git/doc/guix.texi:11600
#, no-wrap
msgid "code staging"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:10248 guix-git/doc/guix.texi:11601
#, no-wrap
msgid "staging, of code"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10255
msgid "Keep in mind that build phases are code evaluated at the time the package is actually built.  This explains why the whole @code{modify-phases} expression above is quoted (it comes after the @code{'} or apostrophe): it is @dfn{staged} for later execution.  @xref{G-Expressions}, for an explanation of code staging and the @dfn{code strata} involved."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10265
msgid "As soon as you start writing non-trivial package definitions (@pxref{Defining Packages}) or other build actions (@pxref{G-Expressions}), you will likely start looking for helpers for ``shell-like'' actions---creating directories, copying and deleting files recursively, manipulating build phases, and so on.  The @code{(guix build utils)} module provides such utility procedures."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10269
msgid "Most build systems load @code{(guix build utils)} (@pxref{Build Systems}).  Thus, when writing custom build phases for your package definitions, you can usually assume those procedures are in scope."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10274
msgid "When writing G-expressions, you can import @code{(guix build utils)} on the ``build side'' using @code{with-imported-modules} and then put it in scope with the @code{use-modules} form (@pxref{Using Guile Modules,,, guile, GNU Guile Reference Manual}):"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10281
#, no-wrap
msgid ""
"(with-imported-modules '((guix build utils))  ;import it\n"
"  (computed-file \"empty-tree\"\n"
"                 #~(begin\n"
"                     ;; Put it in scope.\n"
"                     (use-modules (guix build utils))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10284
#, no-wrap
msgid ""
"                     ;; Happily use its 'mkdir-p' procedure.\n"
"                     (mkdir-p (string-append #$output \"/a/b/c\")))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10288
msgid "The remainder of this section is the reference for most of the utility procedures provided by @code{(guix build utils)}."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:10291
#, no-wrap
msgid "Dealing with Store File Names"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10294
msgid "This section documents procedures that deal with store file names."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10295
#, fuzzy, no-wrap
#| msgid "state directory"
msgid "%store-directory"
msgstr "diretório de estado"

#. type: defun
#: guix-git/doc/guix.texi:10297
msgid "Return the directory name of the store."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10299
#, fuzzy, no-wrap
#| msgid "name"
msgid "store-file-name? file"
msgstr "name"

#. type: defun
#: guix-git/doc/guix.texi:10301
msgid "Return true if @var{file} is in the store."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10303
#, no-wrap
msgid "strip-store-file-name file"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10306
msgid "Strip the @file{/gnu/store} and hash from @var{file}, a store file name.  The result is typically a @code{\"@var{package}-@var{version}\"} string."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10308
#, fuzzy, no-wrap
#| msgid "package version"
msgid "package-name->name+version name"
msgstr "versão de pacote"

#. type: defun
#: guix-git/doc/guix.texi:10313
msgid "Given @var{name}, a package name like @code{\"foo-0.9.1b\"}, return two values: @code{\"foo\"} and @code{\"0.9.1b\"}.  When the version part is unavailable, @var{name} and @code{#f} are returned.  The first hyphen followed by a digit is considered to introduce the version part."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:10315
#, no-wrap
msgid "File Types"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10318
msgid "The procedures below deal with files and file types."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10319
#, fuzzy, no-wrap
#| msgid "state directory"
msgid "directory-exists? dir"
msgstr "diretório de estado"

#. type: defun
#: guix-git/doc/guix.texi:10321
msgid "Return @code{#t} if @var{dir} exists and is a directory."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10323
#, no-wrap
msgid "executable-file? file"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10325
msgid "Return @code{#t} if @var{file} exists and is executable."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10327
#, fuzzy, no-wrap
#| msgid "Invoking guix size"
msgid "symbolic-link? file"
msgstr "Invocando guix size"

#. type: defun
#: guix-git/doc/guix.texi:10329
msgid "Return @code{#t} if @var{file} is a symbolic link (aka. a ``symlink'')."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10331
#, no-wrap
msgid "elf-file? file"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:10332
#, no-wrap
msgid "ar-file? file"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:10333
#, no-wrap
msgid "gzip-file? file"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10336
msgid "Return @code{#t} if @var{file} is, respectively, an ELF file, an @code{ar} archive (such as a @file{.a} static library), or a gzip file."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10338
#, no-wrap
msgid "reset-gzip-timestamp file [#:keep-mtime? #t]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10342
msgid "If @var{file} is a gzip file, reset its embedded timestamp (as with @command{gzip --no-name}) and return true.  Otherwise return @code{#f}.  When @var{keep-mtime?} is true, preserve @var{file}'s modification time."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:10344
#, no-wrap
msgid "File Manipulation"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10351
msgid "The following procedures and macros help create, modify, and delete files.  They provide functionality comparable to common shell utilities such as @command{mkdir -p}, @command{cp -r}, @command{rm -r}, and @command{sed}.  They complement Guile's extensive, but low-level, file system interface (@pxref{POSIX,,, guile, GNU Guile Reference Manual})."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:10352
#, no-wrap
msgid "with-directory-excursion directory body @dots{}"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:10354
msgid "Run @var{body} with @var{directory} as the process's current directory."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:10361
msgid "Essentially, this macro changes the current directory to @var{directory} before evaluating @var{body}, using @code{chdir} (@pxref{Processes,,, guile, GNU Guile Reference Manual}).  It changes back to the initial directory when the dynamic extent of @var{body} is left, be it @i{via} normal procedure return or @i{via} a non-local exit such as an exception."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10363
#, no-wrap
msgid "mkdir-p dir"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10365
msgid "Create directory @var{dir} and all its ancestors."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10367
#, fuzzy, no-wrap
#| msgid "a writable @file{/tmp} directory."
msgid "install-file file directory"
msgstr "um diretório @file{/tmp} com permissão de escrita."

#. type: defun
#: guix-git/doc/guix.texi:10370
msgid "Create @var{directory} if it does not exist and copy @var{file} in there under the same name."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10372
#, no-wrap
msgid "make-file-writable file"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10374
msgid "Make @var{file} writable for its owner."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10376
#, no-wrap
msgid "copy-recursively source destination @"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10385
msgid "[#:log (current-output-port)] [#:follow-symlinks? #f] @ [#:copy-file copy-file] [#:keep-mtime? #f] [#:keep-permissions? #t] Copy @var{source} directory to @var{destination}.  Follow symlinks if @var{follow-symlinks?} is true; otherwise, just preserve them.  Call @var{copy-file} to copy regular files.  When @var{keep-mtime?} is true, keep the modification time of the files in @var{source} on those of @var{destination}.  When @var{keep-permissions?} is true, preserve file permissions.  Write verbose output to the @var{log} port."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10387
#, no-wrap
msgid "delete-file-recursively dir [#:follow-mounts? #f]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10391
msgid "Delete @var{dir} recursively, like @command{rm -rf}, without following symlinks.  Don't follow mount points either, unless @var{follow-mounts?} is true.  Report but ignore errors."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:10393
#, fuzzy, no-wrap
#| msgid "substituter"
msgid "substitute* file @"
msgstr "substituidor"

#. type: defmac
#: guix-git/doc/guix.texi:10398
msgid "((regexp match-var@dots{}) body@dots{}) @dots{} Substitute @var{regexp} in @var{file} by the string returned by @var{body}.  @var{body} is evaluated with each @var{match-var} bound to the corresponding positional regexp sub-expression.  For example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10405
#, no-wrap
msgid ""
"(substitute* file\n"
"  ((\"hello\")\n"
"   \"good morning\\n\")\n"
"  ((\"foo([a-z]+)bar(.*)$\" all letters end)\n"
"   (string-append \"baz\" letters end)))\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:10411
msgid "Here, anytime a line of @var{file} contains @code{hello}, it is replaced by @code{good morning}.  Anytime a line of @var{file} matches the second regexp, @code{all} is bound to the complete match, @code{letters} is bound to the first sub-expression, and @code{end} is bound to the last one."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:10414
msgid "When one of the @var{match-var} is @code{_}, no variable is bound to the corresponding match substring."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:10417
msgid "Alternatively, @var{file} may be a list of file names, in which case they are all subject to the substitutions."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:10422
msgid "Be careful about using @code{$} to match the end of a line; by itself it won't match the terminating newline of a line.  For example, to match a whole line ending with a backslash, one needs a regex like @code{\"(.*)\\\\\\\\\\n$\"}."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:10424
#, no-wrap
msgid "File Search"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:10426
#, no-wrap
msgid "file, searching"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10428
msgid "This section documents procedures to search and filter files."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10429
#, no-wrap
msgid "file-name-predicate regexp"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10432
msgid "Return a predicate that returns true when passed a file name whose base name matches @var{regexp}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10434
#, no-wrap
msgid "find-files dir [pred] @"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10445
msgid "[#:stat lstat] [#:directories? #f] [#:fail-on-error? #f] Return the lexicographically sorted list of files under @var{dir} for which @var{pred} returns true.  @var{pred} is passed two arguments: the absolute file name, and its stat buffer; the default predicate always returns true.  @var{pred} can also be a regular expression, in which case it is equivalent to @code{(file-name-predicate @var{pred})}.  @var{stat} is used to obtain file information; using @code{lstat} means that symlinks are not followed.  If @var{directories?} is true, then directories will also be included.  If @var{fail-on-error?} is true, raise an exception upon error."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10449
msgid "Here are a few examples where we assume that the current directory is the root of the Guix source tree:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10454
#, no-wrap
msgid ""
";; List all the regular files in the current directory.\n"
"(find-files \".\")\n"
"@result{} (\"./.dir-locals.el\" \"./.gitignore\" @dots{})\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10458
#, no-wrap
msgid ""
";; List all the .scm files under gnu/services.\n"
"(find-files \"gnu/services\" \"\\\\.scm$\")\n"
"@result{} (\"gnu/services/admin.scm\" \"gnu/services/audio.scm\" @dots{})\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10462
#, no-wrap
msgid ""
";; List ar files in the current directory.\n"
"(find-files \".\" (lambda (file stat) (ar-file? file)))\n"
"@result{} (\"./libformat.a\" \"./libstore.a\" @dots{})\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10464
#, fuzzy, no-wrap
#| msgid "Setuid Programs"
msgid "which program"
msgstr "Programas setuid"

#. type: defun
#: guix-git/doc/guix.texi:10467
msgid "Return the complete file name for @var{program} as found in @code{$PATH}, or @code{#f} if @var{program} could not be found."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10469
#, no-wrap
msgid "search-input-file inputs name"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:10470
#, no-wrap
msgid "search-input-directory inputs name"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10475
msgid "Return the complete file name for @var{name} as found in @var{inputs}; @code{search-input-file} searches for a regular file and @code{search-input-directory} searches for a directory.  If @var{name} could not be found, an exception is raised."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10479
msgid "Here, @var{inputs} must be an association list like @code{inputs} and @code{native-inputs} as available to build phases (@pxref{Build Phases})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10483
msgid "Here is a (simplified) example of how @code{search-input-file} is used in a build phase of the @code{wireguard-tools} package:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10492
#, no-wrap
msgid ""
"(add-after 'install 'wrap-wg-quick\n"
"  (lambda* (#:key inputs outputs #:allow-other-keys)\n"
"    (let ((coreutils (string-append (assoc-ref inputs \"coreutils\")\n"
"                                    \"/bin\")))\n"
"      (wrap-program (search-input-file outputs \"bin/wg-quick\")\n"
"        #:sh (search-input-file inputs \"bin/bash\")\n"
"        `(\"PATH\" \":\" prefix ,(list coreutils))))))\n"
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:10494
#, fuzzy, no-wrap
#| msgid "Log Rotation"
msgid "Program Invocation"
msgstr "Rotação de log"

#. type: cindex
#: guix-git/doc/guix.texi:10496
#, no-wrap
msgid "program invocation, from Scheme"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:10497
#, no-wrap
msgid "invoking programs, from Scheme"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10501
msgid "You'll find handy procedures to spawn processes in this module, essentially convenient wrappers around Guile's @code{system*} (@pxref{Processes, @code{system*},, guile, GNU Guile Reference Manual})."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10502
#, no-wrap
msgid "invoke program args@dots{}"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10506
msgid "Invoke @var{program} with the given @var{args}.  Raise an @code{&invoke-error} exception if the exit code is non-zero; otherwise return @code{#t}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10510
msgid "The advantage compared to @code{system*} is that you do not need to check the return value.  This reduces boilerplate in shell-script-like snippets for instance in package build phases."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10512
#, no-wrap
msgid "invoke-error? c"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10514
msgid "Return true if @var{c} is an @code{&invoke-error} condition."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10516
#, no-wrap
msgid "invoke-error-program c"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:10517
#, no-wrap
msgid "invoke-error-arguments c"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:10518
#, no-wrap
msgid "invoke-error-exit-status c"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:10519
#, no-wrap
msgid "invoke-error-term-signal c"
msgstr ""

#. type: defunx
#: guix-git/doc/guix.texi:10520
#, no-wrap
msgid "invoke-error-stop-signal c"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10522
msgid "Access specific fields of @var{c}, an @code{&invoke-error} condition."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10524
#, no-wrap
msgid "report-invoke-error c [port]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10527
msgid "Report to @var{port} (by default the current error port) about @var{c}, an @code{&invoke-error} condition, in a human-friendly way."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10529
msgid "Typical usage would look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10533
#, no-wrap
msgid ""
"(use-modules (srfi srfi-34) ;for 'guard'\n"
"             (guix build utils))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10537
#, no-wrap
msgid ""
"(guard (c ((invoke-error? c)\n"
"           (report-invoke-error c)))\n"
"  (invoke \"date\" \"--imaginary-option\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10539
#, no-wrap
msgid "@print{} command \"date\" \"--imaginary-option\" failed with status 1\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10542
#, no-wrap
msgid "invoke/quiet program args@dots{}"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10548
msgid "Invoke @var{program} with @var{args} and capture @var{program}'s standard output and standard error.  If @var{program} succeeds, print nothing and return the unspecified value; otherwise, raise a @code{&message} error condition that includes the status code and the output of @var{program}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10550
msgid "Here's an example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10555
#, no-wrap
msgid ""
"(use-modules (srfi srfi-34) ;for 'guard'\n"
"             (srfi srfi-35) ;for 'message-condition?'\n"
"             (guix build utils))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10560
#, no-wrap
msgid ""
"(guard (c ((message-condition? c)\n"
"           (display (condition-message c))))\n"
"  (invoke/quiet \"date\")  ;all is fine\n"
"  (invoke/quiet \"date\" \"--imaginary-option\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10562
#, no-wrap
msgid ""
"@print{} 'date --imaginary-option' exited with status 1; output follows:\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10565
#, no-wrap
msgid ""
"    date: unrecognized option '--imaginary-option'\n"
"    Try 'date --help' for more information.\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10577
msgid "The @code{(guix build utils)} also contains tools to manipulate build phases as used by build systems (@pxref{Build Systems}).  Build phases are represented as association lists or ``alists'' (@pxref{Association Lists,,, guile, GNU Guile Reference Manual}) where each key is a symbol naming the phase and the associated value is a procedure (@pxref{Build Phases})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10581
msgid "Guile core and the @code{(srfi srfi-1)} module both provide tools to manipulate alists.  The @code{(guix build utils)} module complements those with tools written with build phases in mind."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:10582
#, no-wrap
msgid "build phases, modifying"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:10583
#, no-wrap
msgid "modify-phases phases clause@dots{}"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:10586
msgid "Modify @var{phases} sequentially as per each @var{clause}, which may have one of the following forms:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10592
#, no-wrap
msgid ""
"(delete @var{old-phase-name})\n"
"(replace @var{old-phase-name} @var{new-phase})\n"
"(add-before @var{old-phase-name} @var{new-phase-name} @var{new-phase})\n"
"(add-after @var{old-phase-name} @var{new-phase-name} @var{new-phase})\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:10596
msgid "Where every @var{phase-name} above is an expression evaluating to a symbol, and @var{new-phase} an expression evaluating to a procedure."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10607
msgid "The example below is taken from the definition of the @code{grep} package.  It adds a phase to run after the @code{install} phase, called @code{fix-egrep-and-fgrep}.  That phase is a procedure (@code{lambda*} is for anonymous procedures) that takes a @code{#:outputs} keyword argument and ignores extra keyword arguments (@pxref{Optional Arguments,,, guile, GNU Guile Reference Manual}, for more on @code{lambda*} and optional and keyword arguments.)  The phase uses @code{substitute*} to modify the installed @file{egrep} and @file{fgrep} scripts so that they refer to @code{grep} by its absolute file name:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10620
#, no-wrap
msgid ""
"(modify-phases %standard-phases\n"
"  (add-after 'install 'fix-egrep-and-fgrep\n"
"    ;; Patch 'egrep' and 'fgrep' to execute 'grep' via its\n"
"    ;; absolute file name instead of searching for it in $PATH.\n"
"    (lambda* (#:key outputs #:allow-other-keys)\n"
"      (let* ((out (assoc-ref outputs \"out\"))\n"
"             (bin (string-append out \"/bin\")))\n"
"        (substitute* (list (string-append bin \"/egrep\")\n"
"                           (string-append bin \"/fgrep\"))\n"
"          ((\"^exec grep\")\n"
"           (string-append \"exec \" bin \"/grep\")))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10627
msgid "In the example below, phases are modified in two ways: the standard @code{configure} phase is deleted, presumably because the package does not have a @file{configure} script or anything similar, and the default @code{install} phase is replaced by one that manually copies the executable files to be installed:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10639
#, no-wrap
msgid ""
"(modify-phases %standard-phases\n"
"  (delete 'configure)      ;no 'configure' script\n"
"  (replace 'install\n"
"    (lambda* (#:key outputs #:allow-other-keys)\n"
"      ;; The package's Makefile doesn't provide an \"install\"\n"
"      ;; rule so do it by ourselves.\n"
"      (let ((bin (string-append (assoc-ref outputs \"out\")\n"
"                                \"/bin\")))\n"
"        (install-file \"footswitch\" bin)\n"
"        (install-file \"scythe\" bin)))))\n"
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:10643
#, no-wrap
msgid "Wrappers"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:10645
#, no-wrap
msgid "program wrappers"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:10646
#, no-wrap
msgid "wrapping programs"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10652
msgid "It is not unusual for a command to require certain environment variables to be set for proper functioning, typically search paths (@pxref{Search Paths}).  Failing to do that, the command might fail to find files or other commands it relies on, or it might pick the ``wrong'' ones---depending on the environment in which it runs.  Examples include:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:10656
msgid "a shell script that assumes all the commands it uses are in @env{PATH};"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:10660
msgid "a Guile program that assumes all its modules are in @env{GUILE_LOAD_PATH} and @env{GUILE_LOAD_COMPILED_PATH};"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:10664
msgid "a Qt application that expects to find certain plugins in @env{QT_PLUGIN_PATH}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10672
msgid "For a package writer, the goal is to make sure commands always work the same rather than depend on some external settings.  One way to achieve that is to @dfn{wrap} commands in a thin script that sets those environment variables, thereby ensuring that those run-time dependencies are always found.  The wrapper would be used to set @env{PATH}, @env{GUILE_LOAD_PATH}, or @env{QT_PLUGIN_PATH} in the examples above."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10675
msgid "To ease that task, the @code{(guix build utils)} module provides a couple of helpers to wrap commands."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10676
#, no-wrap
msgid "wrap-program program [#:sh sh] [#:rest variables]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10678
msgid "Make a wrapper for @var{program}.  @var{variables} should look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10681
#, no-wrap
msgid "'(@var{variable} @var{delimiter} @var{position} @var{list-of-directories})\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10685
msgid "where @var{delimiter} is optional.  @code{:} will be used if @var{delimiter} is not given."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10687
msgid "For example, this call:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10693
#, no-wrap
msgid ""
"(wrap-program \"foo\"\n"
"              '(\"PATH\" \":\" = (\"/gnu/.../bar/bin\"))\n"
"              '(\"CERT_PATH\" suffix (\"/gnu/.../baz/certs\"\n"
"                                    \"/qux/certs\")))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10697
msgid "will copy @file{foo} to @file{.foo-real} and create the file @file{foo} with the following contents:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:10703
#, no-wrap
msgid ""
"#!location/of/bin/bash\n"
"export PATH=\"/gnu/.../bar/bin\"\n"
"export CERT_PATH=\"$CERT_PATH$@{CERT_PATH:+:@}/gnu/.../baz/certs:/qux/certs\"\n"
"exec -a $0 location/of/.foo-real \"$@@\"\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10708
msgid "If @var{program} has previously been wrapped by @code{wrap-program}, the wrapper is extended with definitions for @var{variables}.  If it is not, @var{sh} will be used as the interpreter."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10710
#, no-wrap
msgid "wrap-script program [#:guile guile] [#:rest variables]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10717
msgid "Wrap the script @var{program} such that @var{variables} are set first.  The format of @var{variables} is the same as in the @code{wrap-program} procedure.  This procedure differs from @code{wrap-program} in that it does not create a separate shell script.  Instead, @var{program} is modified directly by prepending a Guile script, which is interpreted as a comment in the script's language."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10720
msgid "Special encoding comments as supported by Python are recreated on the second line."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10723
msgid "Note that this procedure can only be used once per file as Guile scripts are not supported."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:10728
#, fuzzy, no-wrap
#| msgid "--search-paths"
msgid "search path"
msgstr "--search-paths"

#. type: Plain text
#: guix-git/doc/guix.texi:10735
msgid "Many programs and libraries look for input data in a @dfn{search path}, a list of directories: shells like Bash look for executables in the command search path, a C compiler looks for @file{.h} files in its header search path, the Python interpreter looks for @file{.py} files in its search path, the spell checker has a search path for dictionaries, and so on."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10743
msgid "Search paths can usually be defined or overridden @i{via} environment variables (@pxref{Environment Variables,,, libc, The GNU C Library Reference Manual}).  For example, the search paths mentioned above can be changed by defining the @env{PATH}, @env{C_INCLUDE_PATH}, @env{PYTHONPATH} (or @env{GUIX_PYTHONPATH}), and @env{DICPATH} environment variables---you know, all these something-PATH variables that you need to get right or things ``won't be found''."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10753
msgid "You may have noticed from the command line that Guix ``knows'' which search path environment variables should be defined, and how.  When you install packages in your default profile, the file @file{~/.guix-profile/etc/profile} is created, which you can ``source'' from the shell to set those variables.  Likewise, if you ask @command{guix shell} to create an environment containing Python and NumPy, a Python library, and if you pass it the @option{--search-paths} option, it will tell you about @env{PATH} and @env{GUIX_PYTHONPATH} (@pxref{Invoking guix shell}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:10758
#, no-wrap
msgid ""
"$ guix shell python python-numpy --pure --search-paths\n"
"export PATH=\"/gnu/store/@dots{}-profile/bin\"\n"
"export GUIX_PYTHONPATH=\"/gnu/store/@dots{}-profile/lib/python3.9/site-packages\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10762
msgid "When you omit @option{--search-paths}, it defines these environment variables right away, such that Python can readily find NumPy:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:10771
#, no-wrap
msgid ""
"$ guix shell python python-numpy -- python3\n"
"Python 3.9.6 (default, Jan  1 1970, 00:00:01)\n"
"[GCC 10.3.0] on linux\n"
"Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n"
">>> import numpy\n"
">>> numpy.version.version\n"
"'1.20.3'\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10776
msgid "For this to work, the definition of the @code{python} package @emph{declares} the search path it cares about and its associated environment variable, @env{GUIX_PYTHONPATH}.  It looks like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10786
#, no-wrap
msgid ""
"(package\n"
"  (name \"python\")\n"
"  (version \"3.9.9\")\n"
"  ;; some fields omitted...\n"
"  (native-search-paths\n"
"   (list (search-path-specification\n"
"          (variable \"GUIX_PYTHONPATH\")\n"
"          (files (list \"lib/python/3.9/site-packages\"))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10801
msgid "What this @code{native-search-paths} field says is that, when the @code{python} package is used, the @env{GUIX_PYTHONPATH} environment variable must be defined to include all the @file{lib/python/3.9/site-packages} sub-directories encountered in its environment.  (The @code{native-} bit means that, if we are in a cross-compilation environment, only native inputs may be added to the search path; @pxref{package Reference, @code{search-paths}}.)  In the NumPy example above, the profile where @code{python} appears contains exactly one such sub-directory, and @env{GUIX_PYTHONPATH} is set to that.  When there are several @file{lib/python/3.9/site-packages}---this is the case in package build environments---they are all added to @env{GUIX_PYTHONPATH}, separated by colons (@code{:})."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:10808
msgid "Notice that @env{GUIX_PYTHONPATH} is specified as part of the definition of the @code{python} package, and @emph{not} as part of that of @code{python-numpy}.  This is because this environment variable ``belongs'' to Python, not NumPy: Python actually reads the value of that variable and honors it."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:10812
msgid "Corollary: if you create a profile that does not contain @code{python}, @code{GUIX_PYTHONPATH} will @emph{not} be defined, even if it contains packages that provide @file{.py} files:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:10816
#, no-wrap
msgid ""
"$ guix shell python-numpy --search-paths --pure\n"
"export PATH=\"/gnu/store/@dots{}-profile/bin\"\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:10820
msgid "This makes a lot of sense if we look at this profile in isolation: no software in this profile would read @env{GUIX_PYTHONPATH}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10830
msgid "Of course, there are many variations on that theme: some packages honor more than one search path, some use separators other than colon, some accumulate several directories in their search path, and so on.  A more complex example is the search path of libxml2: the value of the @env{XML_CATALOG_FILES} environment variable is space-separated, it must contain a list of @file{catalog.xml} files (not directories), which are to be found in @file{xml} sub-directories---nothing less.  The search path specification looks like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10842
#, no-wrap
msgid ""
"(package\n"
"  (name \"libxml2\")\n"
"  ;; some fields omitted\n"
"  (native-search-paths\n"
"   (list (search-path-specification\n"
"          (variable \"XML_CATALOG_FILES\")\n"
"          (separator \" \")\n"
"          (files '(\"xml\"))\n"
"          (file-pattern \"^catalog\\\\.xml$\")\n"
"          (file-type 'regular)))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10845
msgid "Worry not, search path specifications are usually not this tricky."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10849
msgid "The @code{(guix search-paths)} module defines the data type of search path specifications and a number of helper procedures.  Below is the reference of search path specifications."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:10850
#, fuzzy, no-wrap
msgid "{Data Type} search-path-specification"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:10852
msgid "The data type for search path specifications."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:10854
#, no-wrap
msgid "variable"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10856
msgid "The name of the environment variable for this search path (a string)."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:10857 guix-git/doc/guix.texi:19728
#, no-wrap
msgid "files"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10860
msgid "The list of sub-directories (strings) that should be added to the search path."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:10861
#, fuzzy, no-wrap
#| msgid "@code{port} (default: @code{\"667\"})"
msgid "@code{separator} (default: @code{\":\"})"
msgstr "@code{porta} (default: @code{\"667\"})"

#. type: table
#: guix-git/doc/guix.texi:10863
msgid "The string used to separate search path components."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10871
msgid "As a special case, a @code{separator} value of @code{#f} specifies a ``single-component search path''---in other words, a search path that cannot contain more than one element.  This is useful in some cases, such as the @code{SSL_CERT_DIR} variable (honored by OpenSSL, cURL, and a few other packages) or the @code{ASPELL_DICT_DIR} variable (honored by the GNU Aspell spell checker), both of which must point to a single directory."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:10872
#, fuzzy, no-wrap
#| msgid "@code{file} (default: @code{#f})"
msgid "@code{file-type} (default: @code{'directory})"
msgstr "@code{file} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:10876
msgid "The type of file being matched---@code{'directory} or @code{'regular}, though it can be any symbol returned by @code{stat:type} (@pxref{File System, @code{stat},, guile, GNU Guile Reference Manual})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10879
msgid "In the libxml2 example above, we would match regular files; in the Python example, we would match directories."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:10880
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{file-pattern} (default: @code{#f})"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:10884
msgid "This must be either @code{#f} or a regular expression specifying files to be matched @emph{within} the sub-directories specified by the @code{files} field."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10886
msgid "Again, the libxml2 example shows a situation where this is needed."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10892
msgid "Some search paths are not tied by a single package but to many packages.  To reduce duplications, some of them are pre-defined in @code{(guix search-paths)}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:10893
#, no-wrap
msgid "$SSL_CERT_DIR"
msgstr ""

#. type: defvarx
#: guix-git/doc/guix.texi:10894
#, no-wrap
msgid "$SSL_CERT_FILE"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:10897
msgid "These two search paths indicate where X.509 certificates can be found (@pxref{X.509 Certificates})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10900
msgid "These pre-defined search paths can be used as in the following example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:10906
#, no-wrap
msgid ""
"(package\n"
"  (name \"curl\")\n"
"  ;; some fields omitted ...\n"
"  (native-search-paths (list $SSL_CERT_DIR $SSL_CERT_FILE)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10911
msgid "How do you turn search path specifications on one hand and a bunch of directories on the other hand in a set of environment variable definitions? That's the job of @code{evaluate-search-paths}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10912
#, no-wrap
msgid "evaluate-search-paths search-paths directories [getenv]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:10917
msgid "Evaluate @var{search-paths}, a list of search-path specifications, for @var{directories}, a list of directory names, and return a list of specification/value pairs.  Use @var{getenv} to determine the current settings and report only settings not already effective."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10921
msgid "The @code{(guix profiles)} provides a higher-level helper procedure, @code{load-profile}, that sets the environment variables of a profile."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:10926
#, no-wrap
msgid "store items"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:10927
#, no-wrap
msgid "store paths"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10938
msgid "Conceptually, the @dfn{store} is the place where derivations that have been built successfully are stored---by default, @file{/gnu/store}.  Sub-directories in the store are referred to as @dfn{store items} or sometimes @dfn{store paths}.  The store has an associated database that contains information such as the store paths referred to by each store path, and the list of @emph{valid} store items---results of successful builds.  This database resides in @file{@var{localstatedir}/guix/db}, where @var{localstatedir} is the state directory specified @i{via} @option{--localstatedir} at configure time, usually @file{/var}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10943
msgid "The store is @emph{always} accessed by the daemon on behalf of its clients (@pxref{Invoking guix-daemon}).  To manipulate the store, clients connect to the daemon over a Unix-domain socket, send requests to it, and read the result---these are remote procedure calls, or RPCs."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:10948
msgid "Users must @emph{never} modify files under @file{/gnu/store} directly.  This would lead to inconsistencies and break the immutability assumptions of Guix's functional model (@pxref{Introduction})."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:10952
msgid "@xref{Invoking guix gc, @command{guix gc --verify}}, for information on how to check the integrity of the store and attempt recovery from accidental modifications."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:10959
msgid "The @code{(guix store)} module provides procedures to connect to the daemon, and to perform RPCs.  These are described below.  By default, @code{open-connection}, and thus all the @command{guix} commands, connect to the local daemon or to the URI specified by the @env{GUIX_DAEMON_SOCKET} environment variable."
msgstr ""

#. type: defvr
#: guix-git/doc/guix.texi:10960
#, no-wrap
msgid "{Environment Variable} GUIX_DAEMON_SOCKET"
msgstr ""

#. type: defvr
#: guix-git/doc/guix.texi:10965
msgid "When set, the value of this variable should be a file name or a URI designating the daemon endpoint.  When it is a file name, it denotes a Unix-domain socket to connect to.  In addition to file names, the supported URI schemes are:"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:10967 guix-git/doc/guix.texi:30118
#, no-wrap
msgid "file"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:10968
#, no-wrap
msgid "unix"
msgstr "unix"

#. type: table
#: guix-git/doc/guix.texi:10972
msgid "These are for Unix-domain sockets.  @code{file:///var/guix/daemon-socket/socket} is equivalent to @file{/var/guix/daemon-socket/socket}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10981
msgid "These URIs denote connections over TCP/IP, without encryption nor authentication of the remote host.  The URI must specify the host name and optionally a port number (by default port 44146 is used):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:10984
#, no-wrap
msgid "guix://master.guix.example.org:1234\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10989
msgid "This setup is suitable on local networks, such as clusters, where only trusted nodes may connect to the build daemon at @code{master.guix.example.org}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:10993
msgid "The @option{--listen} option of @command{guix-daemon} can be used to instruct it to listen for TCP connections (@pxref{Invoking guix-daemon, @option{--listen}})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:10994
#, no-wrap
msgid "ssh"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:10995
#, no-wrap
msgid "SSH access to build daemons"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:11001
msgid "These URIs allow you to connect to a remote daemon over SSH@.  This feature requires Guile-SSH (@pxref{Requirements}) and a working @command{guile} binary in @env{PATH} on the destination machine.  It supports public key and GSSAPI authentication.  A typical URL might look like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:11004
#, no-wrap
msgid "ssh://charlie@@guix.example.org:22\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:11008
msgid "As for @command{guix copy}, the usual OpenSSH client configuration files are honored (@pxref{Invoking guix copy})."
msgstr ""

#. type: defvr
#: guix-git/doc/guix.texi:11011
msgid "Additional URI schemes may be supported in the future."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:11018
msgid "The ability to connect to remote build daemons is considered experimental as of @value{VERSION}.  Please get in touch with us to share any problems or suggestions you may have (@pxref{Contributing})."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11021
#, no-wrap
msgid "open-connection [uri] [#:reserve-space? #t]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11026
msgid "Connect to the daemon over the Unix-domain socket at @var{uri} (a string).  When @var{reserve-space?} is true, instruct it to reserve a little bit of extra space on the file system so that the garbage collector can still operate should the disk become full.  Return a server object."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11029
msgid "@var{file} defaults to @code{%default-socket-path}, which is the normal location given the options that were passed to @command{configure}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11031
#, no-wrap
msgid "close-connection server"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11033
msgid "Close the connection to @var{server}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:11035
#, no-wrap
msgid "current-build-output-port"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:11038
msgid "This variable is bound to a SRFI-39 parameter, which refers to the port where build and error logs sent by the daemon should be written."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11042
msgid "Procedures that make RPCs all take a server object as their first argument."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11043
#, no-wrap
msgid "invalid store items"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11044
#, no-wrap
msgid "valid-path? server path"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11049
msgid "Return @code{#t} when @var{path} designates a valid store item and @code{#f} otherwise (an invalid item may exist on disk but still be invalid, for instance because it is the result of an aborted or failed build)."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11052
msgid "A @code{&store-protocol-error} condition is raised if @var{path} is not prefixed by the store directory (@file{/gnu/store})."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11054
#, no-wrap
msgid "add-text-to-store server name text [references]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11058
msgid "Add @var{text} under file @var{name} in the store, and return its store path.  @var{references} is the list of store paths referred to by the resulting store path."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11060
#, no-wrap
msgid "build-derivations store derivations [mode]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11064
msgid "Build @var{derivations}, a list of @code{<derivation>} objects, @file{.drv} file names, or derivation/output pairs, using the specified @var{mode}---@code{(build-mode normal)} by default."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11070
msgid "Note that the @code{(guix monads)} module provides a monad as well as monadic versions of the above procedures, with the goal of making it more convenient to work with code that accesses the store (@pxref{The Store Monad})."
msgstr ""

#. type: i{#1}
#: guix-git/doc/guix.texi:11073
msgid "This section is currently incomplete."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11077
#, no-wrap
msgid "derivations"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11081
msgid "Low-level build actions and the environment in which they are performed are represented by @dfn{derivations}.  A derivation contains the following pieces of information:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:11086
msgid "The outputs of the derivation---derivations produce at least one file or directory in the store, but may produce more."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11088
#, no-wrap
msgid "build-time dependencies"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11089
#, no-wrap
msgid "dependencies, build-time"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:11093
msgid "The inputs of the derivations---i.e., its build-time dependencies---which may be other derivations or plain files in the store (patches, build scripts, etc.)."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:11096
msgid "The system type targeted by the derivation---e.g., @code{x86_64-linux}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:11100
msgid "The file name of a build script in the store, along with the arguments to be passed."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:11103
msgid "A list of environment variables to be defined."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11106
#, no-wrap
msgid "derivation path"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11114
msgid "Derivations allow clients of the daemon to communicate build actions to the store.  They exist in two forms: as an in-memory representation, both on the client- and daemon-side, and as files in the store whose name end in @file{.drv}---these files are referred to as @dfn{derivation paths}.  Derivations paths can be passed to the @code{build-derivations} procedure to perform the build actions they prescribe (@pxref{The Store})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11115
#, no-wrap
msgid "fixed-output derivations"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11122
msgid "Operations such as file downloads and version-control checkouts for which the expected content hash is known in advance are modeled as @dfn{fixed-output derivations}.  Unlike regular derivations, the outputs of a fixed-output derivation are independent of its inputs---e.g., a source code download produces the same result regardless of the download method and tools being used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:11123 guix-git/doc/guix.texi:15299
#, no-wrap
msgid "references"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11124
#, no-wrap
msgid "run-time dependencies"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11125
#, no-wrap
msgid "dependencies, run-time"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11132
msgid "The outputs of derivations---i.e., the build results---have a set of @dfn{references}, as reported by the @code{references} RPC or the @command{guix gc --references} command (@pxref{Invoking guix gc}).  References are the set of run-time dependencies of the build results.  References are a subset of the inputs of the derivation; this subset is automatically computed by the build daemon by scanning all the files in the outputs."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11137
msgid "The @code{(guix derivations)} module provides a representation of derivations as Scheme objects, along with procedures to create and otherwise manipulate derivations.  The lowest-level primitive to create a derivation is the @code{derivation} procedure:"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11138
#, no-wrap
msgid "derivation store name builder args @"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11147
msgid "[#:outputs '(\"out\")] [#:hash #f] [#:hash-algo #f] @ [#:recursive? #f] [#:inputs '()] [#:env-vars '()] @ [#:system (%current-system)] [#:references-graphs #f] @ [#:allowed-references #f] [#:disallowed-references #f] @ [#:leaked-env-vars #f] [#:local-build? #f] @ [#:substitutable? #t] [#:properties '()] Build a derivation with the given arguments, and return the resulting @code{<derivation>} object."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11154
msgid "When @var{hash} and @var{hash-algo} are given, a @dfn{fixed-output derivation} is created---i.e., one whose result is known in advance, such as a file download.  If, in addition, @var{recursive?} is true, then that fixed output may be an executable file or a directory and @var{hash} must be the hash of an archive containing this output."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11159
msgid "When @var{references-graphs} is true, it must be a list of file name/store path pairs.  In that case, the reference graph of each store path is exported in the build environment in the corresponding file, in a simple text format."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11164
msgid "When @var{allowed-references} is true, it must be a list of store items or outputs that the derivation's output may refer to.  Likewise, @var{disallowed-references}, if true, must be a list of things the outputs may @emph{not} refer to."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11171
msgid "When @var{leaked-env-vars} is true, it must be a list of strings denoting environment variables that are allowed to ``leak'' from the daemon's environment to the build environment.  This is only applicable to fixed-output derivations---i.e., when @var{hash} is true.  The main use is to allow variables such as @code{http_proxy} to be passed to derivations that download files."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11176
msgid "When @var{local-build?} is true, declare that the derivation is not a good candidate for offloading and should rather be built locally (@pxref{Daemon Offload Setup}).  This is the case for small derivations where the costs of data transfers would outweigh the benefits."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11181
msgid "When @var{substitutable?} is false, declare that substitutes of the derivation's output should not be used (@pxref{Substitutes}).  This is useful, for instance, when building packages that capture details of the host CPU instruction set."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11184
msgid "@var{properties} must be an association list describing ``properties'' of the derivation.  It is kept as-is, uninterpreted, in the derivation."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11190
msgid "Here's an example with a shell script as its builder, assuming @var{store} is an open connection to the daemon, and @var{bash} points to a Bash executable in the store:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11195
#, no-wrap
msgid ""
"(use-modules (guix utils)\n"
"             (guix store)\n"
"             (guix derivations))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11204
#, no-wrap
msgid ""
"(let ((builder   ; add the Bash script to the store\n"
"        (add-text-to-store store \"my-builder.sh\"\n"
"                           \"echo hello world > $out\\n\" '())))\n"
"  (derivation store \"foo\"\n"
"              bash `(\"-e\" ,builder)\n"
"              #:inputs `((,bash) (,builder))\n"
"              #:env-vars '((\"HOME\" . \"/homeless\"))))\n"
"@result{} #<derivation /gnu/store/@dots{}-foo.drv => /gnu/store/@dots{}-foo>\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11211
msgid "As can be guessed, this primitive is cumbersome to use directly.  A better approach is to write build scripts in Scheme, of course! The best course of action for that is to write the build code as a ``G-expression'', and to pass it to @code{gexp->derivation}.  For more information, @pxref{G-Expressions}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11216
msgid "Once upon a time, @code{gexp->derivation} did not exist and constructing derivations with build code written in Scheme was achieved with @code{build-expression->derivation}, documented below.  This procedure is now deprecated in favor of the much nicer @code{gexp->derivation}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11217
#, no-wrap
msgid "build-expression->derivation store name exp @"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11232
msgid "[#:system (%current-system)] [#:inputs '()] @ [#:outputs '(\"out\")] [#:hash #f] [#:hash-algo #f] @ [#:recursive? #f] [#:env-vars '()] [#:modules '()] @ [#:references-graphs #f] [#:allowed-references #f] @ [#:disallowed-references #f] @ [#:local-build? #f] [#:substitutable? #t] [#:guile-for-build #f] Return a derivation that executes Scheme expression @var{exp} as a builder for derivation @var{name}.  @var{inputs} must be a list of @code{(name drv-path sub-drv)} tuples; when @var{sub-drv} is omitted, @code{\"out\"} is assumed.  @var{modules} is a list of names of Guile modules from the current search path to be copied in the store, compiled, and made available in the load path during the execution of @var{exp}---e.g., @code{((guix build utils) (guix build gnu-build-system))}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11240
msgid "@var{exp} is evaluated in an environment where @code{%outputs} is bound to a list of output/path pairs, and where @code{%build-inputs} is bound to a list of string/output-path pairs made from @var{inputs}.  Optionally, @var{env-vars} is a list of string pairs specifying the name and value of environment variables visible to the builder.  The builder terminates by passing the result of @var{exp} to @code{exit}; thus, when @var{exp} returns @code{#f}, the build is considered to have failed."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11244
msgid "@var{exp} is built using @var{guile-for-build} (a derivation).  When @var{guile-for-build} is omitted or is @code{#f}, the value of the @code{%guile-for-build} fluid is used instead."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11249
msgid "See the @code{derivation} procedure for the meaning of @var{references-graphs}, @var{allowed-references}, @var{disallowed-references}, @var{local-build?}, and @var{substitutable?}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11254
msgid "Here's an example of a single-output derivation that creates a directory containing one file:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11262
#, no-wrap
msgid ""
"(let ((builder '(let ((out (assoc-ref %outputs \"out\")))\n"
"                  (mkdir out)    ; create /gnu/store/@dots{}-goo\n"
"                  (call-with-output-file (string-append out \"/test\")\n"
"                    (lambda (p)\n"
"                      (display '(hello guix) p))))))\n"
"  (build-expression->derivation store \"goo\" builder))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11264
#, no-wrap
msgid "@result{} #<derivation /gnu/store/@dots{}-goo.drv => @dots{}>\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11270
#, no-wrap
msgid "monad"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11276
msgid "The procedures that operate on the store described in the previous sections all take an open connection to the build daemon as their first argument.  Although the underlying model is functional, they either have side effects or depend on the current state of the store."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11282
msgid "The former is inconvenient: the connection to the build daemon has to be carried around in all those functions, making it impossible to compose functions that do not take that parameter with functions that do.  The latter can be problematic: since store operations have side effects and/or depend on external state, they have to be properly sequenced."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11283
#, no-wrap
msgid "monadic values"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11284
#, no-wrap
msgid "monadic functions"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11294
msgid "This is where the @code{(guix monads)} module comes in.  This module provides a framework for working with @dfn{monads}, and a particularly useful monad for our uses, the @dfn{store monad}.  Monads are a construct that allows two things: associating ``context'' with values (in our case, the context is the store), and building sequences of computations (here computations include accesses to the store).  Values in a monad---values that carry this additional context---are called @dfn{monadic values}; procedures that return such values are called @dfn{monadic procedures}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11296
msgid "Consider this ``normal'' procedure:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11305
#, no-wrap
msgid ""
"(define (sh-symlink store)\n"
"  ;; Return a derivation that symlinks the 'bash' executable.\n"
"  (let* ((drv (package-derivation store bash))\n"
"         (out (derivation->output-path drv))\n"
"         (sh  (string-append out \"/bin/bash\")))\n"
"    (build-expression->derivation store \"sh\"\n"
"                                  `(symlink ,sh %output))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11309
msgid "Using @code{(guix monads)} and @code{(guix gexp)}, it may be rewritten as a monadic function:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11317
#, no-wrap
msgid ""
"(define (sh-symlink)\n"
"  ;; Same, but return a monadic value.\n"
"  (mlet %store-monad ((drv (package->derivation bash)))\n"
"    (gexp->derivation \"sh\"\n"
"                      #~(symlink (string-append #$drv \"/bin/bash\")\n"
"                                 #$output))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11324
msgid "There are several things to note in the second version: the @code{store} parameter is now implicit and is ``threaded'' in the calls to the @code{package->derivation} and @code{gexp->derivation} monadic procedures, and the monadic value returned by @code{package->derivation} is @dfn{bound} using @code{mlet} instead of plain @code{let}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11328
msgid "As it turns out, the call to @code{package->derivation} can even be omitted since it will take place implicitly, as we will see later (@pxref{G-Expressions}):"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11334
#, no-wrap
msgid ""
"(define (sh-symlink)\n"
"  (gexp->derivation \"sh\"\n"
"                    #~(symlink (string-append #$bash \"/bin/bash\")\n"
"                               #$output)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11343
msgid "Calling the monadic @code{sh-symlink} has no effect.  As someone once said, ``you exit a monad like you exit a building on fire: by running''.  So, to exit the monad and get the desired effect, one must use @code{run-with-store}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11347
#, no-wrap
msgid ""
"(run-with-store (open-connection) (sh-symlink))\n"
"@result{} /gnu/store/...-sh-symlink\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11354
msgid "Note that the @code{(guix monad-repl)} module extends the Guile REPL with new ``commands'' to make it easier to deal with monadic procedures: @code{run-in-store}, and @code{enter-store-monad} (@pxref{Using Guix Interactively}).  The former is used to ``run'' a single monadic value through the store:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:11358
#, no-wrap
msgid ""
"scheme@@(guile-user)> ,run-in-store (package->derivation hello)\n"
"$1 = #<derivation /gnu/store/@dots{}-hello-2.9.drv => @dots{}>\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11362
msgid "The latter enters a recursive REPL, where all the return values are automatically run through the store:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:11371
#, no-wrap
msgid ""
"scheme@@(guile-user)> ,enter-store-monad\n"
"store-monad@@(guile-user) [1]> (package->derivation hello)\n"
"$2 = #<derivation /gnu/store/@dots{}-hello-2.9.drv => @dots{}>\n"
"store-monad@@(guile-user) [1]> (text-file \"foo\" \"Hello!\")\n"
"$3 = \"/gnu/store/@dots{}-foo\"\n"
"store-monad@@(guile-user) [1]> ,q\n"
"scheme@@(guile-user)>\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11376
msgid "Note that non-monadic values cannot be returned in the @code{store-monad} REPL."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11379
msgid "Other meta-commands are available at the REPL, such as @code{,build} to build a file-like object (@pxref{Using Guix Interactively})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11382
msgid "The main syntactic forms to deal with monads in general are provided by the @code{(guix monads)} module and are described below."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11383
#, no-wrap
msgid "with-monad monad body @dots{}"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11386
msgid "Evaluate any @code{>>=} or @code{return} forms in @var{body} as being in @var{monad}."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11388
#, no-wrap
msgid "return val"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11390
msgid "Return a monadic value that encapsulates @var{val}."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11392
#, no-wrap
msgid ">>= mval mproc @dots{}"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11399
msgid "@dfn{Bind} monadic value @var{mval}, passing its ``contents'' to monadic procedures @var{mproc}@dots{}@footnote{This operation is commonly referred to as ``bind'', but that name denotes an unrelated procedure in Guile.  Thus we use this somewhat cryptic symbol inherited from the Haskell language.}.  There can be one @var{mproc} or several of them, as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11407
#, no-wrap
msgid ""
"(run-with-state\n"
"    (with-monad %state-monad\n"
"      (>>= (return 1)\n"
"           (lambda (x) (return (+ 1 x)))\n"
"           (lambda (x) (return (* 2 x)))))\n"
"  'some-state)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11410
#, no-wrap
msgid ""
"@result{} 4\n"
"@result{} some-state\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11413
#, no-wrap
msgid "mlet monad ((var mval) @dots{}) body @dots{}"
msgstr ""

#. type: defmacx
#: guix-git/doc/guix.texi:11414
#, no-wrap
msgid "mlet* monad ((var mval) @dots{}) body @dots{}"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11425
msgid "Bind the variables @var{var} to the monadic values @var{mval} in @var{body}, which is a sequence of expressions.  As with the bind operator, this can be thought of as ``unpacking'' the raw, non-monadic value ``contained'' in @var{mval} and making @var{var} refer to that raw, non-monadic value within the scope of the @var{body}.  The form (@var{var} -> @var{val}) binds @var{var} to the ``normal'' value @var{val}, as per @code{let}.  The binding operations occur in sequence from left to right.  The last expression of @var{body} must be a monadic expression, and its result will become the result of the @code{mlet} or @code{mlet*} when run in the @var{monad}."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11428
msgid "@code{mlet*} is to @code{mlet} what @code{let*} is to @code{let} (@pxref{Local Bindings,,, guile, GNU Guile Reference Manual})."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11430
#, no-wrap
msgid "mbegin monad mexp @dots{}"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11434
msgid "Bind @var{mexp} and the following monadic expressions in sequence, returning the result of the last expression.  Every expression in the sequence must be a monadic expression."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11438
msgid "This is akin to @code{mlet}, except that the return values of the monadic expressions are ignored.  In that sense, it is analogous to @code{begin}, but applied to monadic expressions."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11440
#, no-wrap
msgid "mwhen condition mexp0 mexp* @dots{}"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11445
msgid "When @var{condition} is true, evaluate the sequence of monadic expressions @var{mexp0}..@var{mexp*} as in an @code{mbegin}.  When @var{condition} is false, return @code{*unspecified*} in the current monad.  Every expression in the sequence must be a monadic expression."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11447
#, no-wrap
msgid "munless condition mexp0 mexp* @dots{}"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11452
msgid "When @var{condition} is false, evaluate the sequence of monadic expressions @var{mexp0}..@var{mexp*} as in an @code{mbegin}.  When @var{condition} is true, return @code{*unspecified*} in the current monad.  Every expression in the sequence must be a monadic expression."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11454
#, no-wrap
msgid "state monad"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11458
msgid "The @code{(guix monads)} module provides the @dfn{state monad}, which allows an additional value---the state---to be @emph{threaded} through monadic procedure calls."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:11459
#, no-wrap
msgid "%state-monad"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:11462
msgid "The state monad.  Procedures in the state monad can access and change the state that is threaded."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:11466
msgid "Consider the example below.  The @code{square} procedure returns a value in the state monad.  It returns the square of its argument, but also increments the current state value:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11473
#, no-wrap
msgid ""
"(define (square x)\n"
"  (mlet %state-monad ((count (current-state)))\n"
"    (mbegin %state-monad\n"
"      (set-current-state (+ 1 count))\n"
"      (return (* x x)))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11477
#, no-wrap
msgid ""
"(run-with-state (sequence %state-monad (map square (iota 3))) 0)\n"
"@result{} (0 1 4)\n"
"@result{} 3\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:11481
msgid "When ``run'' through @code{%state-monad}, we obtain that additional state value, which is the number of @code{square} calls."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11483
#, no-wrap
msgid "{Monadic Procedure} current-state"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11485
msgid "Return the current state as a monadic value."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11487
#, no-wrap
msgid "{Monadic Procedure} set-current-state @var{value}"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11490
msgid "Set the current state to @var{value} and return the previous state as a monadic value."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11492
#, no-wrap
msgid "{Monadic Procedure} state-push @var{value}"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11495
msgid "Push @var{value} to the current state, which is assumed to be a list, and return the previous state as a monadic value."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11497
#, no-wrap
msgid "{Monadic Procedure} state-pop"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11500
msgid "Pop a value from the current state and return it as a monadic value.  The state is assumed to be a list."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11502
#, no-wrap
msgid "run-with-state mval [state]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11505
msgid "Run monadic value @var{mval} starting with @var{state} as the initial state.  Return two values: the resulting value, and the resulting state."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11509
msgid "The main interface to the store monad, provided by the @code{(guix store)} module, is as follows."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:11510
#, no-wrap
msgid "%store-monad"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:11512
msgid "The store monad---an alias for @code{%state-monad}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:11516
msgid "Values in the store monad encapsulate accesses to the store.  When its effect is needed, a value of the store monad must be ``evaluated'' by passing it to the @code{run-with-store} procedure (see below)."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11518
#, no-wrap
msgid "run-with-store store mval @"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11522
msgid "[#:guile-for-build] [#:system (%current-system)] Run @var{mval}, a monadic value in the store monad, in @var{store}, an open store connection."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11524
#, no-wrap
msgid "{Monadic Procedure} text-file @var{name} @var{text} [@var{references}]"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11528
msgid "Return as a monadic value the absolute file name in the store of the file containing @var{text}, a string.  @var{references} is a list of store items that the resulting text file refers to; it defaults to the empty list."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11530
#, no-wrap
msgid "{Monadic Procedure} binary-file @var{name} @var{data} [@var{references}]"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11534
msgid "Return as a monadic value the absolute file name in the store of the file containing @var{data}, a bytevector.  @var{references} is a list of store items that the resulting binary file refers to; it defaults to the empty list."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11536
#, no-wrap
msgid "{Monadic Procedure} interned-file @var{file} [@var{name}] @"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11541
msgid "[#:recursive? #t] [#:select? (const #t)] Return the name of @var{file} once interned in the store.  Use @var{name} as its store name, or the basename of @var{file} if @var{name} is omitted."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11545 guix-git/doc/guix.texi:11967
msgid "When @var{recursive?} is true, the contents of @var{file} are added recursively; if @var{file} designates a flat file and @var{recursive?} is true, its contents are added, and its permission bits are kept."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11550 guix-git/doc/guix.texi:11972
msgid "When @var{recursive?} is true, call @code{(@var{select?} @var{file} @var{stat})} for each directory entry, where @var{file} is the entry's absolute file name and @var{stat} is the result of @code{lstat}; exclude entries for which @var{select?} does not return true."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11552
msgid "The example below adds a file to the store, under two different names:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11558
#, no-wrap
msgid ""
"(run-with-store (open-connection)\n"
"  (mlet %store-monad ((a (interned-file \"README\"))\n"
"                      (b (interned-file \"README\" \"LEGU-MIN\")))\n"
"    (return (list a b))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11560
#, no-wrap
msgid "@result{} (\"/gnu/store/rwm@dots{}-README\" \"/gnu/store/44i@dots{}-LEGU-MIN\")\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11566
msgid "The @code{(guix packages)} module exports the following package-related monadic procedures:"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11567
#, no-wrap
msgid "{Monadic Procedure} package-file @var{package} [@var{file}] @"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11575
msgid "[#:system (%current-system)] [#:target #f] @ [#:output \"out\"] Return as a monadic value in the absolute file name of @var{file} within the @var{output} directory of @var{package}.  When @var{file} is omitted, return the name of the @var{output} directory of @var{package}.  When @var{target} is true, use it as a cross-compilation target triplet."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11579
msgid "Note that this procedure does @emph{not} build @var{package}.  Thus, the result might or might not designate an existing file.  We recommend not using this procedure unless you know what you are doing."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11581
#, no-wrap
msgid "{Monadic Procedure} package->derivation @var{package} [@var{system}]"
msgstr ""

#. type: deffnx
#: guix-git/doc/guix.texi:11582
#, no-wrap
msgid "{Monadic Procedure} package->cross-derivation @var{package} @"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11586
msgid "@var{target} [@var{system}] Monadic version of @code{package-derivation} and @code{package-cross-derivation} (@pxref{Defining Packages})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11592
#, no-wrap
msgid "G-expression"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11593
#, no-wrap
msgid "build code quoting"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11599
msgid "So we have ``derivations'', which represent a sequence of build actions to be performed to produce an item in the store (@pxref{Derivations}).  These build actions are performed when asking the daemon to actually build the derivations; they are run by the daemon in a container (@pxref{Invoking guix-daemon})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11602
#, no-wrap
msgid "strata of code"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11614
msgid "It should come as no surprise that we like to write these build actions in Scheme.  When we do that, we end up with two @dfn{strata} of Scheme code@footnote{The term @dfn{stratum} in this context was coined by Manuel Serrano et al.@: in the context of their work on Hop.  Oleg Kiselyov, who has written insightful @url{http://okmij.org/ftp/meta-programming/#meta-scheme, essays and code on this topic}, refers to this kind of code generation as @dfn{staging}.}: the ``host code''---code that defines packages, talks to the daemon, etc.---and the ``build code''---code that actually performs build actions, such as making directories, invoking @command{make}, and so on (@pxref{Build Phases})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11621
msgid "To describe a derivation and its build actions, one typically needs to embed build code inside host code.  It boils down to manipulating build code as data, and the homoiconicity of Scheme---code has a direct representation as data---comes in handy for that.  But we need more than the normal @code{quasiquote} mechanism in Scheme to construct build expressions."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11630
msgid "The @code{(guix gexp)} module implements @dfn{G-expressions}, a form of S-expressions adapted to build expressions.  G-expressions, or @dfn{gexps}, consist essentially of three syntactic forms: @code{gexp}, @code{ungexp}, and @code{ungexp-splicing} (or simply: @code{#~}, @code{#$}, and @code{#$@@}), which are comparable to @code{quasiquote}, @code{unquote}, and @code{unquote-splicing}, respectively (@pxref{Expression Syntax, @code{quasiquote},, guile, GNU Guile Reference Manual}).  However, there are major differences:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:11635
msgid "Gexps are meant to be written to a file and run or manipulated by other processes."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:11640
msgid "When a high-level object such as a package or derivation is unquoted inside a gexp, the result is as if its output file name had been introduced."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:11645
msgid "Gexps carry information about the packages or derivations they refer to, and these dependencies are automatically added as inputs to the build processes that use them."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11647 guix-git/doc/guix.texi:12199
#, no-wrap
msgid "lowering, of high-level objects in gexps"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11657
msgid "This mechanism is not limited to package and derivation objects: @dfn{compilers} able to ``lower'' other high-level objects to derivations or files in the store can be defined, such that these objects can also be inserted into gexps.  For example, a useful type of high-level objects that can be inserted in a gexp is ``file-like objects'', which make it easy to add files to the store and to refer to them in derivations and such (see @code{local-file} and @code{plain-file} below)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11659
msgid "To illustrate the idea, here is an example of a gexp:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11667
#, no-wrap
msgid ""
"(define build-exp\n"
"  #~(begin\n"
"      (mkdir #$output)\n"
"      (chdir #$output)\n"
"      (symlink (string-append #$coreutils \"/bin/ls\")\n"
"               \"list-files\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11672
msgid "This gexp can be passed to @code{gexp->derivation}; we obtain a derivation that builds a directory containing exactly one symlink to @file{/gnu/store/@dots{}-coreutils-8.22/bin/ls}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11675
#, no-wrap
msgid "(gexp->derivation \"the-thing\" build-exp)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11683
msgid "As one would expect, the @code{\"/gnu/store/@dots{}-coreutils-8.22\"} string is substituted to the reference to the @var{coreutils} package in the actual build code, and @var{coreutils} is automatically made an input to the derivation.  Likewise, @code{#$output} (equivalent to @code{(ungexp output)}) is replaced by a string containing the directory name of the output of the derivation."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11684
#, no-wrap
msgid "cross compilation"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11690
msgid "In a cross-compilation context, it is useful to distinguish between references to the @emph{native} build of a package---that can run on the host---versus references to cross builds of a package.  To that end, the @code{#+} plays the same role as @code{#$}, but is a reference to a native package build:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11701
#, no-wrap
msgid ""
"(gexp->derivation \"vi\"\n"
"   #~(begin\n"
"       (mkdir #$output)\n"
"       (mkdir (string-append #$output \"/bin\"))\n"
"       (system* (string-append #+coreutils \"/bin/ln\")\n"
"                \"-s\"\n"
"                (string-append #$emacs \"/bin/emacs\")\n"
"                (string-append #$output \"/bin/vi\")))\n"
"   #:target \"aarch64-linux-gnu\")\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11707
msgid "In the example above, the native build of @var{coreutils} is used, so that @command{ln} can actually run on the host; but then the cross-compiled build of @var{emacs} is referenced."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11708
#, no-wrap
msgid "imported modules, for gexps"
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:11709
#, no-wrap
msgid "with-imported-modules"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11714
msgid "Another gexp feature is @dfn{imported modules}: sometimes you want to be able to use certain Guile modules from the ``host environment'' in the gexp, so those modules should be imported in the ``build environment''.  The @code{with-imported-modules} form allows you to express that:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11725
#, no-wrap
msgid ""
"(let ((build (with-imported-modules '((guix build utils))\n"
"               #~(begin\n"
"                   (use-modules (guix build utils))\n"
"                   (mkdir-p (string-append #$output \"/bin\"))))))\n"
"  (gexp->derivation \"empty-dir\"\n"
"                    #~(begin\n"
"                        #$build\n"
"                        (display \"success!\\n\")\n"
"                        #t)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11731
msgid "In this example, the @code{(guix build utils)} module is automatically pulled into the isolated build environment of our gexp, such that @code{(use-modules (guix build utils))} works as expected."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11732
#, no-wrap
msgid "module closure"
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:11733
#, no-wrap
msgid "source-module-closure"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11740
msgid "Usually you want the @emph{closure} of the module to be imported---i.e., the module itself and all the modules it depends on---rather than just the module; failing to do that, attempts to use the module will fail because of missing dependent modules.  The @code{source-module-closure} procedure computes the closure of a module by looking at its source file headers, which comes in handy in this case:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11743
#, no-wrap
msgid ""
"(use-modules (guix modules))   ;for 'source-module-closure'\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11752
#, no-wrap
msgid ""
"(with-imported-modules (source-module-closure\n"
"                         '((guix build utils)\n"
"                           (gnu build image)))\n"
"  (gexp->derivation \"something-with-vms\"\n"
"                    #~(begin\n"
"                        (use-modules (guix build utils)\n"
"                                     (gnu build image))\n"
"                        @dots{})))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11754
#, no-wrap
msgid "extensions, for gexps"
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:11755
#, no-wrap
msgid "with-extensions"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11760
msgid "In the same vein, sometimes you want to import not just pure-Scheme modules, but also ``extensions'' such as Guile bindings to C libraries or other ``full-blown'' packages.  Say you need the @code{guile-json} package available on the build side, here's how you would do it:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11763
#, no-wrap
msgid ""
"(use-modules (gnu packages guile))  ;for 'guile-json'\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11769
#, no-wrap
msgid ""
"(with-extensions (list guile-json)\n"
"  (gexp->derivation \"something-with-json\"\n"
"                    #~(begin\n"
"                        (use-modules (json))\n"
"                        @dots{})))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11772
msgid "The syntactic form to construct gexps is summarized below."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11773
#, no-wrap
msgid "#~@var{exp}"
msgstr ""

#. type: defmacx
#: guix-git/doc/guix.texi:11774
#, fuzzy, no-wrap
#| msgid "-p @var{port}"
msgid "(gexp @var{exp})"
msgstr "-p @var{porta}"

#. type: defmac
#: guix-git/doc/guix.texi:11777
msgid "Return a G-expression containing @var{exp}.  @var{exp} may contain one or more of the following forms:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:11779
#, no-wrap
msgid "#$@var{obj}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:11780
#, no-wrap
msgid "(ungexp @var{obj})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:11785
msgid "Introduce a reference to @var{obj}.  @var{obj} may have one of the supported types, for example a package or a derivation, in which case the @code{ungexp} form is replaced by its output file name---e.g., @code{\"/gnu/store/@dots{}-coreutils-8.22}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:11788
msgid "If @var{obj} is a list, it is traversed and references to supported objects are substituted similarly."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:11791
msgid "If @var{obj} is another gexp, its contents are inserted and its dependencies are added to those of the containing gexp."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:11793
msgid "If @var{obj} is another kind of object, it is inserted as is."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:11794
#, no-wrap
msgid "#$@var{obj}:@var{output}"
msgstr "#$@var{obj}:@var{saída}"

#. type: itemx
#: guix-git/doc/guix.texi:11795
#, no-wrap
msgid "(ungexp @var{obj} @var{output})"
msgstr "(ungexp @var{obj} @var{saída})"

#. type: table
#: guix-git/doc/guix.texi:11799
msgid "This is like the form above, but referring explicitly to the @var{output} of @var{obj}---this is useful when @var{obj} produces multiple outputs (@pxref{Packages with Multiple Outputs})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:11800
#, no-wrap
msgid "#+@var{obj}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:11801
#, no-wrap
msgid "#+@var{obj}:output"
msgstr "#+@var{obj}:output"

#. type: itemx
#: guix-git/doc/guix.texi:11802
#, no-wrap
msgid "(ungexp-native @var{obj})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:11803
#, no-wrap
msgid "(ungexp-native @var{obj} @var{output})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:11806
msgid "Same as @code{ungexp}, but produces a reference to the @emph{native} build of @var{obj} when used in a cross compilation context."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:11807
#, no-wrap
msgid "#$output[:@var{output}]"
msgstr "#$output[:@var{saída}]"

#. type: itemx
#: guix-git/doc/guix.texi:11808
#, no-wrap
msgid "(ungexp output [@var{output}])"
msgstr "(ungexp output [@var{saída}])"

#. type: table
#: guix-git/doc/guix.texi:11811
msgid "Insert a reference to derivation output @var{output}, or to the main output when @var{output} is omitted."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:11813
msgid "This only makes sense for gexps passed to @code{gexp->derivation}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:11814
#, no-wrap
msgid "#$@@@var{lst}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:11815
#, no-wrap
msgid "(ungexp-splicing @var{lst})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:11818
msgid "Like the above, but splices the contents of @var{lst} inside the containing list."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:11819
#, no-wrap
msgid "#+@@@var{lst}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:11820
#, no-wrap
msgid "(ungexp-native-splicing @var{lst})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:11823
msgid "Like the above, but refers to native builds of the objects listed in @var{lst}."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11828
msgid "G-expressions created by @code{gexp} or @code{#~} are run-time objects of the @code{gexp?} type (see below)."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11830
#, no-wrap
msgid "with-imported-modules modules body@dots{}"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11833
msgid "Mark the gexps defined in @var{body}@dots{} as requiring @var{modules} in their execution environment."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11837
msgid "Each item in @var{modules} can be the name of a module, such as @code{(guix build utils)}, or it can be a module name, followed by an arrow, followed by a file-like object:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11843
#, no-wrap
msgid ""
"`((guix build utils)\n"
"  (guix gcrypt)\n"
"  ((guix config) => ,(scheme-file \"config.scm\"\n"
"                                  #~(define-module @dots{}))))\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11848
msgid "In the example above, the first two modules are taken from the search path, and the last one is created from the given file-like object."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11852
msgid "This form has @emph{lexical} scope: it has an effect on the gexps directly defined in @var{body}@dots{}, but not on those defined, say, in procedures called from @var{body}@dots{}."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11854
#, no-wrap
msgid "with-extensions extensions body@dots{}"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11859
msgid "Mark the gexps defined in @var{body}@dots{} as requiring @var{extensions} in their build and execution environment.  @var{extensions} is typically a list of package objects such as those defined in the @code{(gnu packages guile)} module."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:11864
msgid "Concretely, the packages listed in @var{extensions} are added to the load path while compiling imported modules in @var{body}@dots{}; they are also added to the load path of the gexp returned by @var{body}@dots{}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11866
#, no-wrap
msgid "gexp? obj"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11868
msgid "Return @code{#t} if @var{obj} is a G-expression."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11874
msgid "G-expressions are meant to be written to disk, either as code building some derivation, or as plain files in the store.  The monadic procedures below allow you to do that (@pxref{The Store Monad}, for more information about monads)."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11875
#, no-wrap
msgid "{Monadic Procedure} gexp->derivation @var{name} @var{exp} @"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11893
msgid "[#:system (%current-system)] [#:target #f] [#:graft? #t] @ [#:hash #f] [#:hash-algo #f] @ [#:recursive? #f] [#:env-vars '()] [#:modules '()] @ [#:module-path @code{%load-path}] @ [#:effective-version \"2.2\"] @ [#:references-graphs #f] [#:allowed-references #f] @ [#:disallowed-references #f] @ [#:leaked-env-vars #f] @ [#:script-name (string-append @var{name} \"-builder\")] @ [#:deprecation-warnings #f] @ [#:local-build? #f] [#:substitutable? #t] @ [#:properties '()] [#:guile-for-build #f] Return a derivation @var{name} that runs @var{exp} (a gexp) with @var{guile-for-build} (a derivation) on @var{system}; @var{exp} is stored in a file called @var{script-name}.  When @var{target} is true, it is used as the cross-compilation target triplet for packages referred to by @var{exp}."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11901
msgid "@var{modules} is deprecated in favor of @code{with-imported-modules}.  Its meaning is to make @var{modules} available in the evaluation context of @var{exp}; @var{modules} is a list of names of Guile modules searched in @var{module-path} to be copied in the store, compiled, and made available in the load path during the execution of @var{exp}---e.g., @code{((guix build utils) (guix build gnu-build-system))}."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11904
msgid "@var{effective-version} determines the string to use when adding extensions of @var{exp} (see @code{with-extensions}) to the search path---e.g., @code{\"2.2\"}."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11907
msgid "@var{graft?} determines whether packages referred to by @var{exp} should be grafted when applicable."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11910
msgid "When @var{references-graphs} is true, it must be a list of tuples of one of the following forms:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:11917
#, no-wrap
msgid ""
"(@var{file-name} @var{package})\n"
"(@var{file-name} @var{package} @var{output})\n"
"(@var{file-name} @var{derivation})\n"
"(@var{file-name} @var{derivation} @var{output})\n"
"(@var{file-name} @var{store-item})\n"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11923
msgid "The right-hand-side of each element of @var{references-graphs} is automatically made an input of the build process of @var{exp}.  In the build environment, each @var{file-name} contains the reference graph of the corresponding item, in a simple text format."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11929
msgid "@var{allowed-references} must be either @code{#f} or a list of output names and packages.  In the latter case, the list denotes store items that the result is allowed to refer to.  Any reference to another store item will lead to a build error.  Similarly for @var{disallowed-references}, which can list items that must not be referenced by the outputs."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11932
msgid "@var{deprecation-warnings} determines whether to show deprecation warnings while compiling modules.  It can be @code{#f}, @code{#t}, or @code{'detailed}."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11934
msgid "The other arguments are as for @code{derivation} (@pxref{Derivations})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:11936
#, no-wrap
msgid "file-like objects"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11941
msgid "The @code{local-file}, @code{plain-file}, @code{computed-file}, @code{program-file}, and @code{scheme-file} procedures below return @dfn{file-like objects}.  That is, when unquoted in a G-expression, these objects lead to a file in the store.  Consider this G-expression:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:11945
#, no-wrap
msgid ""
"#~(system* #$(file-append glibc \"/sbin/nscd\") \"-f\"\n"
"           #$(local-file \"/tmp/my-nscd.conf\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:11954
msgid "The effect here is to ``intern'' @file{/tmp/my-nscd.conf} by copying it to the store.  Once expanded, for instance @i{via} @code{gexp->derivation}, the G-expression refers to that copy under @file{/gnu/store}; thus, modifying or removing the file in @file{/tmp} does not have any effect on what the G-expression does.  @code{plain-file} can be used similarly; it differs in that the file content is directly passed as a string."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11955
#, no-wrap
msgid "local-file file [name] [#:recursive? #f] [#:select? (const #t)]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11963
msgid "Return an object representing local file @var{file} to add to the store; this object can be used in a gexp.  If @var{file} is a literal string denoting a relative file name, it is looked up relative to the source file where it appears; if @var{file} is not a literal string, it is looked up relative to the current working directory at run time.  @var{file} will be added to the store under @var{name}--by default the base name of @var{file}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11975
msgid "This is the declarative counterpart of the @code{interned-file} monadic procedure (@pxref{The Store Monad, @code{interned-file}})."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11977
#, no-wrap
msgid "plain-file name content"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11980
msgid "Return an object representing a text file called @var{name} with the given @var{content} (a string or a bytevector) to be added to the store."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11982
msgid "This is the declarative counterpart of @code{text-file}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11984
#, no-wrap
msgid "computed-file name gexp [#:local-build? #t] [#:options '()]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11989
msgid "Return an object representing the store item @var{name}, a file or directory computed by @var{gexp}.  When @var{local-build?} is true (the default), the derivation is built locally.  @var{options} is a list of additional arguments to pass to @code{gexp->derivation}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:11991
msgid "This is the declarative counterpart of @code{gexp->derivation}."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11993
#, no-wrap
msgid "{Monadic Procedure} gexp->script @var{name} @var{exp} @"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:11999
msgid "[#:guile (default-guile)] [#:module-path %load-path] @ [#:system (%current-system)] [#:target #f] Return an executable script @var{name} that runs @var{exp} using @var{guile}, with @var{exp}'s imported modules in its search path.  Look up @var{exp}'s modules in @var{module-path}."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12002
msgid "The example below builds a script that simply invokes the @command{ls} command:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:12005
#, no-wrap
msgid ""
"(use-modules (guix gexp) (gnu packages base))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:12009
#, no-wrap
msgid ""
"(gexp->script \"list-files\"\n"
"              #~(execl #$(file-append coreutils \"/bin/ls\")\n"
"                       \"ls\"))\n"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12014
msgid "When ``running'' it through the store (@pxref{The Store Monad, @code{run-with-store}}), we obtain a derivation that produces an executable file @file{/gnu/store/@dots{}-list-files} along these lines:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12019
#, no-wrap
msgid ""
"#!/gnu/store/@dots{}-guile-2.0.11/bin/guile -ds\n"
"!#\n"
"(execl \"/gnu/store/@dots{}-coreutils-8.22\"/bin/ls\" \"ls\")\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12022
#, no-wrap
msgid "program-file name exp [#:guile #f] [#:module-path %load-path]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12026
msgid "Return an object representing the executable store item @var{name} that runs @var{gexp}.  @var{guile} is the Guile package used to execute that script.  Imported modules of @var{gexp} are looked up in @var{module-path}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12028
msgid "This is the declarative counterpart of @code{gexp->script}."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12030
#, no-wrap
msgid "{Monadic Procedure} gexp->file @var{name} @var{exp} @"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12037
msgid "[#:set-load-path? #t] [#:module-path %load-path] @ [#:splice? #f] @ [#:guile (default-guile)] Return a derivation that builds a file @var{name} containing @var{exp}.  When @var{splice?} is true, @var{exp} is considered to be a list of expressions that will be spliced in the resulting file."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12042
msgid "When @var{set-load-path?} is true, emit code in the resulting file to set @code{%load-path} and @code{%load-compiled-path} to honor @var{exp}'s imported modules.  Look up @var{exp}'s modules in @var{module-path}."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12045
msgid "The resulting file holds references to all the dependencies of @var{exp} or a subset thereof."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12047
#, no-wrap
msgid "scheme-file name exp [#:splice? #f] [#:set-load-path? #t]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12050
msgid "Return an object representing the Scheme file @var{name} that contains @var{exp}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12052
msgid "This is the declarative counterpart of @code{gexp->file}."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12054
#, no-wrap
msgid "{Monadic Procedure} text-file* @var{name} @var{text} @dots{}"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12060
msgid "Return as a monadic value a derivation that builds a text file containing all of @var{text}.  @var{text} may list, in addition to strings, objects of any type that can be used in a gexp: packages, derivations, local file objects, etc.  The resulting store file holds references to all these."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12065
msgid "This variant should be preferred over @code{text-file} anytime the file to create will reference items from the store.  This is typically the case when building a configuration file that embeds store file names, like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:12073
#, no-wrap
msgid ""
"(define (profile.sh)\n"
"  ;; Return the name of a shell script in the store that\n"
"  ;; initializes the 'PATH' environment variable.\n"
"  (text-file* \"profile.sh\"\n"
"              \"export PATH=\" coreutils \"/bin:\"\n"
"              grep \"/bin:\" sed \"/bin\\n\"))\n"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12078
msgid "In this example, the resulting @file{/gnu/store/@dots{}-profile.sh} file will reference @var{coreutils}, @var{grep}, and @var{sed}, thereby preventing them from being garbage-collected during its lifetime."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12080
#, no-wrap
msgid "mixed-text-file name text @dots{}"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12084
msgid "Return an object representing store file @var{name} containing @var{text}.  @var{text} is a sequence of strings and file-like objects, as in:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:12088
#, no-wrap
msgid ""
"(mixed-text-file \"profile\"\n"
"                 \"export PATH=\" coreutils \"/bin:\" grep \"/bin\")\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12091
msgid "This is the declarative counterpart of @code{text-file*}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12093
#, fuzzy, no-wrap
#| msgid "name"
msgid "file-union name files"
msgstr "name"

#. type: defun
#: guix-git/doc/guix.texi:12098
msgid "Return a @code{<computed-file>} that builds a directory containing all of @var{files}.  Each item in @var{files} must be a two-element list where the first element is the file name to use in the new directory, and the second element is a gexp denoting the target file.  Here's an example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:12105
#, no-wrap
msgid ""
"(file-union \"etc\"\n"
"            `((\"hosts\" ,(plain-file \"hosts\"\n"
"                                    \"127.0.0.1 localhost\"))\n"
"              (\"bashrc\" ,(plain-file \"bashrc\"\n"
"                                     \"alias ls='ls --color=auto'\"))))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12108
msgid "This yields an @code{etc} directory containing these two files."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12110
#, no-wrap
msgid "directory-union name things"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12113
msgid "Return a directory that is the union of @var{things}, where @var{things} is a list of file-like objects denoting directories.  For example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:12116
#, no-wrap
msgid "(directory-union \"guile+emacs\" (list guile emacs))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12119
msgid "yields a directory that is the union of the @code{guile} and @code{emacs} packages."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12121
#, no-wrap
msgid "file-append obj suffix @dots{}"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12125
msgid "Return a file-like object that expands to the concatenation of @var{obj} and @var{suffix}, where @var{obj} is a lowerable object and each @var{suffix} is a string."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12127
msgid "As an example, consider this gexp:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:12132
#, no-wrap
msgid ""
"(gexp->script \"run-uname\"\n"
"              #~(system* #$(file-append coreutils\n"
"                                        \"/bin/uname\")))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12135
msgid "The same effect could be achieved with:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:12140
#, no-wrap
msgid ""
"(gexp->script \"run-uname\"\n"
"              #~(system* (string-append #$coreutils\n"
"                                        \"/bin/uname\")))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12146
msgid "There is one difference though: in the @code{file-append} case, the resulting script contains the absolute file name as a string, whereas in the second case, the resulting script contains a @code{(string-append @dots{})} expression to construct the file name @emph{at run time}."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:12148
#, no-wrap
msgid "let-system system body@dots{}"
msgstr ""

#. type: defmacx
#: guix-git/doc/guix.texi:12149
#, no-wrap
msgid "let-system (system target) body@dots{}"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:12152
msgid "Bind @var{system} to the currently targeted system---e.g., @code{\"x86_64-linux\"}---within @var{body}."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:12157
msgid "In the second case, additionally bind @var{target} to the current cross-compilation target---a GNU triplet such as @code{\"arm-linux-gnueabihf\"}---or @code{#f} if we are not cross-compiling."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:12160
msgid "@code{let-system} is useful in the occasional case where the object spliced into the gexp depends on the target system, as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:12171
#, no-wrap
msgid ""
"#~(system*\n"
"   #+(let-system system\n"
"       (cond ((string-prefix? \"armhf-\" system)\n"
"              (file-append qemu \"/bin/qemu-system-arm\"))\n"
"             ((string-prefix? \"x86_64-\" system)\n"
"              (file-append qemu \"/bin/qemu-system-x86_64\"))\n"
"             (else\n"
"              (error \"dunno!\"))))\n"
"   \"-net\" \"user\" #$image)\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:12174
#, no-wrap
msgid "with-parameters ((parameter value) @dots{}) exp"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:12180
msgid "This macro is similar to the @code{parameterize} form for dynamically-bound @dfn{parameters} (@pxref{Parameters,,, guile, GNU Guile Reference Manual}).  The key difference is that it takes effect when the file-like object returned by @var{exp} is lowered to a derivation or store item."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:12183
msgid "A typical use of @code{with-parameters} is to force the system in effect for a given object:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:12187
#, no-wrap
msgid ""
"(with-parameters ((%current-system \"i686-linux\"))\n"
"  coreutils)\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:12191
msgid "The example above returns an object that corresponds to the i686 build of Coreutils, regardless of the current value of @code{%current-system}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12198
msgid "Of course, in addition to gexps embedded in ``host'' code, there are also modules containing build tools.  To make it clear that they are meant to be used in the build stratum, these modules are kept in the @code{(guix build @dots{})} name space."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12204
msgid "Internally, high-level objects are @dfn{lowered}, using their compiler, to either derivations or store items.  For instance, lowering a package yields a derivation, and lowering a @code{plain-file} yields a store item.  This is achieved using the @code{lower-object} monadic procedure."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12205
#, no-wrap
msgid "{Monadic Procedure} lower-object @var{obj} [@var{system}] @"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12211
msgid "[#:target #f] Return as a value in @code{%store-monad} the derivation or store item corresponding to @var{obj} for @var{system}, cross-compiling for @var{target} if @var{target} is true.  @var{obj} must be an object that has an associated gexp compiler, such as a @code{<package>}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12213
#, no-wrap
msgid "gexp->approximate-sexp gexp"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:12221
msgid "Sometimes, it may be useful to convert a G-exp into a S-exp.  For example, some linters (@pxref{Invoking guix lint}) peek into the build phases of a package to detect potential problems.  This conversion can be achieved with this procedure.  However, some information can be lost in the process.  More specifically, lowerable objects will be silently replaced with some arbitrary object -- currently the list @code{(*approximate*)}, but this may change."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:12224
#, no-wrap
msgid "Invoking @command{guix repl}"
msgstr "Invocando @command{guix repl}"

#. type: command{#1}
#: guix-git/doc/guix.texi:12226
#, fuzzy, no-wrap
#| msgid "guix graph"
msgid "guix repl"
msgstr "guix graph"

#. type: cindex
#: guix-git/doc/guix.texi:12227
#, no-wrap
msgid "REPL, read-eval-print loop, script"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12237
msgid "The @command{guix repl} command makes it easier to program Guix in Guile by launching a Guile @dfn{read-eval-print loop} (REPL) for interactive programming (@pxref{Using Guile Interactively,,, guile, GNU Guile Reference Manual}), or by running Guile scripts (@pxref{Running Guile Scripts,,, guile, GNU Guile Reference Manual}).  Compared to just launching the @command{guile} command, @command{guix repl} guarantees that all the Guix modules and all its dependencies are available in the search path."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12242
#, no-wrap
msgid "guix repl @var{options} [@var{file} @var{args}]\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12246
msgid "When a @var{file} argument is provided, @var{file} is executed as a Guile scripts:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12249
#, no-wrap
msgid "guix repl my-script.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12253
msgid "To pass arguments to the script, use @code{--} to prevent them from being interpreted as arguments to @command{guix repl} itself:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12256
#, no-wrap
msgid "guix repl -- my-script.scm --input=foo.txt\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12261
msgid "To make a script executable directly from the shell, using the guix executable that is on the user's search path, add the following two lines at the top of the script:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12265
#, no-wrap
msgid ""
"@code{#!/usr/bin/env -S guix repl --}\n"
"@code{!#}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12269
msgid "To make a script that launches an interactive REPL directly from the shell, use the @code{--interactive} flag:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12273
#, no-wrap
msgid ""
"@code{#!/usr/bin/env -S guix repl --interactive}\n"
"@code{!#}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12277
msgid "Without a file name argument, a Guile REPL is started, allowing for interactive use (@pxref{Using Guix Interactively}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12283
#, no-wrap
msgid ""
"$ guix repl\n"
"scheme@@(guile-user)> ,use (gnu packages base)\n"
"scheme@@(guile-user)> coreutils\n"
"$1 = #<package coreutils@@8.29 gnu/packages/base.scm:327 3e28300>\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12290
msgid "In addition, @command{guix repl} implements a simple machine-readable REPL protocol for use by @code{(guix inferior)}, a facility to interact with @dfn{inferiors}, separate processes running a potentially different revision of Guix."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12292
msgid "The available options are as follows:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12294 guix-git/doc/guix.texi:15374
#, no-wrap
msgid "--list-types"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12297
msgid "Display the @var{TYPE} options for @command{guix repl --type=TYPE} and exit."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12298 guix-git/doc/guix.texi:15369
#, no-wrap
msgid "--type=@var{type}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:12299 guix-git/doc/guix.texi:15370
#: guix-git/doc/guix.texi:40344
#, no-wrap
msgid "-t @var{type}"
msgstr "-t @var{tipo}"

#. type: table
#: guix-git/doc/guix.texi:12301
msgid "Start a REPL of the given @var{TYPE}, which can be one of the following:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12303
#, no-wrap
msgid "guile"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12305
msgid "This is default, and it spawns a standard full-featured Guile REPL."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12305
#, no-wrap
msgid "machine"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12308
msgid "Spawn a REPL that uses the machine-readable protocol.  This is the protocol that the @code{(guix inferior)} module speaks."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12314
msgid "By default, @command{guix repl} reads from standard input and writes to standard output.  When this option is passed, it will instead listen for connections on @var{endpoint}.  Here are examples of valid options:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12316
#, no-wrap
msgid "--listen=tcp:37146"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12318
msgid "Accept connections on localhost on port 37146."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12319
#, no-wrap
msgid "--listen=unix:/tmp/socket"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12321
msgid "Accept connections on the Unix-domain socket @file{/tmp/socket}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12323
#, fuzzy, no-wrap
#| msgid "user interfaces"
msgid "--interactive"
msgstr "interfaces de usuário"

#. type: itemx
#: guix-git/doc/guix.texi:12324
#, no-wrap
msgid "-i"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12326
msgid "Launch the interactive REPL after @var{file} is executed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12327 guix-git/doc/guix.texi:12558
#: guix-git/doc/guix.texi:14604 guix-git/doc/guix.texi:14787
#: guix-git/doc/guix.texi:15004 guix-git/doc/guix.texi:15149
#: guix-git/doc/guix.texi:15417
#, no-wrap
msgid "--load-path=@var{directory}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:12328 guix-git/doc/guix.texi:12559
#: guix-git/doc/guix.texi:14605 guix-git/doc/guix.texi:14788
#: guix-git/doc/guix.texi:15005 guix-git/doc/guix.texi:15150
#: guix-git/doc/guix.texi:15418
#, no-wrap
msgid "-L @var{directory}"
msgstr "-L @var{diretório}"

#. type: table
#: guix-git/doc/guix.texi:12331 guix-git/doc/guix.texi:12562
#: guix-git/doc/guix.texi:14608 guix-git/doc/guix.texi:14791
#: guix-git/doc/guix.texi:15008 guix-git/doc/guix.texi:15153
#: guix-git/doc/guix.texi:15421
msgid "Add @var{directory} to the front of the package module search path (@pxref{Package Modules})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12334
msgid "This allows users to define their own packages and make them visible to the script or REPL."
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:12335 guix-git/doc/guix.texi:13135
#, no-wrap
msgid "-q"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12338
msgid "Inhibit loading of the @file{~/.guile} file.  By default, that configuration file is loaded when spawning a @code{guile} REPL."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:12343
#, fuzzy, no-wrap
#| msgid "user interfaces"
msgid "interactive use"
msgstr "interfaces de usuário"

#. type: cindex
#: guix-git/doc/guix.texi:12344
#, fuzzy, no-wrap
#| msgid "read-eval-print loop"
msgid "REPL, read-eval-print loop"
msgstr "read-eval-print loop"

#. type: Plain text
#: guix-git/doc/guix.texi:12350
msgid "The @command{guix repl} command gives you access to a warm and friendly @dfn{read-eval-print loop} (REPL) (@pxref{Invoking guix repl}).  If you're getting into Guix programming---defining your own packages, writing manifests, defining services for Guix System or Guix Home, etc.---you will surely find it convenient to toy with ideas at the REPL."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12356
msgid "If you use Emacs, the most convenient way to do that is with Geiser (@pxref{The Perfect Setup}), but you do not have to use Emacs to enjoy the REPL@.  When using @command{guix repl} or @command{guile} in the terminal, we recommend using Readline for completion and Colorized to get colorful output.  To do that, you can run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12359
#, no-wrap
msgid "guix install guile guile-readline guile-colorized\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12364
msgid "... and then create a @file{.guile} file in your home directory containing this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:12367
#, no-wrap
msgid ""
"(use-modules (ice-9 readline) (ice-9 colorized))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:12370
#, no-wrap
msgid ""
"(activate-readline)\n"
"(activate-colorized)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12374
msgid "The REPL lets you evaluate Scheme code; you type a Scheme expression at the prompt, and the REPL prints what it evaluates to:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12381
#, no-wrap
msgid ""
"$ guix repl\n"
"scheme@@(guix-user)> (+ 2 3)\n"
"$1 = 5\n"
"scheme@@(guix-user)> (string-append \"a\" \"b\")\n"
"$2 = \"ab\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12392
msgid "It becomes interesting when you start fiddling with Guix at the REPL.  The first thing you'll want to do is to ``import'' the @code{(guix)} module, which gives access to the main part of the programming interface, and perhaps a bunch of useful Guix modules.  You could type @code{(use-modules (guix))}, which is valid Scheme code to import a module (@pxref{Using Guile Modules,,, guile, GNU Guile Reference Manual}), but the REPL provides the @code{use} @dfn{command} as a shorthand notation (@pxref{REPL Commands,,, guile, GNU Guile Reference Manual}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12396
#, no-wrap
msgid ""
"scheme@@(guix-user)> ,use (guix)\n"
"scheme@@(guix-user)> ,use (gnu packages base)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12401
msgid "Notice that REPL commands are introduced by a leading comma.  A REPL command like @code{use} is not valid Scheme code; it's interpreted specially by the REPL."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12410
msgid "Guix extends the Guile REPL with additional commands for convenience.  Among those, the @code{build} command comes in handy: it ensures that the given file-like object is built, building it if needed, and returns its output file name(s).  In the example below, we build the @code{coreutils} and @code{grep} packages, as well as a ``computed file'' (@pxref{G-Expressions, @code{computed-file}}), and we use the @code{scandir} procedure to list the files in Grep's @code{/bin} directory:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12423
#, no-wrap
msgid ""
"scheme@@(guix-user)> ,build coreutils\n"
"$1 = \"/gnu/store/@dots{}-coreutils-8.32-debug\"\n"
"$2 = \"/gnu/store/@dots{}-coreutils-8.32\"\n"
"scheme@@(guix-user)> ,build grep\n"
"$3 = \"/gnu/store/@dots{}-grep-3.6\"\n"
"scheme@@(guix-user)> ,build (computed-file \"x\" #~(mkdir #$output))\n"
"building /gnu/store/@dots{}-x.drv...\n"
"$4 = \"/gnu/store/@dots{}-x\"\n"
"scheme@@(guix-user)> ,use(ice-9 ftw)\n"
"scheme@@(guix-user)> (scandir (string-append $3 \"/bin\"))\n"
"$5 = (\".\" \"..\" \"egrep\" \"fgrep\" \"grep\")\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12428
msgid "At a lower-level, a useful command is @code{lower}: it takes a file-like object and ``lowers'' it into a derivation (@pxref{Derivations}) or a store file:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12434
#, no-wrap
msgid ""
"scheme@@(guix-user)> ,lower grep\n"
"$6 = #<derivation /gnu/store/@dots{}-grep-3.6.drv => /gnu/store/@dots{}-grep-3.6 7f0e639115f0>\n"
"scheme@@(guix-user)> ,lower (plain-file \"x\" \"Hello!\")\n"
"$7 = \"/gnu/store/@dots{}-x\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12438
msgid "The full list of REPL commands can be seen by typing @code{,help guix} and is given below for reference."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12439
#, no-wrap
msgid "{REPL command} build @var{object}"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12442
msgid "Lower @var{object} and build it if it's not already built, returning its output file name(s)."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12444
#, no-wrap
msgid "{REPL command} lower @var{object}"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12446
msgid "Lower @var{object} into a derivation or store file name and return it."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12448
#, no-wrap
msgid "{REPL command} verbosity @var{level}"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12450
msgid "Change build verbosity to @var{level}."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12454
msgid "This is similar to the @option{--verbosity} command-line option (@pxref{Common Build Options}): level 0 means total silence, level 1 shows build events only, and higher levels print build logs."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12456
#, no-wrap
msgid "{REPL command} run-in-store @var{exp}"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12459
msgid "Run @var{exp}, a monadic expresssion, through the store monad.  @xref{The Store Monad}, for more information."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12461
#, no-wrap
msgid "{REPL command} enter-store-monad"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:12464
msgid "Enter a new REPL to evaluate monadic expressions (@pxref{The Store Monad}).  You can quit this ``inner'' REPL by typing @code{,q}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12474
msgid "This section describes Guix command-line utilities.  Some of them are primarily targeted at developers and users who write new package definitions, while others are more generally useful.  They complement the Scheme programming interface of Guix in a convenient way."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:12497
#, no-wrap
msgid "package building"
msgstr ""

#. type: command{#1}
#: guix-git/doc/guix.texi:12498
#, no-wrap
msgid "guix build"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12504
msgid "The @command{guix build} command builds packages or derivations and their dependencies, and prints the resulting store paths.  Note that it does not modify the user's profile---this is the job of the @command{guix package} command (@pxref{Invoking guix package}).  Thus, it is mainly useful for distribution developers."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12509
#, no-wrap
msgid "guix build @var{options} @var{package-or-derivation}@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12514
msgid "As an example, the following command builds the latest versions of Emacs and of Guile, displays their build logs, and finally displays the resulting directories:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12517
#, no-wrap
msgid "guix build emacs guile\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12520
msgid "Similarly, the following command builds all the available packages:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12524
#, no-wrap
msgid ""
"guix build --quiet --keep-going \\\n"
"  $(guix package -A | awk '@{ print $1 \"@@\" $2 @}')\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12532
msgid "@var{package-or-derivation} may be either the name of a package found in the software distribution such as @code{coreutils} or @code{coreutils@@8.20}, or a derivation such as @file{/gnu/store/@dots{}-coreutils-8.19.drv}.  In the former case, a package with the corresponding name (and optionally version) is searched for among the GNU distribution modules (@pxref{Package Modules})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12537
msgid "Alternatively, the @option{--expression} option may be used to specify a Scheme expression that evaluates to a package; this is useful when disambiguating among several same-named packages or package variants is needed."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12540
msgid "There may be zero or more @var{options}.  The available options are described in the subsections below."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12555
msgid "A number of options that control the build process are common to @command{guix build} and other commands that can spawn builds, such as @command{guix package} or @command{guix archive}.  These are the following:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12565 guix-git/doc/guix.texi:14611
#: guix-git/doc/guix.texi:15011 guix-git/doc/guix.texi:15156
#: guix-git/doc/guix.texi:15424
msgid "This allows users to define their own packages and make them visible to the command-line tools."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12566
#, no-wrap
msgid "--keep-failed"
msgstr "--keep-failed"

#. type: itemx
#: guix-git/doc/guix.texi:12567
#, no-wrap
msgid "-K"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12573
msgid "Keep the build tree of failed builds.  Thus, if a build fails, its build tree is kept under @file{/tmp}, in a directory whose name is shown at the end of the build log.  This is useful when debugging build issues.  @xref{Debugging Build Failures}, for tips and tricks on how to debug build issues."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12577
msgid "This option implies @option{--no-offload}, and it has no effect when connecting to a remote daemon with a @code{guix://} URI (@pxref{The Store, the @env{GUIX_DAEMON_SOCKET} variable})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12578
#, no-wrap
msgid "--keep-going"
msgstr "--keep-going"

#. type: itemx
#: guix-git/doc/guix.texi:12579
#, no-wrap
msgid "-k"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12582
msgid "Keep going when some of the derivations fail to build; return only once all the builds have either completed or failed."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12585
msgid "The default behavior is to stop as soon as one of the specified derivations has failed."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12589
msgid "Do not build the derivations."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:12591
msgid "fallback-option"
msgstr "fallback-option"

#. type: item
#: guix-git/doc/guix.texi:12591
#, no-wrap
msgid "--fallback"
msgstr "--fallback"

#. type: table
#: guix-git/doc/guix.texi:12594
msgid "When substituting a pre-built binary fails, fall back to building packages locally (@pxref{Substitution Failure})."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:12600
msgid "client-substitute-urls"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12600
msgid "Consider @var{urls} the whitespace-separated list of substitute source URLs, overriding the default list of URLs of @command{guix-daemon} (@pxref{daemon-substitute-urls,, @command{guix-daemon} URLs})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12604
msgid "This means that substitutes may be downloaded from @var{urls}, provided they are signed by a key authorized by the system administrator (@pxref{Substitutes})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12607
msgid "When @var{urls} is the empty string, substitutes are effectively disabled."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12613
#, no-wrap
msgid "--no-grafts"
msgstr "--no-grafts"

#. type: table
#: guix-git/doc/guix.texi:12617
msgid "Do not ``graft'' packages.  In practice, this means that package updates available as grafts are not applied.  @xref{Security Updates}, for more information on grafts."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12618
#, no-wrap
msgid "--rounds=@var{n}"
msgstr "--rounds=@var{n}"

#. type: table
#: guix-git/doc/guix.texi:12621
msgid "Build each derivation @var{n} times in a row, and raise an error if consecutive build results are not bit-for-bit identical."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12626
msgid "This is a useful way to detect non-deterministic builds processes.  Non-deterministic build processes are a problem because they make it practically impossible for users to @emph{verify} whether third-party binaries are genuine.  @xref{Invoking guix challenge}, for more."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12642
msgid "By default, the daemon's setting is honored (@pxref{Invoking guix-daemon, @option{--max-silent-time}})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12649
msgid "By default, the daemon's setting is honored (@pxref{Invoking guix-daemon, @option{--timeout}})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:12652
#, no-wrap
msgid "verbosity, of the command-line tools"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:12653
#, no-wrap
msgid "build logs, verbosity"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12654
#, no-wrap
msgid "-v @var{level}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:12655
#, no-wrap
msgid "--verbosity=@var{level}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12660
msgid "Use the given verbosity @var{level}, an integer.  Choosing 0 means that no output is produced, 1 is for quiet output; 2 is similar to 1 but it additionally displays download URLs; 3 shows all the build log output on standard error."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12665
msgid "Allow the use of up to @var{n} CPU cores for the build.  The special value @code{0} means to use as many CPU cores as available."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12671
msgid "Allow at most @var{n} build jobs in parallel.  @xref{Invoking guix-daemon, @option{--max-jobs}}, for details about this option and the equivalent @command{guix-daemon} option."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12672
#, no-wrap
msgid "--debug=@var{level}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12676
msgid "Produce debugging output coming from the build daemon.  @var{level} must be an integer between 0 and 5; higher means more verbose output.  Setting a level of 4 or more may be helpful when debugging setup issues with the build daemon."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12683
msgid "Behind the scenes, @command{guix build} is essentially an interface to the @code{package-derivation} procedure of the @code{(guix packages)} module, and to the @code{build-derivations} procedure of the @code{(guix derivations)} module."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12687
msgid "In addition to options explicitly passed on the command line, @command{guix build} and other @command{guix} commands that support building honor the @env{GUIX_BUILD_OPTIONS} environment variable."
msgstr ""

#. type: defvr
#: guix-git/doc/guix.texi:12688
#, no-wrap
msgid "{Environment Variable} GUIX_BUILD_OPTIONS"
msgstr ""

#. type: defvr
#: guix-git/doc/guix.texi:12693
msgid "Users can define this variable to a list of command line options that will automatically be used by @command{guix build} and other @command{guix} commands that can perform builds, as in the example below:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12696
#, no-wrap
msgid "$ export GUIX_BUILD_OPTIONS=\"--no-substitutes -c 2 -L /foo/bar\"\n"
msgstr ""

#. type: defvr
#: guix-git/doc/guix.texi:12700
msgid "These options are parsed independently, and the result is appended to the parsed command-line options."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:12706
#, no-wrap
msgid "package variants"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12714
msgid "Another set of command-line options supported by @command{guix build} and also @command{guix package} are @dfn{package transformation options}.  These are options that make it possible to define @dfn{package variants}---for instance, packages built from different source code.  This is a convenient way to create customized packages on the fly without having to type in the definitions of package variants (@pxref{Defining Packages})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12718
msgid "Package transformation options are preserved across upgrades: @command{guix upgrade} attempts to apply transformation options initially used when creating the profile to the upgraded packages."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:12723
msgid "The available options are listed below.  Most commands support them and also support a @option{--help-transform} option that lists all the available options and a synopsis (these options are not shown in the @option{--help} output for brevity)."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:12726
#, fuzzy, no-wrap
#| msgid "formatting code"
msgid "performance, tuning code"
msgstr "formatação de código"

#. type: cindex
#: guix-git/doc/guix.texi:12727
#, fuzzy, no-wrap
#| msgid "customization, of packages"
msgid "optimization, of package code"
msgstr "personalização, de pacotes"

#. type: cindex
#: guix-git/doc/guix.texi:12728
#, fuzzy, no-wrap
#| msgid "formatting, of code"
msgid "tuning, of package code"
msgstr "formatação, de código"

#. type: cindex
#: guix-git/doc/guix.texi:12729
#, no-wrap
msgid "SIMD support"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:12730
#, fuzzy, no-wrap
#| msgid "packages"
msgid "tunable packages"
msgstr "pacotes"

#. type: cindex
#: guix-git/doc/guix.texi:12731
#, fuzzy, no-wrap
#| msgid "package version"
msgid "package multi-versioning"
msgstr "versão de pacote"

#. type: item
#: guix-git/doc/guix.texi:12732
#, fuzzy, no-wrap
#| msgid "--coverage[=@var{count}]"
msgid "--tune[=@var{cpu}]"
msgstr "--coverage[=@var{contagem}]"

#. type: table
#: guix-git/doc/guix.texi:12736
msgid "Use versions of the packages marked as ``tunable'' optimized for @var{cpu}.  When @var{cpu} is @code{native}, or when it is omitted, tune for the CPU on which the @command{guix} command is running."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12742
msgid "Valid @var{cpu} names are those recognized by the underlying compiler, by default the GNU Compiler Collection.  On x86_64 processors, this includes CPU names such as @code{nehalem}, @code{haswell}, and @code{skylake} (@pxref{x86 Options, @code{-march},, gcc, Using the GNU Compiler Collection (GCC)})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12749
msgid "As new generations of CPUs come out, they augment the standard instruction set architecture (ISA) with additional instructions, in particular instructions for single-instruction/multiple-data (SIMD)  parallel processing.  For example, while Core2 and Skylake CPUs both implement the x86_64 ISA, only the latter supports AVX2 SIMD instructions."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12756
msgid "The primary gain one can expect from @option{--tune} is for programs that can make use of those SIMD capabilities @emph{and} that do not already have a mechanism to select the right optimized code at run time.  Packages that have the @code{tunable?} property set are considered @dfn{tunable packages} by the @option{--tune} option; a package definition with the property set looks like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:12761
#, no-wrap
msgid ""
"(package\n"
"  (name \"hello-simd\")\n"
"  ;; ...\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:12765
#, no-wrap
msgid ""
"  ;; This package may benefit from SIMD extensions so\n"
"  ;; mark it as \"tunable\".\n"
"  (properties '((tunable? . #t))))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12770
msgid "Other packages are not considered tunable.  This allows Guix to use generic binaries in the cases where tuning for a specific CPU is unlikely to provide any gain."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12776
msgid "Tuned packages are built with @code{-march=@var{CPU}}; under the hood, the @option{-march} option is passed to the actual wrapper by a compiler wrapper.  Since the build machine may not be able to run code for the target CPU micro-architecture, the test suite is not run when building a tuned package."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12780
msgid "To reduce rebuilds to the minimum, tuned packages are @emph{grafted} onto packages that depend on them (@pxref{Security Updates, grafts}).  Thus, using @option{--no-grafts} cancels the effect of @option{--tune}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12786
msgid "We call this technique @dfn{package multi-versioning}: several variants of tunable packages may be built, one for each CPU variant.  It is the coarse-grain counterpart of @dfn{function multi-versioning} as implemented by the GNU tool chain (@pxref{Function Multiversioning,,, gcc, Using the GNU Compiler Collection (GCC)})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12787
#, no-wrap
msgid "--with-source=@var{source}"
msgstr "--with-source=@var{fonte}"

#. type: itemx
#: guix-git/doc/guix.texi:12788
#, no-wrap
msgid "--with-source=@var{package}=@var{source}"
msgstr "--with-source=@var{pacote}=@var{fonte}"

#. type: itemx
#: guix-git/doc/guix.texi:12789
#, no-wrap
msgid "--with-source=@var{package}@@@var{version}=@var{source}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12794
msgid "Use @var{source} as the source of @var{package}, and @var{version} as its version number.  @var{source} must be a file name or a URL, as for @command{guix download} (@pxref{Invoking guix download})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12800
msgid "When @var{package} is omitted, it is taken to be the package name specified on the command line that matches the base of @var{source}---e.g., if @var{source} is @code{/src/guile-2.0.10.tar.gz}, the corresponding package is @code{guile}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12803
msgid "Likewise, when @var{version} is omitted, the version string is inferred from @var{source}; in the previous example, it is @code{2.0.10}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12808
msgid "This option allows users to try out versions of packages other than the one provided by the distribution.  The example below downloads @file{ed-1.7.tar.gz} from a GNU mirror and uses that as the source for the @code{ed} package:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12811
#, no-wrap
msgid "guix build ed --with-source=mirror://gnu/ed/ed-1.4.tar.gz\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12816
msgid "As a developer, @option{--with-source} makes it easy to test release candidates, and even to test their impact on packages that depend on them:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12819
#, no-wrap
msgid "guix build elogind --with-source=@dots{}/shepherd-0.9.0rc1.tar.gz\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12822
msgid "@dots{} or to build from a checkout in a pristine environment:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12826
#, no-wrap
msgid ""
"$ git clone git://git.sv.gnu.org/guix.git\n"
"$ guix build guix --with-source=guix@@1.0=./guix\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12828
#, no-wrap
msgid "--with-input=@var{package}=@var{replacement}"
msgstr "--with-input=@var{pacote}=@var{substituto}"

#. type: table
#: guix-git/doc/guix.texi:12833
msgid "Replace dependency on @var{package} by a dependency on @var{replacement}.  @var{package} must be a package name, and @var{replacement} must be a package specification such as @code{guile} or @code{guile@@1.8}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12837
msgid "For instance, the following command builds Guix, but replaces its dependency on the current stable version of Guile with a dependency on the legacy version of Guile, @code{guile@@2.2}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12840
#, fuzzy, no-wrap
#| msgid "guix build --with-input=guile=guile@@2.0 guix\n"
msgid "guix build --with-input=guile=guile@@2.2 guix\n"
msgstr "guix build --with-input=guile=guile@@2.0 guix\n"

#. type: table
#: guix-git/doc/guix.texi:12845
msgid "This is a recursive, deep replacement.  So in this example, both @code{guix} and its dependency @code{guile-json} (which also depends on @code{guile}) get rebuilt against @code{guile@@2.2}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12848
msgid "This is implemented using the @code{package-input-rewriting/spec} Scheme procedure (@pxref{Defining Packages, @code{package-input-rewriting/spec}})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12849
#, no-wrap
msgid "--with-graft=@var{package}=@var{replacement}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12855
msgid "This is similar to @option{--with-input} but with an important difference: instead of rebuilding the whole dependency chain, @var{replacement} is built and then @dfn{grafted} onto the binaries that were initially referring to @var{package}.  @xref{Security Updates}, for more information on grafts."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12859
msgid "For example, the command below grafts version 3.5.4 of GnuTLS onto Wget and all its dependencies, replacing references to the version of GnuTLS they currently refer to:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12862
#, no-wrap
msgid "guix build --with-graft=gnutls=gnutls@@3.5.4 wget\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12871
msgid "This has the advantage of being much faster than rebuilding everything.  But there is a caveat: it works if and only if @var{package} and @var{replacement} are strictly compatible---for example, if they provide a library, the application binary interface (ABI) of those libraries must be compatible.  If @var{replacement} is somehow incompatible with @var{package}, then the resulting package may be unusable.  Use with care!"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:12872 guix-git/doc/guix.texi:44858
#, no-wrap
msgid "debugging info, rebuilding"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12873
#, no-wrap
msgid "--with-debug-info=@var{package}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12878
msgid "Build @var{package} in a way that preserves its debugging info and graft it onto packages that depend on it.  This is useful if @var{package} does not already provide debugging info as a @code{debug} output (@pxref{Installing Debugging Files})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12884
msgid "For example, suppose you're experiencing a crash in Inkscape and would like to see what's up in GLib, a library deep down in Inkscape's dependency graph.  GLib lacks a @code{debug} output, so debugging is tough.  Fortunately, you rebuild GLib with debugging info and tack it on Inkscape:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12887 guix-git/doc/guix.texi:44889
#, no-wrap
msgid "guix install inkscape --with-debug-info=glib\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12891
msgid "Only GLib needs to be recompiled so this takes a reasonable amount of time.  @xref{Installing Debugging Files}, for more info."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:12897
msgid "Under the hood, this option works by passing the @samp{#:strip-binaries? #f} to the build system of the package of interest (@pxref{Build Systems}).  Most build systems support that option but some do not.  In that case, an error is raised."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:12901
msgid "Likewise, if a C/C++ package is built without @code{-g} (which is rarely the case), debugging info will remain unavailable even when @code{#:strip-binaries?} is false."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:12903
#, no-wrap
msgid "tool chain, changing the build tool chain of a package"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12904
#, no-wrap
msgid "--with-c-toolchain=@var{package}=@var{toolchain}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12908
msgid "This option changes the compilation of @var{package} and everything that depends on it so that they get built with @var{toolchain} instead of the default GNU tool chain for C/C++."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12915
#, no-wrap
msgid ""
"guix build octave-cli \\\n"
"  --with-c-toolchain=fftw=gcc-toolchain@@10 \\\n"
"  --with-c-toolchain=fftwf=gcc-toolchain@@10\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12922
msgid "The command above builds a variant of the @code{fftw} and @code{fftwf} packages using version 10 of @code{gcc-toolchain} instead of the default tool chain, and then builds a variant of the GNU@tie{}Octave command-line interface using them.  GNU@tie{}Octave itself is also built with @code{gcc-toolchain@@10}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12926
msgid "This other example builds the Hardware Locality (@code{hwloc}) library and its dependents up to @code{intel-mpi-benchmarks} with the Clang C compiler:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12930
#, no-wrap
msgid ""
"guix build --with-c-toolchain=hwloc=clang-toolchain \\\n"
"           intel-mpi-benchmarks\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:12939
msgid "There can be application binary interface (ABI) incompatibilities among tool chains.  This is particularly true of the C++ standard library and run-time support libraries such as that of OpenMP@.  By rebuilding all dependents with the same tool chain, @option{--with-c-toolchain} minimizes the risks of incompatibility but cannot entirely eliminate them.  Choose @var{package} wisely."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12941
#, no-wrap
msgid "--with-git-url=@var{package}=@var{url}"
msgstr "--with-git-url=@var{pacote}=@var{url}"

#. type: cindex
#: guix-git/doc/guix.texi:12942
#, no-wrap
msgid "Git, using the latest commit"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:12943
#, no-wrap
msgid "latest commit, building"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12947
msgid "Build @var{package} from the latest commit of the @code{master} branch of the Git repository at @var{url}.  Git sub-modules of the repository are fetched, recursively."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12950
msgid "For example, the following command builds the NumPy Python library against the latest commit of the master branch of Python itself:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12954
#, no-wrap
msgid ""
"guix build python-numpy \\\n"
"  --with-git-url=python=https://github.com/python/cpython\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12958
msgid "This option can also be combined with @option{--with-branch} or @option{--with-commit} (see below)."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:12959 guix-git/doc/guix.texi:33075
#, no-wrap
msgid "continuous integration"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12965
msgid "Obviously, since it uses the latest commit of the given branch, the result of such a command varies over time.  Nevertheless it is a convenient way to rebuild entire software stacks against the latest commit of one or more packages.  This is particularly useful in the context of continuous integration (CI)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12969
msgid "Checkouts are kept in a cache under @file{~/.cache/guix/checkouts} to speed up consecutive accesses to the same repository.  You may want to clean it up once in a while to save disk space."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12970
#, no-wrap
msgid "--with-branch=@var{package}=@var{branch}"
msgstr "--with-branch=@var{pacote}=@var{ramo}"

#. type: table
#: guix-git/doc/guix.texi:12976
msgid "Build @var{package} from the latest commit of @var{branch}.  If the @code{source} field of @var{package} is an origin with the @code{git-fetch} method (@pxref{origin Reference}) or a @code{git-checkout} object, the repository URL is taken from that @code{source}.  Otherwise you have to use @option{--with-git-url} to specify the URL of the Git repository."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12981
msgid "For instance, the following command builds @code{guile-sqlite3} from the latest commit of its @code{master} branch, and then builds @code{guix} (which depends on it) and @code{cuirass} (which depends on @code{guix}) against this specific @code{guile-sqlite3} build:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:12984
#, no-wrap
msgid "guix build --with-branch=guile-sqlite3=master cuirass\n"
msgstr "guix build --with-branch=guile-sqlite3=master cuirass\n"

#. type: item
#: guix-git/doc/guix.texi:12986
#, no-wrap
msgid "--with-commit=@var{package}=@var{commit}"
msgstr "--with-commit=@var{pacote}=@var{commit}"

#. type: table
#: guix-git/doc/guix.texi:12991
msgid "This is similar to @option{--with-branch}, except that it builds from @var{commit} rather than the tip of a branch.  @var{commit} must be a valid Git commit SHA1 identifier, a tag, or a @command{git describe} style identifier such as @code{1.0-3-gabc123}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:12992
#, no-wrap
msgid "--with-patch=@var{package}=@var{file}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:12999
msgid "Add @var{file} to the list of patches applied to @var{package}, where @var{package} is a spec such as @code{python@@3.8} or @code{glibc}.  @var{file} must contain a patch; it is applied with the flags specified in the @code{origin} of @var{package} (@pxref{origin Reference}), which by default includes @code{-p1} (@pxref{patch Directories,,, diffutils, Comparing and Merging Files})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13002
msgid "As an example, the command below rebuilds Coreutils with the GNU C Library (glibc) patched with the given patch:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13005
#, no-wrap
msgid "guix build coreutils --with-patch=glibc=./glibc-frob.patch\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13009
msgid "In this example, glibc itself as well as everything that leads to Coreutils in the dependency graph is rebuilt."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13010
#, no-wrap
msgid "configure flags, changing them"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13011
#, fuzzy, no-wrap
#| msgid "--with-git-url=@var{package}=@var{url}"
msgid "--with-configure-flag=@var{package}=@var{flag}"
msgstr "--with-git-url=@var{pacote}=@var{url}"

#. type: table
#: guix-git/doc/guix.texi:13016
msgid "Append @var{flag} to the configure flags of @var{package}, where @var{package} is a spec such as @code{guile@@3.0} or @code{glibc}.  The build system of @var{package} must support the @code{#:configure-flags} argument."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13019
msgid "For example, the command below builds GNU@tie{}Hello with the configure flag @code{--disable-nls}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13022
#, no-wrap
msgid "guix build hello --with-configure-flag=hello=--disable-nls\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13026
msgid "The following command passes an extra flag to @command{cmake} as it builds @code{lapack}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13030
#, no-wrap
msgid ""
"guix build lapack \\\n"
"  --with-configure-flag=lapack=-DBUILD_SHARED_LIBS=OFF\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:13037
msgid "Under the hood, this option works by passing the @samp{#:configure-flags} argument to the build system of the package of interest (@pxref{Build Systems}).  Most build systems support that option but some do not.  In that case, an error is raised."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13039
#, no-wrap
msgid "upstream, latest version"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13040
#, no-wrap
msgid "--with-latest=@var{package}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:13041
#, fuzzy, no-wrap
#| msgid "--with-source=@var{package}=@var{source}"
msgid "--with-version=@var{package}=@var{version}"
msgstr "--with-source=@var{pacote}=@var{fonte}"

#. type: table
#: guix-git/doc/guix.texi:13047
msgid "So you like living on the bleeding edge? The @option{--with-latest} option is for you! It replaces occurrences of @var{package} in the dependency graph with its latest upstream version, as reported by @command{guix refresh} (@pxref{Invoking guix refresh})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13051
msgid "It does so by determining the latest upstream release of @var{package} (if possible), downloading it, and authenticating it @emph{if} it comes with an OpenPGP signature."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13054
msgid "As an example, the command below builds Guix against the latest version of Guile-JSON:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13057
#, no-wrap
msgid "guix build guix --with-latest=guile-json\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13064
msgid "The @option{--with-version} works similarly except that it lets you specify that you want precisely @var{version}, assuming that version exists upstream.  For example, to spawn a development environment with SciPy built against version 1.22.4 of NumPy (skipping its test suite because hey, we're not gonna wait this long), you would run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13067
#, no-wrap
msgid "guix shell python python-scipy --with-version=python-numpy=1.22.4\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:13074
msgid "Because they depend on source code published at a given point in time on upstream servers, deployments made with @option{--with-latest} and @option{--with-version} may be non-reproducible: source might disappear or be modified in place on the servers."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:13077
msgid "To deploy old software versions without compromising on reproducibility, @pxref{Invoking guix time-machine, @command{guix time-machine}}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13086
msgid "There are limitations.  First, in cases where the tool cannot or does not know how to authenticate source code, you are at risk of running malicious code; a warning is emitted in this case.  Second, this option simply changes the source used in the existing package definitions, which is not always sufficient: there might be additional dependencies that need to be added, patches to apply, and more generally the quality assurance work that Guix developers normally do will be missing."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13091
msgid "You've been warned! When those limitations are acceptable, it's a snappy way to stay on top.  We encourage you to submit patches updating the actual package definitions once you have successfully tested an upgrade with @option{--with-latest} (@pxref{Contributing})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13092
#, no-wrap
msgid "test suite, skipping"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13093
#, no-wrap
msgid "--without-tests=@var{package}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13099
msgid "Build @var{package} without running its tests.  This can be useful in situations where you want to skip the lengthy test suite of a intermediate package, or if a package's test suite fails in a non-deterministic fashion.  It should be used with care because running the test suite is a good way to ensure a package is working as intended."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13103
msgid "Turning off tests leads to a different store item.  Consequently, when using this option, anything that depends on @var{package} must be rebuilt, as in this example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13106
#, no-wrap
msgid "guix install --without-tests=python python-notebook\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13112
msgid "The command above installs @code{python-notebook} on top of @code{python} built without running its test suite.  To do so, it also rebuilds everything that depends on @code{python}, including @code{python-notebook} itself."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13118
msgid "Internally, @option{--without-tests} relies on changing the @code{#:tests?} option of a package's @code{check} phase (@pxref{Build Systems}).  Note that some packages use a customized @code{check} phase that does not respect a @code{#:tests? #f} setting.  Therefore, @option{--without-tests} has no effect on these packages."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13125
msgid "Wondering how to achieve the same effect using Scheme code, for example in your manifest, or how to write your own package transformation? @xref{Defining Package Variants}, for an overview of the programming interfaces available."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13131
msgid "The command-line options presented below are specific to @command{guix build}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13134
#, no-wrap
msgid "--quiet"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13139
msgid "Build quietly, without displaying the build log; this is equivalent to @option{--verbosity=0}.  Upon completion, the build log is kept in @file{/var} (or similar) and can always be retrieved using the @option{--log-file} option."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13144
msgid "Build the package, derivation, or other file-like object that the code within @var{file} evaluates to (@pxref{G-Expressions, file-like objects})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13147
msgid "As an example, @var{file} might contain a package definition like this (@pxref{Defining Packages}):"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13156
msgid "The @var{file} may also contain a JSON representation of one or more package definitions.  Running @code{guix build -f} on @file{hello.json} with the following contents would result in building the packages @code{myhello} and @code{greeter}:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13161
#, no-wrap
msgid "--manifest=@var{manifest}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:13162
#, no-wrap
msgid "-m @var{manifest}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13165
msgid "Build all packages listed in the given @var{manifest} (@pxref{profile-manifest, @option{--manifest}})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13169
msgid "Build the package or derivation @var{expr} evaluates to."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13173
msgid "For example, @var{expr} may be @code{(@@ (gnu packages guile)  guile-1.8)}, which unambiguously designates this specific variant of version 1.8 of Guile."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13177
msgid "Alternatively, @var{expr} may be a G-expression, in which case it is used as a build program passed to @code{gexp->derivation} (@pxref{G-Expressions})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13181
msgid "Lastly, @var{expr} may refer to a zero-argument monadic procedure (@pxref{The Store Monad}).  The procedure must return a derivation as a monadic value, which is then passed through @code{run-with-store}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13182
#, no-wrap
msgid "--source"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:13183
#, no-wrap
msgid "-S"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13186
msgid "Build the source derivations of the packages, rather than the packages themselves."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13190
msgid "For instance, @code{guix build -S gcc} returns something like @file{/gnu/store/@dots{}-gcc-4.7.2.tar.bz2}, which is the GCC source tarball."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13194
msgid "The returned source tarball is the result of applying any patches and code snippets specified in the package @code{origin} (@pxref{Defining Packages})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13195
#, no-wrap
msgid "source, verification"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13201
msgid "As with other derivations, the result of building a source derivation can be verified using the @option{--check} option (@pxref{build-check}).  This is useful to validate that a (potentially already built or substituted, thus cached) package source matches against its declared hash."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13206
msgid "Note that @command{guix build -S} compiles the sources only of the specified packages.  They do not include the sources of statically linked dependencies and by themselves are insufficient for reproducing the packages."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13207
#, no-wrap
msgid "--sources"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13214
msgid "Fetch and return the source of @var{package-or-derivation} and all their dependencies, recursively.  This is a handy way to obtain a local copy of all the source code needed to build @var{packages}, allowing you to eventually build them even without network access.  It is an extension of the @option{--source} option and can accept one of the following optional argument values:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13216 guix-git/doc/guix.texi:15210
#, no-wrap
msgid "package"
msgstr "pacote"

#. type: table
#: guix-git/doc/guix.texi:13219
msgid "This value causes the @option{--sources} option to behave in the same way as the @option{--source} option."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13220 guix-git/doc/guix.texi:22654
#, no-wrap
msgid "all"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13223
msgid "Build the source derivations of all packages, including any source that might be listed as @code{inputs}.  This is the default value."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13229
#, no-wrap
msgid ""
"$ guix build --sources tzdata\n"
"The following derivations will be built:\n"
"   /gnu/store/@dots{}-tzdata2015b.tar.gz.drv\n"
"   /gnu/store/@dots{}-tzcode2015b.tar.gz.drv\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13231
#, no-wrap
msgid "transitive"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13235
msgid "Build the source derivations of all packages, as well of all transitive inputs to the packages.  This can be used e.g.@: to prefetch package source for later offline building."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13246
#, no-wrap
msgid ""
"$ guix build --sources=transitive tzdata\n"
"The following derivations will be built:\n"
"   /gnu/store/@dots{}-tzcode2015b.tar.gz.drv\n"
"   /gnu/store/@dots{}-findutils-4.4.2.tar.xz.drv\n"
"   /gnu/store/@dots{}-grep-2.21.tar.xz.drv\n"
"   /gnu/store/@dots{}-coreutils-8.23.tar.xz.drv\n"
"   /gnu/store/@dots{}-make-4.1.tar.xz.drv\n"
"   /gnu/store/@dots{}-bash-4.3.tar.xz.drv\n"
"@dots{}\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13256
msgid "Attempt to build for @var{system}---e.g., @code{i686-linux}---instead of the system type of the build host.  The @command{guix build} command allows you to repeat this option several times, in which case it builds for all the specified systems; other commands ignore extraneous @option{-s} options."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:13261
msgid "The @option{--system} flag is for @emph{native} compilation and must not be confused with cross-compilation.  See @option{--target} below for information on cross-compilation."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13268
msgid "An example use of this is on Linux-based systems, which can emulate different personalities.  For instance, passing @option{--system=i686-linux} on an @code{x86_64-linux} system or @option{--system=armhf-linux} on an @code{aarch64-linux} system allows you to build packages in a complete 32-bit environment."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:13273
msgid "Building for an @code{armhf-linux} system is unconditionally enabled on @code{aarch64-linux} machines, although certain aarch64 chipsets do not allow for this functionality, notably the ThunderX."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13279
msgid "Similarly, when transparent emulation with QEMU and @code{binfmt_misc} is enabled (@pxref{Virtualization Services, @code{qemu-binfmt-service-type}}), you can build for any system for which a QEMU @code{binfmt_misc} handler is installed."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13283
msgid "Builds for a system other than that of the machine you are using can also be offloaded to a remote machine of the right architecture.  @xref{Daemon Offload Setup}, for more information on offloading."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13289
msgid "Cross-build for @var{triplet}, which must be a valid GNU triplet, such as @code{\"aarch64-linux-gnu\"} (@pxref{Specifying Target Triplets, GNU configuration triplets,, autoconf, Autoconf})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13290
#, fuzzy, no-wrap
#| msgid "--list-transitive"
msgid "--list-systems"
msgstr "--list-transitive"

#. type: table
#: guix-git/doc/guix.texi:13293
msgid "List all the supported systems, that can be passed as an argument to @option{--system}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13294
#, fuzzy, no-wrap
#| msgid "--list-failures"
msgid "--list-targets"
msgstr "--list-failures"

#. type: table
#: guix-git/doc/guix.texi:13297
msgid "List all the supported targets, that can be passed as an argument to @option{--target}."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:13299
msgid "build-check"
msgstr "build-check"

#. type: cindex
#: guix-git/doc/guix.texi:13300
#, no-wrap
msgid "determinism, checking"
msgstr "determinismo, verificação"

#. type: cindex
#: guix-git/doc/guix.texi:13301
#, no-wrap
msgid "reproducibility, checking"
msgstr "reprodutibilidade, verificação"

#. type: table
#: guix-git/doc/guix.texi:13305
msgid "Rebuild @var{package-or-derivation}, which are already available in the store, and raise an error if the build results are not bit-for-bit identical."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13310
msgid "This mechanism allows you to check whether previously installed substitutes are genuine (@pxref{Substitutes}), or whether the build result of a package is deterministic.  @xref{Invoking guix challenge}, for more background information and tools."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13315
#, no-wrap
msgid "--repair"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13316
#, no-wrap
msgid "repairing store items"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13320
msgid "Attempt to repair the specified store items, if they are corrupt, by re-downloading or rebuilding them."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13322
msgid "This operation is not atomic and thus restricted to @code{root}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13323
#, no-wrap
msgid "--derivations"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13327
msgid "Return the derivation paths, not the output paths, of the given packages."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13330
#, no-wrap
msgid "GC roots, adding"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13331
#, no-wrap
msgid "garbage collector roots, adding"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13334 guix-git/doc/guix.texi:40375
msgid "Make @var{file} a symlink to the result, and register it as a garbage collector root."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13340
msgid "Consequently, the results of this @command{guix build} invocation are protected from garbage collection until @var{file} is removed.  When that option is omitted, build results are eligible for garbage collection as soon as the build completes.  @xref{Invoking guix gc}, for more on GC roots."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13341
#, no-wrap
msgid "--log-file"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13342
#, no-wrap
msgid "build logs, access"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13346
msgid "Return the build log file names or URLs for the given @var{package-or-derivation}, or raise an error if build logs are missing."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13349
msgid "This works regardless of how packages or derivations are specified.  For instance, the following invocations are equivalent:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13355
#, no-wrap
msgid ""
"guix build --log-file $(guix build -d guile)\n"
"guix build --log-file $(guix build guile)\n"
"guix build --log-file guile\n"
"guix build --log-file -e '(@@ (gnu packages guile) guile-2.0)'\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13360
msgid "If a log is unavailable locally, and unless @option{--no-substitutes} is passed, the command looks for a corresponding log on one of the substitute servers (as specified with @option{--substitute-urls})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13363
msgid "So for instance, imagine you want to see the build log of GDB on @code{aarch64}, but you are actually on an @code{x86_64} machine:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13367
#, no-wrap
msgid ""
"$ guix build --log-file gdb -s aarch64-linux\n"
"https://@value{SUBSTITUTE-SERVER-1}/log/@dots{}-gdb-7.10\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13370
msgid "You can freely access a huge library of build logs!"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13375
#, no-wrap
msgid "build failures, debugging"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13381
msgid "When defining a new package (@pxref{Defining Packages}), you will probably find yourself spending some time debugging and tweaking the build until it succeeds.  To do that, you need to operate the build commands yourself in an environment as close as possible to the one the build daemon uses."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13386
msgid "To that end, the first thing to do is to use the @option{--keep-failed} or @option{-K} option of @command{guix build}, which will keep the failed build tree in @file{/tmp} or whatever directory you specified as @env{TMPDIR} (@pxref{Common Build Options, @option{--keep-failed}})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13392
msgid "From there on, you can @command{cd} to the failed build tree and source the @file{environment-variables} file, which contains all the environment variable definitions that were in place when the build failed.  So let's say you're debugging a build failure in package @code{foo}; a typical session would look like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13399
#, no-wrap
msgid ""
"$ guix build foo -K\n"
"@dots{} @i{build fails}\n"
"$ cd /tmp/guix-build-foo.drv-0\n"
"$ source ./environment-variables\n"
"$ cd foo-1.2\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13403
msgid "Now, you can invoke commands as if you were the daemon (almost) and troubleshoot your build process."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13409
msgid "Sometimes it happens that, for example, a package's tests pass when you run them manually but they fail when the daemon runs them.  This can happen because the daemon runs builds in containers where, unlike in our environment above, network access is missing, @file{/bin/sh} does not exist, etc. (@pxref{Build Environment Setup})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13412
msgid "In such cases, you may need to run inspect the build process from within a container similar to the one the build daemon creates:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13420
#, no-wrap
msgid ""
"$ guix build -K foo\n"
"@dots{}\n"
"$ cd /tmp/guix-build-foo.drv-0\n"
"$ guix shell --no-grafts -C -D foo strace gdb\n"
"[env]# source ./environment-variables\n"
"[env]# cd foo-1.2\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13429
msgid "Here, @command{guix shell -C} creates a container and spawns a new shell in it (@pxref{Invoking guix shell}).  The @command{strace gdb} part adds the @command{strace} and @command{gdb} commands to the container, which you may find handy while debugging.  The @option{--no-grafts} option makes sure we get the exact same environment, with ungrafted packages (@pxref{Security Updates}, for more info on grafts)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13432
msgid "To get closer to a container like that used by the build daemon, we can remove @file{/bin/sh}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13435
#, no-wrap
msgid "[env]# rm /bin/sh\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13439
msgid "(Don't worry, this is harmless: this is all happening in the throw-away container created by @command{guix shell}.)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13442
msgid "The @command{strace} command is probably not in the search path, but we can run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13445
#, no-wrap
msgid "[env]# $GUIX_ENVIRONMENT/bin/strace -f -o log make check\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13450
msgid "In this way, not only you will have reproduced the environment variables the daemon uses, you will also be running the build process in a container similar to the one the daemon uses."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:13453
#, no-wrap
msgid "Invoking @command{guix edit}"
msgstr "Invocando @command{guix edit}"

#. type: command{#1}
#: guix-git/doc/guix.texi:13455
#, no-wrap
msgid "guix edit"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13456
#, no-wrap
msgid "package definition, editing"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13461
msgid "So many packages, so many source files! The @command{guix edit} command facilitates the life of users and packagers by pointing their editor at the source file containing the definition of the specified packages.  For instance:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13464
#, no-wrap
msgid "guix edit gcc@@4.9 vim\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13470
msgid "launches the program specified in the @env{VISUAL} or in the @env{EDITOR} environment variable to view the recipe of GCC@tie{}4.9.3 and that of Vim."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13476
msgid "If you are using a Guix Git checkout (@pxref{Building from Git}), or have created your own packages on @env{GUIX_PACKAGE_PATH} (@pxref{Package Modules}), you will be able to edit the package recipes.  In other cases, you will be able to examine the read-only recipes for packages currently in the store."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13481
msgid "Instead of @env{GUIX_PACKAGE_PATH}, the command-line option @option{--load-path=@var{directory}} (or in short @option{-L @var{directory}}) allows you to add @var{directory} to the front of the package module search path and so make your own packages visible."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:13483
#, no-wrap
msgid "Invoking @command{guix download}"
msgstr "Invocando @command{guix download}"

#. type: command{#1}
#: guix-git/doc/guix.texi:13485
#, no-wrap
msgid "guix download"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13486
#, no-wrap
msgid "downloading package sources"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13493
msgid "When writing a package definition, developers typically need to download a source tarball, compute its SHA256 hash, and write that hash in the package definition (@pxref{Defining Packages}).  The @command{guix download} tool helps with this task: it downloads a file from the given URI, adds it to the store, and prints both its file name in the store and its SHA256 hash."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13500
msgid "The fact that the downloaded file is added to the store saves bandwidth: when the developer eventually tries to build the newly defined package with @command{guix build}, the source tarball will not have to be downloaded again because it is already in the store.  It is also a convenient way to temporarily stash files, which may be deleted eventually (@pxref{Invoking guix gc})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13508
msgid "The @command{guix download} command supports the same URIs as used in package definitions.  In particular, it supports @code{mirror://} URIs.  @code{https} URIs (HTTP over TLS) are supported @emph{provided} the Guile bindings for GnuTLS are available in the user's environment; when they are not available, an error is raised.  @xref{Guile Preparations, how to install the GnuTLS bindings for Guile,, gnutls-guile, GnuTLS-Guile}, for more information."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13513
msgid "@command{guix download} verifies HTTPS server certificates by loading the certificates of X.509 authorities from the directory pointed to by the @env{SSL_CERT_DIR} environment variable (@pxref{X.509 Certificates}), unless @option{--no-check-certificate} is used."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13515 guix-git/doc/guix.texi:15528
msgid "The following options are available:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13517 guix-git/doc/guix.texi:13561
#, no-wrap
msgid "--hash=@var{algorithm}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:13518 guix-git/doc/guix.texi:13562
#, no-wrap
msgid "-H @var{algorithm}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13521
msgid "Compute a hash using the specified @var{algorithm}.  @xref{Invoking guix hash}, for more information."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13522 guix-git/doc/guix.texi:13571
#, no-wrap
msgid "--format=@var{fmt}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:13523 guix-git/doc/guix.texi:13572
#, no-wrap
msgid "-f @var{fmt}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13526
msgid "Write the hash in the format specified by @var{fmt}.  For more information on the valid values for @var{fmt}, @pxref{Invoking guix hash}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13527
#, no-wrap
msgid "--no-check-certificate"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13529
msgid "Do not validate the X.509 certificates of HTTPS servers."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13533
msgid "When using this option, you have @emph{absolutely no guarantee} that you are communicating with the authentic server responsible for the given URL, which makes you vulnerable to ``man-in-the-middle'' attacks."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13534
#, no-wrap
msgid "--output=@var{file}"
msgstr "--output=@var{arquivo}"

#. type: itemx
#: guix-git/doc/guix.texi:13535
#, no-wrap
msgid "-o @var{file}"
msgstr "-o @var{arquivo}"

#. type: table
#: guix-git/doc/guix.texi:13538
msgid "Save the downloaded file to @var{file} instead of adding it to the store."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:13541
#, no-wrap
msgid "Invoking @command{guix hash}"
msgstr "Invocando @command{guix hash}"

#. type: command{#1}
#: guix-git/doc/guix.texi:13543
#, no-wrap
msgid "guix hash"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13548
msgid "The @command{guix hash} command computes the hash of a file.  It is primarily a convenience tool for anyone contributing to the distribution: it computes the cryptographic hash of one or more files, which can be used in the definition of a package (@pxref{Defining Packages})."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13553
#, fuzzy, no-wrap
#| msgid "-r @var{package} @dots{}"
msgid "guix hash @var{option} @var{file} ...\n"
msgstr "guix hash @var{option} @var{file} ...\n"

#. type: Plain text
#: guix-git/doc/guix.texi:13558
msgid "When @var{file} is @code{-} (a hyphen), @command{guix hash} computes the hash of data read from standard input.  @command{guix hash} has the following options:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13565
msgid "Compute a hash using the specified @var{algorithm}, @code{sha256} by default."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13570
msgid "@var{algorithm} must be the name of a cryptographic hash algorithm supported by Libgcrypt @i{via} Guile-Gcrypt---e.g., @code{sha512} or @code{sha3-256} (@pxref{Hash Functions,,, guile-gcrypt, Guile-Gcrypt Reference Manual})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13574
msgid "Write the hash in the format specified by @var{fmt}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13577
msgid "Supported formats: @code{base64}, @code{nix-base32}, @code{base32}, @code{base16} (@code{hex} and @code{hexadecimal} can be used as well)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13581
msgid "If the @option{--format} option is not specified, @command{guix hash} will output the hash in @code{nix-base32}.  This representation is used in the definitions of packages."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13587
msgid "The @option{--recursive} option is deprecated in favor of @option{--serializer=nar} (see below); @option{-r} remains accepted as a convenient shorthand."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13588
#, fuzzy, no-wrap
#| msgid "--profile=@var{profile}"
msgid "--serializer=@var{type}"
msgstr "--profile=@var{perfil}"

#. type: itemx
#: guix-git/doc/guix.texi:13589
#, fuzzy, no-wrap
#| msgid "-t @var{type}"
msgid "-S @var{type}"
msgstr "-t @var{tipo}"

#. type: table
#: guix-git/doc/guix.texi:13591
msgid "Compute the hash on @var{file} using @var{type} serialization."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13593
msgid "@var{type} may be one of the following:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13595 guix-git/doc/guix.texi:15887
#: guix-git/doc/guix.texi:20149 guix-git/doc/guix.texi:22651
#, no-wrap
msgid "none"
msgstr "nenhuma"

#. type: table
#: guix-git/doc/guix.texi:13597
msgid "This is the default: it computes the hash of a file's contents."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13598
#, no-wrap
msgid "nar"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13608
msgid "Compute the hash of a ``normalized archive'' (or ``nar'') containing @var{file}, including its children if it is a directory.  Some of the metadata of @var{file} is part of the archive; for instance, when @var{file} is a regular file, the hash is different depending on whether @var{file} is executable or not.  Metadata such as time stamps have no impact on the hash (@pxref{Invoking guix archive}, for more info on the nar format)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13609
#, no-wrap
msgid "git"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13612
msgid "Compute the hash of the file or directory as a Git ``tree'', following the same method as the Git version control system."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13614
#, no-wrap
msgid "--exclude-vcs"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:13615 guix-git/doc/guix.texi:14986
#, no-wrap
msgid "-x"
msgstr "-x"

#. type: table
#: guix-git/doc/guix.texi:13618
msgid "When combined with @option{--recursive}, exclude version control system directories (@file{.bzr}, @file{.git}, @file{.hg}, etc.)."
msgstr ""

#. type: vindex
#: guix-git/doc/guix.texi:13619
#, no-wrap
msgid "git-fetch"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13623
msgid "As an example, here is how you would compute the hash of a Git checkout, which is useful when using the @code{git-fetch} method (@pxref{origin Reference}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13628
#, no-wrap
msgid ""
"$ git clone http://example.org/foo.git\n"
"$ cd foo\n"
"$ guix hash -x --serializer=nar .\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13632 guix-git/doc/guix.texi:13637
#, no-wrap
msgid "Invoking @command{guix import}"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13634
#, no-wrap
msgid "importing packages"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13635
#, no-wrap
msgid "package import"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13636
#, no-wrap
msgid "package conversion"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13644
msgid "The @command{guix import} command is useful for people who would like to add a package to the distribution with as little work as possible---a legitimate demand.  The command knows of a few repositories from which it can ``import'' package metadata.  The result is a package definition, or a template thereof, in the format we know (@pxref{Defining Packages})."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13649
#, no-wrap
msgid "guix import @var{importer} @var{options}@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13654
msgid "@var{importer} specifies the source from which to import package metadata, and @var{options} specifies a package identifier and other options specific to @var{importer}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13658
msgid "Some of the importers rely on the ability to run the @command{gpgv} command.  For these, GnuPG must be installed and in @code{$PATH}; run @code{guix install gnupg} if needed."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:13660
msgid "Currently, the available ``importers'' are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13662 guix-git/doc/guix.texi:14386
#, no-wrap
msgid "gnu"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13666
msgid "Import metadata for the given GNU package.  This provides a template for the latest version of that GNU package, including the hash of its source tarball, and its canonical synopsis and description."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13669
msgid "Additional information such as the package dependencies and its license needs to be figured out manually."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13672
msgid "For example, the following command returns a package definition for GNU@tie{}Hello:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13675
#, no-wrap
msgid "guix import gnu hello\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13678 guix-git/doc/guix.texi:13929
#: guix-git/doc/guix.texi:13979 guix-git/doc/guix.texi:14008
msgid "Specific command-line options are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13680 guix-git/doc/guix.texi:14584
#, no-wrap
msgid "--key-download=@var{policy}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13684
msgid "As for @command{guix refresh}, specify the policy to handle missing OpenPGP keys when verifying the package signature.  @xref{Invoking guix refresh, @option{--key-download}}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13686 guix-git/doc/guix.texi:13687
#: guix-git/doc/guix.texi:14410
#, no-wrap
msgid "pypi"
msgstr "pypi"

#. type: table
#: guix-git/doc/guix.texi:13694
msgid "Import metadata from the @uref{https://pypi.python.org/, Python Package Index}.  Information is taken from the JSON-formatted description available at @code{pypi.python.org} and usually includes all the relevant information, including package dependencies.  For maximum efficiency, it is recommended to install the @command{unzip} utility, so that the importer can unzip Python wheels and gather data from them."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13697
msgid "The command below imports metadata for the latest version of the @code{itsdangerous} Python package:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13700
#, no-wrap
msgid "guix import pypi itsdangerous\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13703 guix-git/doc/guix.texi:13734
#: guix-git/doc/guix.texi:13812 guix-git/doc/guix.texi:14182
msgid "You can also ask for a specific version:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13706
#, no-wrap
msgid "guix import pypi itsdangerous@@1.1.0\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13714 guix-git/doc/guix.texi:13745
#: guix-git/doc/guix.texi:13777 guix-git/doc/guix.texi:13952
#: guix-git/doc/guix.texi:13993 guix-git/doc/guix.texi:14044
#: guix-git/doc/guix.texi:14069 guix-git/doc/guix.texi:14094
#: guix-git/doc/guix.texi:14110 guix-git/doc/guix.texi:14158
#: guix-git/doc/guix.texi:14194 guix-git/doc/guix.texi:14221
#: guix-git/doc/guix.texi:45062
msgid "Traverse the dependency graph of the given upstream package recursively and generate package expressions for all those packages that are not yet in Guix."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13716 guix-git/doc/guix.texi:13717
#: guix-git/doc/guix.texi:14412
#, no-wrap
msgid "gem"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13726
msgid "Import metadata from @uref{https://rubygems.org/, RubyGems}.  Information is taken from the JSON-formatted description available at @code{rubygems.org} and includes most relevant information, including runtime dependencies.  There are some caveats, however.  The metadata doesn't distinguish between synopses and descriptions, so the same string is used for both fields.  Additionally, the details of non-Ruby dependencies required to build native extensions is unavailable and left as an exercise to the packager."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13728
msgid "The command below imports metadata for the @code{rails} Ruby package:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13731
#, no-wrap
msgid "guix import gem rails\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13737
#, no-wrap
msgid "guix import gem rails@@7.0.4\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13747 guix-git/doc/guix.texi:13748
#, no-wrap
msgid "minetest"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13749
#, fuzzy, no-wrap
#| msgid "contents"
msgid "ContentDB"
msgstr "conteúdo"

#. type: table
#: guix-git/doc/guix.texi:13758
msgid "Import metadata from @uref{https://content.minetest.net, ContentDB}.  Information is taken from the JSON-formatted metadata provided through @uref{https://content.minetest.net/help/api/, ContentDB's API} and includes most relevant information, including dependencies.  There are some caveats, however.  The license information is often incomplete.  The commit hash is sometimes missing.  The descriptions are in the Markdown format, but Guix uses Texinfo instead.  Texture packs and subgames are unsupported."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13760
msgid "The command below imports metadata for the Mesecons mod by Jeija:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13763
#, no-wrap
msgid "guix import minetest Jeija/mesecons\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13766
msgid "The author name can also be left out:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13769
#, no-wrap
msgid "guix import minetest mesecons\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13779 guix-git/doc/guix.texi:14408
#, no-wrap
msgid "cpan"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13780
#, no-wrap
msgid "CPAN"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13788
msgid "Import metadata from @uref{https://www.metacpan.org/, MetaCPAN}.  Information is taken from the JSON-formatted metadata provided through @uref{https://fastapi.metacpan.org/, MetaCPAN's API} and includes most relevant information, such as module dependencies.  License information should be checked closely.  If Perl is available in the store, then the @code{corelist} utility will be used to filter core modules out of the list of dependencies."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13791
msgid "The command command below imports metadata for the Acme::Boolean Perl module:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13794
#, no-wrap
msgid "guix import cpan Acme::Boolean\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13796 guix-git/doc/guix.texi:14404
#, no-wrap
msgid "cran"
msgstr "cran"

#. type: cindex
#: guix-git/doc/guix.texi:13797
#, no-wrap
msgid "CRAN"
msgstr "CRAN"

#. type: cindex
#: guix-git/doc/guix.texi:13798
#, no-wrap
msgid "Bioconductor"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13802
msgid "Import metadata from @uref{https://cran.r-project.org/, CRAN}, the central repository for the @uref{https://r-project.org, GNU@tie{}R statistical and graphical environment}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13804
msgid "Information is extracted from the @file{DESCRIPTION} file of the package."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13806
msgid "The command command below imports metadata for the Cairo R package:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13809
#, no-wrap
msgid "guix import cran Cairo\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13815
#, no-wrap
msgid "guix import cran rasterVis@@0.50.3\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13820
msgid "When @option{--recursive} is added, the importer will traverse the dependency graph of the given upstream package recursively and generate package expressions for all those packages that are not yet in Guix."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13827
msgid "When @option{--style=specification} is added, the importer will generate package definitions whose inputs are package specifications instead of references to package variables.  This is useful when generated package definitions are to be appended to existing user modules, as the list of used package modules need not be changed.  The default is @option{--style=variable}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13831
msgid "When @option{--prefix=license:} is added, the importer will prefix license atoms with @code{license:}, allowing a prefixed import of @code{(guix licenses)}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13836
msgid "When @option{--archive=bioconductor} is added, metadata is imported from @uref{https://www.bioconductor.org/, Bioconductor}, a repository of R packages for the analysis and comprehension of high-throughput genomic data in bioinformatics."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13839
msgid "Information is extracted from the @file{DESCRIPTION} file contained in the package archive."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13841
msgid "The command below imports metadata for the GenomicRanges R package:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13844
#, no-wrap
msgid "guix import cran --archive=bioconductor GenomicRanges\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13849
msgid "Finally, you can also import R packages that have not yet been published on CRAN or Bioconductor as long as they are in a git repository.  Use @option{--archive=git} followed by the URL of the git repository:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13852
#, no-wrap
msgid "guix import cran --archive=git https://github.com/immunogenomics/harmony\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13854
#, no-wrap
msgid "texlive"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13855
#, no-wrap
msgid "TeX Live"
msgstr "TeX Live"

#. type: cindex
#: guix-git/doc/guix.texi:13856
#, no-wrap
msgid "CTAN"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13860
msgid "Import TeX package information from the TeX Live package database for TeX packages that are part of the @uref{https://www.tug.org/texlive/, TeX Live distribution}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13865
msgid "Information about the package is obtained from the TeX Live package database, a plain text file that is included in the @code{texlive-bin} package.  The source code is downloaded from possibly multiple locations in the SVN repository of the Tex Live project."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13868
msgid "The command command below imports metadata for the @code{fontspec} TeX package:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13871
#, no-wrap
msgid "guix import texlive fontspec\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:13874
#, no-wrap
msgid "JSON, import"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13877
msgid "Import package metadata from a local JSON file.  Consider the following example package definition in JSON format:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13890
#, no-wrap
msgid ""
"@{\n"
"  \"name\": \"hello\",\n"
"  \"version\": \"2.10\",\n"
"  \"source\": \"mirror://gnu/hello/hello-2.10.tar.gz\",\n"
"  \"build-system\": \"gnu\",\n"
"  \"home-page\": \"https://www.gnu.org/software/hello/\",\n"
"  \"synopsis\": \"Hello, GNU world: An example GNU package\",\n"
"  \"description\": \"GNU Hello prints a greeting.\",\n"
"  \"license\": \"GPL-3.0+\",\n"
"  \"native-inputs\": [\"gettext\"]\n"
"@}\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13896
msgid "The field names are the same as for the @code{<package>} record (@xref{Defining Packages}).  References to other packages are provided as JSON lists of quoted package specification strings such as @code{guile} or @code{guile@@2.0}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13899
msgid "The importer also supports a more explicit source definition using the common fields for @code{<origin>} records:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13912
#, no-wrap
msgid ""
"@{\n"
"  @dots{}\n"
"  \"source\": @{\n"
"    \"method\": \"url-fetch\",\n"
"    \"uri\": \"mirror://gnu/hello/hello-2.10.tar.gz\",\n"
"    \"sha256\": @{\n"
"      \"base32\": \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"\n"
"    @}\n"
"  @}\n"
"  @dots{}\n"
"@}\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13916
msgid "The command below reads metadata from the JSON file @code{hello.json} and outputs a package expression:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13919
#, no-wrap
msgid "guix import json hello.json\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13921 guix-git/doc/guix.texi:13922
#: guix-git/doc/guix.texi:14416
#, no-wrap
msgid "hackage"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13927
msgid "Import metadata from the Haskell community's central package archive @uref{https://hackage.haskell.org/, Hackage}.  Information is taken from Cabal files and includes all the relevant information, including package dependencies."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13931
#, no-wrap
msgid "--stdin"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:13932
#, no-wrap
msgid "-s"
msgstr "-s"

#. type: table
#: guix-git/doc/guix.texi:13934
msgid "Read a Cabal file from standard input."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13934 guix-git/doc/guix.texi:13981
#, no-wrap
msgid "--no-test-dependencies"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13937 guix-git/doc/guix.texi:13984
msgid "Do not include dependencies required only by the test suites."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13937
#, no-wrap
msgid "--cabal-environment=@var{alist}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:13938
#, no-wrap
msgid "-e @var{alist}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13947
msgid "@var{alist} is a Scheme alist defining the environment in which the Cabal conditionals are evaluated.  The accepted keys are: @code{os}, @code{arch}, @code{impl} and a string representing the name of a flag.  The value associated with a flag has to be either the symbol @code{true} or @code{false}.  The value associated with other keys has to conform to the Cabal file format definition.  The default value associated with the keys @code{os}, @code{arch} and @code{impl} is @samp{linux}, @samp{x86_64} and @samp{ghc}, respectively."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13957
msgid "The command below imports metadata for the latest version of the HTTP Haskell package without including test dependencies and specifying the value of the flag @samp{network-uri} as @code{false}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13960
#, no-wrap
msgid "guix import hackage -t -e \"'((\\\"network-uri\\\" . false))\" HTTP\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13964
msgid "A specific package version may optionally be specified by following the package name by an at-sign and a version number as in the following example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:13967
#, no-wrap
msgid "guix import hackage mtl@@2.1.3.1\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13969 guix-git/doc/guix.texi:13970
#: guix-git/doc/guix.texi:14418
#, no-wrap
msgid "stackage"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13977
msgid "The @code{stackage} importer is a wrapper around the @code{hackage} one.  It takes a package name, looks up the package version included in a long-term support (LTS) @uref{https://www.stackage.org, Stackage} release and uses the @code{hackage} importer to retrieve its metadata.  Note that it is up to you to select an LTS release compatible with the GHC compiler used by Guix."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:13984
#, no-wrap
msgid "--lts-version=@var{version}"
msgstr "--lts-version=@var{versão}"

#. type: itemx
#: guix-git/doc/guix.texi:13985
#, no-wrap
msgid "-l @var{version}"
msgstr "-l @var{versão}"

#. type: table
#: guix-git/doc/guix.texi:13988
msgid "@var{version} is the desired LTS release version.  If omitted the latest release is used."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:13997
msgid "The command below imports metadata for the HTTP Haskell package included in the LTS Stackage release version 7.18:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14000
#, no-wrap
msgid "guix import stackage --lts-version=7.18 HTTP\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14002 guix-git/doc/guix.texi:14003
#: guix-git/doc/guix.texi:14402
#, no-wrap
msgid "elpa"
msgstr "elpa"

#. type: table
#: guix-git/doc/guix.texi:14006
msgid "Import metadata from an Emacs Lisp Package Archive (ELPA) package repository (@pxref{Packages,,, emacs, The GNU Emacs Manual})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14010
#, no-wrap
msgid "--archive=@var{repo}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:14011
#, no-wrap
msgid "-a @var{repo}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14015
msgid "@var{repo} identifies the archive repository from which to retrieve the information.  Currently the supported repositories and their identifiers are:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:14019
msgid "@uref{https://elpa.gnu.org/packages, GNU}, selected by the @code{gnu} identifier.  This is the default."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:14025
msgid "Packages from @code{elpa.gnu.org} are signed with one of the keys contained in the GnuPG keyring at @file{share/emacs/25.1/etc/package-keyring.gpg} (or similar) in the @code{emacs} package (@pxref{Package Installation, ELPA package signatures,, emacs, The GNU Emacs Manual})."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:14029
msgid "@uref{https://elpa.nongnu.org/nongnu/, NonGNU}, selected by the @code{nongnu} identifier."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:14033
msgid "@uref{https://stable.melpa.org/packages, MELPA-Stable}, selected by the @code{melpa-stable} identifier."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:14037
msgid "@uref{https://melpa.org/packages, MELPA}, selected by the @code{melpa} identifier."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14046 guix-git/doc/guix.texi:14047
#: guix-git/doc/guix.texi:14420
#, no-wrap
msgid "crate"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14050
msgid "Import metadata from the crates.io Rust package repository @uref{https://crates.io, crates.io}, as in this example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14053
#, no-wrap
msgid "guix import crate blake2-rfc\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14056
msgid "The crate importer also allows you to specify a version string:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14059
#, no-wrap
msgid "guix import crate constant-time-eq@@0.1.0\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14062 guix-git/doc/guix.texi:14087
#: guix-git/doc/guix.texi:14103 guix-git/doc/guix.texi:14151
#: guix-git/doc/guix.texi:14188 guix-git/doc/guix.texi:14214
#: guix-git/doc/guix.texi:45055
msgid "Additional options include:"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:14071 guix-git/doc/guix.texi:14072
#, no-wrap
msgid "elm"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14075
msgid "Import metadata from the Elm package repository @uref{https://package.elm-lang.org, package.elm-lang.org}, as in this example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14078
#, no-wrap
msgid "guix import elm elm-explorations/webgl\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14081
msgid "The Elm importer also allows you to specify a version string:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14084
#, no-wrap
msgid "guix import elm elm-explorations/webgl@@1.1.3\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14096
#, no-wrap
msgid "opam"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:14097
#, no-wrap
msgid "OPAM"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:14098
#, no-wrap
msgid "OCaml"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14101
msgid "Import metadata from the @uref{https://opam.ocaml.org/, OPAM} package repository used by the OCaml community."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14110
#, no-wrap
msgid "--repo"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14114
msgid "By default, packages are searched in the official OPAM repository.  This option, which can be used more than once, lets you add other repositories which will be searched for packages.  It accepts as valid arguments:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14116
#, no-wrap
msgid "the name of a known repository - can be one of @code{opam},"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:14119
msgid "@code{coq} (equivalent to @code{coq-released}), @code{coq-core-dev}, @code{coq-extra-dev} or @code{grew}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14119
#, no-wrap
msgid "the URL of a repository as expected by the"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:14123
msgid "@code{opam repository add} command (for instance, the URL equivalent of the above @code{opam} name would be @uref{https://opam.ocaml.org})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14123
#, no-wrap
msgid "the path to a local copy of a repository (a directory containing a"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:14125
msgid "@file{packages/} sub-directory)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14130
msgid "Repositories are assumed to be passed to this option by order of preference.  The additional repositories will not replace the default @code{opam} repository, which is always kept as a fallback."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14135
msgid "Also, please note that versions are not compared across repositories.  The first repository (from left to right) that has at least one version of a given package will prevail over any others, and the version imported will be the latest one found @emph{in this repository only}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:14138 guix-git/doc/guix.texi:14139
#, no-wrap
msgid "go"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14142
msgid "Import metadata for a Go module using @uref{https://proxy.golang.org, proxy.golang.org}."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14145
#, no-wrap
msgid "guix import go gopkg.in/yaml.v2\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14149
msgid "It is possible to use a package specification with a @code{@@VERSION} suffix to import a specific version."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14158
#, fuzzy, no-wrap
msgid "--pin-versions"
msgstr "--verbose"

#. type: table
#: guix-git/doc/guix.texi:14166
msgid "When using this option, the importer preserves the exact versions of the Go modules dependencies instead of using their latest available versions.  This can be useful when attempting to import packages that recursively depend on former versions of themselves to build.  When using this mode, the symbol of the package is made by appending the version to its name, so that multiple versions of the same package can coexist."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14168 guix-git/doc/guix.texi:14169
#: guix-git/doc/guix.texi:14400
#, no-wrap
msgid "egg"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14176
msgid "Import metadata for @uref{https://wiki.call-cc.org/eggs, CHICKEN eggs}.  The information is taken from @file{PACKAGE.egg} files found in the @uref{git://code.call-cc.org/eggs-5-all, eggs-5-all} Git repository.  However, it does not provide all the information that we need, there is no ``description'' field, and the licenses used are not always precise (BSD is often used instead of BSD-N)."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14179
#, no-wrap
msgid "guix import egg sourcehut\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14185
#, no-wrap
msgid "guix import egg arrays@@1.0\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:14196 guix-git/doc/guix.texi:14197
#, no-wrap
msgid "hexpm"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14200
msgid "Import metadata from the hex.pm Erlang and Elixir package repository @uref{https://hex.pm, hex.pm}, as in this example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14203
#, no-wrap
msgid "guix import hexpm stun\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14206
msgid "The importer tries to determine the build system used by the package."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14208
msgid "The hexpm importer also allows you to specify a version string:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14211
#, no-wrap
msgid "guix import hexpm cf@@0.3.0\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14227
msgid "The structure of the @command{guix import} code is modular.  It would be useful to have more importers for other package formats, and your help is welcome here (@pxref{Contributing})."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:14229
#, no-wrap
msgid "Invoking @command{guix refresh}"
msgstr "Invocando @command{guix refresh}"

#. type: command{#1}
#: guix-git/doc/guix.texi:14231
#, no-wrap
msgid "guix refresh"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14239
msgid "The primary audience of the @command{guix refresh} command is packagers.  As a user, you may be interested in the @option{--with-latest} option, which can bring you package update superpowers built upon @command{guix refresh} (@pxref{Package Transformation Options, @option{--with-latest}}).  By default, @command{guix refresh} reports any packages provided by the distribution that are outdated compared to the latest upstream version, like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14244
#, no-wrap
msgid ""
"$ guix refresh\n"
"gnu/packages/gettext.scm:29:13: gettext would be upgraded from 0.18.1.1 to 0.18.2.1\n"
"gnu/packages/glib.scm:77:12: glib would be upgraded from 2.34.3 to 2.37.0\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14248
msgid "Alternatively, one can specify packages to consider, in which case a warning is emitted for packages that lack an updater:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14253
#, no-wrap
msgid ""
"$ guix refresh coreutils guile guile-ssh\n"
"gnu/packages/ssh.scm:205:2: warning: no updater for guile-ssh\n"
"gnu/packages/guile.scm:136:12: guile would be upgraded from 2.0.12 to 2.0.13\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14262
msgid "@command{guix refresh} browses the upstream repository of each package and determines the highest version number of the releases therein.  The command knows how to update specific types of packages: GNU packages, ELPA packages, etc.---see the documentation for @option{--type} below.  There are many packages, though, for which it lacks a method to determine whether a new upstream release is available.  However, the mechanism is extensible, so feel free to get in touch with us to add a new method!"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14267
msgid "Consider the packages specified, and all the packages upon which they depend."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14275
#, no-wrap
msgid ""
"$ guix refresh --recursive coreutils\n"
"gnu/packages/acl.scm:40:13: acl would be upgraded from 2.2.53 to 2.3.1\n"
"gnu/packages/m4.scm:30:12: 1.4.18 is already the latest version of m4\n"
"gnu/packages/xml.scm:68:2: warning: no updater for expat\n"
"gnu/packages/multiprecision.scm:40:12: 6.1.2 is already the latest version of gmp\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14284
msgid "If for some reason you don't want to update to the latest version, you can update to a specific version by appending an equal sign and the desired version number to the package specification.  Note that not all updaters support this; an error is reported when an updater cannot refresh to the specified version."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14296
#, no-wrap
msgid ""
"$ guix refresh trytond-party\n"
"gnu/packages/guile.scm:392:2: guile would be upgraded from 3.0.3 to 3.0.5\n"
"$ guix refresh -u guile=3.0.4\n"
"@dots{}\n"
"gnu/packages/guile.scm:392:2: guile: updating from version 3.0.3 to version 3.0.4...\n"
"@dots{}\n"
"$ guix refresh -u guile@@2.0=2.0.12\n"
"@dots{}\n"
"gnu/packages/guile.scm:147:2: guile: updating from version 2.0.10 to version 2.0.12...\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14302
msgid "Sometimes the upstream name differs from the package name used in Guix, and @command{guix refresh} needs a little help.  Most updaters honor the @code{upstream-name} property in package definitions, which can be used to that effect:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:14309
#, no-wrap
msgid ""
"(define-public network-manager\n"
"  (package\n"
"    (name \"network-manager\")\n"
"    ;; @dots{}\n"
"    (properties '((upstream-name . \"NetworkManager\")))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14318
msgid "When passed @option{--update}, it modifies distribution source files to update the version numbers and source tarball hashes of those package recipes (@pxref{Defining Packages}).  This is achieved by downloading each package's latest source tarball and its associated OpenPGP signature, authenticating the downloaded tarball against its signature using @command{gpgv}, and finally computing its hash---note that GnuPG must be installed and in @code{$PATH}; run @code{guix install gnupg} if needed."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14324
msgid "When the public key used to sign the tarball is missing from the user's keyring, an attempt is made to automatically retrieve it from a public key server; when this is successful, the key is added to the user's keyring; otherwise, @command{guix refresh} reports an error."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14326
msgid "The following options are supported:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14334 guix-git/doc/guix.texi:15405
msgid "This is useful to precisely refer to a package, as in this example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14337
#, no-wrap
msgid "guix refresh -l -e '(@@@@ (gnu packages commencement) glibc-final)'\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14341
msgid "This command lists the dependents of the ``final'' libc (essentially all the packages)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14342
#, no-wrap
msgid "--update"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:14343
#, no-wrap
msgid "-u"
msgstr "-u"

#. type: table
#: guix-git/doc/guix.texi:14347
msgid "Update distribution source files (package recipes) in place.  This is usually run from a checkout of the Guix source tree (@pxref{Running Guix Before It Is Installed}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14350
#, no-wrap
msgid "$ ./pre-inst-env guix refresh -s non-core -u\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14353
msgid "@xref{Defining Packages}, for more information on package definitions."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14354
#, no-wrap
msgid "--select=[@var{subset}]"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:14355
#, no-wrap
msgid "-s @var{subset}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14358
msgid "Select all the packages in @var{subset}, one of @code{core}, @code{non-core} or @code{module:@var{name}}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14365
msgid "The @code{core} subset refers to all the packages at the core of the distribution---i.e., packages that are used to build ``everything else''.  This includes GCC, libc, Binutils, Bash, etc.  Usually, changing one of these packages in the distribution entails a rebuild of all the others.  Thus, such updates are an inconvenience to users in terms of build time or bandwidth used to achieve the upgrade."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14369
msgid "The @code{non-core} subset refers to the remaining packages.  It is typically useful in cases where an update of the core packages would be inconvenient."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14374
msgid "The @code{module:@var{name}} subset refers to all the packages in a specified guile module.  The module can be specified as @code{module:guile} or @code{module:(gnu packages guile)}, the former is a shorthand for the later."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14379
msgid "Select all the packages from the manifest in @var{file}.  This is useful to check if any packages of the user manifest can be updated."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14380
#, no-wrap
msgid "--type=@var{updater}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:14381
#, no-wrap
msgid "-t @var{updater}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14384
msgid "Select only packages handled by @var{updater} (may be a comma-separated list of updaters).  Currently, @var{updater} may be one of:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14388
msgid "the updater for GNU packages;"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14388
#, no-wrap
msgid "savannah"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14390
msgid "the updater for packages hosted at @uref{https://savannah.gnu.org, Savannah};"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14390
#, no-wrap
msgid "sourceforge"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14392
msgid "the updater for packages hosted at @uref{https://sourceforge.net, SourceForge};"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14392
#, no-wrap
msgid "gnome"
msgstr "gnome"

#. type: table
#: guix-git/doc/guix.texi:14394
msgid "the updater for GNOME packages;"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14394
#, no-wrap
msgid "kde"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14396
msgid "the updater for KDE packages;"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14396
#, no-wrap
msgid "xorg"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14398
msgid "the updater for X.org packages;"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14398
#, no-wrap
msgid "kernel.org"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14400
msgid "the updater for packages hosted on kernel.org;"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14402
msgid "the updater for @uref{https://wiki.call-cc.org/eggs/, Egg} packages;"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14404
msgid "the updater for @uref{https://elpa.gnu.org/, ELPA} packages;"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14406
msgid "the updater for @uref{https://cran.r-project.org/, CRAN} packages;"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14406
#, no-wrap
msgid "bioconductor"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14408
msgid "the updater for @uref{https://www.bioconductor.org/, Bioconductor} R packages;"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14410
msgid "the updater for @uref{https://www.cpan.org/, CPAN} packages;"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14412
msgid "the updater for @uref{https://pypi.python.org, PyPI} packages."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14414
msgid "the updater for @uref{https://rubygems.org, RubyGems} packages."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14414
#, no-wrap
msgid "github"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14416
msgid "the updater for @uref{https://github.com, GitHub} packages."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14418
msgid "the updater for @uref{https://hackage.haskell.org, Hackage} packages."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14420
msgid "the updater for @uref{https://www.stackage.org, Stackage} packages."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14422
msgid "the updater for @uref{https://crates.io, Crates} packages."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14422
#, no-wrap
msgid "launchpad"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14424
msgid "the updater for @uref{https://launchpad.net, Launchpad} packages."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14424
#, no-wrap
msgid "generic-html"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14428
msgid "a generic updater that crawls the HTML page where the source tarball of the package is hosted, when applicable, or the HTML page specified by the @code{release-monitoring-url} property of the package."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14429
#, no-wrap
msgid "generic-git"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14434
msgid "a generic updater for packages hosted on Git repositories.  It tries to be smart about parsing Git tag names, but if it is not able to parse the tag name and compare tags correctly, users can define the following properties for a package."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14436
#, no-wrap
msgid "@code{release-tag-prefix}: a regular expression for matching a prefix of"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:14438 guix-git/doc/guix.texi:14441
msgid "the tag name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14439
#, no-wrap
msgid "@code{release-tag-suffix}: a regular expression for matching a suffix of"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14442
#, no-wrap
msgid "@code{release-tag-version-delimiter}: a string used as the delimiter in"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:14444
msgid "the tag name for separating the numbers of the version."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14445
#, no-wrap
msgid "@code{accept-pre-releases}: by default, the updater will ignore"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:14448
msgid "pre-releases; to make it also look for pre-releases, set the this property to @code{#t}."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:14459
#, no-wrap
msgid ""
"(package\n"
"  (name \"foo\")\n"
"  ;; ...\n"
"  (properties\n"
"    '((release-tag-prefix . \"^release0-\")\n"
"      (release-tag-suffix . \"[a-z]?$\")\n"
"      (release-tag-version-delimiter . \":\"))))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14466
msgid "For instance, the following command only checks for updates of Emacs packages hosted at @code{elpa.gnu.org} and for updates of CRAN packages:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14471
#, no-wrap
msgid ""
"$ guix refresh --type=elpa,cran\n"
"gnu/packages/statistics.scm:819:13: r-testthat would be upgraded from 0.10.0 to 0.11.0\n"
"gnu/packages/emacs.scm:856:13: emacs-auctex would be upgraded from 11.88.6 to 11.88.9\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14473
#, no-wrap
msgid "--list-updaters"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14475
msgid "List available updaters and exit (see @option{--type} above)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14478
msgid "For each updater, display the fraction of packages it covers; at the end, display the fraction of packages covered by all these updaters."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14482
msgid "In addition, @command{guix refresh} can be passed one or more package names, as in this example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14485
#, no-wrap
msgid "$ ./pre-inst-env guix refresh -u emacs idutils gcc@@4.8\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14492
msgid "The command above specifically updates the @code{emacs} and @code{idutils} packages.  The @option{--select} option would have no effect in this case.  You might also want to update definitions that correspond to the packages installed in your profile:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14496
#, no-wrap
msgid ""
"$ ./pre-inst-env guix refresh -u \\\n"
"       $(guix package --list-installed | cut -f1)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14502
msgid "When considering whether to upgrade a package, it is sometimes convenient to know which packages would be affected by the upgrade and should be checked for compatibility.  For this the following option may be used when passing @command{guix refresh} one or more package names:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14505
#, no-wrap
msgid "--list-dependent"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:14506 guix-git/doc/guix.texi:14784
#: guix-git/doc/guix.texi:14976
#, no-wrap
msgid "-l"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14509
msgid "List top-level dependent packages that would need to be rebuilt as a result of upgrading one or more packages."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14513
msgid "@xref{Invoking guix graph, the @code{reverse-package} type of @command{guix graph}}, for information on how to visualize the list of dependents of a package."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14519
msgid "Be aware that the @option{--list-dependent} option only @emph{approximates} the rebuilds that would be required as a result of an upgrade.  More rebuilds might be required under some circumstances."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14524
#, no-wrap
msgid ""
"$ guix refresh --list-dependent flex\n"
"Building the following 120 packages would ensure 213 dependent packages are rebuilt:\n"
"hop@@2.4.0 emacs-geiser@@0.13 notmuch@@0.18 mu@@0.9.9.5 cflow@@1.4 idutils@@4.6 @dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14528
msgid "The command above lists a set of packages that could be built to check for compatibility with an upgraded @code{flex} package."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14531
#, no-wrap
msgid "--list-transitive"
msgstr "--list-transitive"

#. type: itemx
#: guix-git/doc/guix.texi:14532
#, no-wrap
msgid "-T"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14534
msgid "List all the packages which one or more packages depend upon."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14539
#, no-wrap
msgid ""
"$ guix refresh --list-transitive flex\n"
"flex@@2.6.4 depends on the following 25 packages: perl@@5.28.0 help2man@@1.47.6\n"
"bison@@3.0.5 indent@@2.2.10 tar@@1.30 gzip@@1.9 bzip2@@1.0.6 xz@@5.2.4 file@@5.33 @dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14545
msgid "The command above lists a set of packages which, when changed, would cause @code{flex} to be rebuilt."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14547
msgid "The following options can be used to customize GnuPG operation:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14550
#, no-wrap
msgid "--gpg=@var{command}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14553
msgid "Use @var{command} as the GnuPG 2.x command.  @var{command} is searched for in @code{$PATH}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14554
#, no-wrap
msgid "--keyring=@var{file}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14560
msgid "Use @var{file} as the keyring for upstream keys.  @var{file} must be in the @dfn{keybox format}.  Keybox files usually have a name ending in @file{.kbx} and the GNU@tie{}Privacy Guard (GPG) can manipulate these files (@pxref{kbxutil, @command{kbxutil},, gnupg, Using the GNU Privacy Guard}, for information on a tool to manipulate keybox files)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14566
msgid "When this option is omitted, @command{guix refresh} uses @file{~/.config/guix/upstream/trustedkeys.kbx} as the keyring for upstream signing keys.  OpenPGP signatures are checked against keys from this keyring; missing keys are downloaded to this keyring as well (see @option{--key-download} below)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14569
msgid "You can export keys from your default GPG keyring into a keybox file using commands like this one:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14572
#, no-wrap
msgid "gpg --export rms@@gnu.org | kbxutil --import-openpgp >> mykeyring.kbx\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14575
msgid "Likewise, you can fetch keys to a specific keybox file like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14579
#, no-wrap
msgid ""
"gpg --no-default-keyring --keyring mykeyring.kbx \\\n"
"  --recv-keys @value{OPENPGP-SIGNING-KEY-ID}\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14583
msgid "@xref{GPG Configuration Options, @option{--keyring},, gnupg, Using the GNU Privacy Guard}, for more information on GPG's @option{--keyring} option."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14587
msgid "Handle missing OpenPGP keys according to @var{policy}, which may be one of:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14589 guix-git/doc/guix.texi:14819
#: guix-git/doc/guix.texi:25829
#, no-wrap
msgid "always"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14592
msgid "Always download missing OpenPGP keys from the key server, and add them to the user's GnuPG keyring."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14593 guix-git/doc/guix.texi:25831
#, no-wrap
msgid "never"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14595
msgid "Never try to download missing OpenPGP keys.  Instead just bail out."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14596
#, no-wrap
msgid "interactive"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14599
msgid "When a package signed with an unknown OpenPGP key is encountered, ask the user whether to download it or not.  This is the default behavior."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14601
#, no-wrap
msgid "--key-server=@var{host}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14603
msgid "Use @var{host} as the OpenPGP key server when importing a public key."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14624
msgid "The @code{github} updater uses the @uref{https://developer.github.com/v3/, GitHub API} to query for new releases.  When used repeatedly e.g.@: when refreshing all packages, GitHub will eventually refuse to answer any further API requests.  By default 60 API requests per hour are allowed, and a full refresh on all GitHub packages in Guix requires more than this.  Authentication with GitHub through the use of an API token alleviates these limits.  To use an API token, set the environment variable @env{GUIX_GITHUB_TOKEN} to a token procured from @uref{https://github.com/settings/tokens} or otherwise."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:14627
#, fuzzy, no-wrap
#| msgid "Invoking @command{guix size}"
msgid "Invoking @command{guix style}"
msgstr "Invocando @command{guix size}"

#. type: command{#1}
#: guix-git/doc/guix.texi:14629
#, fuzzy, no-wrap
#| msgid "Invoking guix system"
msgid "guix style"
msgstr "Invocando guix system"

#. type: cindex
#: guix-git/doc/guix.texi:14630
#, fuzzy, no-wrap
#| msgid "--root=@var{file}"
msgid "styling rules"
msgstr "--root=@var{arquivo}"

#. type: cindex
#: guix-git/doc/guix.texi:14631
#, fuzzy, no-wrap
#| msgid "coding style"
msgid "lint, code style"
msgstr "estilo de codificação"

#. type: cindex
#: guix-git/doc/guix.texi:14632
#, fuzzy, no-wrap
#| msgid "formatting code"
msgid "format, code style"
msgstr "formatação de código"

#. type: cindex
#: guix-git/doc/guix.texi:14633
#, fuzzy, no-wrap
#| msgid "Writing conventions."
msgid "format conventions"
msgstr "Convenções de escrita."

#. type: Plain text
#: guix-git/doc/guix.texi:14640
msgid "The @command{guix style} command helps users and packagers alike style their package definitions and configuration files according to the latest fashionable trends.  It can either reformat whole files, with the @option{--whole-file} option, or apply specific @dfn{styling rules} to individual package definitions.  The command currently provides the following styling rules:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:14645
msgid "formatting package definitions according to the project's conventions (@pxref{Formatting Code});"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:14648
msgid "rewriting package inputs to the ``new style'', as explained below."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14654
msgid "The way package inputs are written is going through a transition (@pxref{package Reference}, for more on package inputs).  Until version 1.3.0, package inputs were written using the ``old style'', where each input was given an explicit label, most of the time the package name:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:14661
#, no-wrap
msgid ""
"(package\n"
"  ;; @dots{}\n"
"  ;; The \"old style\" (deprecated).\n"
"  (inputs `((\"libunistring\" ,libunistring)\n"
"            (\"libffi\" ,libffi))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14665
msgid "Today, the old style is deprecated and the preferred style looks like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:14671
#, no-wrap
msgid ""
"(package\n"
"  ;; @dots{}\n"
"  ;; The \"new style\".\n"
"  (inputs (list libunistring libffi)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14676
msgid "Likewise, uses of @code{alist-delete} and friends to manipulate inputs is now deprecated in favor of @code{modify-inputs} (@pxref{Defining Package Variants}, for more info on @code{modify-inputs})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14681
msgid "In the vast majority of cases, this is a purely mechanical change on the surface syntax that does not even incur a package rebuild.  Running @command{guix style -S inputs} can do that for you, whether you're working on packages in Guix proper or in an external channel."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14686
#, no-wrap
msgid "guix style [@var{options}] @var{package}@dots{}\n"
msgstr "guix style [@var{options}] @var{package}@dots{}\n"

#. type: Plain text
#: guix-git/doc/guix.texi:14693
msgid "This causes @command{guix style} to analyze and rewrite the definition of @var{package}@dots{} or, when @var{package} is omitted, of @emph{all} the packages.  The @option{--styling} or @option{-S} option allows you to select the style rule, the default rule being @code{format}---see below."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14695
msgid "To reformat entire source files, the syntax is:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14698
#, fuzzy, no-wrap
#| msgid "guix style [@var{options}] @var{package}@dots{}\n"
msgid "guix style --whole-file @var{file}@dots{}\n"
msgstr "guix style [@var{options}] @var{package}@dots{}\n"

#. type: Plain text
#: guix-git/doc/guix.texi:14701 guix-git/doc/guix.texi:16093
msgid "The available options are listed below."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14706
msgid "Show source file locations that would be edited but do not modify them."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14707
#, no-wrap
msgid "--whole-file"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:14708
#, no-wrap
msgid "-f"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14712
msgid "Reformat the given files in their entirety.  In that case, subsequent arguments are interpreted as file names (rather than package names), and the @option{--styling} option has no effect."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14715
msgid "As an example, here is how you might reformat your operating system configuration (you need write permissions for the file):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14718
#, fuzzy, no-wrap
#| msgid "$ guix system list-generations 10d\n"
msgid "guix style -f /etc/config.scm\n"
msgstr "$ guix system list-generations 10d\n"

#. type: item
#: guix-git/doc/guix.texi:14720
#, fuzzy, no-wrap
#| msgid "--root=@var{file}"
msgid "--styling=@var{rule}"
msgstr "--root=@var{arquivo}"

#. type: itemx
#: guix-git/doc/guix.texi:14721
#, fuzzy, no-wrap
#| msgid "-f @var{file}"
msgid "-S @var{rule}"
msgstr "-f @var{arquivo}"

#. type: table
#: guix-git/doc/guix.texi:14723
#, fuzzy
#| msgid "Packages are currently available on the following platforms:"
msgid "Apply @var{rule}, one of the following styling rules:"
msgstr "Os pacotes estão atualmente disponíveis nas seguintes plataformas:"

#. type: code{#1}
#: guix-git/doc/guix.texi:14725 guix-git/doc/guix.texi:44300
#, no-wrap
msgid "format"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14730
msgid "Format the given package definition(s)---this is the default styling rule.  For example, a packager running Guix on a checkout (@pxref{Running Guix Before It Is Installed}) might want to reformat the definition of the Coreutils package like so:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14733
#, fuzzy, no-wrap
#| msgid "./pre-inst-env guix build gnew --keep-failed\n"
msgid "./pre-inst-env guix style coreutils\n"
msgstr "./pre-inst-env guix build gnew --keep-failed\n"

#. type: item
#: guix-git/doc/guix.texi:14735
#, no-wrap
msgid "inputs"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14739
msgid "Rewrite package inputs to the ``new style'', as described above.  This is how you would rewrite inputs of package @code{whatnot} in your own channel:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14742
#, no-wrap
msgid "guix style -L ~/my/channel -S inputs whatnot\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14748
msgid "Rewriting is done in a conservative way: preserving comments and bailing out if it cannot make sense of the code that appears in an inputs field.  The @option{--input-simplification} option described below provides fine-grain control over when inputs should be simplified."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14749 guix-git/doc/guix.texi:20036
#, no-wrap
msgid "arguments"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14752
msgid "Rewrite package arguments to use G-expressions (@pxref{G-Expressions}).  For example, consider this package definition:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:14761
#, no-wrap
msgid ""
"(define-public my-package\n"
"  (package\n"
"    ;; @dots{}\n"
"    (arguments      ;old-style quoted arguments\n"
"     '(#:make-flags '(\"V=1\")\n"
"       #:phases (modify-phases %standard-phases\n"
"                  (delete 'build))))))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14766
msgid "Running @command{guix style -S arguments} on this package would rewrite its @code{arguments} field like to:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:14775
#, no-wrap
msgid ""
"(define-public my-package\n"
"  (package\n"
"    ;; @dots{}\n"
"    (arguments\n"
"      (list #:make-flags #~'(\"V=1\")\n"
"            #:phases #~(modify-phases %standard-phases\n"
"                         (delete 'build))))))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14781
msgid "Note that changes made by the @code{arguments} rule do not entail a rebuild of the affected packages.  Furthermore, if a package definition happens to be using G-expressions already, @command{guix style} leaves it unchanged."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14783
#, fuzzy, no-wrap
#| msgid "--list-live"
msgid "--list-stylings"
msgstr "--list-live"

#. type: table
#: guix-git/doc/guix.texi:14786
msgid "List and describe the available styling rules and exit."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14795
msgid "Style the package @var{expr} evaluates to."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14800
#, no-wrap
msgid "guix style -e '(@@ (gnu packages gcc) gcc-5)'\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14803
#, fuzzy
#| msgid "Editing package definitions."
msgid "styles the @code{gcc-5} package definition."
msgstr "Editando definições de pacote."

#. type: item
#: guix-git/doc/guix.texi:14804
#, no-wrap
msgid "--input-simplification=@var{policy}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14809
msgid "When using the @code{inputs} styling rule, with @samp{-S inputs}, this option specifies the package input simplification policy for cases where an input label does not match the corresponding package name.  @var{policy} may be one of the following:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14811
#, no-wrap
msgid "silent"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14814
msgid "Simplify inputs only when the change is ``silent'', meaning that the package does not need to be rebuilt (its derivation is unchanged)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14815
#, no-wrap
msgid "safe"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14818
msgid "Simplify inputs only when that is ``safe'' to do: the package might need to be rebuilt, but the change is known to have no observable effect."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14822
msgid "Simplify inputs even when input labels do not match package names, and even if that might have an observable effect."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14826
msgid "The default is @code{silent}, meaning that input simplifications do not trigger any package rebuild."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:14829
#, no-wrap
msgid "Invoking @command{guix lint}"
msgstr "Invocando @command{guix lint}"

#. type: command{#1}
#: guix-git/doc/guix.texi:14831
#, no-wrap
msgid "guix lint"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:14832
#, no-wrap
msgid "package, checking for errors"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14838
msgid "The @command{guix lint} command is meant to help package developers avoid common errors and use a consistent style.  It runs a number of checks on a given set of packages in order to find common mistakes in their definitions.  Available @dfn{checkers} include (see @option{--list-checkers} for a complete list):"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14844
msgid "Validate certain typographical and stylistic rules about package descriptions and synopses."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14845
#, no-wrap
msgid "inputs-should-be-native"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14847
msgid "Identify inputs that should most likely be native inputs."
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:14850
#, no-wrap
msgid "mirror-url"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:14851
#, no-wrap
msgid "github-url"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:14852
#, no-wrap
msgid "source-file-name"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14859
msgid "Probe @code{home-page} and @code{source} URLs and report those that are invalid.  Suggest a @code{mirror://} URL when applicable.  If the @code{source} URL redirects to a GitHub URL, recommend usage of the GitHub URL@.  Check that the source file name is meaningful, e.g.@: is not just a version number or ``git-checkout'', without a declared @code{file-name} (@pxref{origin Reference})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14860
#, no-wrap
msgid "source-unstable-tarball"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14864
msgid "Parse the @code{source} URL to determine if a tarball from GitHub is autogenerated or if it is a release tarball.  Unfortunately GitHub's autogenerated tarballs are sometimes regenerated."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14868
msgid "Check that the derivation of the given packages can be successfully computed for all the supported systems (@pxref{Derivations})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14869
#, no-wrap
msgid "profile-collisions"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14875
msgid "Check whether installing the given packages in a profile would lead to collisions.  Collisions occur when several packages with the same name but a different version or a different store file name are propagated.  @xref{package Reference, @code{propagated-inputs}}, for more information on propagated inputs."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14876
#, no-wrap
msgid "archival"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:14877
#, no-wrap
msgid "Software Heritage, source code archive"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:14878
#, no-wrap
msgid "archival of source code, Software Heritage"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14881
msgid "Checks whether the package's source code is archived at @uref{https://www.softwareheritage.org, Software Heritage}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14889
msgid "When the source code that is not archived comes from a version-control system (VCS)---e.g., it's obtained with @code{git-fetch}, send Software Heritage a ``save'' request so that it eventually archives it.  This ensures that the source will remain available in the long term, and that Guix can fall back to Software Heritage should the source code disappear from its original host.  The status of recent ``save'' requests can be @uref{https://archive.softwareheritage.org/save/#requests, viewed on-line}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14894
msgid "When source code is a tarball obtained with @code{url-fetch}, simply print a message when it is not archived.  As of this writing, Software Heritage does not allow requests to save arbitrary tarballs; we are working on ways to ensure that non-VCS source code is also archived."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14900
msgid "Software Heritage @uref{https://archive.softwareheritage.org/api/#rate-limiting, limits the request rate per IP address}.  When the limit is reached, @command{guix lint} prints a message and the @code{archival} checker stops doing anything until that limit has been reset."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14901
#, no-wrap
msgid "cve"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:14902 guix-git/doc/guix.texi:45073
#, no-wrap
msgid "security vulnerabilities"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:14903
#, no-wrap
msgid "CVE, Common Vulnerabilities and Exposures"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14908
msgid "Report known vulnerabilities found in the Common Vulnerabilities and Exposures (CVE) databases of the current and past year @uref{https://nvd.nist.gov/vuln/data-feeds, published by the US NIST}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14910
msgid "To view information about a particular vulnerability, visit pages such as:"
msgstr ""

#. type: indicateurl{#1}
#: guix-git/doc/guix.texi:14914
msgid "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-YYYY-ABCD"
msgstr ""

#. type: indicateurl{#1}
#: guix-git/doc/guix.texi:14916
msgid "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-YYYY-ABCD"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14921
msgid "where @code{CVE-YYYY-ABCD} is the CVE identifier---e.g., @code{CVE-2015-7554}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14926
msgid "Package developers can specify in package recipes the @uref{https://nvd.nist.gov/products/cpe,Common Platform Enumeration (CPE)} name and version of the package when they differ from the name or version that Guix uses, as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:14934
#, no-wrap
msgid ""
"(package\n"
"  (name \"grub\")\n"
"  ;; @dots{}\n"
"  ;; CPE calls this package \"grub2\".\n"
"  (properties '((cpe-name . \"grub2\")\n"
"                (cpe-version . \"2.3\"))))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14941
msgid "Some entries in the CVE database do not specify which version of a package they apply to, and would thus ``stick around'' forever.  Package developers who found CVE alerts and verified they can be ignored can declare them as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:14951
#, no-wrap
msgid ""
"(package\n"
"  (name \"t1lib\")\n"
"  ;; @dots{}\n"
"  ;; These CVEs no longer apply and can be safely ignored.\n"
"  (properties `((lint-hidden-cve . (\"CVE-2011-0433\"\n"
"                                    \"CVE-2011-1553\"\n"
"                                    \"CVE-2011-1554\"\n"
"                                    \"CVE-2011-5244\")))))\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14953
#, no-wrap
msgid "formatting"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14956
msgid "Warn about obvious source code formatting issues: trailing white space, use of tabulations, etc."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14957
#, no-wrap
msgid "input-labels"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14963
msgid "Report old-style input labels that do not match the name of the corresponding package.  This aims to help migrate from the ``old input style''.  @xref{package Reference}, for more information on package inputs and input styles.  @xref{Invoking guix style}, on how to migrate to the new style."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14969
#, no-wrap
msgid "guix lint @var{options} @var{package}@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:14973
msgid "If no package is given on the command line, then all packages are checked.  The @var{options} may be zero or more of the following:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14975
#, no-wrap
msgid "--list-checkers"
msgstr "--list-checkers"

#. type: table
#: guix-git/doc/guix.texi:14979
msgid "List and describe all the available checkers that will be run on packages and exit."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14980
#, no-wrap
msgid "--checkers"
msgstr "--checkers"

#. type: itemx
#: guix-git/doc/guix.texi:14981
#, no-wrap
msgid "-c"
msgstr "-c"

#. type: table
#: guix-git/doc/guix.texi:14984
msgid "Only enable the checkers specified in a comma-separated list using the names returned by @option{--list-checkers}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:14985
#, no-wrap
msgid "--exclude"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14989
msgid "Only disable the checkers specified in a comma-separated list using the names returned by @option{--list-checkers}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:14995
msgid "This is useful to unambiguously designate packages, as in this example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:14998
#, no-wrap
msgid "guix lint -c archival -e '(@@ (gnu packages guile) guile-3.0)'\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15000
#, no-wrap
msgid "--no-network"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15003
msgid "Only enable the checkers that do not depend on Internet access."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:15015
#, no-wrap
msgid "Invoking @command{guix size}"
msgstr "Invocando @command{guix size}"

#. type: code{#1}
#: guix-git/doc/guix.texi:15017 guix-git/doc/guix.texi:40750
#, no-wrap
msgid "size"
msgstr "tamanho"

#. type: cindex
#: guix-git/doc/guix.texi:15018
#, no-wrap
msgid "package size"
msgstr ""

#. type: command{#1}
#: guix-git/doc/guix.texi:15020
#, no-wrap
msgid "guix size"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15027
msgid "The @command{guix size} command helps package developers profile the disk usage of packages.  It is easy to overlook the impact of an additional dependency added to a package, or the impact of using a single output for a package that could easily be split (@pxref{Packages with Multiple Outputs}).  Such are the typical issues that @command{guix size} can highlight."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15032
msgid "The command can be passed one or more package specifications such as @code{gcc@@4.8} or @code{guile:debug}, or a file name in the store.  Consider this example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15045
#, no-wrap
msgid ""
"$ guix size coreutils\n"
"store item                               total    self\n"
"/gnu/store/@dots{}-gcc-5.5.0-lib           60.4    30.1  38.1%\n"
"/gnu/store/@dots{}-glibc-2.27              30.3    28.8  36.6%\n"
"/gnu/store/@dots{}-coreutils-8.28          78.9    15.0  19.0%\n"
"/gnu/store/@dots{}-gmp-6.1.2               63.1     2.7   3.4%\n"
"/gnu/store/@dots{}-bash-static-4.4.12       1.5     1.5   1.9%\n"
"/gnu/store/@dots{}-acl-2.2.52              61.1     0.4   0.5%\n"
"/gnu/store/@dots{}-attr-2.4.47             60.6     0.2   0.3%\n"
"/gnu/store/@dots{}-libcap-2.25             60.5     0.2   0.2%\n"
"total: 78.9 MiB\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15051
msgid "The store items listed here constitute the @dfn{transitive closure} of Coreutils---i.e., Coreutils and all its dependencies, recursively---as would be returned by:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15054
#, no-wrap
msgid "$ guix gc -R /gnu/store/@dots{}-coreutils-8.23\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15062
msgid "Here the output shows three columns next to store items.  The first column, labeled ``total'', shows the size in mebibytes (MiB) of the closure of the store item---that is, its own size plus the size of all its dependencies.  The next column, labeled ``self'', shows the size of the item itself.  The last column shows the ratio of the size of the item itself to the space occupied by all the items listed here."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15068
msgid "In this example, we see that the closure of Coreutils weighs in at 79@tie{}MiB, most of which is taken by libc and GCC's run-time support libraries.  (That libc and GCC's libraries represent a large fraction of the closure is not a problem @i{per se} because they are always available on the system anyway.)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15071
msgid "Since the command also accepts store file names, assessing the size of a build result is straightforward:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15074
#, no-wrap
msgid "guix size $(guix system build config.scm)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15084
msgid "When the package(s) passed to @command{guix size} are available in the store@footnote{More precisely, @command{guix size} looks for the @emph{ungrafted} variant of the given package(s), as returned by @code{guix build @var{package} --no-grafts}.  @xref{Security Updates}, for information on grafts.}, @command{guix size} queries the daemon to determine its dependencies, and measures its size in the store, similar to @command{du -ms --apparent-size} (@pxref{du invocation,,, coreutils, GNU Coreutils})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15089
msgid "When the given packages are @emph{not} in the store, @command{guix size} reports information based on the available substitutes (@pxref{Substitutes}).  This makes it possible it to profile disk usage of store items that are not even on disk, only available remotely."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15091
msgid "You can also specify several package names:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15101
#, no-wrap
msgid ""
"$ guix size coreutils grep sed bash\n"
"store item                               total    self\n"
"/gnu/store/@dots{}-coreutils-8.24          77.8    13.8  13.4%\n"
"/gnu/store/@dots{}-grep-2.22               73.1     0.8   0.8%\n"
"/gnu/store/@dots{}-bash-4.3.42             72.3     4.7   4.6%\n"
"/gnu/store/@dots{}-readline-6.3            67.6     1.2   1.2%\n"
"@dots{}\n"
"total: 102.3 MiB\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15107
msgid "In this example we see that the combination of the four packages takes 102.3@tie{}MiB in total, which is much less than the sum of each closure since they have a lot of dependencies in common."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15113
msgid "When looking at the profile returned by @command{guix size}, you may find yourself wondering why a given package shows up in the profile at all.  To understand it, you can use @command{guix graph --path -t references} to display the shortest path between the two packages (@pxref{Invoking guix graph})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15115
msgid "The available options are:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15121
msgid "Use substitute information from @var{urls}.  @xref{client-substitute-urls, the same option for @code{guix build}}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15122
#, no-wrap
msgid "--sort=@var{key}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15124
msgid "Sort lines according to @var{key}, one of the following options:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15126
#, no-wrap
msgid "self"
msgstr "próprio"

#. type: table
#: guix-git/doc/guix.texi:15128
msgid "the size of each item (the default);"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15130
msgid "the total size of the item's closure."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15132
#, no-wrap
msgid "--map-file=@var{file}"
msgstr "--map-file=@var{arquivo}"

#. type: table
#: guix-git/doc/guix.texi:15134
msgid "Write a graphical map of disk usage in PNG format to @var{file}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15136
msgid "For the example above, the map looks like this:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15139
msgid "@image{images/coreutils-size-map,5in,, map of Coreutils disk usage produced by @command{guix size}}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15144
msgid "This option requires that @uref{https://wingolog.org/software/guile-charting/, Guile-Charting} be installed and visible in Guile's module search path.  When that is not the case, @command{guix size} fails as it tries to load it."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15148
msgid "Consider packages for @var{system}---e.g., @code{x86_64-linux}."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:15159
#, no-wrap
msgid "Invoking @command{guix graph}"
msgstr "Invocando @command{guix graph}"

#. type: cindex
#: guix-git/doc/guix.texi:15161
#, no-wrap
msgid "DAG"
msgstr ""

#. type: command{#1}
#: guix-git/doc/guix.texi:15162
#, no-wrap
msgid "guix graph"
msgstr "guix graph"

#. type: Plain text
#: guix-git/doc/guix.texi:15177
msgid "Packages and their dependencies form a @dfn{graph}, specifically a directed acyclic graph (DAG).  It can quickly become difficult to have a mental model of the package DAG, so the @command{guix graph} command provides a visual representation of the DAG@.  By default, @command{guix graph} emits a DAG representation in the input format of @uref{https://www.graphviz.org/, Graphviz}, so its output can be passed directly to the @command{dot} command of Graphviz.  It can also emit an HTML page with embedded JavaScript code to display a ``chord diagram'' in a Web browser, using the @uref{https://d3js.org/, d3.js} library, or emit Cypher queries to construct a graph in a graph database supporting the @uref{https://www.opencypher.org/, openCypher} query language.  With @option{--path}, it simply displays the shortest path between two packages.  The general syntax is:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15180
#, no-wrap
msgid "guix graph @var{options} @var{package}@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15185
msgid "For example, the following command generates a PDF file representing the package DAG for the GNU@tie{}Core Utilities, showing its build-time dependencies:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15188
#, no-wrap
msgid "guix graph coreutils | dot -Tpdf > dag.pdf\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15191
msgid "The output looks like this:"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15193
msgid "@image{images/coreutils-graph,2in,,Dependency graph of the GNU Coreutils}"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15195
msgid "Nice little graph, no?"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15198
msgid "You may find it more pleasant to navigate the graph interactively with @command{xdot} (from the @code{xdot} package):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15201
#, no-wrap
msgid "guix graph coreutils | xdot -\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15208
msgid "But there is more than one graph! The one above is concise: it is the graph of package objects, omitting implicit inputs such as GCC, libc, grep, etc.  It is often useful to have such a concise graph, but sometimes one may want to see more details.  @command{guix graph} supports several types of graphs, allowing you to choose the level of detail:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15214
msgid "This is the default type used in the example above.  It shows the DAG of package objects, excluding implicit dependencies.  It is concise, but filters out many details."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15215
#, no-wrap
msgid "reverse-package"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15217
msgid "This shows the @emph{reverse} DAG of packages.  For example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15220
#, no-wrap
msgid "guix graph --type=reverse-package ocaml\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15225
msgid "...@: yields the graph of packages that @emph{explicitly} depend on OCaml (if you are also interested in cases where OCaml is an implicit dependency, see @code{reverse-bag} below)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15230
msgid "Note that for core packages this can yield huge graphs.  If all you want is to know the number of packages that depend on a given package, use @command{guix refresh --list-dependent} (@pxref{Invoking guix refresh, @option{--list-dependent}})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15231
#, no-wrap
msgid "bag-emerged"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15233
msgid "This is the package DAG, @emph{including} implicit inputs."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15235
msgid "For instance, the following command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15238
#, no-wrap
msgid "guix graph --type=bag-emerged coreutils\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15241
msgid "...@: yields this bigger graph:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15243
msgid "@image{images/coreutils-bag-graph,,5in,Detailed dependency graph of the GNU Coreutils}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15246
msgid "At the bottom of the graph, we see all the implicit inputs of @var{gnu-build-system} (@pxref{Build Systems, @code{gnu-build-system}})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15250
msgid "Now, note that the dependencies of these implicit inputs---that is, the @dfn{bootstrap dependencies} (@pxref{Bootstrapping})---are not shown here, for conciseness."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15251
#, no-wrap
msgid "bag"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15254
msgid "Similar to @code{bag-emerged}, but this time including all the bootstrap dependencies."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15255
#, no-wrap
msgid "bag-with-origins"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15257
msgid "Similar to @code{bag}, but also showing origins and their dependencies."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15258
#, no-wrap
msgid "reverse-bag"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15261
msgid "This shows the @emph{reverse} DAG of packages.  Unlike @code{reverse-package}, it also takes implicit dependencies into account.  For example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15264
#, no-wrap
msgid "guix graph -t reverse-bag dune\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15271
msgid "...@: yields the graph of all packages that depend on Dune, directly or indirectly.  Since Dune is an @emph{implicit} dependency of many packages @i{via} @code{dune-build-system}, this shows a large number of packages, whereas @code{reverse-package} would show very few if any."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15277
msgid "This is the most detailed representation: It shows the DAG of derivations (@pxref{Derivations}) and plain store items.  Compared to the above representation, many additional nodes are visible, including build scripts, patches, Guile modules, etc."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15280
msgid "For this type of graph, it is also possible to pass a @file{.drv} file name instead of a package name, as in:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15283
#, no-wrap
msgid "guix graph -t derivation $(guix system build -d my-config.scm)\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15285
#, no-wrap
msgid "module"
msgstr "modulo"

#. type: table
#: guix-git/doc/guix.texi:15289
msgid "This is the graph of @dfn{package modules} (@pxref{Package Modules}).  For example, the following command shows the graph for the package module that defines the @code{guile} package:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15292
#, no-wrap
msgid "guix graph -t module guile | xdot -\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15297
msgid "All the types above correspond to @emph{build-time dependencies}.  The following graph type represents the @emph{run-time dependencies}:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15302
msgid "This is the graph of @dfn{references} of a package output, as returned by @command{guix gc --references} (@pxref{Invoking guix gc})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15305
msgid "If the given package output is not available in the store, @command{guix graph} attempts to obtain dependency information from substitutes."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15309
msgid "Here you can also pass a store file name instead of a package name.  For example, the command below produces the reference graph of your profile (which can be big!):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15312
#, no-wrap
msgid "guix graph -t references $(readlink -f ~/.guix-profile)\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15314
#, no-wrap
msgid "referrers"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15317
msgid "This is the graph of the @dfn{referrers} of a store item, as returned by @command{guix gc --referrers} (@pxref{Invoking guix gc})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15323
msgid "This relies exclusively on local information from your store.  For instance, let us suppose that the current Inkscape is available in 10 profiles on your machine; @command{guix graph -t referrers inkscape} will show a graph rooted at Inkscape and with those 10 profiles linked to it."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15326
msgid "It can help determine what is preventing a store item from being garbage collected."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:15329
#, no-wrap
msgid "shortest path, between packages"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15336
msgid "Often, the graph of the package you are interested in does not fit on your screen, and anyway all you want to know is @emph{why} that package actually depends on some seemingly unrelated package.  The @option{--path} option instructs @command{guix graph} to display the shortest path between two packages (or derivations, or store items, etc.):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15350
#, no-wrap
msgid ""
"$ guix graph --path emacs libunistring\n"
"emacs@@26.3\n"
"mailutils@@3.9\n"
"libunistring@@0.9.10\n"
"$ guix graph --path -t derivation emacs libunistring\n"
"/gnu/store/@dots{}-emacs-26.3.drv\n"
"/gnu/store/@dots{}-mailutils-3.9.drv\n"
"/gnu/store/@dots{}-libunistring-0.9.10.drv\n"
"$ guix graph --path -t references emacs libunistring\n"
"/gnu/store/@dots{}-emacs-26.3\n"
"/gnu/store/@dots{}-libidn2-2.2.0\n"
"/gnu/store/@dots{}-libunistring-0.9.10\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15358
msgid "Sometimes you still want to visualize the graph but would like to trim it so it can actually be displayed.  One way to do it is via the @option{--max-depth} (or @option{-M}) option, which lets you specify the maximum depth of the graph.  In the example below, we visualize only @code{libreoffice} and the nodes whose distance to @code{libreoffice} is at most 2:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15361
#, no-wrap
msgid "guix graph -M 2 libreoffice | xdot -f fdp -\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15365
msgid "Mind you, that's still a big ball of spaghetti, but at least @command{dot} can render it quickly and it can be browsed somewhat."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15367
msgid "The available options are the following:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15373
msgid "Produce a graph output of @var{type}, where @var{type} must be one of the values listed above."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15376
msgid "List the supported graph types."
msgstr "Lista os tipos de gráficos disponíveis."

#. type: item
#: guix-git/doc/guix.texi:15377
#, no-wrap
msgid "--backend=@var{backend}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:15378
#, no-wrap
msgid "-b @var{backend}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15380
msgid "Produce a graph using the selected @var{backend}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15381
#, no-wrap
msgid "--list-backends"
msgstr "--list-backends"

#. type: table
#: guix-git/doc/guix.texi:15383
msgid "List the supported graph backends."
msgstr "Lista os backends de gráficos disponíveis."

#. type: table
#: guix-git/doc/guix.texi:15385
msgid "Currently, the available backends are Graphviz and d3.js."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15386
#, no-wrap
msgid "--path"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15391
msgid "Display the shortest path between two nodes of the type specified by @option{--type}.  The example below shows the shortest path between @code{libreoffice} and @code{llvm} according to the references of @code{libreoffice}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15398
#, no-wrap
msgid ""
"$ guix graph --path -t references libreoffice llvm\n"
"/gnu/store/@dots{}-libreoffice-6.4.2.2\n"
"/gnu/store/@dots{}-libepoxy-1.5.4\n"
"/gnu/store/@dots{}-mesa-19.3.4\n"
"/gnu/store/@dots{}-llvm-9.0.1\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15408
#, no-wrap
msgid "guix graph -e '(@@@@ (gnu packages commencement) gnu-make-final)'\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15413
msgid "Display the graph for @var{system}---e.g., @code{i686-linux}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15416
msgid "The package dependency graph is largely architecture-independent, but there are some architecture-dependent bits that this option allows you to visualize."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15432
msgid "On top of that, @command{guix graph} supports all the usual package transformation options (@pxref{Package Transformation Options}).  This makes it easy to view the effect of a graph-rewriting transformation such as @option{--with-input}.  For example, the command below outputs the graph of @code{git} once @code{openssl} has been replaced by @code{libressl} everywhere in the graph:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15435
#, no-wrap
msgid "guix graph git --with-input=openssl=libressl\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15438
msgid "So many possibilities, so much fun!"
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:15440
#, no-wrap
msgid "Invoking @command{guix publish}"
msgstr "Invocando @command{guix publish}"

#. type: command{#1}
#: guix-git/doc/guix.texi:15442
#, no-wrap
msgid "guix publish"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15446
msgid "The purpose of @command{guix publish} is to enable users to easily share their store with others, who can then use it as a substitute server (@pxref{Substitutes})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15452
msgid "When @command{guix publish} runs, it spawns an HTTP server which allows anyone with network access to obtain substitutes from it.  This means that any machine running Guix can also act as if it were a build farm, since the HTTP interface is compatible with Cuirass, the software behind the @code{@value{SUBSTITUTE-SERVER-1}} build farm."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15458
msgid "For security, each substitute is signed, allowing recipients to check their authenticity and integrity (@pxref{Substitutes}).  Because @command{guix publish} uses the signing key of the system, which is only readable by the system administrator, it must be started as root; the @option{--user} option makes it drop root privileges early on."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15462
msgid "The signing key pair must be generated before @command{guix publish} is launched, using @command{guix archive --generate-key} (@pxref{Invoking guix archive})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15467
msgid "When the @option{--advertise} option is passed, the server advertises its availability on the local network using multicast DNS (mDNS) and DNS service discovery (DNS-SD), currently @i{via} Guile-Avahi (@pxref{Top,,, guile-avahi, Using Avahi in Guile Scheme Programs})."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15472
#, no-wrap
msgid "guix publish @var{options}@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15476
msgid "Running @command{guix publish} without any additional arguments will spawn an HTTP server on port 8080:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15479
#, no-wrap
msgid "guix publish\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:15481
#, fuzzy, no-wrap
#| msgid "Invoking @command{guix publish}"
msgid "socket activation, for @command{guix publish}"
msgstr "Invocando @command{guix publish}"

#. type: Plain text
#: guix-git/doc/guix.texi:15485
msgid "@command{guix publish} can also be started following the systemd ``socket activation'' protocol (@pxref{Service De- and Constructors, @code{make-systemd-constructor},, shepherd, The GNU Shepherd Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15488
msgid "Once a publishing server has been authorized, the daemon may download substitutes from it.  @xref{Getting Substitutes from Other Servers}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15496
msgid "By default, @command{guix publish} compresses archives on the fly as it serves them.  This ``on-the-fly'' mode is convenient in that it requires no setup and is immediately available.  However, when serving lots of clients, we recommend using the @option{--cache} option, which enables caching of the archives before they are sent to clients---see below for details.  The @command{guix weather} command provides a handy way to check what a server provides (@pxref{Invoking guix weather})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15503
msgid "As a bonus, @command{guix publish} also serves as a content-addressed mirror for source files referenced in @code{origin} records (@pxref{origin Reference}).  For instance, assuming @command{guix publish} is running on @code{example.org}, the following URL returns the raw @file{hello-2.10.tar.gz} file with the given SHA256 hash (represented in @code{nix-base32} format, @pxref{Invoking guix hash}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15506
#, no-wrap
msgid "http://example.org/file/hello-2.10.tar.gz/sha256/0ssi1@dots{}ndq1i\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15510
msgid "Obviously, these URLs only work for files that are in the store; in other cases, they return 404 (``Not Found'')."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:15511
#, no-wrap
msgid "build logs, publication"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15513
msgid "Build logs are available from @code{/log} URLs like:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15516
#, no-wrap
msgid "http://example.org/log/gwspk@dots{}-guile-2.2.3\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15526
msgid "When @command{guix-daemon} is configured to save compressed build logs, as is the case by default (@pxref{Invoking guix-daemon}), @code{/log} URLs return the compressed log as-is, with an appropriate @code{Content-Type} and/or @code{Content-Encoding} header.  We recommend running @command{guix-daemon} with @option{--log-compression=gzip} since Web browsers can automatically decompress it, which is not the case with Bzip2 compression."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15530
#, no-wrap
msgid "--port=@var{port}"
msgstr "--port=@var{porta}"

#. type: itemx
#: guix-git/doc/guix.texi:15531
#, no-wrap
msgid "-p @var{port}"
msgstr "-p @var{porta}"

#. type: table
#: guix-git/doc/guix.texi:15533
msgid "Listen for HTTP requests on @var{port}."
msgstr "Ouve requisições HTTP na @var{porta}."

#. type: item
#: guix-git/doc/guix.texi:15534
#, no-wrap
msgid "--listen=@var{host}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15537
msgid "Listen on the network interface for @var{host}.  The default is to accept connections from any interface."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15542
msgid "Change privileges to @var{user} as soon as possible---i.e., once the server socket is open and the signing key has been read."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15543
#, no-wrap
msgid "--compression[=@var{method}[:@var{level}]]"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:15544
#, no-wrap
msgid "-C [@var{method}[:@var{level}]]"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15548
msgid "Compress data using the given @var{method} and @var{level}.  @var{method} is one of @code{lzip}, @code{zstd}, and @code{gzip}; when @var{method} is omitted, @code{gzip} is used."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15552
msgid "When @var{level} is zero, disable compression.  The range 1 to 9 corresponds to different compression levels: 1 is the fastest, and 9 is the best (CPU-intensive).  The default is 3."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15559
msgid "Usually, @code{lzip} compresses noticeably better than @code{gzip} for a small increase in CPU usage; see @uref{https://nongnu.org/lzip/lzip_benchmark.html,benchmarks on the lzip Web page}.  However, @code{lzip} achieves low decompression throughput (on the order of 50@tie{}MiB/s on modern hardware), which can be a bottleneck for someone who downloads over a fast network connection."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15563
msgid "The compression ratio of @code{zstd} is between that of @code{lzip} and that of @code{gzip}; its main advantage is a @uref{https://facebook.github.io/zstd/,high decompression speed}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15572
msgid "Unless @option{--cache} is used, compression occurs on the fly and the compressed streams are not cached.  Thus, to reduce load on the machine that runs @command{guix publish}, it may be a good idea to choose a low compression level, to run @command{guix publish} behind a caching proxy, or to use @option{--cache}.  Using @option{--cache} has the advantage that it allows @command{guix publish} to add @code{Content-Length} HTTP header to its responses."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15577
msgid "This option can be repeated, in which case every substitute gets compressed using all the selected methods, and all of them are advertised.  This is useful when users may not support all the compression methods: they can select the one they support."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15578
#, no-wrap
msgid "--cache=@var{directory}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:15579
#, no-wrap
msgid "-c @var{directory}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15582
msgid "Cache archives and meta-data (@code{.narinfo} URLs) to @var{directory} and only serve archives that are in cache."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15590
msgid "When this option is omitted, archives and meta-data are created on-the-fly.  This can reduce the available bandwidth, especially when compression is enabled, since this may become CPU-bound.  Another drawback of the default mode is that the length of archives is not known in advance, so @command{guix publish} does not add a @code{Content-Length} HTTP header to its responses, which in turn prevents clients from knowing the amount of data being downloaded."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15598
msgid "Conversely, when @option{--cache} is used, the first request for a store item (@i{via} a @code{.narinfo} URL) triggers a background process to @dfn{bake} the archive---computing its @code{.narinfo} and compressing the archive, if needed.  Once the archive is cached in @var{directory}, subsequent requests succeed and are served directly from the cache, which guarantees that clients get the best possible bandwidth."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15605
msgid "That first @code{.narinfo} request nonetheless returns 200, provided the requested store item is ``small enough'', below the cache bypass threshold---see @option{--cache-bypass-threshold} below.  That way, clients do not have to wait until the archive is baked.  For larger store items, the first @code{.narinfo} request returns 404, meaning that clients have to wait until the archive is baked."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15609
msgid "The ``baking'' process is performed by worker threads.  By default, one thread per CPU core is created, but this can be customized.  See @option{--workers} below."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15612
msgid "When @option{--ttl} is used, cached entries are automatically deleted when they have expired."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15613
#, no-wrap
msgid "--workers=@var{N}"
msgstr "--workers=@var{N}"

#. type: table
#: guix-git/doc/guix.texi:15616
msgid "When @option{--cache} is used, request the allocation of @var{N} worker threads to ``bake'' archives."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15617
#, no-wrap
msgid "--ttl=@var{ttl}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15621 guix-git/doc/guix.texi:37846
msgid "Produce @code{Cache-Control} HTTP headers that advertise a time-to-live (TTL) of @var{ttl}.  @var{ttl} must denote a duration: @code{5d} means 5 days, @code{1m} means 1 month, and so on."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15626
msgid "This allows the user's Guix to keep substitute information in cache for @var{ttl}.  However, note that @code{guix publish} does not itself guarantee that the store items it provides will indeed remain available for as long as @var{ttl}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15630
msgid "Additionally, when @option{--cache} is used, cached entries that have not been accessed for @var{ttl} and that no longer have a corresponding item in the store, may be deleted."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15631
#, fuzzy, no-wrap
#| msgid "--manifest=@var{file}"
msgid "--negative-ttl=@var{ttl}"
msgstr "--manifest=@var{arquivo}"

#. type: table
#: guix-git/doc/guix.texi:15636 guix-git/doc/guix.texi:37855
msgid "Similarly produce @code{Cache-Control} HTTP headers to advertise the time-to-live (TTL) of @emph{negative} lookups---missing store items, for which the HTTP 404 code is returned.  By default, no negative TTL is advertised."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15640
msgid "This parameter can help adjust server load and substitute latency by instructing cooperating clients to be more or less patient when a store item is missing."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15641
#, no-wrap
msgid "--cache-bypass-threshold=@var{size}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15646
msgid "When used in conjunction with @option{--cache}, store items smaller than @var{size} are immediately available, even when they are not yet in cache.  @var{size} is a size in bytes, or it can be suffixed by @code{M} for megabytes and so on.  The default is @code{10M}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15651
msgid "``Cache bypass'' allows you to reduce the publication delay for clients at the expense of possibly additional I/O and CPU use on the server side: depending on the client access patterns, those store items can end up being baked several times until a copy is available in cache."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15655
msgid "Increasing the threshold may be useful for sites that have few users, or to guarantee that users get substitutes even for store items that are not popular."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15656
#, no-wrap
msgid "--nar-path=@var{path}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15659
msgid "Use @var{path} as the prefix for the URLs of ``nar'' files (@pxref{Invoking guix archive, normalized archives})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15663
msgid "By default, nars are served at a URL such as @code{/nar/gzip/@dots{}-coreutils-8.25}.  This option allows you to change the @code{/nar} part to @var{path}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15664
#, no-wrap
msgid "--public-key=@var{file}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:15665
#, no-wrap
msgid "--private-key=@var{file}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15668 guix-git/doc/guix.texi:33259
#: guix-git/doc/guix.texi:33296
msgid "Use the specific @var{file}s as the public/private key pair used to sign the store items being published."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15675
msgid "The files must correspond to the same key pair (the private key is used for signing and the public key is merely advertised in the signature metadata).  They must contain keys in the canonical s-expression format as produced by @command{guix archive --generate-key} (@pxref{Invoking guix archive}).  By default, @file{/etc/guix/signing-key.pub} and @file{/etc/guix/signing-key.sec} are used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15676
#, no-wrap
msgid "--repl[=@var{port}]"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:15677
#, no-wrap
msgid "-r [@var{port}]"
msgstr "-r [@var{porta}]"

#. type: table
#: guix-git/doc/guix.texi:15681
msgid "Spawn a Guile REPL server (@pxref{REPL Servers,,, guile, GNU Guile Reference Manual}) on @var{port} (37146 by default).  This is used primarily for debugging a running @command{guix publish} server."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15687
msgid "Enabling @command{guix publish} on Guix System is a one-liner: just instantiate a @code{guix-publish-service-type} service in the @code{services} field of the @code{operating-system} declaration (@pxref{guix-publish-service-type, @code{guix-publish-service-type}})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15690
msgid "If you are instead running Guix on a ``foreign distro'', follow these instructions:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:15694
msgid "If your host distro uses the systemd init system:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15699
#, no-wrap
msgid ""
"# ln -s ~root/.guix-profile/lib/systemd/system/guix-publish.service \\\n"
"        /etc/systemd/system/\n"
"# systemctl start guix-publish && systemctl enable guix-publish\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15707
#, no-wrap
msgid ""
"# ln -s ~root/.guix-profile/lib/upstart/system/guix-publish.conf /etc/init/\n"
"# start guix-publish\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:15711
msgid "Otherwise, proceed similarly with your distro's init system."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:15714
#, no-wrap
msgid "Invoking @command{guix challenge}"
msgstr "Invocando @command{guix challenge}"

#. type: cindex
#: guix-git/doc/guix.texi:15717
#, no-wrap
msgid "verifiable builds"
msgstr ""

#. type: command{#1}
#: guix-git/doc/guix.texi:15718
#, no-wrap
msgid "guix challenge"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:15719
#, no-wrap
msgid "challenge"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15724
msgid "Do the binaries provided by this server really correspond to the source code it claims to build? Is a package build process deterministic? These are the questions the @command{guix challenge} command attempts to answer."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15732
msgid "The former is obviously an important question: Before using a substitute server (@pxref{Substitutes}), one had better @emph{verify} that it provides the right binaries, and thus @emph{challenge} it.  The latter is what enables the former: If package builds are deterministic, then independent builds of the package should yield the exact same result, bit for bit; if a server provides a binary different from the one obtained locally, it may be either corrupt or malicious."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15741
msgid "We know that the hash that shows up in @file{/gnu/store} file names is the hash of all the inputs of the process that built the file or directory---compilers, libraries, build scripts, etc. (@pxref{Introduction}).  Assuming deterministic build processes, one store file name should map to exactly one build output.  @command{guix challenge} checks whether there is, indeed, a single mapping by comparing the build outputs of several independent builds of any given store item."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15743
msgid "The command output looks like this:"
msgstr ""

#. type: smallexample
#: guix-git/doc/guix.texi:15757
#, no-wrap
msgid ""
"$ guix challenge \\\n"
"  --substitute-urls=\"https://@value{SUBSTITUTE-SERVER-1} https://guix.example.org\" \\\n"
"  openssl git pius coreutils grep\n"
"updating substitutes from 'https://@value{SUBSTITUTE-SERVER-1}'... 100.0%\n"
"updating substitutes from 'https://guix.example.org'... 100.0%\n"
"/gnu/store/@dots{}-openssl-1.0.2d contents differ:\n"
"  local hash: 0725l22r5jnzazaacncwsvp9kgf42266ayyp814v7djxs7nk963q\n"
"  https://@value{SUBSTITUTE-SERVER-1}/nar/@dots{}-openssl-1.0.2d: 0725l22r5jnzazaacncwsvp9kgf42266ayyp814v7djxs7nk963q\n"
"  https://guix.example.org/nar/@dots{}-openssl-1.0.2d: 1zy4fmaaqcnjrzzajkdn3f5gmjk754b43qkq47llbyak9z0qjyim\n"
"  differing files:\n"
"    /lib/libcrypto.so.1.1\n"
"    /lib/libssl.so.1.1\n"
"\n"
msgstr ""

#. type: smallexample
#: guix-git/doc/guix.texi:15764
#, no-wrap
msgid ""
"/gnu/store/@dots{}-git-2.5.0 contents differ:\n"
"  local hash: 00p3bmryhjxrhpn2gxs2fy0a15lnip05l97205pgbk5ra395hyha\n"
"  https://@value{SUBSTITUTE-SERVER-1}/nar/@dots{}-git-2.5.0: 069nb85bv4d4a6slrwjdy8v1cn4cwspm3kdbmyb81d6zckj3nq9f\n"
"  https://guix.example.org/nar/@dots{}-git-2.5.0: 0mdqa9w1p6cmli6976v4wi0sw9r4p5prkj7lzfd1877wk11c9c73\n"
"  differing file:\n"
"    /libexec/git-core/git-fsck\n"
"\n"
msgstr ""

#. type: smallexample
#: guix-git/doc/guix.texi:15771
#, no-wrap
msgid ""
"/gnu/store/@dots{}-pius-2.1.1 contents differ:\n"
"  local hash: 0k4v3m9z1zp8xzzizb7d8kjj72f9172xv078sq4wl73vnq9ig3ax\n"
"  https://@value{SUBSTITUTE-SERVER-1}/nar/@dots{}-pius-2.1.1: 0k4v3m9z1zp8xzzizb7d8kjj72f9172xv078sq4wl73vnq9ig3ax\n"
"  https://guix.example.org/nar/@dots{}-pius-2.1.1: 1cy25x1a4fzq5rk0pmvc8xhwyffnqz95h2bpvqsz2mpvlbccy0gs\n"
"  differing file:\n"
"    /share/man/man1/pius.1.gz\n"
"\n"
msgstr ""

#. type: smallexample
#: guix-git/doc/guix.texi:15773
#, no-wrap
msgid ""
"@dots{}\n"
"\n"
msgstr ""

#. type: smallexample
#: guix-git/doc/guix.texi:15778
#, no-wrap
msgid ""
"5 store items were analyzed:\n"
"  - 2 (40.0%) were identical\n"
"  - 3 (60.0%) differed\n"
"  - 0 (0.0%) were inconclusive\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15788
msgid "In this example, @command{guix challenge} queries all the substitute servers for each of the fives packages specified on the command line.  It then reports those store items for which the servers obtained a result different from the local build (if it exists) and/or different from one another; here, the @samp{local hash} lines indicate that a local build result was available for each of these packages and shows its hash."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:15789
#, no-wrap
msgid "non-determinism, in package builds"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15800
msgid "As an example, @code{guix.example.org} always gets a different answer.  Conversely, @code{@value{SUBSTITUTE-SERVER-1}} agrees with local builds, except in the case of Git.  This might indicate that the build process of Git is non-deterministic, meaning that its output varies as a function of various things that Guix does not fully control, in spite of building packages in isolated environments (@pxref{Features}).  Most common sources of non-determinism include the addition of timestamps in build results, the inclusion of random numbers, and directory listings sorted by inode number.  See @uref{https://reproducible-builds.org/docs/}, for more information."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15803
msgid "To find out what is wrong with this Git binary, the easiest approach is to run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15808
#, no-wrap
msgid ""
"guix challenge git \\\n"
"  --diff=diffoscope \\\n"
"  --substitute-urls=\"https://@value{SUBSTITUTE-SERVER-1} https://guix.example.org\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15812
msgid "This automatically invokes @command{diffoscope}, which displays detailed information about files that differ."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15815
msgid "Alternatively, we can do something along these lines (@pxref{Invoking guix archive}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15820
#, no-wrap
msgid ""
"$ wget -q -O - https://@value{SUBSTITUTE-SERVER-1}/nar/lzip/@dots{}-git-2.5.0 \\\n"
"   | lzip -d | guix archive -x /tmp/git\n"
"$ diff -ur --no-dereference /gnu/store/@dots{}-git.2.5.0 /tmp/git\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15829
msgid "This command shows the difference between the files resulting from the local build, and the files resulting from the build on @code{@value{SUBSTITUTE-SERVER-1}} (@pxref{Overview, Comparing and Merging Files,, diffutils, Comparing and Merging Files}).  The @command{diff} command works great for text files.  When binary files differ, a better option is @uref{https://diffoscope.org/, Diffoscope}, a tool that helps visualize differences for all kinds of files."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15837
msgid "Once you have done that work, you can tell whether the differences are due to a non-deterministic build process or to a malicious server.  We try hard to remove sources of non-determinism in packages to make it easier to verify substitutes, but of course, this is a process that involves not just Guix, but a large part of the free software community.  In the meantime, @command{guix challenge} is one tool to help address the problem."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15841
msgid "If you are writing packages for Guix, you are encouraged to check whether @code{@value{SUBSTITUTE-SERVER-1}} and other substitute servers obtain the same build result as you did with:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15844
#, fuzzy, no-wrap
#| msgid "./pre-inst-env guix build gnew --keep-failed\n"
msgid "guix challenge @var{package}\n"
msgstr "./pre-inst-env guix build gnew --keep-failed\n"

#. type: example
#: guix-git/doc/guix.texi:15850
#, fuzzy, no-wrap
#| msgid "guix style [@var{options}] @var{package}@dots{}\n"
msgid "guix challenge @var{options} @var{argument}@dots{}\n"
msgstr "guix style [@var{options}] @var{package}@dots{}\n"

#. type: Plain text
#: guix-git/doc/guix.texi:15857
msgid "where @var{argument} is a package specification such as @code{guile@@2.0} or @code{glibc:debug} or, alternatively, a store file name as returned, for example, by @command{guix build} or @command{guix gc --list-live}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15863
msgid "When a difference is found between the hash of a locally-built item and that of a server-provided substitute, or among substitutes provided by different servers, the command displays it as in the example above and its exit code is 2 (other non-zero exit codes denote other kinds of errors)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15865
msgid "The one option that matters is:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15871
msgid "Consider @var{urls} the whitespace-separated list of substitute source URLs to compare to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15872
#, no-wrap
msgid "--diff=@var{mode}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15874
msgid "Upon mismatches, show differences according to @var{mode}, one of:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15876
#, no-wrap
msgid "@code{simple} (the default)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15878
msgid "Show the list of files that differ."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:15879
#, no-wrap
msgid "diffoscope"
msgstr ""

#. type: var{#1}
#: guix-git/doc/guix.texi:15880
#, no-wrap
msgid "command"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15883
msgid "Invoke @uref{https://diffoscope.org/, Diffoscope}, passing it two directories whose contents do not match."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15886
msgid "When @var{command} is an absolute file name, run @var{command} instead of Diffoscope."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15889
msgid "Do not show further details about the differences."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15894
msgid "Thus, unless @option{--diff=none} is passed, @command{guix challenge} downloads the store items from the given substitute servers so that it can compare them."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15895
#, no-wrap
msgid "--verbose"
msgstr "--verbose"

#. type: itemx
#: guix-git/doc/guix.texi:15896
#, no-wrap
msgid "-v"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15899
msgid "Show details about matches (identical contents) in addition to information about mismatches."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:15903
#, no-wrap
msgid "Invoking @command{guix copy}"
msgstr "Invocando @command{guix copy}"

#. type: command{#1}
#: guix-git/doc/guix.texi:15905
#, fuzzy, no-wrap
#| msgid "Invoking guix copy"
msgid "guix copy"
msgstr "Invocando guix copy"

#. type: cindex
#: guix-git/doc/guix.texi:15906
#, no-wrap
msgid "copy, of store items, over SSH"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:15907
#, no-wrap
msgid "SSH, copy of store items"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:15908
#, no-wrap
msgid "sharing store items across machines"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:15909
#, no-wrap
msgid "transferring store items across machines"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15916
msgid "The @command{guix copy} command copies items from the store of one machine to that of another machine over a secure shell (SSH)  connection@footnote{This command is available only when Guile-SSH was found.  @xref{Requirements}, for details.}.  For example, the following command copies the @code{coreutils} package, the user's profile, and all their dependencies over to @var{host}, logged in as @var{user}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15920
#, no-wrap
msgid ""
"guix copy --to=@var{user}@@@var{host} \\\n"
"          coreutils $(readlink -f ~/.guix-profile)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15924
msgid "If some of the items to be copied are already present on @var{host}, they are not actually sent."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15927
msgid "The command below retrieves @code{libreoffice} and @code{gimp} from @var{host}, assuming they are available there:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15930
#, no-wrap
msgid "guix copy --from=@var{host} libreoffice gimp\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15935
msgid "The SSH connection is established using the Guile-SSH client, which is compatible with OpenSSH: it honors @file{~/.ssh/known_hosts} and @file{~/.ssh/config}, and uses the SSH agent for authentication."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15941
msgid "The key used to sign items that are sent must be accepted by the remote machine.  Likewise, the key used by the remote machine to sign items you are retrieving must be in @file{/etc/guix/acl} so it is accepted by your own daemon.  @xref{Invoking guix archive}, for more information about store item authentication."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15946
#, no-wrap
msgid "guix copy [--to=@var{spec}|--from=@var{spec}] @var{items}@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15949
msgid "You must always specify one of the following options:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15951
#, no-wrap
msgid "--to=@var{spec}"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:15952
#, no-wrap
msgid "--from=@var{spec}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15956
msgid "Specify the host to send to or receive from.  @var{spec} must be an SSH spec such as @code{example.org}, @code{charlie@@example.org}, or @code{charlie@@example.org:2222}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15960
msgid "The @var{items} can be either package names, such as @code{gimp}, or store items, such as @file{/gnu/store/@dots{}-idutils-4.6}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15964
msgid "When specifying the name of a package to send, it is first built if needed, unless @option{--dry-run} was specified.  Common build options are supported (@pxref{Common Build Options})."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:15967
#, no-wrap
msgid "Invoking @command{guix container}"
msgstr "Invocando @command{guix container}"

#. type: command{#1}
#: guix-git/doc/guix.texi:15969
#, no-wrap
msgid "guix container"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:15973
msgid "As of version @value{VERSION}, this tool is experimental.  The interface is subject to radical change in the future."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15980
msgid "The purpose of @command{guix container} is to manipulate processes running within an isolated environment, commonly known as a ``container'', typically created by the @command{guix shell} (@pxref{Invoking guix shell}) and @command{guix system container} (@pxref{Invoking guix system}) commands."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:15985
#, no-wrap
msgid "guix container @var{action} @var{options}@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15989
msgid "@var{action} specifies the operation to perform with a container, and @var{options} specifies the context-specific arguments for the action."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:15991
msgid "The following actions are available:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:15993
#, no-wrap
msgid "exec"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15995
msgid "Execute a command within the context of a running container."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:15997
msgid "The syntax is:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16000
#, no-wrap
msgid "guix container exec @var{pid} @var{program} @var{arguments}@dots{}\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16006
msgid "@var{pid} specifies the process ID of the running container.  @var{program} specifies an executable file name within the root file system of the container.  @var{arguments} are the additional options that will be passed to @var{program}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16010
msgid "The following command launches an interactive login shell inside a Guix system container, started by @command{guix system container}, and whose process ID is 9001:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16013
#, no-wrap
msgid "guix container exec 9001 /run/current-system/profile/bin/bash --login\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16017
msgid "Note that the @var{pid} cannot be the parent process of a container.  It must be PID 1 of the container or one of its child processes."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:16021
#, no-wrap
msgid "Invoking @command{guix weather}"
msgstr "Invocando @command{guix weather}"

#. type: command{#1}
#: guix-git/doc/guix.texi:16023
#, fuzzy, no-wrap
#| msgid "Invoking guix weather"
msgid "guix weather"
msgstr "Invocando guix weather"

#. type: Plain text
#: guix-git/doc/guix.texi:16031
msgid "Occasionally you're grumpy because substitutes are lacking and you end up building packages by yourself (@pxref{Substitutes}).  The @command{guix weather} command reports on substitute availability on the specified servers so you can have an idea of whether you'll be grumpy today.  It can sometimes be useful info as a user, but it is primarily useful to people running @command{guix publish} (@pxref{Invoking guix publish})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16032
#, no-wrap
msgid "statistics, for substitutes"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16033
#, no-wrap
msgid "availability of substitutes"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16034
#, no-wrap
msgid "substitute availability"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16035
#, no-wrap
msgid "weather, substitute availability"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16037
msgid "Here's a sample run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16049
#, no-wrap
msgid ""
"$ guix weather --substitute-urls=https://guix.example.org\n"
"computing 5,872 package derivations for x86_64-linux...\n"
"looking for 6,128 store items on https://guix.example.org..\n"
"updating substitutes from 'https://guix.example.org'... 100.0%\n"
"https://guix.example.org\n"
"  43.4% substitutes available (2,658 out of 6,128)\n"
"  7,032.5 MiB of nars (compressed)\n"
"  19,824.2 MiB on disk (uncompressed)\n"
"  0.030 seconds per request (182.9 seconds in total)\n"
"  33.5 requests per second\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16059
#, no-wrap
msgid ""
"  9.8% (342 out of 3,470) of the missing items are queued\n"
"  867 queued builds\n"
"      x86_64-linux: 518 (59.7%)\n"
"      i686-linux: 221 (25.5%)\n"
"      aarch64-linux: 128 (14.8%)\n"
"  build rate: 23.41 builds per hour\n"
"      x86_64-linux: 11.16 builds per hour\n"
"      i686-linux: 6.03 builds per hour\n"
"      aarch64-linux: 6.41 builds per hour\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16061
#, no-wrap
msgid "continuous integration, statistics"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16072
msgid "As you can see, it reports the fraction of all the packages for which substitutes are available on the server---regardless of whether substitutes are enabled, and regardless of whether this server's signing key is authorized.  It also reports the size of the compressed archives (``nars'') provided by the server, the size the corresponding store items occupy in the store (assuming deduplication is turned off), and the server's throughput.  The second part gives continuous integration (CI) statistics, if the server supports it.  In addition, using the @option{--coverage} option, @command{guix weather} can list ``important'' package substitutes missing on the server (see below)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16078
msgid "To achieve that, @command{guix weather} queries over HTTP(S) meta-data (@dfn{narinfos}) for all the relevant store items.  Like @command{guix challenge}, it ignores signatures on those substitutes, which is innocuous since the command only gathers statistics and cannot install those substitutes."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16083
#, no-wrap
msgid "guix weather @var{options}@dots{} [@var{packages}@dots{}]\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16091
msgid "When @var{packages} is omitted, @command{guix weather} checks the availability of substitutes for @emph{all} the packages, or for those specified with @option{--manifest}; otherwise it only considers the specified packages.  It is also possible to query specific system types with @option{--system}.  @command{guix weather} exits with a non-zero code when the fraction of available substitutes is below 100%."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16099
msgid "@var{urls} is the space-separated list of substitute server URLs to query.  When this option is omitted, the default set of substitute servers is queried."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16105
msgid "Query substitutes for @var{system}---e.g., @code{aarch64-linux}.  This option can be repeated, in which case @command{guix weather} will query substitutes for several system types."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16111
msgid "Instead of querying substitutes for all the packages, only ask for those specified in @var{file}.  @var{file} must contain a @dfn{manifest}, as with the @code{-m} option of @command{guix package} (@pxref{Invoking guix package})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16114
msgid "This option can be repeated several times, in which case the manifests are concatenated."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16115
#, no-wrap
msgid "--coverage[=@var{count}]"
msgstr "--coverage[=@var{contagem}]"

#. type: itemx
#: guix-git/doc/guix.texi:16116
#, no-wrap
msgid "-c [@var{count}]"
msgstr "-c [@var{contagem}]"

#. type: table
#: guix-git/doc/guix.texi:16122
msgid "Report on substitute coverage for packages: list packages with at least @var{count} dependents (zero by default) for which substitutes are unavailable.  Dependent packages themselves are not listed: if @var{b} depends on @var{a} and @var{a} has no substitutes, only @var{a} is listed, even though @var{b} usually lacks substitutes as well.  The result looks like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16136
#, no-wrap
msgid ""
"$ guix weather --substitute-urls=@value{SUBSTITUTE-URLS} -c 10\n"
"computing 8,983 package derivations for x86_64-linux...\n"
"looking for 9,343 store items on @value{SUBSTITUTE-URLS}...\n"
"updating substitutes from '@value{SUBSTITUTE-URLS}'... 100.0%\n"
"@value{SUBSTITUTE-URLS}\n"
"  64.7% substitutes available (6,047 out of 9,343)\n"
"@dots{}\n"
"2502 packages are missing from '@value{SUBSTITUTE-URLS}' for 'x86_64-linux', among which:\n"
"    58  kcoreaddons@@5.49.0      /gnu/store/@dots{}-kcoreaddons-5.49.0\n"
"    46  qgpgme@@1.11.1           /gnu/store/@dots{}-qgpgme-1.11.1\n"
"    37  perl-http-cookiejar@@0.008  /gnu/store/@dots{}-perl-http-cookiejar-0.008\n"
"    @dots{}\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16142
msgid "What this example shows is that @code{kcoreaddons} and presumably the 58 packages that depend on it have no substitutes at @code{@value{SUBSTITUTE-SERVER-1}}; likewise for @code{qgpgme} and the 46 packages that depend on it."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16146
msgid "If you are a Guix developer, or if you are taking care of this build farm, you'll probably want to have a closer look at these packages: they may simply fail to build."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16147
#, no-wrap
msgid "--display-missing"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16149
msgid "Display the list of store items for which substitutes are missing."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:16152
#, no-wrap
msgid "Invoking @command{guix processes}"
msgstr "Invocando @command{guix processes}"

#. type: command{#1}
#: guix-git/doc/guix.texi:16154
#, fuzzy, no-wrap
#| msgid "Invoking guix processes"
msgid "guix processes"
msgstr "Invocando guix processes"

#. type: Plain text
#: guix-git/doc/guix.texi:16161
msgid "The @command{guix processes} command can be useful to developers and system administrators, especially on multi-user machines and on build farms: it lists the current sessions (connections to the daemon), as well as information about the processes involved@footnote{Remote sessions, when @command{guix-daemon} is started with @option{--listen} specifying a TCP endpoint, are @emph{not} listed.}.  Here's an example of the information it returns:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16167
#, no-wrap
msgid ""
"$ sudo guix processes\n"
"SessionPID: 19002\n"
"ClientPID: 19090\n"
"ClientCommand: guix shell python\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16171
#, no-wrap
msgid ""
"SessionPID: 19402\n"
"ClientPID: 19367\n"
"ClientCommand: guix publish -u guix-publish -p 3000 -C 9 @dots{}\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16184
#, no-wrap
msgid ""
"SessionPID: 19444\n"
"ClientPID: 19419\n"
"ClientCommand: cuirass --cache-directory /var/cache/cuirass @dots{}\n"
"LockHeld: /gnu/store/@dots{}-perl-ipc-cmd-0.96.lock\n"
"LockHeld: /gnu/store/@dots{}-python-six-bootstrap-1.11.0.lock\n"
"LockHeld: /gnu/store/@dots{}-libjpeg-turbo-2.0.0.lock\n"
"ChildPID: 20495\n"
"ChildCommand: guix offload x86_64-linux 7200 1 28800\n"
"ChildPID: 27733\n"
"ChildCommand: guix offload x86_64-linux 7200 1 28800\n"
"ChildPID: 27793\n"
"ChildCommand: guix offload x86_64-linux 7200 1 28800\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16191
msgid "In this example we see that @command{guix-daemon} has three clients: @command{guix environment}, @command{guix publish}, and the Cuirass continuous integration tool; their process identifier (PID) is given by the @code{ClientPID} field.  The @code{SessionPID} field gives the PID of the @command{guix-daemon} sub-process of this particular session."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16198
msgid "The @code{LockHeld} fields show which store items are currently locked by this session, which corresponds to store items being built or substituted (the @code{LockHeld} field is not displayed when @command{guix processes} is not running as root).  Last, by looking at the @code{ChildPID} and @code{ChildCommand} fields, we understand that these three builds are being offloaded (@pxref{Daemon Offload Setup})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16203
msgid "The output is in Recutils format so we can use the handy @command{recsel} command to select sessions of interest (@pxref{Selection Expressions,,, recutils, GNU recutils manual}).  As an example, the command shows the command line and PID of the client that triggered the build of a Perl package:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16209
#, no-wrap
msgid ""
"$ sudo guix processes | \\\n"
"    recsel -p ClientPID,ClientCommand -e 'LockHeld ~ \"perl\"'\n"
"ClientPID: 19419\n"
"ClientCommand: cuirass --cache-directory /var/cache/cuirass @dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16212
msgid "Additional options are listed below."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16222
msgid "The default option.  It outputs a set of Session recutils records that include each @code{ChildProcess} as a field."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16223
#, no-wrap
msgid "normalized"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16230
msgid "Normalize the output records into record sets (@pxref{Record Sets,,, recutils, GNU recutils manual}).  Normalizing into record sets allows joins across record types.  The example below lists the PID of each @code{ChildProcess} and the associated PID for @code{Session} that spawned the @code{ChildProcess} where the @code{Session} was started using @command{guix build}."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16240
#, no-wrap
msgid ""
"$ guix processes --format=normalized | \\\n"
"    recsel \\\n"
"    -j Session \\\n"
"    -t ChildProcess \\\n"
"    -p Session.PID,PID \\\n"
"    -e 'Session.ClientCommand ~ \"guix build\"'\n"
"PID: 4435\n"
"Session_PID: 4278\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16243
#, no-wrap
msgid ""
"PID: 4554\n"
"Session_PID: 4278\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16246
#, no-wrap
msgid ""
"PID: 4646\n"
"Session_PID: 4278\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16256
msgid "You can target computers of different CPU architectures when producing packages (@pxref{Invoking guix package}), packs (@pxref{Invoking guix pack}) or full systems (@pxref{Invoking guix system})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16259
msgid "GNU Guix supports two distinct mechanisms to target foreign architectures:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:16265
msgid "The traditional @uref{https://en.wikipedia.org/wiki/Cross_compiler,cross-compilation} mechanism."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:16269
msgid "The native building mechanism which consists in building using the CPU instruction set of the foreign system you are targeting.  It often requires emulation, using the QEMU program for instance."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16279
#, fuzzy, no-wrap
#| msgid "foreign distro"
msgid "foreign architectures"
msgstr "distro alheia"

#. type: Plain text
#: guix-git/doc/guix.texi:16282
msgid "The commands supporting cross-compilation are proposing the @option{--list-targets} and @option{--target} options."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16285
msgid "The @option{--list-targets} option lists all the supported targets that can be passed as an argument to @option{--target}."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16289
#, no-wrap
msgid ""
"$ guix build --list-targets\n"
"The available targets are:\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16301
#, no-wrap
msgid ""
"   - aarch64-linux-gnu\n"
"   - arm-linux-gnueabihf\n"
"   - i586-pc-gnu\n"
"   - i686-linux-gnu\n"
"   - i686-w64-mingw32\n"
"   - mips64el-linux-gnu\n"
"   - powerpc-linux-gnu\n"
"   - powerpc64le-linux-gnu\n"
"   - riscv64-linux-gnu\n"
"   - x86_64-linux-gnu\n"
"   - x86_64-w64-mingw32\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16305
msgid "Targets are specified as GNU triplets (@pxref{Specifying Target Triplets, GNU configuration triplets,, autoconf, Autoconf})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16309
msgid "Those triplets are passed to GCC and the other underlying compilers possibly involved when building a package, a system image or any other GNU Guix output."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16313
#, no-wrap
msgid ""
"$ guix build --target=aarch64-linux-gnu hello\n"
"/gnu/store/9926by9qrxa91ijkhw9ndgwp4bn24g9h-hello-2.12\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16317
#, no-wrap
msgid ""
"$ file /gnu/store/9926by9qrxa91ijkhw9ndgwp4bn24g9h-hello-2.12/bin/hello\n"
"/gnu/store/9926by9qrxa91ijkhw9ndgwp4bn24g9h-hello-2.12/bin/hello: ELF\n"
"64-bit LSB executable, ARM aarch64 @dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16323
msgid "The major benefit of cross-compilation is that there are no performance penalty compared to emulation using QEMU.  There are however higher risks that some packages fail to cross-compile because fewer users are using this mechanism extensively."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16329
msgid "The commands that support impersonating a specific system have the @option{--list-systems} and @option{--system} options."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16332
msgid "The @option{--list-systems} option lists all the supported systems that can be passed as an argument to @option{--system}."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16336
#, no-wrap
msgid ""
"$ guix build --list-systems\n"
"The available systems are:\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16346
#, no-wrap
msgid ""
"   - x86_64-linux [current]\n"
"   - aarch64-linux\n"
"   - armhf-linux\n"
"   - i586-gnu\n"
"   - i686-linux\n"
"   - mips64el-linux\n"
"   - powerpc-linux\n"
"   - powerpc64le-linux\n"
"   - riscv64-linux\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16349
#, no-wrap
msgid ""
"$ guix build --system=i686-linux hello\n"
"/gnu/store/cc0km35s8x2z4pmwkrqqjx46i8b1i3gm-hello-2.12\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16353
#, no-wrap
msgid ""
"$ file /gnu/store/cc0km35s8x2z4pmwkrqqjx46i8b1i3gm-hello-2.12/bin/hello\n"
"/gnu/store/cc0km35s8x2z4pmwkrqqjx46i8b1i3gm-hello-2.12/bin/hello: ELF\n"
"32-bit LSB executable, Intel 80386 @dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16357
msgid "In the above example, the current system is @var{x86_64-linux}.  The @var{hello} package is however built for the @var{i686-linux} system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16361
msgid "This is possible because the @var{i686} CPU instruction set is a subset of the @var{x86_64}, hence @var{i686} targeting binaries can be run on @var{x86_64}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16366
msgid "Still in the context of the previous example, if picking the @var{aarch64-linux} system and the @command{guix build --system=aarch64-linux hello} has to build some derivations, an extra step might be needed."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16374
msgid "The @var{aarch64-linux} targeting binaries cannot directly be run on a @var{x86_64-linux} system.  An emulation layer is requested.  The GNU Guix daemon can take advantage of the Linux kernel @uref{https://en.wikipedia.org/wiki/Binfmt_misc,binfmt_misc} mechanism for that.  In short, the Linux kernel can defer the execution of a binary targeting a foreign platform, here @var{aarch64-linux}, to a userspace program, usually an emulator."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16380
msgid "There is a service that registers QEMU as a backend for the @code{binfmt_misc} mechanism (@pxref{Virtualization Services, @code{qemu-binfmt-service-type}}).  On Debian based foreign distributions, the alternative would be the @code{qemu-user-static} package."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16383
msgid "If the @code{binfmt_misc} mechanism is not setup correctly, the building will fail this way:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16391
#, no-wrap
msgid ""
"$ guix build --system=armhf-linux hello --check\n"
"@dots{}\n"
"@ unsupported-platform /gnu/store/jjn969pijv7hff62025yxpfmc8zy0aq0-hello-2.12.drv aarch64-linux\n"
"while setting up the build environment: a `aarch64-linux' is required to\n"
"build `/gnu/store/jjn969pijv7hff62025yxpfmc8zy0aq0-hello-2.12.drv', but\n"
"I am a `x86_64-linux'@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16395
msgid "whereas, with the @code{binfmt_misc} mechanism correctly linked with QEMU, one can expect to see:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:16399
#, no-wrap
msgid ""
"$ guix build --system=armhf-linux hello --check\n"
"/gnu/store/13xz4nghg39wpymivlwghy08yzj97hlj-hello-2.12\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16405
msgid "The main advantage of native building compared to cross-compiling, is that more packages are likely to build correctly.  However it comes at a price: compilation backed by QEMU is @emph{way slower} than cross-compilation, because every instruction needs to be emulated."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16411
msgid "The availability of substitutes for the architecture targeted by the @code{--system} option can mitigate this problem.  An other way to work around it is to install GNU Guix on a machine whose CPU supports the targeted instruction set, and set it up as an offload machine (@pxref{Daemon Offload Setup})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16415
#, no-wrap
msgid "system configuration"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16421
msgid "Guix System supports a consistent whole-system configuration mechanism.  By that we mean that all aspects of the global system configuration---such as the available system services, timezone and locale settings, user accounts---are declared in a single place.  Such a @dfn{system configuration} can be @dfn{instantiated}---i.e., effected."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16431
msgid "One of the advantages of putting all the system configuration under the control of Guix is that it supports transactional system upgrades, and makes it possible to roll back to a previous system instantiation, should something go wrong with the new one (@pxref{Features}).  Another advantage is that it makes it easy to replicate the exact same configuration across different machines, or at different points in time, without having to resort to additional administration tools layered on top of the own tools of the system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16436
msgid "This section describes this mechanism.  First we focus on the system administrator's viewpoint---explaining how the system is configured and instantiated.  Then we show how this mechanism can be extended, for instance to support new system services."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16466
msgid "The operating system is configured by providing an @code{operating-system} declaration in a file that can then be passed to the @command{guix system} command (@pxref{Invoking guix system}).  A simple setup, with the default system services, the default Linux-Libre kernel, initial RAM disk, and boot loader looks like this:"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:16467 guix-git/doc/guix.texi:40669
#: guix-git/doc/guix.texi:44330
#, no-wrap
msgid "operating-system"
msgstr "sistema operacional"

#. type: include
#: guix-git/doc/guix.texi:16469
#, no-wrap
msgid "os-config-bare-bones.texi"
msgstr "os-config-bare-bones.texi"

#. type: Plain text
#: guix-git/doc/guix.texi:16476
msgid "This example should be self-describing.  Some of the fields defined above, such as @code{host-name} and @code{bootloader}, are mandatory.  Others, such as @code{packages} and @code{services}, can be omitted, in which case they get a default value."
msgstr "Este exemplo deve ser autodescritivo. Alguns dos campos definidos acima, como @code{host-name} e @code{bootloader}, são obrigatórios. Outros, como @code{packages} e @code{services}, podem ser omitidos; nesse caso, eles recebem um valor padrão."

#. type: Plain text
#: guix-git/doc/guix.texi:16481
msgid "Below we discuss the effect of some of the most important fields (@pxref{operating-system Reference}, for details about all the available fields), and how to @dfn{instantiate} the operating system using @command{guix system}."
msgstr ""

#. type: unnumberedsubsec
#: guix-git/doc/guix.texi:16482
#, no-wrap
msgid "Bootloader"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16484
#, no-wrap
msgid "legacy boot, on Intel machines"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16485
#, no-wrap
msgid "BIOS boot, on Intel machines"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16486
#, no-wrap
msgid "UEFI boot"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16487
#, no-wrap
msgid "EFI boot"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16493
msgid "The @code{bootloader} field describes the method that will be used to boot your system.  Machines based on Intel processors can boot in ``legacy'' BIOS mode, as in the example above.  However, more recent machines rely instead on the @dfn{Unified Extensible Firmware Interface} (UEFI) to boot.  In that case, the @code{bootloader} field should contain something along these lines:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:16498
#, no-wrap
msgid ""
"(bootloader-configuration\n"
"  (bootloader grub-efi-bootloader)\n"
"  (targets '(\"/boot/efi\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16502
msgid "@xref{Bootloader Configuration}, for more information on the available configuration options."
msgstr ""

#. type: unnumberedsubsec
#: guix-git/doc/guix.texi:16503
#, no-wrap
msgid "Globally-Visible Packages"
msgstr ""

#. type: vindex
#: guix-git/doc/guix.texi:16505
#, no-wrap
msgid "%base-packages"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16518
msgid "The @code{packages} field lists packages that will be globally visible on the system, for all user accounts---i.e., in every user's @env{PATH} environment variable---in addition to the per-user profiles (@pxref{Invoking guix package}).  The @code{%base-packages} variable provides all the tools one would expect for basic user and administrator tasks---including the GNU Core Utilities, the GNU Networking Utilities, the @command{mg} lightweight text editor, @command{find}, @command{grep}, etc.  The example above adds GNU@tie{}Screen to those, taken from the @code{(gnu packages screen)} module (@pxref{Package Modules}).  The @code{(list package output)} syntax can be used to add a specific output of a package:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:16522
#, no-wrap
msgid ""
"(use-modules (gnu packages))\n"
"(use-modules (gnu packages dns))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:16527
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; ...\n"
"  (packages (cons (list isc-bind \"utils\")\n"
"                  %base-packages)))\n"
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:16529
#, no-wrap
msgid "specification->package"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16538
msgid "Referring to packages by variable name, like @code{isc-bind} above, has the advantage of being unambiguous; it also allows typos and such to be diagnosed right away as ``unbound variables''.  The downside is that one needs to know which module defines which package, and to augment the @code{use-package-modules} line accordingly.  To avoid that, one can use the @code{specification->package} procedure of the @code{(gnu packages)} module, which returns the best package for a given name or name and version:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:16541
#, no-wrap
msgid ""
"(use-modules (gnu packages))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:16547
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; ...\n"
"  (packages (append (map specification->package\n"
"                         '(\"tcpdump\" \"htop\" \"gnupg@@2.0\"))\n"
"                    %base-packages)))\n"
msgstr ""

#. type: unnumberedsubsec
#: guix-git/doc/guix.texi:16549
#, no-wrap
msgid "System Services"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16551 guix-git/doc/guix.texi:39263
#: guix-git/doc/guix.texi:40910
#, no-wrap
msgid "services"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:16552 guix-git/doc/guix.texi:18198
#, no-wrap
msgid "%base-services"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16562
msgid "The @code{services} field lists @dfn{system services} to be made available when the system starts (@pxref{Services}).  The @code{operating-system} declaration above specifies that, in addition to the basic services, we want the OpenSSH secure shell daemon listening on port 2222 (@pxref{Networking Services, @code{openssh-service-type}}).  Under the hood, @code{openssh-service-type} arranges so that @command{sshd} is started with the right command-line options, possibly with supporting configuration files generated as needed (@pxref{Defining Services})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16563
#, no-wrap
msgid "customization, of services"
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:16564
#, no-wrap
msgid "modify-services"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16568
msgid "Occasionally, instead of using the base services as is, you will want to customize them.  To do this, use @code{modify-services} (@pxref{Service Reference, @code{modify-services}}) to modify the list."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:16574
msgid "auto-login to TTY"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16574
msgid "For example, suppose you want to modify @code{guix-daemon} and Mingetty (the console log-in) in the @code{%base-services} list (@pxref{Base Services, @code{%base-services}}).  To do that, you can write the following in your operating system declaration:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:16591
#, no-wrap
msgid ""
"(define %my-services\n"
"  ;; My very own list of services.\n"
"  (modify-services %base-services\n"
"    (guix-service-type config =>\n"
"                       (guix-configuration\n"
"                        (inherit config)\n"
"                        ;; Fetch substitutes from example.org.\n"
"                        (substitute-urls\n"
"                          (list \"https://example.org/guix\"\n"
"                                \"https://ci.guix.gnu.org\"))))\n"
"    (mingetty-service-type config =>\n"
"                           (mingetty-configuration\n"
"                            (inherit config)\n"
"                            ;; Automatically log in as \"guest\".\n"
"                            (auto-login \"guest\")))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:16595
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (services %my-services))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16608
msgid "This changes the configuration---i.e., the service parameters---of the @code{guix-service-type} instance, and that of all the @code{mingetty-service-type} instances in the @code{%base-services} list (@pxref{Auto-Login to a Specific TTY, see the cookbook for how to auto-login one user to a specific TTY,, guix-cookbook, GNU Guix Cookbook})).  Observe how this is accomplished: first, we arrange for the original configuration to be bound to the identifier @code{config} in the @var{body}, and then we write the @var{body} so that it evaluates to the desired configuration.  In particular, notice how we use @code{inherit} to create a new configuration which has the same values as the old configuration, but with a few modifications."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16615
msgid "The configuration for a typical ``desktop'' usage, with an encrypted root partition, a swap file on the root partition, the X11 display server, GNOME and Xfce (users can choose which of these desktop environments to use at the log-in screen by pressing @kbd{F1}), network management, power management, and more, would look like this:"
msgstr ""

#. type: include
#: guix-git/doc/guix.texi:16617
#, no-wrap
msgid "os-config-desktop.texi"
msgstr "os-config-desktop.texi"

#. type: Plain text
#: guix-git/doc/guix.texi:16622
msgid "A graphical system with a choice of lightweight window managers instead of full-blown desktop environments would look like this:"
msgstr "Um sistema gráfico com uma escolha de gerenciadores de janelas leves em vez de ambientes de desktop completos teria a seguinte aparência:"

#. type: include
#: guix-git/doc/guix.texi:16624
#, no-wrap
msgid "os-config-lightweight-desktop.texi"
msgstr "os-config-lightweight-desktop.texi"

#. type: Plain text
#: guix-git/doc/guix.texi:16630
msgid "This example refers to the @file{/boot/efi} file system by its UUID, @code{1234-ABCD}.  Replace this UUID with the right UUID on your system, as returned by the @command{blkid} command."
msgstr "Este exemplo faz referência ao sistema de arquivos @file{/boot/efi} por seu UUID, @code{1234-ABCD}. Substitua esse UUID pelo UUID correto no seu sistema, conforme retornado pelo comando @command{blkid}."

#. type: Plain text
#: guix-git/doc/guix.texi:16634
msgid "@xref{Desktop Services}, for the exact list of services provided by @code{%desktop-services}.  @xref{X.509 Certificates}, for background information about the @code{nss-certs} package that is used here."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16641
msgid "Again, @code{%desktop-services} is just a list of service objects.  If you want to remove services from there, you can do so using the procedures for list filtering (@pxref{SRFI-1 Filtering and Partitioning,,, guile, GNU Guile Reference Manual}).  For instance, the following expression returns a list that contains all the services in @code{%desktop-services} minus the Avahi service:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:16646
#, no-wrap
msgid ""
"(remove (lambda (service)\n"
"          (eq? (service-kind service) avahi-service-type))\n"
"        %desktop-services)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16649
msgid "Alternatively, the @code{modify-services} macro can be used:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:16653
#, no-wrap
msgid ""
"(modify-services %desktop-services\n"
"  (delete avahi-service-type))\n"
msgstr ""

#. type: unnumberedsubsec
#: guix-git/doc/guix.texi:16656
#, no-wrap
msgid "Instantiating the System"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16663
msgid "Assuming the @code{operating-system} declaration is stored in the @file{my-system-config.scm} file, the @command{guix system reconfigure my-system-config.scm} command instantiates that configuration, and makes it the default GRUB boot entry (@pxref{Invoking guix system})."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:16667
msgid "We recommend that you keep this @file{my-system-config.scm} file safe and under version control to easily track changes to your configuration."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16676
msgid "The normal way to change the system configuration is by updating this file and re-running @command{guix system reconfigure}.  One should never have to touch files in @file{/etc} or to run commands that modify the system state such as @command{useradd} or @command{grub-install}.  In fact, you must avoid that since that would not only void your warranty but also prevent you from rolling back to previous versions of your system, should you ever need to."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16677
#, no-wrap
msgid "roll-back, of the operating system"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16687
msgid "Speaking of roll-back, each time you run @command{guix system reconfigure}, a new @dfn{generation} of the system is created---without modifying or deleting previous generations.  Old system generations get an entry in the bootloader boot menu, allowing you to boot them in case something went wrong with the latest generation.  Reassuring, no? The @command{guix system list-generations} command lists the system generations available on disk.  It is also possible to roll back the system via the commands @command{guix system roll-back} and @command{guix system switch-generation}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16693
msgid "Although the @command{guix system reconfigure} command will not modify previous generations, you must take care when the current generation is not the latest (e.g., after invoking @command{guix system roll-back}), since the operation might overwrite a later generation (@pxref{Invoking guix system})."
msgstr ""

#. type: unnumberedsubsec
#: guix-git/doc/guix.texi:16694
#, no-wrap
msgid "The Programming Interface"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16699
msgid "At the Scheme level, the bulk of an @code{operating-system} declaration is instantiated with the following monadic procedure (@pxref{The Store Monad}):"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:16700
#, no-wrap
msgid "{Monadic Procedure} operating-system-derivation os"
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:16703
msgid "Return a derivation that builds @var{os}, an @code{operating-system} object (@pxref{Derivations})."
msgstr ""

#. type: deffn
#: guix-git/doc/guix.texi:16707
msgid "The output of the derivation is a single directory that refers to all the packages, configuration files, and other supporting files needed to instantiate @var{os}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16712
msgid "This procedure is provided by the @code{(gnu system)} module.  Along with @code{(gnu services)} (@pxref{Services}), this module contains the guts of Guix System.  Make sure to visit it!"
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:16715
#, no-wrap
msgid "@code{operating-system} Reference"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16720
msgid "This section summarizes all the options available in @code{operating-system} declarations (@pxref{Using the Configuration System})."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:16721
#, no-wrap
msgid "{Data Type} operating-system"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:16725
msgid "This is the data type representing an operating system configuration.  By that, we mean all the global system configuration, not per-user configuration (@pxref{Using the Configuration System})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16727
#, no-wrap
msgid "@code{kernel} (default: @code{linux-libre})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16732
msgid "The package object of the operating system kernel to use@footnote{Currently only the Linux-libre kernel is fully supported.  Using GNU@tie{}mach with the GNU@tie{}Hurd is experimental and only available when building a virtual machine disk image.}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:16733 guix-git/doc/guix.texi:35135
#, no-wrap
msgid "hurd"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16734
#, no-wrap
msgid "@code{hurd} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16739
msgid "The package object of the Hurd to be started by the kernel.  When this field is set, produce a GNU/Hurd operating system.  In that case, @code{kernel} must also be set to the @code{gnumach} package---the microkernel the Hurd runs on."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:16742
msgid "This feature is experimental and only supported for disk images."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16744
#, no-wrap
msgid "@code{kernel-loadable-modules} (default: '())"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16747
msgid "A list of objects (usually packages) to collect loadable kernel modules from--e.g. @code{(list ddcci-driver-linux)}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16748
#, no-wrap
msgid "@code{kernel-arguments} (default: @code{%default-kernel-arguments})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16751
msgid "List of strings or gexps representing additional arguments to pass on the command-line of the kernel---e.g., @code{(\"console=ttyS0\")}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:16752 guix-git/doc/guix.texi:39507
#: guix-git/doc/guix.texi:39526
#, no-wrap
msgid "bootloader"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16754
msgid "The system bootloader configuration object.  @xref{Bootloader Configuration}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:16755 guix-git/doc/guix.texi:39749
#: guix-git/doc/guix.texi:44410
#, no-wrap
msgid "label"
msgstr "rótulo"

#. type: table
#: guix-git/doc/guix.texi:16758
msgid "This is the label (a string) as it appears in the bootloader's menu entry.  The default label includes the kernel name and version."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16759 guix-git/doc/guix.texi:18619
#: guix-git/doc/guix.texi:22454 guix-git/doc/guix.texi:39670
#, no-wrap
msgid "@code{keyboard-layout} (default: @code{#f})"
msgstr "@code{keyboard-layout} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:16764
msgid "This field specifies the keyboard layout to use in the console.  It can be either @code{#f}, in which case the default keyboard layout is used (usually US English), or a @code{<keyboard-layout>} record. @xref{Keyboard Layout}, for more information."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16769
msgid "This keyboard layout is in effect as soon as the kernel has booted.  For instance, it is the keyboard layout in effect when you type a passphrase if your root file system is on a @code{luks-device-mapping} mapped device (@pxref{Mapped Devices})."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:16776
msgid "This does @emph{not} specify the keyboard layout used by the bootloader, nor that used by the graphical display server.  @xref{Bootloader Configuration}, for information on how to specify the bootloader's keyboard layout.  @xref{X Window}, for information on how to specify the keyboard layout used by the X Window System."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16778
#, no-wrap
msgid "@code{initrd-modules} (default: @code{%base-initrd-modules})"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16779 guix-git/doc/guix.texi:39300
#: guix-git/doc/guix.texi:39433
#, no-wrap
msgid "initrd"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16780 guix-git/doc/guix.texi:39301
#: guix-git/doc/guix.texi:39434
#, no-wrap
msgid "initial RAM disk"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16783
msgid "The list of Linux kernel modules that need to be available in the initial RAM disk.  @xref{Initial RAM Disk}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16784
#, no-wrap
msgid "@code{initrd} (default: @code{base-initrd})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16788
msgid "A procedure that returns an initial RAM disk for the Linux kernel.  This field is provided to support low-level customization and should rarely be needed for casual use.  @xref{Initial RAM Disk}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16789
#, no-wrap
msgid "@code{firmware} (default: @code{%base-firmware})"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16790
#, no-wrap
msgid "firmware"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16792
msgid "List of firmware packages loadable by the operating system kernel."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16797
msgid "The default includes firmware needed for Atheros- and Broadcom-based WiFi devices (Linux-libre modules @code{ath9k} and @code{b43-open}, respectively).  @xref{Hardware Considerations}, for more info on supported hardware."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:16798 guix-git/doc/guix.texi:40688
#, no-wrap
msgid "host-name"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16800
msgid "The host name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16801
#, no-wrap
msgid "@code{mapped-devices} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16803
msgid "A list of mapped devices.  @xref{Mapped Devices}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:16804
#, no-wrap
msgid "file-systems"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16806
msgid "A list of file systems.  @xref{File Systems}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16807
#, no-wrap
msgid "@code{swap-devices} (default: @code{'()})"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16808
#, no-wrap
msgid "swap devices"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16810
msgid "A list of swap spaces.  @xref{Swap Space}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16811
#, no-wrap
msgid "@code{users} (default: @code{%base-user-accounts})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:16812
#, no-wrap
msgid "@code{groups} (default: @code{%base-groups})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16814
msgid "List of user accounts and groups.  @xref{User Accounts}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16817
msgid "If the @code{users} list lacks a user account with UID@tie{}0, a ``root'' account with UID@tie{}0 is automatically added."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16818
#, no-wrap
msgid "@code{skeletons} (default: @code{(default-skeletons)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16822
msgid "A list of target file name/file-like object tuples (@pxref{G-Expressions, file-like objects}).  These are the skeleton files that will be added to the home directory of newly-created user accounts."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16824
msgid "For instance, a valid value may look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:16830
#, no-wrap
msgid ""
"`((\".bashrc\" ,(plain-file \"bashrc\" \"echo Hello\\n\"))\n"
"  (\".guile\" ,(plain-file \"guile\"\n"
"                         \"(use-modules (ice-9 readline))\n"
"                          (activate-readline)\")))\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16832
#, no-wrap
msgid "@code{issue} (default: @code{%default-issue})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16835
msgid "A string denoting the contents of the @file{/etc/issue} file, which is displayed when users log in on a text console."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16836
#, no-wrap
msgid "@code{packages} (default: @code{%base-packages})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16840
msgid "A list of packages to be installed in the global profile, which is accessible at @file{/run/current-system/profile}.  Each element is either a package variable or a package/output tuple.  Here's a simple example of both:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:16845
#, no-wrap
msgid ""
"(cons* git                     ; the default \"out\" output\n"
"       (list git \"send-email\") ; another output of git\n"
"       %base-packages)         ; the default set\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16850
msgid "The default set includes core utilities and it is good practice to install non-core utilities in user profiles (@pxref{Invoking guix package})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16851
#, fuzzy, no-wrap
#| msgid "@code{device} (default: @code{#f})"
msgid "@code{timezone} (default: @code{\"Etc/UTC\"})"
msgstr "@code{device} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:16853
msgid "A timezone identifying string---e.g., @code{\"Europe/Paris\"}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16857
msgid "You can run the @command{tzselect} command to find out which timezone string corresponds to your region.  Choosing an invalid timezone name causes @command{guix system} to fail."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16858 guix-git/doc/guix.texi:24694
#, no-wrap
msgid "@code{locale} (default: @code{\"en_US.utf8\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16861
msgid "The name of the default locale (@pxref{Locale Names,,, libc, The GNU C Library Reference Manual}).  @xref{Locales}, for more information."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16862
#, no-wrap
msgid "@code{locale-definitions} (default: @code{%default-locale-definitions})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16865
msgid "The list of locale definitions to be compiled and that may be used at run time.  @xref{Locales}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16866
#, no-wrap
msgid "@code{locale-libcs} (default: @code{(list @var{glibc})})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16870
msgid "The list of GNU@tie{}libc packages whose locale data and tools are used to build the locale definitions.  @xref{Locales}, for compatibility considerations that justify this option."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16871
#, no-wrap
msgid "@code{name-service-switch} (default: @code{%default-nss})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16875
msgid "Configuration of the libc name service switch (NSS)---a @code{<name-service-switch>} object.  @xref{Name Service Switch}, for details."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16876
#, no-wrap
msgid "@code{services} (default: @code{%base-services})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16878
msgid "A list of service objects denoting system services.  @xref{Services}."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:16880
#, fuzzy
#| msgid "operating-system Reference"
msgid "operating-system-essential-services"
msgstr "Referência do operating-system"

#. type: cindex
#: guix-git/doc/guix.texi:16880
#, no-wrap
msgid "essential services"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16881
#, no-wrap
msgid "@code{essential-services} (default: ...)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16887
msgid "The list of ``essential services''---i.e., things like instances of @code{system-service-type} (@pxref{Service Reference}) and @code{host-name-service-type}, which are derived from the operating system definition itself.  As a user you should @emph{never} need to touch this field."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16888
#, no-wrap
msgid "@code{pam-services} (default: @code{(base-pam-services)})"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16889
#, no-wrap
msgid "PAM"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16890
#, no-wrap
msgid "pluggable authentication modules"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16893
msgid "Linux @dfn{pluggable authentication module} (PAM) services."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16894
#, no-wrap
msgid "@code{setuid-programs} (default: @code{%setuid-programs})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16897
msgid "List of @code{<setuid-program>}.  @xref{Setuid Programs}, for more information."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16898
#, no-wrap
msgid "@code{sudoers-file} (default: @code{%sudoers-specification})"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:16899
#, no-wrap
msgid "sudoers file"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16902
msgid "The contents of the @file{/etc/sudoers} file as a file-like object (@pxref{G-Expressions, @code{local-file} and @code{plain-file}})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16907
msgid "This file specifies which users can use the @command{sudo} command, what they are allowed to do, and what privileges they may gain.  The default is that only @code{root} and members of the @code{wheel} group may use @code{sudo}."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:16910
#, fuzzy, no-wrap
#| msgid "operating-system"
msgid "this-operating-system"
msgstr "sistema operacional"

#. type: defmac
#: guix-git/doc/guix.texi:16913
msgid "When used in the @emph{lexical scope} of an operating system field definition, this identifier resolves to the operating system being defined."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:16916
msgid "The example below shows how to refer to the operating system being defined in the definition of the @code{label} field:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:16919
#, no-wrap
msgid ""
"(use-modules (gnu) (guix))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:16924
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; ...\n"
"  (label (package-full-name\n"
"          (operating-system-kernel this-operating-system))))\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:16928
msgid "It is an error to refer to @code{this-operating-system} outside an operating system definition."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16939
msgid "The list of file systems to be mounted is specified in the @code{file-systems} field of the operating system declaration (@pxref{Using the Configuration System}).  Each file system is declared using the @code{file-system} form, like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:16945
#, no-wrap
msgid ""
"(file-system\n"
"  (mount-point \"/home\")\n"
"  (device \"/dev/sda3\")\n"
"  (type \"ext4\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:16949
msgid "As usual, some of the fields are mandatory---those shown in the example above---while others can be omitted.  These are described below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:16950
#, no-wrap
msgid "{Data Type} file-system"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:16953
msgid "Objects of this type represent file systems to be mounted.  They contain the following members:"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:16955 guix-git/doc/guix.texi:17345
#: guix-git/doc/guix.texi:20033 guix-git/doc/guix.texi:37886
#, no-wrap
msgid "type"
msgstr "tipo"

#. type: table
#: guix-git/doc/guix.texi:16958
msgid "This is a string specifying the type of the file system---e.g., @code{\"ext4\"}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:16959
#, no-wrap
msgid "mount-point"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16961
msgid "This designates the place where the file system is to be mounted."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:16962 guix-git/doc/guix.texi:19983
#, no-wrap
msgid "device"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16972
msgid "This names the ``source'' of the file system.  It can be one of three things: a file system label, a file system UUID, or the name of a @file{/dev} node.  Labels and UUIDs offer a way to refer to file systems without having to hard-code their actual device name@footnote{Note that, while it is tempting to use @file{/dev/disk/by-uuid} and similar device names to achieve the same result, this is not recommended: These special device nodes are created by the udev daemon and may be unavailable at the time the device is mounted.}."
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:16973
#, no-wrap
msgid "file-system-label"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:16978
msgid "File system labels are created using the @code{file-system-label} procedure, UUIDs are created using @code{uuid}, and @file{/dev} node are plain strings.  Here's an example of a file system referred to by its label, as shown by the @command{e2label} command:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:16984
#, no-wrap
msgid ""
"(file-system\n"
"  (mount-point \"/home\")\n"
"  (type \"ext4\")\n"
"  (device (file-system-label \"my-home\")))\n"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:16986 guix-git/doc/guix.texi:37607
#: guix-git/doc/guix.texi:37623
#, no-wrap
msgid "uuid"
msgstr "uuid"

#. type: table
#: guix-git/doc/guix.texi:16994
msgid "UUIDs are converted from their string representation (as shown by the @command{tune2fs -l} command) using the @code{uuid} form@footnote{The @code{uuid} form expects 16-byte UUIDs as defined in @uref{https://tools.ietf.org/html/rfc4122, RFC@tie{}4122}.  This is the form of UUID used by the ext2 family of file systems and others, but it is different from ``UUIDs'' found in FAT file systems, for instance.}, like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17000
#, no-wrap
msgid ""
"(file-system\n"
"  (mount-point \"/home\")\n"
"  (type \"ext4\")\n"
"  (device (uuid \"4dab5feb-d176-45de-b287-9b0a6e4c01cb\")))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17008
msgid "When the source of a file system is a mapped device (@pxref{Mapped Devices}), its @code{device} field @emph{must} refer to the mapped device name---e.g., @file{\"/dev/mapper/root-partition\"}.  This is required so that the system knows that mounting the file system depends on having the corresponding device mapping established."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17009 guix-git/doc/guix.texi:44419
#, no-wrap
msgid "@code{flags} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17021
msgid "This is a list of symbols denoting mount flags.  Recognized flags include @code{read-only}, @code{bind-mount}, @code{no-dev} (disallow access to special files), @code{no-suid} (ignore setuid and setgid bits), @code{no-atime} (do not update file access times), @code{no-diratime} (likewise for directories only), @code{strict-atime} (update file access time), @code{lazy-time} (only update time on the in-memory version of the file inode), @code{no-exec} (disallow program execution), and @code{shared} (make the mount shared).  @xref{Mount-Unmount-Remount,,, libc, The GNU C Library Reference Manual}, for more information on these flags."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17022
#, no-wrap
msgid "@code{options} (default: @code{#f})"
msgstr "@code{options} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:17026
msgid "This is either @code{#f}, or a string denoting mount options passed to the file system driver.  @xref{Mount-Unmount-Remount,,, libc, The GNU C Library Reference Manual}, for details."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17030
msgid "Run @command{man 8 mount} for options for various file systems, but beware that what it lists as file-system-independent ``mount options'' are in fact flags, and belong in the @code{flags} field described above."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17035
msgid "The @code{file-system-options->alist} and @code{alist->file-system-options} procedures from @code{(gnu system file-systems)} can be used to convert file system options given as an association list to the string representation, and vice-versa."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17036
#, no-wrap
msgid "@code{mount?} (default: @code{#t})"
msgstr "@code{mount?} (default: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:17041
msgid "This value indicates whether to automatically mount the file system when the system is brought up.  When set to @code{#f}, the file system gets an entry in @file{/etc/fstab} (read by the @command{mount} command) but is not automatically mounted."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17042
#, no-wrap
msgid "@code{needed-for-boot?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17047
msgid "This Boolean value indicates whether the file system is needed when booting.  If that is true, then the file system is mounted when the initial RAM disk (initrd) is loaded.  This is always the case, for instance, for the root file system."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17048
#, no-wrap
msgid "@code{check?} (default: @code{#t})"
msgstr "@code{check?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:17052
msgid "This Boolean indicates whether the file system should be checked for errors before being mounted.  How and when this happens can be further adjusted with the following options."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17053
#, fuzzy, no-wrap
#| msgid "@code{check?} (default: @code{#t})"
msgid "@code{skip-check-if-clean?} (default: @code{#t})"
msgstr "@code{check?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:17058
msgid "When true, this Boolean indicates that a file system check triggered by @code{check?} may exit early if the file system is marked as ``clean'', meaning that it was previously correctly unmounted and should not contain errors."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17062
msgid "Setting this to false will always force a full consistency check when @code{check?} is true.  This may take a very long time and is not recommended on healthy systems---in fact, it may reduce reliability!"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17066
msgid "Conversely, some primitive file systems like @code{fat} do not keep track of clean shutdowns and will perform a full scan regardless of the value of this option."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17067
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{repair} (default: @code{'preen})"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:17070
msgid "When @code{check?} finds errors, it can (try to) repair them and continue booting.  This option controls when and how to do so."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17074
msgid "If false, try not to modify the file system at all.  Checking certain file systems like @code{jfs} may still write to the device to replay the journal.  No repairs will be attempted."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17077
msgid "If @code{#t}, try to repair any errors found and assume ``yes'' to all questions.  This will fix the most errors, but may be risky."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17081
msgid "If @code{'preen}, repair only errors that are safe to fix without human interaction.  What that means is left up to the developers of each file system and may be equivalent to ``none'' or ``all''."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17082
#, no-wrap
msgid "@code{create-mount-point?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17084
msgid "When true, the mount point is created if it does not exist yet."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17085
#, no-wrap
msgid "@code{mount-may-fail?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17090
msgid "When true, this indicates that mounting this file system can fail but that should not be considered an error.  This is useful in unusual cases; an example of this is @code{efivarfs}, a file system that can only be mounted on EFI/UEFI systems."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17095
msgid "This is a list of @code{<file-system>} or @code{<mapped-device>} objects representing file systems that must be mounted or mapped devices that must be opened before (and unmounted or closed after) this one."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17099
msgid "As an example, consider a hierarchy of mounts: @file{/sys/fs/cgroup} is a dependency of @file{/sys/fs/cgroup/cpu} and @file{/sys/fs/cgroup/memory}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17102
msgid "Another example is a file system that depends on a mapped device, for example for an encrypted partition (@pxref{Mapped Devices})."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:17105
#, fuzzy, no-wrap
#| msgid "--list-transitive"
msgid "file-system-label str"
msgstr "--list-transitive"

#. type: defun
#: guix-git/doc/guix.texi:17108
msgid "This procedure returns an opaque file system label from @var{str}, a string:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17112
#, no-wrap
msgid ""
"(file-system-label \"home\")\n"
"@result{} #<file-system-label \"home\">\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:17116
msgid "File system labels are used to refer to file systems by label rather than by device name.  See above for examples."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17120
msgid "The @code{(gnu system file-systems)} exports the following useful variables."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17121
#, fuzzy, no-wrap
#| msgid "--list-transitive"
msgid "%base-file-systems"
msgstr "--list-transitive"

#. type: defvar
#: guix-git/doc/guix.texi:17126
msgid "These are essential file systems that are required on normal systems, such as @code{%pseudo-terminal-file-system} and @code{%immutable-store} (see below).  Operating system declarations should always contain at least these."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17128
#, no-wrap
msgid "%pseudo-terminal-file-system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17134
msgid "This is the file system to be mounted as @file{/dev/pts}.  It supports @dfn{pseudo-terminals} created @i{via} @code{openpty} and similar functions (@pxref{Pseudo-Terminals,,, libc, The GNU C Library Reference Manual}).  Pseudo-terminals are used by terminal emulators such as @command{xterm}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17136
#, no-wrap
msgid "%shared-memory-file-system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17140
msgid "This file system is mounted as @file{/dev/shm} and is used to support memory sharing across processes (@pxref{Memory-mapped I/O, @code{shm_open},, libc, The GNU C Library Reference Manual})."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17142
#, no-wrap
msgid "%immutable-store"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17147
msgid "This file system performs a read-only ``bind mount'' of @file{/gnu/store}, making it read-only for all the users including @code{root}.  This prevents against accidental modification by software running as @code{root} or by system administrators."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17150
msgid "The daemon itself is still able to write to the store: it remounts it read-write in its own ``name space.''"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17152
#, no-wrap
msgid "%binary-format-file-system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17156
msgid "The @code{binfmt_misc} file system, which allows handling of arbitrary executable file types to be delegated to user space.  This requires the @code{binfmt.ko} kernel module to be loaded."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17158
#, no-wrap
msgid "%fuse-control-file-system"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17162
msgid "The @code{fusectl} file system, which allows unprivileged users to mount and unmount user-space FUSE file systems.  This requires the @code{fuse.ko} kernel module to be loaded."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17166
msgid "The @code{(gnu system uuid)} module provides tools to deal with file system ``unique identifiers'' (UUIDs)."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:17167
#, no-wrap
msgid "uuid str [type]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:17170
msgid "Return an opaque UUID (unique identifier) object of the given @var{type} (a symbol) by parsing @var{str} (a string):"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17174
#, no-wrap
msgid ""
"(uuid \"4dab5feb-d176-45de-b287-9b0a6e4c01cb\")\n"
"@result{} #<<uuid> type: dce bv: @dots{}>\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17177
#, no-wrap
msgid ""
"(uuid \"1234-ABCD\" 'fat)\n"
"@result{} #<<uuid> type: fat bv: @dots{}>\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:17181
msgid "@var{type} may be one of @code{dce}, @code{iso9660}, @code{fat}, @code{ntfs}, or one of the commonly found synonyms for these."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:17184
msgid "UUIDs are another way to unambiguously refer to file systems in operating system configuration.  See the examples above."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17198
msgid "The Btrfs has special features, such as subvolumes, that merit being explained in more details.  The following section attempts to cover basic as well as complex uses of a Btrfs file system with the Guix System."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17201
msgid "In its simplest usage, a Btrfs file system can be described, for example, by:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17207
#, no-wrap
msgid ""
"(file-system\n"
"  (mount-point \"/home\")\n"
"  (type \"btrfs\")\n"
"  (device (file-system-label \"my-home\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17213
msgid "The example below is more complex, as it makes use of a Btrfs subvolume, named @code{rootfs}.  The parent Btrfs file system is labeled @code{my-btrfs-pool}, and is located on an encrypted device (hence the dependency on @code{mapped-devices}):"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17221
#, no-wrap
msgid ""
"(file-system\n"
"  (device (file-system-label \"my-btrfs-pool\"))\n"
"  (mount-point \"/\")\n"
"  (type \"btrfs\")\n"
"  (options \"subvol=rootfs\")\n"
"  (dependencies mapped-devices))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17232
msgid "Some bootloaders, for example GRUB, only mount a Btrfs partition at its top level during the early boot, and rely on their configuration to refer to the correct subvolume path within that top level.  The bootloaders operating in this way typically produce their configuration on a running system where the Btrfs partitions are already mounted and where the subvolume information is readily available.  As an example, @command{grub-mkconfig}, the configuration generator command shipped with GRUB, reads @file{/proc/self/mountinfo} to determine the top-level path of a subvolume."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17240
msgid "The Guix System produces a bootloader configuration using the operating system configuration as its sole input; it is therefore necessary to extract the subvolume name on which @file{/gnu/store} lives (if any)  from that operating system configuration.  To better illustrate, consider a subvolume named 'rootfs' which contains the root file system data.  In such situation, the GRUB bootloader would only see the top level of the root Btrfs partition, e.g.:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:17247
#, no-wrap
msgid ""
"/                   (top level)\n"
"├── rootfs          (subvolume directory)\n"
"    ├── gnu         (normal directory)\n"
"        ├── store   (normal directory)\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17252
msgid "Thus, the subvolume name must be prepended to the @file{/gnu/store} path of the kernel, initrd binaries and any other files referred to in the GRUB configuration that must be found during the early boot."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17255
msgid "The next example shows a nested hierarchy of subvolumes and directories:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:17262
#, no-wrap
msgid ""
"/                   (top level)\n"
"├── rootfs          (subvolume)\n"
"    ├── gnu         (normal directory)\n"
"        ├── store   (subvolume)\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17269
msgid "This scenario would work without mounting the 'store' subvolume.  Mounting 'rootfs' is sufficient, since the subvolume name matches its intended mount point in the file system hierarchy.  Alternatively, the 'store' subvolume could be referred to by setting the @code{subvol} option to either @code{/rootfs/gnu/store} or @code{rootfs/gnu/store}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17271
msgid "Finally, a more contrived example of nested subvolumes:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:17278
#, no-wrap
msgid ""
"/                           (top level)\n"
"├── root-snapshots          (subvolume)\n"
"    ├── root-current        (subvolume)\n"
"        ├── guix-store      (subvolume)\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17285
msgid "Here, the 'guix-store' subvolume doesn't match its intended mount point, so it is necessary to mount it.  The subvolume must be fully specified, by passing its file name to the @code{subvol} option.  To illustrate, the 'guix-store' subvolume could be mounted on @file{/gnu/store} by using a file system declaration such as:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17293
#, no-wrap
msgid ""
"(file-system\n"
"  (device (file-system-label \"btrfs-pool-1\"))\n"
"  (mount-point \"/gnu/store\")\n"
"  (type \"btrfs\")\n"
"  (options \"subvol=root-snapshots/root-current/guix-store,\\\n"
"compress-force=zstd,space_cache=v2\"))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17298
#, no-wrap
msgid "device mapping"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17299
#, no-wrap
msgid "mapped devices"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17316
msgid "The Linux kernel has a notion of @dfn{device mapping}: a block device, such as a hard disk partition, can be @dfn{mapped} into another device, usually in @code{/dev/mapper/}, with additional processing over the data that flows through it@footnote{Note that the GNU@tie{}Hurd makes no difference between the concept of a ``mapped device'' and that of a file system: both boil down to @emph{translating} input/output operations made on a file to operations on its backing store.  Thus, the Hurd implements mapped devices, like file systems, using the generic @dfn{translator} mechanism (@pxref{Translators,,, hurd, The GNU Hurd Reference Manual}).}.  A typical example is encryption device mapping: all writes to the mapped device are encrypted, and all reads are deciphered, transparently.  Guix extends this notion by considering any device or set of devices that are @dfn{transformed} in some way to create a new device; for instance, RAID devices are obtained by @dfn{assembling} several other devices, such as hard disks or partitions, into a new one that behaves as one partition."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17319
msgid "Mapped devices are declared using the @code{mapped-device} form, defined as follows; for examples, see below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:17320
#, no-wrap
msgid "{Data Type} mapped-device"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:17323
msgid "Objects of this type represent device mappings that will be made when the system boots up."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17330
msgid "This is either a string specifying the name of the block device to be mapped, such as @code{\"/dev/sda3\"}, or a list of such strings when several devices need to be assembled for creating a new one.  In case of LVM this is a string specifying name of the volume group to be mapped."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:17331 guix-git/doc/guix.texi:17499
#: guix-git/doc/guix.texi:44168
#, no-wrap
msgid "target"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17340
msgid "This string specifies the name of the resulting mapped device.  For kernel mappers such as encrypted devices of type @code{luks-device-mapping}, specifying @code{\"my-partition\"} leads to the creation of the @code{\"/dev/mapper/my-partition\"} device.  For RAID devices of type @code{raid-device-mapping}, the full device name such as @code{\"/dev/md0\"} needs to be given.  LVM logical volumes of type @code{lvm-device-mapping} need to be specified as @code{\"VGNAME-LVNAME\"}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:17341 guix-git/doc/guix.texi:39641
#, no-wrap
msgid "targets"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17344
msgid "This list of strings specifies names of the resulting mapped devices in case there are several.  The format is identical to @var{target}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17348
msgid "This must be a @code{mapped-device-kind} object, which specifies how @var{source} is mapped to @var{target}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17351
#, no-wrap
msgid "luks-device-mapping"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17355
msgid "This defines LUKS block device encryption using the @command{cryptsetup} command from the package with the same name.  It relies on the @code{dm-crypt} Linux kernel module."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17357
#, no-wrap
msgid "raid-device-mapping"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17362
msgid "This defines a RAID device, which is assembled using the @code{mdadm} command from the package with the same name.  It requires a Linux kernel module for the appropriate RAID level to be loaded, such as @code{raid456} for RAID-4, RAID-5 or RAID-6, or @code{raid10} for RAID-10."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17364
#, no-wrap
msgid "LVM, logical volume manager"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17365
#, no-wrap
msgid "lvm-device-mapping"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17370
msgid "This defines one or more logical volumes for the Linux @uref{https://www.sourceware.org/lvm2/, Logical Volume Manager (LVM)}.  The volume group is activated by the @command{vgchange} command from the @code{lvm2} package."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17372
#, no-wrap
msgid "disk encryption"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17373
#, no-wrap
msgid "LUKS"
msgstr "LUKS"

#. type: Plain text
#: guix-git/doc/guix.texi:17381
msgid "The following example specifies a mapping from @file{/dev/sda3} to @file{/dev/mapper/home} using LUKS---the @url{https://gitlab.com/cryptsetup/cryptsetup,Linux Unified Key Setup}, a standard mechanism for disk encryption.  The @file{/dev/mapper/home} device can then be used as the @code{device} of a @code{file-system} declaration (@pxref{File Systems})."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17387
#, no-wrap
msgid ""
"(mapped-device\n"
"  (source \"/dev/sda3\")\n"
"  (target \"home\")\n"
"  (type luks-device-mapping))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17392
msgid "Alternatively, to become independent of device numbering, one may obtain the LUKS UUID (@dfn{unique identifier}) of the source device by a command like:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:17395
#, no-wrap
msgid "cryptsetup luksUUID /dev/sda3\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17398
msgid "and use it as follows:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17404
#, no-wrap
msgid ""
"(mapped-device\n"
"  (source (uuid \"cb67fc72-0d54-4c88-9d4b-b225f30b0f44\"))\n"
"  (target \"home\")\n"
"  (type luks-device-mapping))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17406
#, no-wrap
msgid "swap encryption"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17413
msgid "It is also desirable to encrypt swap space, since swap space may contain sensitive data.  One way to accomplish that is to use a swap file in a file system on a device mapped via LUKS encryption.  In this way, the swap file is encrypted because the entire device is encrypted.  @xref{Swap Space}, or @xref{Preparing for Installation,,Disk Partitioning}, for an example."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17416
msgid "A RAID device formed of the partitions @file{/dev/sda1} and @file{/dev/sdb1} may be declared as follows:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17422
#, no-wrap
msgid ""
"(mapped-device\n"
"  (source (list \"/dev/sda1\" \"/dev/sdb1\"))\n"
"  (target \"/dev/md0\")\n"
"  (type raid-device-mapping))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17429
msgid "The @file{/dev/md0} device can then be used as the @code{device} of a @code{file-system} declaration (@pxref{File Systems}).  Note that the RAID level need not be given; it is chosen during the initial creation and formatting of the RAID device and is determined automatically later."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17432
msgid "LVM logical volumes ``alpha'' and ``beta'' from volume group ``vg0'' can be declared as follows:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17438
#, no-wrap
msgid ""
"(mapped-device\n"
"  (source \"vg0\")\n"
"  (targets (list \"vg0-alpha\" \"vg0-beta\"))\n"
"  (type lvm-device-mapping))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17443
msgid "Devices @file{/dev/mapper/vg0-alpha} and @file{/dev/mapper/vg0-beta} can then be used as the @code{device} of a @code{file-system} declaration (@pxref{File Systems})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17446
#, no-wrap
msgid "swap space"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17456
msgid "Swap space, as it is commonly called, is a disk area specifically designated for paging: the process in charge of memory management (the Linux kernel or Hurd's default pager) can decide that some memory pages stored in RAM which belong to a running program but are unused should be stored on disk instead.  It unloads those from the RAM, freeing up precious fast memory, and writes them to the swap space.  If the program tries to access that very page, the memory management process loads it back into memory for the program to use."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17462
msgid "A common misconception about swap is that it is only useful when small amounts of RAM are available to the system.  However, it should be noted that kernels often use all available RAM for disk access caching to make I/O faster, and thus paging out unused portions of program memory will expand the RAM available for such caching."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17466
msgid "For a more detailed description of how memory is managed from the viewpoint of a monolithic kernel, @pxref{Memory Concepts,,, libc, The GNU C Library Reference Manual}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17475
msgid "The Linux kernel has support for swap partitions and swap files: the former uses a whole disk partition for paging, whereas the second uses a file on a file system for that (the file system driver needs to support it).  On a comparable setup, both have the same performance, so one should consider ease of use when deciding between them.  Partitions are ``simpler'' and do not need file system support, but need to be allocated at disk formatting time (logical volumes notwithstanding), whereas files can be allocated and deallocated at any time."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17476
#, fuzzy, no-wrap
#| msgid "deduplication"
msgid "hibernation"
msgstr "deduplicação"

#. type: cindex
#: guix-git/doc/guix.texi:17477
#, no-wrap
msgid "suspend to disk"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17488
msgid "Swap space is also required to put the system into @dfn{hibernation} (also called @dfn{suspend to disk}), whereby memory is dumped to swap before shutdown so it can be restored when the machine is eventually restarted.  Hibernation uses at most half the size of the RAM in the configured swap space.  The Linux kernel needs to know about the swap space to be used to resume from hibernation on boot (@i{via} a kernel argument).  When using a swap file, its offset in the device holding it also needs to be given to the kernel; that value has to be updated if the file is initialized again as swap---e.g., because its size was changed."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17493
msgid "Note that swap space is not zeroed on shutdown, so sensitive data (such as passwords) may linger on it if it was paged out.  As such, you should consider having your swap reside on an encrypted device (@pxref{Mapped Devices})."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:17494
#, fuzzy, no-wrap
msgid "{Data Type} swap-space"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:17497
msgid "Objects of this type represent swap spaces.  They contain the following members:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17503
msgid "The device or file to use, either a UUID, a @code{file-system-label} or a string, as in the definition of a @code{file-system} (@pxref{File Systems})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17510
msgid "A list of @code{file-system} or @code{mapped-device} objects, upon which the availability of the space depends.  Note that just like for @code{file-system} objects, dependencies which are needed for boot and mounted in early userspace are not managed by the Shepherd, and so automatically filtered out for you."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17511
#, fuzzy, no-wrap
#| msgid "@code{chroot} (default: @code{#f})"
msgid "@code{priority} (default: @code{#f})"
msgstr "@code{chroot} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:17518
msgid "Only supported by the Linux kernel.  Either @code{#f} to disable swap priority, or an integer between 0 and 32767.  The kernel will first use swap spaces of higher priority when paging, and use same priority spaces on a round-robin basis.  The kernel will use swap spaces without a set priority after prioritized spaces, and in the order that they appeared in (not round-robin)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17519
#, fuzzy, no-wrap
#| msgid "@code{id} (default: @code{#f})"
msgid "@code{discard?} (default: @code{#f})"
msgstr "@code{id} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:17523
msgid "Only supported by the Linux kernel.  When true, the kernel will notify the disk controller of discarded pages, for example with the TRIM operation on Solid State Drives."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17528
msgid "Here are some examples:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17531
#, no-wrap
msgid "(swap-space (target (uuid \"4dab5feb-d176-45de-b287-9b0a6e4c01cb\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17536
msgid "Use the swap partition with the given UUID@.  You can learn the UUID of a Linux swap partition by running @command{swaplabel @var{device}}, where @var{device} is the @file{/dev} file name of that partition."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17541
#, no-wrap
msgid ""
"(swap-space\n"
"  (target (file-system-label \"swap\"))\n"
"  (dependencies mapped-devices))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17547
msgid "Use the partition with label @code{swap}, which can be found after all the @var{mapped-devices} mapped devices have been opened.  Again, the @command{swaplabel} command allows you to view and change the label of a Linux swap partition."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17550
msgid "Here's a more involved example with the corresponding @code{file-systems} part of an @code{operating-system} declaration."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17561
#, no-wrap
msgid ""
"(file-systems\n"
"  (list (file-system\n"
"          (device (file-system-label \"root\"))\n"
"          (mount-point \"/\")\n"
"          (type \"ext4\"))\n"
"        (file-system\n"
"          (device (file-system-label \"btrfs\"))\n"
"          (mount-point \"/btrfs\")\n"
"          (type \"btrfs\"))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17568
#, no-wrap
msgid ""
"(swap-devices\n"
"  (list\n"
"    (swap-space\n"
"      (target \"/btrfs/swapfile\")\n"
"      (dependencies (filter (file-system-mount-point-predicate \"/btrfs\")\n"
"                            file-systems)))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17573
msgid "Use the file @file{/btrfs/swapfile} as swap space, which depends on the file system mounted at @file{/btrfs}.  Note how we use Guile's filter to select the file system in an elegant fashion!"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17580
#, no-wrap
msgid ""
"(swap-devices\n"
"  (list\n"
"    (swap-space\n"
"      (target \"/dev/mapper/my-swap\")\n"
"      (dependencies mapped-devices))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17584
#, no-wrap
msgid ""
"(kernel-arguments\n"
"  (cons* \"resume=/dev/mapper/my-swap\"\n"
"         %default-kernel-arguments))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17591
msgid "The above snippet of an @code{operating-system} declaration enables the mapped device @file{/dev/mapper/my-swap} (which may be part of an encrypted device) as swap space, and tells the kernel to use it for hibernation via the @code{resume} kernel argument (@pxref{operating-system Reference}, @code{kernel-arguments})."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17599
#, no-wrap
msgid ""
"(swap-devices\n"
"  (list\n"
"    (swap-space\n"
"      (target \"/swapfile\")\n"
"      (dependencies (filter (file-system-mount-point-predicate \"/\")\n"
"                            file-systems)))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17604
#, no-wrap
msgid ""
"(kernel-arguments\n"
"  (cons* \"resume=/dev/sda3\"        ;device that holds /swapfile\n"
"         \"resume_offset=92514304\"  ;offset of /swapfile on device\n"
"         %default-kernel-arguments))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17614
msgid "This other snippet of @code{operating-system} enables the swap file @file{/swapfile} for hibernation by telling the kernel about the partition containing it (@code{resume} argument) and its offset on that partition (@code{resume_offset} argument).  The latter value can be found in the output of the command @command{filefrag -e} as the first number right under the @code{physical_offset} column header (the second command extracts its value directly):"
msgstr ""

#. type: smallexample
#: guix-git/doc/guix.texi:17624
#, no-wrap
msgid ""
"$ sudo filefrag -e /swapfile\n"
"Filesystem type is: ef53\n"
"File size of /swapfile is 2463842304 (601524 blocks of 4096 bytes)\n"
" ext:     logical_offset:        physical_offset: length:   expected: flags:\n"
"   0:        0..    2047:   92514304..  92516351:   2048:\n"
"@dots{}\n"
"$ sudo filefrag -e /swapfile | grep '^ *0:' | cut -d: -f3 | cut -d. -f1\n"
"   92514304\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17629
#, no-wrap
msgid "users"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17630
#, no-wrap
msgid "accounts"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17631
#, no-wrap
msgid "user accounts"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17635
msgid "User accounts and groups are entirely managed through the @code{operating-system} declaration.  They are specified with the @code{user-account} and @code{user-group} forms:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17645
#, no-wrap
msgid ""
"(user-account\n"
"  (name \"alice\")\n"
"  (group \"users\")\n"
"  (supplementary-groups '(\"wheel\"   ;allow use of sudo, etc.\n"
"                          \"audio\"   ;sound card\n"
"                          \"video\"   ;video devices such as webcams\n"
"                          \"cdrom\")) ;the good ol' CD-ROM\n"
"  (comment \"Bob's sister\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17649
msgid "Here's a user account that uses a different shell and a custom home directory (the default would be @file{\"/home/bob\"}):"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17657
#, no-wrap
msgid ""
"(user-account\n"
"  (name \"bob\")\n"
"  (group \"users\")\n"
"  (comment \"Alice's bro\")\n"
"  (shell (file-append zsh \"/bin/zsh\"))\n"
"  (home-directory \"/home/robert\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17666
msgid "When booting or upon completion of @command{guix system reconfigure}, the system ensures that only the user accounts and groups specified in the @code{operating-system} declaration exist, and with the specified properties.  Thus, account or group creations or modifications made by directly invoking commands such as @command{useradd} are lost upon reconfiguration or reboot.  This ensures that the system remains exactly as declared."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:17667
#, no-wrap
msgid "{Data Type} user-account"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:17670
msgid "Objects of this type represent user accounts.  The following members may be specified:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17674
msgid "The name of the user account."
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:17675 guix-git/doc/guix.texi:39254
#, no-wrap
msgid "group"
msgstr "grupo"

#. type: cindex
#: guix-git/doc/guix.texi:17676 guix-git/doc/guix.texi:17760
#, no-wrap
msgid "groups"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17679
msgid "This is the name (a string) or identifier (a number) of the user group this account belongs to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17680
#, no-wrap
msgid "@code{supplementary-groups} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17683
msgid "Optionally, this can be defined as a list of group names that this account belongs to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17684
#, no-wrap
msgid "@code{uid} (default: @code{#f})"
msgstr "@code{uid} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:17688
msgid "This is the user ID for this account (a number), or @code{#f}.  In the latter case, a number is automatically chosen by the system when the account is created."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17689 guix-git/doc/guix.texi:20940
#, no-wrap
msgid "@code{comment} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17691
msgid "A comment about the account, such as the account owner's full name."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17696
msgid "Note that, for non-system accounts, users are free to change their real name as it appears in @file{/etc/passwd} using the @command{chfn} command.  When they do, their choice prevails over the system administrator's choice; reconfiguring does @emph{not} change their name."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:17697
#, no-wrap
msgid "home-directory"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17699
msgid "This is the name of the home directory for the account."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17700
#, no-wrap
msgid "@code{create-home-directory?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17703
msgid "Indicates whether the home directory of this account should be created if it does not exist yet."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17704
#, no-wrap
msgid "@code{shell} (default: Bash)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17708
msgid "This is a G-expression denoting the file name of a program to be used as the shell (@pxref{G-Expressions}).  For example, you would refer to the Bash executable like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17711
#, no-wrap
msgid "(file-append bash \"/bin/bash\")\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17715
msgid "... and to the Zsh executable like that:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17718
#, no-wrap
msgid "(file-append zsh \"/bin/zsh\")\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17720 guix-git/doc/guix.texi:17778
#, no-wrap
msgid "@code{system?} (default: @code{#f})"
msgstr "@code{system?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:17724
msgid "This Boolean value indicates whether the account is a ``system'' account.  System accounts are sometimes treated specially; for instance, graphical login managers do not list them."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:17726
msgid "user-account-password"
msgstr "user-account-password"

#. type: cindex
#: guix-git/doc/guix.texi:17726
#, no-wrap
msgid "password, for user accounts"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17727 guix-git/doc/guix.texi:17782
#, no-wrap
msgid "@code{password} (default: @code{#f})"
msgstr "@code{password} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:17733
msgid "You would normally leave this field to @code{#f}, initialize user passwords as @code{root} with the @command{passwd} command, and then let users change it with @command{passwd}.  Passwords set with @command{passwd} are of course preserved across reboot and reconfiguration."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17737
msgid "If you @emph{do} want to set an initial password for an account, then this field must contain the encrypted password, as a string.  You can use the @code{crypt} procedure for this purpose:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17742
#, no-wrap
msgid ""
"(user-account\n"
"  (name \"charlie\")\n"
"  (group \"users\")\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17745
#, no-wrap
msgid ""
"  ;; Specify a SHA-512-hashed initial password.\n"
"  (password (crypt \"InitialPassword!\" \"$6$abc\")))\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:17751
msgid "The hash of this initial password will be available in a file in @file{/gnu/store}, readable by all the users, so this method must be used with care."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17756
msgid "@xref{Passphrase Storage,,, libc, The GNU C Library Reference Manual}, for more information on password encryption, and @ref{Encryption,,, guile, GNU Guile Reference Manual}, for information on Guile's @code{crypt} procedure."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17762
msgid "User group declarations are even simpler:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17765
#, no-wrap
msgid "(user-group (name \"students\"))\n"
msgstr "(user-group (name \"students\"))\n"

#. type: deftp
#: guix-git/doc/guix.texi:17767
#, no-wrap
msgid "{Data Type} user-group"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:17769
msgid "This type is for, well, user groups.  There are just a few fields:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17773
msgid "The name of the group."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:17774 guix-git/doc/guix.texi:35221
#, no-wrap
msgid "@code{id} (default: @code{#f})"
msgstr "@code{id} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:17777
msgid "The group identifier (a number).  If @code{#f}, a new number is automatically allocated when the group is created."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17781
msgid "This Boolean value indicates whether the group is a ``system'' group.  System groups have low numerical IDs."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:17785
msgid "What, user groups can have a password? Well, apparently yes.  Unless @code{#f}, this field specifies the password of the group."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17791
msgid "For convenience, a variable lists all the basic user groups one may expect:"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17792
#, no-wrap
msgid "%base-groups"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17797
msgid "This is the list of basic user groups that users and/or packages expect to be present on the system.  This includes groups such as ``root'', ``wheel'', and ``users'', as well as groups used to control access to specific devices such as ``audio'', ``disk'', and ``cdrom''."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17799
#, fuzzy, no-wrap
#| msgid "user-account-password"
msgid "%base-user-accounts"
msgstr "user-account-password"

#. type: defvar
#: guix-git/doc/guix.texi:17802
msgid "This is the list of basic system accounts that programs may expect to find on a GNU/Linux system, such as the ``nobody'' account."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:17805
msgid "Note that the ``root'' account is not included here.  It is a special-case and is automatically added whether or not it is specified."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17811
#, no-wrap
msgid "keymap"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17819
msgid "To specify what each key of your keyboard does, you need to tell the operating system what @dfn{keyboard layout} you want to use.  The default, when nothing is specified, is the US English QWERTY layout for 105-key PC keyboards.  However, German speakers will usually prefer the German QWERTZ layout, French speakers will want the AZERTY layout, and so on; hackers might prefer Dvorak or bépo, and they might even want to further customize the effect of some of the keys.  This section explains how to get that done."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17820
#, no-wrap
msgid "keyboard layout, definition"
msgstr "disposição do teclado, definição"

#. type: Plain text
#: guix-git/doc/guix.texi:17822
msgid "There are three components that will want to know about your keyboard layout:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:17829
msgid "The @emph{bootloader} may want to know what keyboard layout you want to use (@pxref{Bootloader Configuration, @code{keyboard-layout}}).  This is useful if you want, for instance, to make sure that you can type the passphrase of your encrypted root partition using the right layout."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:17834
msgid "The @emph{operating system kernel}, Linux, will need that so that the console is properly configured (@pxref{operating-system Reference, @code{keyboard-layout}})."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:17838
msgid "The @emph{graphical display server}, usually Xorg, also has its own idea of the keyboard layout (@pxref{X Window, @code{keyboard-layout}})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17842
msgid "Guix allows you to configure all three separately but, fortunately, it allows you to share the same keyboard layout for all three components."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17843
#, no-wrap
msgid "XKB, keyboard layouts"
msgstr "XKB, disposições do teclado"

#. type: Plain text
#: guix-git/doc/guix.texi:17851
msgid "Keyboard layouts are represented by records created by the @code{keyboard-layout} procedure of @code{(gnu system keyboard)}.  Following the X Keyboard extension (XKB), each layout has four attributes: a name (often a language code such as ``fi'' for Finnish or ``jp'' for Japanese), an optional variant name, an optional keyboard model name, and a possibly empty list of additional options.  In most cases the layout name is all you care about."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:17852
#, no-wrap
msgid "keyboard-layout name [variant] [#:model] [#:options '()]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:17854
msgid "Return a new keyboard layout with the given @var{name} and @var{variant}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:17858
msgid "@var{name} must be a string such as @code{\"fr\"}; @var{variant} must be a string such as @code{\"bepo\"} or @code{\"nodeadkeys\"}.  See the @code{xkeyboard-config} package for valid options."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17861
msgid "Here are a few examples:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17866
#, no-wrap
msgid ""
";; The German QWERTZ layout.  Here we assume a standard\n"
";; \"pc105\" keyboard model.\n"
"(keyboard-layout \"de\")\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17869
#, no-wrap
msgid ""
";; The bépo variant of the French layout.\n"
"(keyboard-layout \"fr\" \"bepo\")\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17872
#, no-wrap
msgid ""
";; The Catalan layout.\n"
"(keyboard-layout \"es\" \"cat\")\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17875
#, no-wrap
msgid ""
";; Arabic layout with \"Alt-Shift\" to switch to US layout.\n"
"(keyboard-layout \"ar,us\" #:options '(\"grp:alt_shift_toggle\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17882
#, no-wrap
msgid ""
";; The Latin American Spanish layout.  In addition, the\n"
";; \"Caps Lock\" key is used as an additional \"Ctrl\" key,\n"
";; and the \"Menu\" key is used as a \"Compose\" key to enter\n"
";; accented letters.\n"
"(keyboard-layout \"latam\"\n"
"                 #:options '(\"ctrl:nocaps\" \"compose:menu\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17885
#, no-wrap
msgid ""
";; The Russian layout for a ThinkPad keyboard.\n"
"(keyboard-layout \"ru\" #:model \"thinkpad\")\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17890
#, no-wrap
msgid ""
";; The \"US international\" layout, which is the US layout plus\n"
";; dead keys to enter accented characters.  This is for an\n"
";; Apple MacBook keyboard.\n"
"(keyboard-layout \"us\" \"intl\" #:model \"macbook78\")\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17894
msgid "See the @file{share/X11/xkb} directory of the @code{xkeyboard-config} package for a complete list of supported layouts, variants, and models."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17895
#, no-wrap
msgid "keyboard layout, configuration"
msgstr "disposição do teclado, configuração"

#. type: Plain text
#: guix-git/doc/guix.texi:17899
msgid "Let's say you want your system to use the Turkish keyboard layout throughout your system---bootloader, console, and Xorg.  Here's what your system configuration would look like:"
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:17900
#, no-wrap
msgid "set-xorg-configuration"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17904
#, no-wrap
msgid ""
";; Using the Turkish layout for the bootloader, the console,\n"
";; and for Xorg.\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17916
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; ...\n"
"  (keyboard-layout (keyboard-layout \"tr\"))  ;for the console\n"
"  (bootloader (bootloader-configuration\n"
"                (bootloader grub-efi-bootloader)\n"
"                (targets '(\"/boot/efi\"))\n"
"                (keyboard-layout keyboard-layout))) ;for GRUB\n"
"  (services (cons (set-xorg-configuration\n"
"                    (xorg-configuration             ;for Xorg\n"
"                      (keyboard-layout keyboard-layout)))\n"
"                  %desktop-services)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17923
msgid "In the example above, for GRUB and for Xorg, we just refer to the @code{keyboard-layout} field defined above, but we could just as well refer to a different layout.  The @code{set-xorg-configuration} procedure communicates the desired Xorg configuration to the graphical log-in manager, by default GDM."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17926
msgid "We've discussed how to specify the @emph{default} keyboard layout of your system when it starts, but you can also adjust it at run time:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:17931
msgid "If you're using GNOME, its settings panel has a ``Region & Language'' entry where you can select one or more keyboard layouts."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:17936
msgid "Under Xorg, the @command{setxkbmap} command (from the same-named package)  allows you to change the current layout.  For example, this is how you would change the layout to US Dvorak:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:17939
#, no-wrap
msgid "setxkbmap us dvorak\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:17946
msgid "The @code{loadkeys} command changes the keyboard layout in effect in the Linux console.  However, note that @code{loadkeys} does @emph{not} use the XKB keyboard layout categorization described above.  The command below loads the French bépo layout:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:17949
#, no-wrap
msgid "loadkeys fr-bepo\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17955
#, no-wrap
msgid "locale"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17962
msgid "A @dfn{locale} defines cultural conventions for a particular language and region of the world (@pxref{Locales,,, libc, The GNU C Library Reference Manual}).  Each locale has a name that typically has the form @code{@var{language}_@var{territory}.@var{codeset}}---e.g., @code{fr_LU.utf8} designates the locale for the French language, with cultural conventions from Luxembourg, and using the UTF-8 encoding."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:17963
#, no-wrap
msgid "locale definition"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17967
msgid "Usually, you will want to specify the default locale for the machine using the @code{locale} field of the @code{operating-system} declaration (@pxref{operating-system Reference, @code{locale}})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17976
msgid "The selected locale is automatically added to the @dfn{locale definitions} known to the system if needed, with its codeset inferred from its name---e.g., @code{bo_CN.utf8} will be assumed to use the @code{UTF-8} codeset.  Additional locale definitions can be specified in the @code{locale-definitions} slot of @code{operating-system}---this is useful, for instance, if the codeset could not be inferred from the locale name.  The default set of locale definitions includes some widely used locales, but not all the available locales, in order to save space."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17979
msgid "For instance, to add the North Frisian locale for Germany, the value of that field may be:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17984
#, no-wrap
msgid ""
"(cons (locale-definition\n"
"        (name \"fy_DE.utf8\") (source \"fy_DE\"))\n"
"      %default-locale-definitions)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:17988
msgid "Likewise, to save space, one might want @code{locale-definitions} to list only the locales that are actually used, as in:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:17993
#, no-wrap
msgid ""
"(list (locale-definition\n"
"        (name \"ja_JP.eucjp\") (source \"ja_JP\")\n"
"        (charset \"EUC-JP\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18002
msgid "The compiled locale definitions are available at @file{/run/current-system/locale/X.Y}, where @code{X.Y} is the libc version, which is the default location where the GNU@tie{}libc provided by Guix looks for locale data.  This can be overridden using the @env{LOCPATH} environment variable (@pxref{locales-and-locpath, @env{LOCPATH} and locale packages})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18005
msgid "The @code{locale-definition} form is provided by the @code{(gnu system locale)} module.  Details are given below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18006
#, no-wrap
msgid "{Data Type} locale-definition"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18008
msgid "This is the data type of a locale definition."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18014
msgid "The name of the locale.  @xref{Locale Names,,, libc, The GNU C Library Reference Manual}, for more information on locale names."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18018
msgid "The name of the source for that locale.  This is typically the @code{@var{language}_@var{territory}} part of the locale name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18019
#, no-wrap
msgid "@code{charset} (default: @code{\"UTF-8\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18023
msgid "The ``character set'' or ``code set'' for that locale, @uref{https://www.iana.org/assignments/character-sets, as defined by IANA}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18027
#, fuzzy, no-wrap
#| msgid "Updating package definitions."
msgid "%default-locale-definitions"
msgstr "Atualizando definições de pacotes."

#. type: defvar
#: guix-git/doc/guix.texi:18031
msgid "A list of commonly used UTF-8 locales, used as the default value of the @code{locale-definitions} field of @code{operating-system} declarations."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:18032
#, no-wrap
msgid "locale name"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:18033
#, no-wrap
msgid "normalized codeset in locale names"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18039
msgid "These locale definitions use the @dfn{normalized codeset} for the part that follows the dot in the name (@pxref{Using gettextized software, normalized codeset,, libc, The GNU C Library Reference Manual}).  So for instance it has @code{uk_UA.utf8} but @emph{not}, say, @code{uk_UA.UTF-8}."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:18041
#, no-wrap
msgid "Locale Data Compatibility Considerations"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:18043
#, no-wrap
msgid "incompatibility, of locale data"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18050
msgid "@code{operating-system} declarations provide a @code{locale-libcs} field to specify the GNU@tie{}libc packages that are used to compile locale declarations (@pxref{operating-system Reference}).  ``Why would I care?'', you may ask.  Well, it turns out that the binary format of locale data is occasionally incompatible from one libc version to another."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18062
msgid "For instance, a program linked against libc version 2.21 is unable to read locale data produced with libc 2.22; worse, that program @emph{aborts} instead of simply ignoring the incompatible locale data@footnote{Versions 2.23 and later of GNU@tie{}libc will simply skip the incompatible locale data, which is already an improvement.}.  Similarly, a program linked against libc 2.22 can read most, but not all, of the locale data from libc 2.21 (specifically, @env{LC_COLLATE} data is incompatible); thus calls to @code{setlocale} may fail, but programs will not abort."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18067
msgid "The ``problem'' with Guix is that users have a lot of freedom: They can choose whether and when to upgrade software in their profiles, and might be using a libc version different from the one the system administrator used to build the system-wide locale data."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18071
msgid "Fortunately, unprivileged users can also install their own locale data and define @env{GUIX_LOCPATH} accordingly (@pxref{locales-and-locpath, @env{GUIX_LOCPATH} and locale packages})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18078
msgid "Still, it is best if the system-wide locale data at @file{/run/current-system/locale} is built for all the libc versions actually in use on the system, so that all the programs can access it---this is especially crucial on a multi-user system.  To do that, the administrator can specify several libc packages in the @code{locale-libcs} field of @code{operating-system}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:18081
#, no-wrap
msgid ""
"(use-package-modules base)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:18085
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (locale-libcs (list glibc-2.21 (canonical-package glibc))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18090
msgid "This example would lead to a system containing locale definitions for both libc 2.21 and the current version of libc in @file{/run/current-system/locale}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:18095
#, no-wrap
msgid "system services"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18101
msgid "An important part of preparing an @code{operating-system} declaration is listing @dfn{system services} and their configuration (@pxref{Using the Configuration System}).  System services are typically daemons launched when the system boots, or other actions needed at that time---e.g., configuring network access."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18108
msgid "Guix has a broad definition of ``service'' (@pxref{Service Composition}), but many services are managed by the GNU@tie{}Shepherd (@pxref{Shepherd Services}).  On a running system, the @command{herd} command allows you to list the available services, show their status, start and stop them, or do other specific operations (@pxref{Jump Start,,, shepherd, The GNU Shepherd Manual}).  For example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:18111
#, no-wrap
msgid "# herd status\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18116
msgid "The above command, run as @code{root}, lists the currently defined services.  The @command{herd doc} command shows a synopsis of the given service and its associated actions:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:18120
#, no-wrap
msgid ""
"# herd doc nscd\n"
"Run libc's name service cache daemon (nscd).\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:18123
#, no-wrap
msgid ""
"# herd doc nscd action invalidate\n"
"invalidate: Invalidate the given cache--e.g., 'hosts' for host name lookups.\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18128
msgid "The @command{start}, @command{stop}, and @command{restart} sub-commands have the effect you would expect.  For instance, the commands below stop the nscd service and restart the Xorg display server:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:18135
#, no-wrap
msgid ""
"# herd stop nscd\n"
"Service nscd has been stopped.\n"
"# herd restart xorg-server\n"
"Service xorg-server has been stopped.\n"
"Service xorg-server has been started.\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:18137
#, fuzzy, no-wrap
msgid "configuration, action for shepherd services"
msgstr "Gerencie a configuração do sistema operacional."

#. type: cindex
#: guix-git/doc/guix.texi:18138
#, fuzzy, no-wrap
msgid "configuration file, of a shepherd service"
msgstr "Gerencie a configuração do sistema operacional."

#. type: Plain text
#: guix-git/doc/guix.texi:18142
msgid "For some services, @command{herd configuration} returns the name of the service's configuration file, which can be handy to inspect its configuration:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:18146
#, no-wrap
msgid ""
"# herd configuration sshd\n"
"/gnu/store/@dots{}-sshd_config\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18151
msgid "The following sections document the available services, starting with the core services, that may be used in an @code{operating-system} declaration."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18197
msgid "The @code{(gnu services base)} module provides definitions for the basic services that one expects from the system.  The services exported by this module are listed below."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18204
msgid "This variable contains a list of basic services (@pxref{Service Types and Services}, for more information on service objects) one would expect from the system: a login service (mingetty) on each tty, syslogd, the libc name service cache daemon (nscd), the udev device manager, and more."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18209
msgid "This is the default value of the @code{services} field of @code{operating-system} declarations.  Usually, when customizing a system, you will want to append services to @code{%base-services}, like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:18214
#, no-wrap
msgid ""
"(append (list (service avahi-service-type)\n"
"              (service openssh-service-type))\n"
"        %base-services)\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18217
#, fuzzy, no-wrap
msgid "special-files-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:18220
msgid "This is the service that sets up ``special files'' such as @file{/bin/sh}; an instance of it is part of @code{%base-services}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18224
msgid "The value associated with @code{special-files-service-type} services must be a list of two-element lists where the first element is the ``special file'' and the second element is its target.  By default it is:"
msgstr ""

#. type: file{#1}
#: guix-git/doc/guix.texi:18225
#, no-wrap
msgid "/bin/sh"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:18226
#, no-wrap
msgid "@file{sh}, in @file{/bin}"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:18230
#, no-wrap
msgid ""
"`((\"/bin/sh\" ,(file-append bash \"/bin/sh\"))\n"
"  (\"/usr/bin/env\" ,(file-append coreutils \"/bin/env\")))\n"
msgstr ""

#. type: file{#1}
#: guix-git/doc/guix.texi:18232
#, no-wrap
msgid "/usr/bin/env"
msgstr "/usr/bin/env"

#. type: cindex
#: guix-git/doc/guix.texi:18233
#, no-wrap
msgid "@file{env}, in @file{/usr/bin}"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18236
msgid "If you want to add, say, @code{/bin/bash} to your system, you can change it to:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:18241
#, no-wrap
msgid ""
"`((\"/bin/sh\" ,(file-append bash \"/bin/sh\"))\n"
"  (\"/usr/bin/env\" ,(file-append coreutils \"/bin/env\"))\n"
"  (\"/bin/bash\" ,(file-append bash \"/bin/bash\")))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18248
msgid "Since this is part of @code{%base-services}, you can use @code{modify-services} to customize the set of special files (@pxref{Service Reference, @code{modify-services}}).  But the simple way to add a special file is @i{via} the @code{extra-special-file} procedure (see below)."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:18250
#, no-wrap
msgid "extra-special-file file target"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:18252
msgid "Use @var{target} as the ``special file'' @var{file}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:18256
msgid "For example, adding the following lines to the @code{services} field of your operating system declaration leads to a @file{/usr/bin/env} symlink:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:18260
#, no-wrap
msgid ""
"(extra-special-file \"/usr/bin/env\"\n"
"                    (file-append coreutils \"/bin/env\"))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18263
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "host-name-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:18267
msgid "Type of the service that sets the system host name, whose value is a string. This service is included in @code{operating-system} by default (@pxref{operating-system-essential-services,@code{essential-services}})."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18269
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "console-font-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:18274
msgid "Install the given fonts on the specified ttys (fonts are per virtual console on the kernel Linux).  The value of this service is a list of tty/font pairs.  The font can be the name of a font provided by the @code{kbd} package or any valid argument to @command{setfont}, as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:18283
#, no-wrap
msgid ""
"`((\"tty1\" . \"LatGrkCyr-8x16\")\n"
"  (\"tty2\" . ,(file-append\n"
"                font-tamzen\n"
"                \"/share/kbd/consolefonts/TamzenForPowerline10x20.psf\"))\n"
"  (\"tty3\" . ,(file-append\n"
"                font-terminus\n"
"                \"/share/consolefonts/ter-132n\"))) ; for HDPI\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18286
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "hosts-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:18290
msgid "Type of the service that populates the entries for (@file{/etc/hosts}).  This service type can be @emph{extended} by passing it a list of @code{host} records."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18292
msgid "The example below shows how to add two entries to @file{/etc/hosts}:"
msgstr ""

#.  The domain names below SHOULD NOT be translated.
#. type: lisp
#: guix-git/doc/guix.texi:18303
#, no-wrap
msgid ""
"(simple-service 'add-extra-hosts\n"
"                hosts-service-type\n"
"                (list (host \"192.0.2.1\" \"example.com\"\n"
"                            '(\"example.net\" \"example.org\"))\n"
"                      (host \"2001:db8::1\" \"example.com\"\n"
"                            '(\"example.net\" \"example.org\"))))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:18306
#, no-wrap
msgid "@file{/etc/hosts} default entries"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:18308
msgid "By default @file{/etc/hosts} comes with the following entries:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:18311
#, no-wrap
msgid ""
"127.0.0.1 localhost @var{host-name}\n"
"::1       localhost @var{host-name}\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:18317
msgid "For most setups this is what you want though if you find yourself in the situation where you want to change the default entries, you can do so in @code{operating-system} via @code{modify-services} (@pxref{Service Reference,@code{modify-services}})."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:18320
msgid "The following example shows how to unset @var{host-name} from being an alias of @code{localhost}."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:18323 guix-git/doc/guix.texi:19513
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:18330
#, no-wrap
msgid ""
"  (essential-services\n"
"   (modify-services\n"
"     (operating-system-default-essential-services this-operating-system)\n"
"     (hosts-service-type config => (list\n"
"                                     (host \"127.0.0.1\" \"localhost\")\n"
"                                     (host \"::1\"       \"localhost\"))))))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:18335
#, no-wrap
msgid "host @var{address} @var{canonical-name} [@var{aliases}]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:18338
msgid "Return a new record for the host at @var{address} with the given @var{canonical-name} and possibly @var{aliases}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:18342
msgid "@var{address} must be a string denoting a valid IPv4 or IPv6 address, and @var{canonical-name} and the strings listed in @var{aliases} must be valid host names."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18344
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "login-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:18347
msgid "Type of the service that provides a console login service, whose value is a @code{<login-configuration>} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18349
#, no-wrap
msgid "{Data Type} login-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18352
#, fuzzy
msgid "Data type representing the configuration of login, which specifies the @acronym{MOTD, message of the day}, among other things."
msgstr "Gerencie a configuração do sistema operacional."

#. type: code{#1}
#: guix-git/doc/guix.texi:18355 guix-git/doc/guix.texi:19309
#, no-wrap
msgid "motd"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:18356
#, no-wrap
msgid "message of the day"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18358 guix-git/doc/guix.texi:19311
msgid "A file-like object containing the ``message of the day''."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18359 guix-git/doc/guix.texi:19312
#: guix-git/doc/guix.texi:22048
#, no-wrap
msgid "@code{allow-empty-passwords?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18362 guix-git/doc/guix.texi:19315
msgid "Allow empty passwords by default so that first-time users can log in when the 'root' account has just been created."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18366
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "mingetty-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:18370
msgid "Type of the service that runs Mingetty, an implementation of the virtual console log-in.  The value for this service is a @code{<mingetty-configuration>} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18372
#, no-wrap
msgid "{Data Type} mingetty-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18375
#, fuzzy
msgid "Data type representing the configuration of Mingetty, which specifies the tty to run, among other things."
msgstr "Gerencie a configuração do sistema operacional."

#. type: code{#1}
#: guix-git/doc/guix.texi:18377 guix-git/doc/guix.texi:18415
#: guix-git/doc/guix.texi:38224
#, no-wrap
msgid "tty"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18379
msgid "The name of the console this Mingetty runs on---e.g., @code{\"tty1\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18380 guix-git/doc/guix.texi:18444
#: guix-git/doc/guix.texi:18606
#, no-wrap
msgid "@code{auto-login} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18384
msgid "When true, this field must be a string denoting the user name under which the system automatically logs in.  When it is @code{#f}, a user name and password must be entered to log in."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18385
#, no-wrap
msgid "@code{login-program} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18389
msgid "This must be either @code{#f}, in which case the default log-in program is used (@command{login} from the Shadow tool suite), or a gexp denoting the name of the log-in program."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18390
#, no-wrap
msgid "@code{login-pause?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18393
msgid "When set to @code{#t} in conjunction with @var{auto-login}, the user will have to press a key before the log-in shell is launched."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18394
#, no-wrap
msgid "@code{clear-on-logout?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18396
msgid "When set to @code{#t}, the screen will be cleared after logout."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18397
#, no-wrap
msgid "@code{mingetty} (default: @var{mingetty})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18399
msgid "The Mingetty package to use."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18403
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "agetty-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:18407
msgid "Type of the service that runs agetty, which implements virtual and serial console log-in.  The value for this service is a @code{<agetty-configuration>} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18409
#, no-wrap
msgid "{Data Type} agetty-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18413
msgid "Data type representing the configuration of agetty, which specifies the tty to run, among other things@footnote{See the @code{agetty(8)} man page for more information.}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18419
msgid "The name of the console this agetty runs on, as a string---e.g., @code{\"ttyS0\"}.  This argument is optional, it will default to a reasonable default serial port used by the kernel Linux."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18423
msgid "For this, if there is a value for an option @code{agetty.tty} in the kernel command line, agetty will extract the device name of the serial port from it and use that."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18427
msgid "If not and if there is a value for an option @code{console} with a tty in the Linux command line, agetty will extract the device name of the serial port from it and use that."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18431
msgid "In both cases, agetty will leave the other serial device settings (baud rate etc.)@: alone---in the hope that Linux pinned them to the correct values."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18432 guix-git/doc/guix.texi:38410
#, no-wrap
msgid "@code{baud-rate} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18435
msgid "A string containing a comma-separated list of one or more baud rates, in descending order."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18436
#, no-wrap
msgid "@code{term} (default: @code{#f})"
msgstr "@code{term} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18439
msgid "A string containing the value used for the @env{TERM} environment variable."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18440
#, no-wrap
msgid "@code{eight-bits?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18443
msgid "When @code{#t}, the tty is assumed to be 8-bit clean, and parity detection is disabled."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18447 guix-git/doc/guix.texi:18609
msgid "When passed a login name, as a string, the specified user will be logged in automatically without prompting for their login name or password."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18448
#, no-wrap
msgid "@code{no-reset?} (default: @code{#f})"
msgstr "@code{no-reset?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18450
msgid "When @code{#t}, don't reset terminal cflags (control modes)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18451
#, no-wrap
msgid "@code{host} (default: @code{#f})"
msgstr "@code{host} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18454
msgid "This accepts a string containing the ``login_host'', which will be written into the @file{/var/run/utmpx} file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18455
#, no-wrap
msgid "@code{remote?} (default: @code{#f})"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18459
msgid "When set to @code{#t} in conjunction with @var{host}, this will add an @code{-r} fakehost option to the command line of the login program specified in @var{login-program}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18460
#, no-wrap
msgid "@code{flow-control?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18462
msgid "When set to @code{#t}, enable hardware (RTS/CTS) flow control."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18463
#, no-wrap
msgid "@code{no-issue?} (default: @code{#f})"
msgstr "@code{no-issue?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18466
msgid "When set to @code{#t}, the contents of the @file{/etc/issue} file will not be displayed before presenting the login prompt."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18467
#, no-wrap
msgid "@code{init-string} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18470
msgid "This accepts a string that will be sent to the tty or modem before sending anything else.  It can be used to initialize a modem."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18471
#, no-wrap
msgid "@code{no-clear?} (default: @code{#f})"
msgstr "@code{no-clear?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18474
msgid "When set to @code{#t}, agetty will not clear the screen before showing the login prompt."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18475
#, no-wrap
msgid "@code{login-program} (default: (file-append shadow \"/bin/login\"))"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18479
msgid "This must be either a gexp denoting the name of a log-in program, or unset, in which case the default value is the @command{login} from the Shadow tool suite."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18480
#, no-wrap
msgid "@code{local-line} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18484
msgid "Control the CLOCAL line flag.  This accepts one of three symbols as arguments, @code{'auto}, @code{'always}, or @code{'never}.  If @code{#f}, the default value chosen by agetty is @code{'auto}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18485
#, no-wrap
msgid "@code{extract-baud?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18488
msgid "When set to @code{#t}, instruct agetty to try to extract the baud rate from the status messages produced by certain types of modems."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18489
#, no-wrap
msgid "@code{skip-login?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18493
msgid "When set to @code{#t}, do not prompt the user for a login name.  This can be used with @var{login-program} field to use non-standard login systems."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18494
#, no-wrap
msgid "@code{no-newline?} (default: @code{#f})"
msgstr "@code{no-newline?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18497
msgid "When set to @code{#t}, do not print a newline before printing the @file{/etc/issue} file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18499
#, no-wrap
msgid "@code{login-options} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18504
msgid "This option accepts a string containing options that are passed to the login program.  When used with the @var{login-program}, be aware that a malicious user could try to enter a login name containing embedded options that could be parsed by the login program."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18505
#, no-wrap
msgid "@code{login-pause} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18509
msgid "When set to @code{#t}, wait for any key before showing the login prompt.  This can be used in conjunction with @var{auto-login} to save memory by lazily spawning shells."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18510 guix-git/doc/guix.texi:33034
#, no-wrap
msgid "@code{chroot} (default: @code{#f})"
msgstr "@code{chroot} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18513
msgid "Change root to the specified directory.  This option accepts a directory path as a string."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18514
#, no-wrap
msgid "@code{hangup?} (default: @code{#f})"
msgstr "@code{hangup?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18517
msgid "Use the Linux system call @code{vhangup} to do a virtual hangup of the specified terminal."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18518
#, no-wrap
msgid "@code{keep-baud?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18522
msgid "When set to @code{#t}, try to keep the existing baud rate.  The baud rates from @var{baud-rate} are used when agetty receives a @key{BREAK} character."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18523
#, no-wrap
msgid "@code{timeout} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18526
msgid "When set to an integer value, terminate if no user name could be read within @var{timeout} seconds."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18527
#, no-wrap
msgid "@code{detect-case?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18533
msgid "When set to @code{#t}, turn on support for detecting an uppercase-only terminal.  This setting will detect a login name containing only uppercase letters as indicating an uppercase-only terminal and turn on some upper-to-lower case conversions.  Note that this will not support Unicode characters."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18534
#, no-wrap
msgid "@code{wait-cr?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18539
msgid "When set to @code{#t}, wait for the user or modem to send a carriage-return or linefeed character before displaying @file{/etc/issue} or login prompt.  This is typically used with the @var{init-string} option."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18540
#, no-wrap
msgid "@code{no-hints?} (default: @code{#f})"
msgstr "@code{no-hints?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18543
msgid "When set to @code{#t}, do not print hints about Num, Caps, and Scroll locks."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18544
#, no-wrap
msgid "@code{no-hostname?} (default: @code{#f})"
msgstr "@code{no-hostname?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18547
msgid "By default, the hostname is printed.  When this option is set to @code{#t}, no hostname will be shown at all."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18548
#, no-wrap
msgid "@code{long-hostname?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18552
msgid "By default, the hostname is only printed until the first dot.  When this option is set to @code{#t}, the fully qualified hostname by @code{gethostname} or @code{getaddrinfo} is shown."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18553
#, no-wrap
msgid "@code{erase-characters} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18556
msgid "This option accepts a string of additional characters that should be interpreted as backspace when the user types their login name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18557
#, no-wrap
msgid "@code{kill-characters} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18561
msgid "This option accepts a string that should be interpreted to mean ``ignore all previous characters'' (also called a ``kill'' character) when the user types their login name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18562
#, no-wrap
msgid "@code{chdir} (default: @code{#f})"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18565
msgid "This option accepts, as a string, a directory path that will be changed to before login."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18566
#, no-wrap
msgid "@code{delay} (default: @code{#f})"
msgstr "@code{delay} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18569
msgid "This options accepts, as an integer, the number of seconds to sleep before opening the tty and displaying the login prompt."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18570
#, no-wrap
msgid "@code{nice} (default: @code{#f})"
msgstr "@code{nice} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18573
msgid "This option accepts, as an integer, the nice value with which to run the @command{login} program."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18574 guix-git/doc/guix.texi:18876
#: guix-git/doc/guix.texi:20229 guix-git/doc/guix.texi:28785
#: guix-git/doc/guix.texi:30610 guix-git/doc/guix.texi:33192
#: guix-git/doc/guix.texi:36043 guix-git/doc/guix.texi:38752
#: guix-git/doc/guix.texi:43115 guix-git/doc/guix.texi:43692
#: guix-git/doc/guix.texi:43728
#, no-wrap
msgid "@code{extra-options} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18577
msgid "This option provides an ``escape hatch'' for the user to provide arbitrary command-line arguments to @command{agetty} as a list of strings."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18578 guix-git/doc/guix.texi:20077
#: guix-git/doc/guix.texi:20185 guix-git/doc/guix.texi:26421
#: guix-git/doc/guix.texi:30286
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{shepherd-requirement} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:18581
msgid "The option can be used to provides extra shepherd requirements (for example @code{'syslogd}) to the respective @code{'term-}* shepherd service."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18585
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "kmscon-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:18589
msgid "Type of the service that runs @uref{https://www.freedesktop.org/wiki/Software/kmscon,kmscon}, which implements virtual console log-in.  The value for this service is a @code{<kmscon-configuration>} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18591
#, no-wrap
msgid "{Data Type} kmscon-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18594
#, fuzzy
msgid "Data type representing the configuration of Kmscon, which specifies the tty to run, among other things."
msgstr "Gerencie a configuração do sistema operacional."

#. type: code{#1}
#: guix-git/doc/guix.texi:18596
#, no-wrap
msgid "virtual-terminal"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18598
msgid "The name of the console this Kmscon runs on---e.g., @code{\"tty1\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18599
#, no-wrap
msgid "@code{login-program} (default: @code{#~(string-append #$shadow \"/bin/login\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18602
msgid "A gexp denoting the name of the log-in program.  The default log-in program is @command{login} from the Shadow tool suite."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18603
#, no-wrap
msgid "@code{login-arguments} (default: @code{'(\"-p\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18605
msgid "A list of arguments to pass to @command{login}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18610
#, no-wrap
msgid "@code{hardware-acceleration?} (default: #f)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18612
msgid "Whether to use hardware acceleration."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18613
#, fuzzy, no-wrap
msgid "@code{font-engine} (default: @code{\"pango\"})"
msgstr "@code{no-newline?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18615
msgid "Font engine used in Kmscon."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18616
#, fuzzy, no-wrap
msgid "@code{font-size} (default: @code{12})"
msgstr "@code{max-zone-size} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18618
msgid "Font size used in Kmscon."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18622
msgid "If this is @code{#f}, Kmscon uses the default keyboard layout---usually US English (``qwerty'') for a 105-key PC keyboard."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18626
msgid "Otherwise this must be a @code{keyboard-layout} object specifying the keyboard layout.  @xref{Keyboard Layout}, for more information on how to specify the keyboard layout."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18627
#, no-wrap
msgid "@code{kmscon} (default: @var{kmscon})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18629
msgid "The Kmscon package to use."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18634
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "nscd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:18637
#, fuzzy
msgid "Type of the service that runs the libc @abbr{nscd, name service cache daemon}, whose value is an @code{<nscd-configuration>} object."
msgstr "Gerencie a configuração do sistema operacional."

#. type: defvar
#: guix-git/doc/guix.texi:18639
msgid "For convenience, the Shepherd service for nscd provides the following actions:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18641
#, no-wrap
msgid "invalidate"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:18642
#, no-wrap
msgid "nscd, cache invalidation"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:18643
#, no-wrap
msgid "cache invalidation, nscd"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18645
msgid "This invalidate the given cache.  For instance, running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:18648
#, no-wrap
msgid "herd invalidate nscd hosts\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18652
msgid "invalidates the host name lookup cache of nscd."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18653
#, no-wrap
msgid "statistics"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18656
msgid "Running @command{herd statistics nscd} displays information about nscd usage and caches."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18659
#, no-wrap
msgid "{Data Type} nscd-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18662
#, fuzzy
msgid "Data type representing the @abbr{nscd, name service cache daemon} configuration."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:18665
#, no-wrap
msgid "@code{name-services} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18668
msgid "List of packages denoting @dfn{name services} that must be visible to the nscd---e.g., @code{(list @var{nss-mdns})}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18669
#, no-wrap
msgid "@code{glibc} (default: @var{glibc})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18672
msgid "Package object denoting the GNU C Library providing the @command{nscd} command."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18673
#, no-wrap
msgid "@code{log-file} (default: @code{\"/var/log/nscd.log\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18676
msgid "Name of the nscd log file.  This is where debugging output goes when @code{debug-level} is strictly positive."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18677
#, no-wrap
msgid "@code{debug-level} (default: @code{0})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18680
msgid "Integer denoting the debugging levels.  Higher numbers mean that more debugging output is logged."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18681
#, no-wrap
msgid "@code{caches} (default: @code{%nscd-default-caches})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18684
msgid "List of @code{<nscd-cache>} objects denoting things to be cached; see below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18688
#, no-wrap
msgid "{Data Type} nscd-cache"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18690
msgid "Data type representing a cache database of nscd and its parameters."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:18693 guix-git/doc/guix.texi:24650
#, no-wrap
msgid "database"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18698
msgid "This is a symbol representing the name of the database to be cached.  Valid values are @code{passwd}, @code{group}, @code{hosts}, and @code{services}, which designate the corresponding NSS database (@pxref{NSS Basics,,, libc, The GNU C Library Reference Manual})."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:18699
#, no-wrap
msgid "positive-time-to-live"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:18700
#, no-wrap
msgid "@code{negative-time-to-live} (default: @code{20})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18703
msgid "A number representing the number of seconds during which a positive or negative lookup result remains in cache."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18704
#, no-wrap
msgid "@code{check-files?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18707
msgid "Whether to check for updates of the files corresponding to @var{database}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18711
msgid "For instance, when @var{database} is @code{hosts}, setting this flag instructs nscd to check for updates in @file{/etc/hosts} and to take them into account."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18712
#, no-wrap
msgid "@code{persistent?} (default: @code{#t})"
msgstr "@code{persistent?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:18714
msgid "Whether the cache should be stored persistently on disk."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18715
#, no-wrap
msgid "@code{shared?} (default: @code{#t})"
msgstr "@code{shared?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:18717
msgid "Whether the cache should be shared among users."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18718
#, no-wrap
msgid "@code{max-database-size} (default: 32@tie{}MiB)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18720
msgid "Maximum size in bytes of the database cache."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18727
#, no-wrap
msgid "%nscd-default-caches"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18730
msgid "List of @code{<nscd-cache>} objects used by default by @code{nscd-configuration} (see above)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18736
msgid "It enables persistent and aggressive caching of service and host name lookups.  The latter provides better host name lookup performance, resilience in the face of unreliable name servers, and also better privacy---often the result of host name lookups is in local cache, so external name servers do not even need to be queried."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:18738
#, no-wrap
msgid "syslog"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:18739 guix-git/doc/guix.texi:19643
#, no-wrap
msgid "logging"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18740
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "syslog-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:18743
msgid "Type of the service that runs the syslog daemon, whose value is a @code{<syslog-configuration>} object."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18749
msgid "To have a modified @code{syslog-configuration} come into effect after reconfiguring your system, the @samp{reload} action should be preferred to restarting the service, as many services such as the login manager depend on it and would be restarted as well:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:18752
#, no-wrap
msgid "# herd reload syslog\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:18756
msgid "which will cause the running @command{syslogd} process to reload its configuration."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18757
#, no-wrap
msgid "{Data Type} syslog-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18759
#, fuzzy
msgid "Data type representing the configuration of the syslog daemon."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:18761
#, no-wrap
msgid "@code{syslogd} (default: @code{#~(string-append #$inetutils \"/libexec/syslogd\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18763
msgid "The syslog daemon to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18764
#, no-wrap
msgid "@code{config-file} (default: @code{%default-syslog.conf})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18768
msgid "The syslog configuration file to use.  @xref{syslogd invocation,,, inetutils, GNU Inetutils}, for more information on the configuration file syntax."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18772
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "guix-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:18776
msgid "This is the type of the service that runs the build daemon, @command{guix-daemon} (@pxref{Invoking guix-daemon}).  Its value must be a @code{guix-configuration} record as described below."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:18779
msgid "guix-configuration-type"
msgstr "guix-configuration-type"

#. type: deftp
#: guix-git/doc/guix.texi:18779
#, no-wrap
msgid "{Data Type} guix-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18782
msgid "This data type represents the configuration of the Guix build daemon.  @xref{Invoking guix-daemon}, for more information."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18784
#, no-wrap
msgid "@code{guix} (default: @var{guix})"
msgstr "@code{guix} (default: @var{guix})"

#. type: table
#: guix-git/doc/guix.texi:18786 guix-git/doc/guix.texi:19109
msgid "The Guix package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18787
#, no-wrap
msgid "@code{build-group} (default: @code{\"guixbuild\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18789
msgid "Name of the group for build user accounts."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18790
#, no-wrap
msgid "@code{build-accounts} (default: @code{10})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18792
msgid "Number of build user accounts to create."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18793
#, no-wrap
msgid "@code{authorize-key?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18800
msgid "Whether to authorize the substitute keys listed in @code{authorized-keys}---by default that of @code{@value{SUBSTITUTE-SERVER-1}} and @code{@value{SUBSTITUTE-SERVER-2}} (@pxref{Substitutes})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18806
msgid "When @code{authorize-key?} is true, @file{/etc/guix/acl} cannot be changed by invoking @command{guix archive --authorize}.  You must instead adjust @code{guix-configuration} as you wish and reconfigure the system.  This ensures that your operating system configuration file is self-contained."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:18813
msgid "When booting or reconfiguring to a system where @code{authorize-key?} is true, the existing @file{/etc/guix/acl} file is backed up as @file{/etc/guix/acl.bak} if it was determined to be a manually modified file.  This is to facilitate migration from earlier versions, which allowed for in-place modifications to @file{/etc/guix/acl}."
msgstr ""

#. type: vindex
#: guix-git/doc/guix.texi:18815
#, no-wrap
msgid "%default-authorized-guix-keys"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18816
#, no-wrap
msgid "@code{authorized-keys} (default: @code{%default-authorized-guix-keys})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18822
msgid "The list of authorized key files for archive imports, as a list of string-valued gexps (@pxref{Invoking guix archive}).  By default, it contains that of @code{@value{SUBSTITUTE-SERVER-1}} and @code{@value{SUBSTITUTE-SERVER-2}} (@pxref{Substitutes}).  See @code{substitute-urls} below for an example on how to change it."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18823
#, no-wrap
msgid "@code{use-substitutes?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18825
msgid "Whether to use substitutes."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18826 guix-git/doc/guix.texi:33289
#, no-wrap
msgid "@code{substitute-urls} (default: @code{%default-substitute-urls})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18828 guix-git/doc/guix.texi:33291
msgid "The list of URLs where to look for substitutes by default."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18835
msgid "Suppose you would like to fetch substitutes from @code{guix.example.org} in addition to @code{@value{SUBSTITUTE-SERVER-1}}.  You will need to do two things: (1) add @code{guix.example.org} to @code{substitute-urls}, and (2) authorize its signing key, having done appropriate checks (@pxref{Substitute Server Authorization}).  The configuration below does exactly that:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:18844
#, no-wrap
msgid ""
"(guix-configuration\n"
"  (substitute-urls\n"
"   (append (list \"https://guix.example.org\")\n"
"           %default-substitute-urls))\n"
"  (authorized-keys\n"
"   (append (list (local-file \"./guix.example.org-key.pub\"))\n"
"           %default-authorized-guix-keys)))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18849
msgid "This example assumes that the file @file{./guix.example.org-key.pub} contains the public key that @code{guix.example.org} uses to sign substitutes."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18850
#, fuzzy, no-wrap
#| msgid "@code{negative-cache?} (default: @code{#t})"
msgid "@code{generate-substitute-key?} (default: @code{#t})"
msgstr "@code{negative-cache?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:18854
msgid "Whether to generate a @dfn{substitute key pair} under @file{/etc/guix/signing-key.pub} and @file{/etc/guix/signing-key.sec} if there is not already one."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18861
msgid "This key pair is used when exporting store items, for instance with @command{guix publish} (@pxref{Invoking guix publish}) or @command{guix archive} (@pxref{Invoking guix archive}).  Generating a key pair takes a few seconds when enough entropy is available and is only done once; you might want to turn it off for instance in a virtual machine that does not need it and where the extra boot time is a problem."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18862
#, no-wrap
msgid "@code{max-silent-time} (default: @code{0})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:18863
#, no-wrap
msgid "@code{timeout} (default: @code{0})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18867
msgid "The number of seconds of silence and the number of seconds of activity, respectively, after which a build process times out.  A value of zero disables the timeout."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18868
#, fuzzy, no-wrap
#| msgid "@code{compression-level} (default: @code{3})"
msgid "@code{log-compression} (default: @code{'gzip})"
msgstr "@code{compression-level} (padrão: @code{3})"

#. type: table
#: guix-git/doc/guix.texi:18871
msgid "The type of compression used for build logs---one of @code{gzip}, @code{bzip2}, or @code{none}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18872
#, no-wrap
msgid "@code{discover?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18878
msgid "List of extra command-line options for @command{guix-daemon}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18879
#, no-wrap
msgid "@code{log-file} (default: @code{\"/var/log/guix-daemon.log\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18882
msgid "File where @command{guix-daemon}'s standard output and standard error are written."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:18883
#, no-wrap
msgid "HTTP proxy, for @code{guix-daemon}"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:18884
#, no-wrap
msgid "proxy, for @code{guix-daemon} HTTP access"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18885
#, no-wrap
msgid "@code{http-proxy} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18888
msgid "The URL of the HTTP and HTTPS proxy used for downloading fixed-output derivations and substitutes."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18891
msgid "It is also possible to change the daemon's proxy at run time through the @code{set-http-proxy} action, which restarts it:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:18894
#, no-wrap
msgid "herd set-http-proxy guix-daemon http://localhost:8118\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18897
msgid "To clear the proxy settings, run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:18900
#, no-wrap
msgid "herd set-http-proxy guix-daemon\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18902
#, no-wrap
msgid "@code{tmpdir} (default: @code{#f})"
msgstr "@code{tmpdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18904
msgid "A directory path where the @command{guix-daemon} will perform builds."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18905
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{environment} (default: @code{'()})"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:18908
msgid "Environment variables to be set before starting the daemon, as a list of @code{key=value} strings."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18912
#, fuzzy, no-wrap
msgid "{Data Type} guix-extension"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:18918
msgid "This data type represents the parameters of the Guix build daemon that are extendable. This is the type of the object that must be used within a guix service extension.  @xref{Service Composition}, for more information."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18920 guix-git/doc/guix.texi:21215
#, no-wrap
msgid "@code{authorized-keys} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:18922
msgid "A list of file-like objects where each element contains a public key."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18923
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{substitute-urls} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:18925
msgid "A list of strings where each element is a substitute URL."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18926
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{chroot-directories} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:18928
msgid "A list of file-like objects or strings pointing to additional directories the build daemon can use."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18931
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "udev-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:18935
msgid "Type of the service that runs udev, a service which populates the @file{/dev} directory dynamically, whose value is a @code{<udev-configuration>} object."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:18939
msgid "This service type can be @emph{extended} using procedures @code{udev-rules-service} along with @code{file->udev-rule} or @code{udev-rule} which simplify the process of writing udev rules."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:18941
#, fuzzy, no-wrap
msgid "{Data Type} udev-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:18943
#, fuzzy
msgid "Data type representing the configuration of udev."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:18945
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{udev} (default: @code{eudev}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:18947
msgid "Package object of the udev service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:18948
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{rules} (default: @var{'()}) (type: list-of-file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:18950
msgid "List of file-like objects denoting udev-rule files."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:18954
#, fuzzy, no-wrap
#| msgid "-t @var{type}"
msgid "udev-rule @var{file-name} @var{contents}"
msgstr "-t @var{tipo}"

#. type: defun
#: guix-git/doc/guix.texi:18957
msgid "Return a udev-rule file named @var{file-name} containing the rules defined by the @var{contents} literal."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:18961
msgid "In the following example, a rule for a USB device is defined to be stored in the file @file{90-usb-thing.rules}.  The rule runs a script upon detecting a USB device with a given product identifier."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:18969
#, no-wrap
msgid ""
"(define %example-udev-rule\n"
"  (udev-rule\n"
"    \"90-usb-thing.rules\"\n"
"    (string-append \"ACTION==\\\"add\\\", SUBSYSTEM==\\\"usb\\\", \"\n"
"                   \"ATTR@{product@}==\\\"Example\\\", \"\n"
"                   \"RUN+=\\\"/path/to/script\\\"\")))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:18972
#, no-wrap
msgid "udev-rules-service @var{name} @var{rules} [#:groups '()]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:18978
msgid "Return a service that extends @code{udev-service-type} with @var{rules} and @code{account-service-type} with @var{groups} as system groups.  This works by creating a singleton service type @code{@var{name}-udev-rules}, of which the returned service is an instance."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:18981
msgid "Here we show how it can be used to extend @code{udev-service-type} with the previously defined rule @code{%example-udev-rule}."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:18988
#, no-wrap
msgid ""
"(operating-system\n"
" ;; @dots{}\n"
" (services\n"
"   (cons (udev-rules-service 'usb-thing %example-udev-rule)\n"
"         %desktop-services)))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:18991
#, no-wrap
msgid "file->udev-rule @var{file-name} @var{file}"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:18994
msgid "Return a udev-rule file named @var{file-name} containing the rules defined within @var{file}, a file-like object."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:18996
msgid "The following example showcases how we can use an existing rule file."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19001
#, no-wrap
msgid ""
"(use-modules (guix download)     ;for url-fetch\n"
"             (guix packages)     ;for origin\n"
"             @dots{})\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19012
#, no-wrap
msgid ""
"(define %android-udev-rules\n"
"  (file->udev-rule\n"
"    \"51-android-udev.rules\"\n"
"    (let ((version \"20170910\"))\n"
"      (origin\n"
"       (method url-fetch)\n"
"       (uri (string-append \"https://raw.githubusercontent.com/M0Rf30/\"\n"
"                           \"android-udev-rules/\" version \"/51-android.rules\"))\n"
"       (sha256\n"
"        (base32 \"0lmmagpyb6xsq6zcr2w1cyx9qmjqmajkvrdbhjx32gqf1d9is003\"))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19021
msgid "Additionally, Guix package definitions can be included in @var{rules} in order to extend the udev rules with the definitions found under their @file{lib/udev/rules.d} sub-directory.  In lieu of the previous @var{file->udev-rule} example, we could have used the @var{android-udev-rules} package which exists in Guix in the @code{(gnu packages android)} module."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19030
msgid "The following example shows how to use the @var{android-udev-rules} package so that the Android tool @command{adb} can detect devices without root privileges.  It also details how to create the @code{adbusers} group, which is required for the proper functioning of the rules defined within the @code{android-udev-rules} package.  To create such a group, we must define it both as part of the @code{supplementary-groups} of our @code{user-account} declaration, as well as in the @var{groups} of the @code{udev-rules-service} procedure."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19035
#, no-wrap
msgid ""
"(use-modules (gnu packages android)  ;for android-udev-rules\n"
"             (gnu system shadow)     ;for user-group\n"
"             @dots{})\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19048
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (users (cons (user-account\n"
"                ;; @dots{}\n"
"                (supplementary-groups\n"
"                 '(\"adbusers\"   ;for adb\n"
"                   \"wheel\" \"netdev\" \"audio\" \"video\")))))\n"
"  ;; @dots{}\n"
"  (services\n"
"    (cons (udev-rules-service 'android android-udev-rules\n"
"                              #:groups '(\"adbusers\"))\n"
"          %desktop-services)))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19050
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "urandom-seed-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:19055
msgid "Save some entropy in @code{%random-seed-file} to seed @file{/dev/urandom} when rebooting.  It also tries to seed @file{/dev/urandom} from @file{/dev/hwrng} while booting, if @file{/dev/hwrng} exists and is readable."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19057
#, no-wrap
msgid "%random-seed-file"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19061
msgid "This is the name of the file where some random bytes are saved by @var{urandom-seed-service} to seed @file{/dev/urandom} when rebooting.  It defaults to @file{/var/lib/random-seed}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19063
#, no-wrap
msgid "mouse"
msgstr "mouse"

#. type: cindex
#: guix-git/doc/guix.texi:19064
#, no-wrap
msgid "gpm"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19065
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "gpm-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:19070
msgid "This is the type of the service that runs GPM, the @dfn{general-purpose mouse daemon}, which provides mouse support to the Linux console.  GPM allows users to use the mouse in the console, notably to select, copy, and paste text."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19073
msgid "The value for services of this type must be a @code{gpm-configuration} (see below).  This service is not part of @code{%base-services}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19075
#, no-wrap
msgid "{Data Type} gpm-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19077
msgid "Data type representing the configuration of GPM."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19079
#, no-wrap
msgid "@code{options} (default: @code{%default-gpm-options})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19084
msgid "Command-line options passed to @command{gpm}.  The default set of options instruct @command{gpm} to listen to mouse events on @file{/dev/input/mice}.  @xref{Command Line,,, gpm, gpm manual}, for more information."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19085
#, no-wrap
msgid "@code{gpm} (default: @code{gpm})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19087
msgid "The GPM package to use."
msgstr "O pacote GPM a ser usado."

#. type: defvar
#: guix-git/doc/guix.texi:19092
#, no-wrap
msgid "guix-publish-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:19096
msgid "This is the service type for @command{guix publish} (@pxref{Invoking guix publish}).  Its value must be a @code{guix-publish-configuration} object, as described below."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19100
msgid "This assumes that @file{/etc/guix} already contains a signing key pair as created by @command{guix archive --generate-key} (@pxref{Invoking guix archive}).  If that is not the case, the service will fail to start."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19102
#, no-wrap
msgid "{Data Type} guix-publish-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19105
msgid "Data type representing the configuration of the @code{guix publish} service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19107
#, no-wrap
msgid "@code{guix} (default: @code{guix})"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19110 guix-git/doc/guix.texi:35901
#, no-wrap
msgid "@code{port} (default: @code{80})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19112
msgid "The TCP port to listen for connections."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19113 guix-git/doc/guix.texi:33172
#: guix-git/doc/guix.texi:37302
#, no-wrap
msgid "@code{host} (default: @code{\"localhost\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19116
msgid "The host (and thus, network interface) to listen to.  Use @code{\"0.0.0.0\"} to listen on all the network interfaces."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19117
#, no-wrap
msgid "@code{advertise?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19120
msgid "When true, advertise the service on the local network @i{via} the DNS-SD protocol, using Avahi."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19124
msgid "This allows neighboring Guix devices with discovery on (see @code{guix-configuration} above) to discover this @command{guix publish} instance and to automatically download substitutes from it."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19125
#, fuzzy, no-wrap
msgid "@code{compression} (default: @code{'((\"gzip\" 3) (\"zstd\" 3))})"
msgstr "@code{compression-level} (padrão: @code{3})"

#. type: table
#: guix-git/doc/guix.texi:19129
msgid "This is a list of compression method/level tuple used when compressing substitutes.  For example, to compress all substitutes with @emph{both} lzip at level 7 and gzip at level 9, write:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19132
#, no-wrap
msgid "'((\"lzip\" 7) (\"gzip\" 9))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19138
msgid "Level 9 achieves the best compression ratio at the expense of increased CPU usage, whereas level 1 achieves fast compression.  @xref{Invoking guix publish}, for more information on the available compression methods and the tradeoffs involved."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19140
msgid "An empty list disables compression altogether."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19141
#, no-wrap
msgid "@code{nar-path} (default: @code{\"nar\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19144
msgid "The URL path at which ``nars'' can be fetched.  @xref{Invoking guix publish, @option{--nar-path}}, for details."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19145
#, no-wrap
msgid "@code{cache} (default: @code{#f})"
msgstr "@code{cache} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19151
msgid "When it is @code{#f}, disable caching and instead generate archives on demand.  Otherwise, this should be the name of a directory---e.g., @code{\"/var/cache/guix/publish\"}---where @command{guix publish} caches archives and meta-data ready to be sent.  @xref{Invoking guix publish, @option{--cache}}, for more information on the tradeoffs involved."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19152 guix-git/doc/guix.texi:37889
#, no-wrap
msgid "@code{workers} (default: @code{#f})"
msgstr "@code{workers} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19156
msgid "When it is an integer, this is the number of worker threads used for caching; when @code{#f}, the number of processors is used.  @xref{Invoking guix publish, @option{--workers}}, for more information."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19157
#, no-wrap
msgid "@code{cache-bypass-threshold} (default: 10 MiB)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19162
msgid "When @code{cache} is true, this is the maximum size in bytes of a store item for which @command{guix publish} may bypass its cache in case of a cache miss.  @xref{Invoking guix publish, @option{--cache-bypass-threshold}}, for more information."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19163 guix-git/doc/guix.texi:37842
#, no-wrap
msgid "@code{ttl} (default: @code{#f})"
msgstr "@code{ttl} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19167
msgid "When it is an integer, this denotes the @dfn{time-to-live} in seconds of the published archives.  @xref{Invoking guix publish, @option{--ttl}}, for more information."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19168 guix-git/doc/guix.texi:37850
#, fuzzy, no-wrap
#| msgid "@code{ttl} (default: @code{#f})"
msgid "@code{negative-ttl} (default: @code{#f})"
msgstr "@code{ttl} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19172
msgid "When it is an integer, this denotes the @dfn{time-to-live} in seconds for the negative lookups.  @xref{Invoking guix publish, @option{--negative-ttl}}, for more information."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19175
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "rngd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:19178
msgid "Type of the service that runs rng-tools rngd, whose value is an @code{<rngd-configuration>} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19180
#, fuzzy, no-wrap
msgid "{Data Type} rngd-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:19182
#, fuzzy
msgid "Data type representing the configuration of rngd."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:19184
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{rng-tools} (default: @code{rng-tools}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:19186
msgid "Package object of the rng-tools rngd."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19187
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{device} (default: @var{\"/dev/hwrng\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:19190
msgid "Path of the device to add to the kernel's entropy pool.  The service will fail if @var{device} does not exist."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19194
#, no-wrap
msgid "session limits"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19195
#, no-wrap
msgid "ulimit"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19196
#, no-wrap
msgid "priority"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19197
#, no-wrap
msgid "realtime"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19198
#, no-wrap
msgid "jackd"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19199
#, no-wrap
msgid "nofile"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19200
#, no-wrap
msgid "open file descriptors"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19202
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "pam-limits-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:19209
msgid "Type of the service that installs a configuration file for the @uref{http://linux-pam.org/Linux-PAM-html/sag-pam_limits.html, @code{pam_limits} module}.  The value for this service type is a list of @code{pam-limits-entry} values, which can be used to specify @code{ulimit} limits and @code{nice} priority limits to user sessions.  By default, the value is the empty list."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19212
msgid "The following limits definition sets two hard and soft limits for all login sessions of users in the @code{realtime} group:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19218
#, no-wrap
msgid ""
"(service pam-limits-service-type\n"
"         (list\n"
"          (pam-limits-entry \"@@realtime\" 'both 'rtprio 99)\n"
"          (pam-limits-entry \"@@realtime\" 'both 'memlock 'unlimited)))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19224
msgid "The first entry increases the maximum realtime priority for non-privileged processes; the second entry lifts any restriction of the maximum address space that can be locked in memory.  These settings are commonly used for real-time audio systems."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19227
msgid "Another useful example is raising the maximum number of open file descriptors that can be used:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19232
#, no-wrap
msgid ""
"(service pam-limits-service-type\n"
"         (list\n"
"          (pam-limits-entry \"*\" 'both 'nofile 100000)))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19240
msgid "In the above example, the asterisk means the limit should apply to any user.  It is important to ensure the chosen value doesn't exceed the maximum system value visible in the @file{/proc/sys/fs/file-max} file, else the users would be prevented from login in.  For more information about the Pluggable Authentication Module (PAM) limits, refer to the @samp{pam_limits} man page from the @code{linux-pam} package."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19242
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "greetd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:19246
msgid "@uref{https://git.sr.ht/~kennylevinsen/greetd, @code{greetd}} is a minimal and flexible login manager daemon, that makes no assumptions about what you want to launch."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19250
msgid "If you can run it from your shell in a TTY, greetd can start it. If it can be taught to speak a simple JSON-based IPC protocol, then it can be a geeter."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19253
msgid "@code{greetd-service-type} provides necessary infrastructure for logging in users, including:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:19257
msgid "@code{greetd} PAM service"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:19260
msgid "Special variation of @code{pam-mount} to mount @code{XDG_RUNTIME_DIR}"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19264
msgid "Here is example of switching from @code{mingetty-service-type} to @code{greetd-service-type}, and how different terminals could be:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19302
#, no-wrap
msgid ""
"  (append\n"
"   (modify-services %base-services\n"
"     ;; greetd-service-type provides \"greetd\" PAM service\n"
"     (delete login-service-type)\n"
"     ;; and can be used in place of mingetty-service-type\n"
"     (delete mingetty-service-type))\n"
"   (list\n"
"    (service greetd-service-type\n"
"             (greetd-configuration\n"
"              (terminals\n"
"               (list\n"
"                ;; we can make any terminal active by default\n"
"                (greetd-terminal-configuration (terminal-vt \"1\") (terminal-switch #t))\n"
"                ;; we can make environment without XDG_RUNTIME_DIR set\n"
"                ;; even provide our own environment variables\n"
"                (greetd-terminal-configuration\n"
"                 (terminal-vt \"2\")\n"
"                 (default-session-command\n"
"                   (greetd-agreety-session\n"
"                    (extra-env '((\"MY_VAR\" . \"1\")))\n"
"                    (xdg-env? #f))))\n"
"                ;; we can use different shell instead of default bash\n"
"                (greetd-terminal-configuration\n"
"                 (terminal-vt \"3\")\n"
"                 (default-session-command\n"
"                   (greetd-agreety-session (command (file-append zsh \"/bin/zsh\")))))\n"
"                ;; we can use any other executable command as greeter\n"
"                (greetd-terminal-configuration\n"
"                 (terminal-vt \"4\")\n"
"                 (default-session-command (program-file \"my-noop-greeter\" #~(exit))))\n"
"                (greetd-terminal-configuration (terminal-vt \"5\"))\n"
"                (greetd-terminal-configuration (terminal-vt \"6\"))))))\n"
"    ;; mingetty-service-type can be used in parallel\n"
"    ;; if needed to do so, do not (delete login-service-type)\n"
"    ;; as illustrated above\n"
"    #| (service mingetty-service-type (mingetty-configuration (tty \"tty8\"))) |#))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19305
#, fuzzy, no-wrap
msgid "{Data Type} greetd-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:19307
#, fuzzy
msgid "Configuration record for the @code{greetd-service-type}."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:19316
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{terminals} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:19319
msgid "List of @code{greetd-terminal-configuration} per terminal for which @code{greetd} should be started."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19320
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{greeter-supplementary-groups} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:19322
msgid "List of groups which should be added to @code{greeter} user. For instance:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19324
#, no-wrap
msgid "(greeter-supplementary-groups '(\"seat\" \"video\"))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19326
msgid "Note that this example will fail if @code{seat} group does not exist."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19329
#, fuzzy, no-wrap
msgid "{Data Type} greetd-terminal-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:19331
#, fuzzy
msgid "Configuration record for per terminal greetd daemon service."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:19333
#, fuzzy, no-wrap
#| msgid "@code{gdm} (default: @code{gdm})"
msgid "@code{greetd} (default: @code{greetd})"
msgstr "@code{gdm} (default: @code{gdm})"

#. type: table
#: guix-git/doc/guix.texi:19335
#, fuzzy
msgid "The greetd package to use."
msgstr "O pacote GPM a ser usado."

#. type: code{#1}
#: guix-git/doc/guix.texi:19336
#, fuzzy, no-wrap
#| msgid "name"
msgid "config-file-name"
msgstr "name"

#. type: table
#: guix-git/doc/guix.texi:19339
msgid "Configuration file name to use for greetd daemon. Generally, autogenerated derivation based on @code{terminal-vt} value."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:19340
#, fuzzy, no-wrap
#| msgid "name"
msgid "log-file-name"
msgstr "name"

#. type: table
#: guix-git/doc/guix.texi:19343
msgid "Log file name to use for greetd daemon. Generally, autogenerated name based on @code{terminal-vt} value."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19344
#, fuzzy, no-wrap
#| msgid "@code{term} (default: @code{#f})"
msgid "@code{terminal-vt} (default: @samp{\"7\"})"
msgstr "@code{term} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19347
msgid "The VT to run on. Use of a specific VT with appropriate conflict avoidance is recommended."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19348
#, fuzzy, no-wrap
#| msgid "@code{term} (default: @code{#f})"
msgid "@code{terminal-switch} (default: @code{#f})"
msgstr "@code{term} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19350
msgid "Make this terminal active on start of @code{greetd}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19351
#, fuzzy, no-wrap
#| msgid "@code{chdir} (default: @code{#f})"
msgid "@code{source-profile?} (default: @code{#t})"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19354
msgid "Whether to source @file{/etc/profile} and @file{~/.profile}, when they exist."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19355
#, fuzzy, no-wrap
#| msgid "@code{user} (default: @var{git})"
msgid "@code{default-session-user} (default: @samp{\"greeter\"})"
msgstr "@code{user} (default: @var{git})"

#. type: table
#: guix-git/doc/guix.texi:19357
msgid "The user to use for running the greeter."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19358
#, fuzzy, no-wrap
msgid "@code{default-session-command} (default: @code{(greetd-agreety-session)})"
msgstr "@code{tmpdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19361
msgid "Can be either instance of @code{greetd-agreety-session} configuration or @code{gexp->script} like object to use as greeter."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19365
#, fuzzy, no-wrap
msgid "{Data Type} greetd-agreety-session"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:19367
#, fuzzy
msgid "Configuration record for the agreety greetd greeter."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:19369
#, fuzzy, no-wrap
#| msgid "@code{gdm} (default: @code{gdm})"
msgid "@code{agreety} (default: @code{greetd})"
msgstr "@code{gdm} (default: @code{gdm})"

#. type: table
#: guix-git/doc/guix.texi:19371
#, fuzzy
#| msgid "Package management commands."
msgid "The package with @command{/bin/agreety} command."
msgstr "Comandos de gerenciamento de pacote."

#. type: item
#: guix-git/doc/guix.texi:19372
#, fuzzy, no-wrap
msgid "@code{command} (default: @code{(file-append bash \"/bin/bash\")})"
msgstr "@code{tmpdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19374
msgid "Command to be started by @command{/bin/agreety} on successful login."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19375
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{command-args} (default: @code{'(\"-l\")})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:19377 guix-git/doc/guix.texi:19401
msgid "Command arguments to pass to command."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19378 guix-git/doc/guix.texi:19423
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{extra-env} (default: @code{'()})"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19380 guix-git/doc/guix.texi:19425
msgid "Extra environment variables to set on login."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19381
#, fuzzy, no-wrap
#| msgid "@code{deny?} (default: @code{#f})"
msgid "@code{xdg-env?} (default: @code{#t})"
msgstr "@code{deny?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19385
msgid "If true @code{XDG_RUNTIME_DIR} and @code{XDG_SESSION_TYPE} will be set before starting command. One should note that, @code{extra-env} variables are set right after mentioned variables, so that they can be overriden."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19389
#, fuzzy, no-wrap
msgid "{Data Type} greetd-wlgreet-session"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:19391
#, fuzzy
msgid "Generic configuration record for the wlgreet greetd greeter."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:19393
#, fuzzy, no-wrap
#| msgid "@code{gdm} (default: @code{gdm})"
msgid "@code{wlgreet} (default: @code{wlgreet})"
msgstr "@code{gdm} (default: @code{gdm})"

#. type: table
#: guix-git/doc/guix.texi:19395
#, fuzzy
#| msgid "Package management commands."
msgid "The package with the @command{/bin/wlgreet} command."
msgstr "Comandos de gerenciamento de pacote."

#. type: item
#: guix-git/doc/guix.texi:19396
#, fuzzy, no-wrap
msgid "@code{command} (default: @code{(file-append sway \"/bin/sway\")})"
msgstr "@code{tmpdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19398
msgid "Command to be started by @command{/bin/wlgreet} on successful login."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19399
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{command-args} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: item
#: guix-git/doc/guix.texi:19402
#, fuzzy, no-wrap
#| msgid "@code{hangup?} (default: @code{#f})"
msgid "@code{output-mode} (default: @code{\"all\"})"
msgstr "@code{hangup?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19404
msgid "Option to use for @code{outputMode} in the TOML configuration file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19405
#, fuzzy, no-wrap
#| msgid "@code{cache} (default: @code{#f})"
msgid "@code{scale} (default: @code{1})"
msgstr "@code{cache} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19407
msgid "Option to use for @code{scale} in the TOML configuration file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19408
#, fuzzy, no-wrap
#| msgid "@code{hangup?} (default: @code{#f})"
msgid "@code{background} (default: @code{'(0 0 0 0.9)})"
msgstr "@code{hangup?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19410
msgid "RGBA list to use as the background colour of the login prompt."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19411
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{headline} (default: @code{'(1 1 1 1)})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:19413
msgid "RGBA list to use as the headline colour of the UI popup."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19414
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{prompt} (default: @code{'(1 1 1 1)})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:19416
msgid "RGBA list to use as the prompt colour of the UI popup."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19417
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{prompt-error} (default: @code{'(1 1 1 1)})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:19419
msgid "RGBA list to use as the error colour of the UI popup."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19420
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{border} (default: @code{'(1 1 1 1)})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:19422
msgid "RGBA list to use as the border colour of the UI popup."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19429
#, fuzzy, no-wrap
msgid "{Data Type} greetd-wlgreet-sway-session"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:19431
#, fuzzy
msgid "Sway-specific configuration record for the wlgreet greetd greeter."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:19433
#, fuzzy, no-wrap
msgid "@code{wlgreet-session} (default: @code{(greetd-wlgreet-session)})"
msgstr "@code{tmpdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19436
msgid "A @code{greetd-wlgreet-session} record for generic wlgreet configuration, on top of the Sway-specific @code{greetd-wlgreet-sway-session}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19437
#, fuzzy, no-wrap
#| msgid "@code{shared?} (default: @code{#t})"
msgid "@code{sway} (default: @code{sway})"
msgstr "@code{shared?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:19439
#, fuzzy
#| msgid "Package management commands."
msgid "The package providing the @command{/bin/sway} command."
msgstr "Comandos de gerenciamento de pacote."

#. type: item
#: guix-git/doc/guix.texi:19440
#, fuzzy, no-wrap
#| msgid "@code{options} (default: @code{#f})"
msgid "@code{sway-configuration} (default: #f)"
msgstr "@code{options} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19443
msgid "File-like object providing an additional Sway configuration file to be prepended to the mandatory part of the configuration."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19447
msgid "Here is an example of a greetd configuration that uses wlgreet and Sway:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19461
#, no-wrap
msgid ""
"  (greetd-configuration\n"
"   ;; We need to give the greeter user these permissions, otherwise\n"
"   ;; Sway will crash on launch.\n"
"   (greeter-supplementary-groups (list \"video\" \"input\" \"seat\"))\n"
"   (terminals\n"
"    (list (greetd-terminal-configuration\n"
"           (terminal-vt \"1\")\n"
"           (terminal-switch #t)\n"
"           (default-session-command\n"
"            (greetd-wlgreet-sway-session\n"
"             (sway-configuration\n"
"              (local-file \"sway-greetd.conf\"))))))))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19467 guix-git/doc/guix.texi:42717
#, no-wrap
msgid "cron"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19468 guix-git/doc/guix.texi:42718
#, no-wrap
msgid "mcron"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19469 guix-git/doc/guix.texi:42719
#, no-wrap
msgid "scheduling jobs"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19476
msgid "The @code{(gnu services mcron)} module provides an interface to GNU@tie{}mcron, a daemon to run jobs at scheduled times (@pxref{Top,,, mcron, GNU@tie{}mcron}).  GNU@tie{}mcron is similar to the traditional Unix @command{cron} daemon; the main difference is that it is implemented in Guile Scheme, which provides a lot of flexibility when specifying the scheduling of jobs and their actions."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19484
msgid "The example below defines an operating system that runs the @command{updatedb} (@pxref{Invoking updatedb,,, find, Finding Files})  and the @command{guix gc} commands (@pxref{Invoking guix gc}) daily, as well as the @command{mkid} command on behalf of an unprivileged user (@pxref{mkid invocation,,, idutils, ID Database Utilities}).  It uses gexps to introduce job definitions that are passed to mcron (@pxref{G-Expressions})."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19488
#, no-wrap
msgid ""
"(use-modules (guix) (gnu) (gnu services mcron))\n"
"(use-package-modules base idutils)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19497
#, no-wrap
msgid ""
"(define updatedb-job\n"
"  ;; Run 'updatedb' at 3AM every day.  Here we write the\n"
"  ;; job's action as a Scheme procedure.\n"
"  #~(job '(next-hour '(3))\n"
"         (lambda ()\n"
"           (system* (string-append #$findutils \"/bin/updatedb\")\n"
"                    \"--prunepaths=/tmp /var/tmp /gnu/store\"))\n"
"         \"updatedb\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19503
#, no-wrap
msgid ""
"(define garbage-collector-job\n"
"  ;; Collect garbage 5 minutes after midnight every day.\n"
"  ;; The job's action is a shell command.\n"
"  #~(job \"5 0 * * *\"            ;Vixie cron syntax\n"
"         \"guix gc -F 1G\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19510
#, no-wrap
msgid ""
"(define idutils-job\n"
"  ;; Update the index database as user \"charlie\" at 12:15PM\n"
"  ;; and 19:15PM.  This runs from the user's home directory.\n"
"  #~(job '(next-minute-from (next-hour '(12 19)) '(15))\n"
"         (string-append #$idutils \"/bin/mkid src\")\n"
"         #:user \"charlie\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19523
#, no-wrap
msgid ""
"  ;; %BASE-SERVICES already includes an instance of\n"
"  ;; 'mcron-service-type', which we extend with additional\n"
"  ;; jobs using 'simple-service'.\n"
"  (services (cons (simple-service 'my-cron-jobs\n"
"                                   mcron-service-type\n"
"                                   (list garbage-collector-job\n"
"                                         updatedb-job\n"
"                                         idutils-job))\n"
"                  %base-services)))\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:19531
msgid "When providing the action of a job specification as a procedure, you should provide an explicit name for the job via the optional 3rd argument as done in the @code{updatedb-job} example above.  Otherwise, the job would appear as ``Lambda function'' in the output of @command{herd schedule mcron}, which is not nearly descriptive enough!"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:19537
msgid "Avoid calling the Guile procedures @code{execl}, @code{execle} or @code{execlp} inside a job specification, else mcron won't be able to output the completion status of the job."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19544
msgid "For more complex jobs defined in Scheme where you need control over the top level, for instance to introduce a @code{use-modules} form, you can move your code to a separate program using the @code{program-file} procedure of the @code{(guix gexp)} module (@pxref{G-Expressions}).  The example below illustrates that."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19560
#, no-wrap
msgid ""
"(define %battery-alert-job\n"
"  ;; Beep when the battery percentage falls below %MIN-LEVEL.\n"
"  #~(job\n"
"     '(next-minute (range 0 60 1))\n"
"     #$(program-file\n"
"        \"battery-alert.scm\"\n"
"        (with-imported-modules (source-module-closure\n"
"                                '((guix build utils)))\n"
"          #~(begin\n"
"              (use-modules (guix build utils)\n"
"                           (ice-9 popen)\n"
"                           (ice-9 regex)\n"
"                           (ice-9 textual-ports)\n"
"                           (srfi srfi-2))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19562
#, no-wrap
msgid ""
"              (define %min-level 20)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19573
#, no-wrap
msgid ""
"              (setenv \"LC_ALL\" \"C\")     ;ensure English output\n"
"              (and-let* ((input-pipe (open-pipe*\n"
"                                      OPEN_READ\n"
"                                      #$(file-append acpi \"/bin/acpi\")))\n"
"                         (output (get-string-all input-pipe))\n"
"                         (m (string-match \"Discharging, ([0-9]+)%\" output))\n"
"                         (level (string->number (match:substring m 1)))\n"
"                         ((< level %min-level)))\n"
"                (format #t \"warning: Battery level is low (~a%)~%\" level)\n"
"                (invoke #$(file-append beep \"/bin/beep\") \"-r5\")))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19578
msgid "@xref{Guile Syntax, mcron job specifications,, mcron, GNU@tie{}mcron}, for more information on mcron job specifications.  Below is the reference of the mcron service."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19581
msgid "On a running system, you can use the @code{schedule} action of the service to visualize the mcron jobs that will be executed next:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:19584
#, no-wrap
msgid "# herd schedule mcron\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19589
msgid "The example above lists the next five tasks that will be executed, but you can also specify the number of tasks to display:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:19592
#, no-wrap
msgid "# herd schedule mcron 10\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19594
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "mcron-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:19597
msgid "This is the type of the @code{mcron} service, whose value is an @code{mcron-configuration} object."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19602 guix-git/doc/guix.texi:42738
msgid "This service type can be the target of a service extension that provides additional job specifications (@pxref{Service Composition}).  In other words, it is possible to define services that provide additional mcron jobs to run."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19607
#, no-wrap
msgid "{Data Type} mcron-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19609
msgid "Available @code{mcron-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19611 guix-git/doc/guix.texi:42747
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{mcron} (default: @code{mcron}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:19613 guix-git/doc/guix.texi:42749
msgid "The mcron package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19614 guix-git/doc/guix.texi:42750
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{jobs} (default: @code{'()}) (type: list-of-gexps)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:19618 guix-git/doc/guix.texi:42754
msgid "This is a list of gexps (@pxref{G-Expressions}), where each gexp corresponds to an mcron job specification (@pxref{Syntax, mcron job specifications,, mcron,GNU@tie{}mcron})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19619 guix-git/doc/guix.texi:42755
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{log?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19621 guix-git/doc/guix.texi:42757
msgid "Log messages to standard output."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19622
#, fuzzy, no-wrap
msgid "@code{log-file} (default: @code{\"/var/log/mcron.log\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19624
#, fuzzy
#| msgid "Log Rotation"
msgid "Log file location."
msgstr "Rotação de log"

#. type: item
#: guix-git/doc/guix.texi:19625 guix-git/doc/guix.texi:42758
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{log-format} (default: @code{\"~1@@*~a ~a: ~a~%\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:19630
msgid "@code{(ice-9 format)} format string for log messages.  The default value produces messages like @samp{@var{pid} @var{name}: @var{message}} (@pxref{Invoking mcron, Invoking,, mcron,GNU@tie{}mcron}).  Each message is also prefixed by a timestamp by GNU Shepherd."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19631
#, fuzzy, no-wrap
msgid "@code{date-format} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19633
msgid "@code{(srfi srfi-19)} format string for date."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19641
#, no-wrap
msgid "rottlog"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19642
#, no-wrap
msgid "log rotation"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19649
msgid "Log files such as those found in @file{/var/log} tend to grow endlessly, so it's a good idea to @dfn{rotate} them once in a while---i.e., archive their contents in separate files, possibly compressed.  The @code{(gnu services admin)} module provides an interface to GNU@tie{}Rot[t]log, a log rotation tool (@pxref{Top,,, rottlog, GNU Rot[t]log Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19655
msgid "This service is part of @code{%base-services}, and thus enabled by default, with the default settings, for commonly encountered log files.  The example below shows how to extend it with an additional @dfn{rotation}, should you need to do that (usually, services that produce log files already take care of that):"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19659
#, no-wrap
msgid ""
"(use-modules (guix) (gnu))\n"
"(use-service-modules admin)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19663
#, no-wrap
msgid ""
"(define my-log-files\n"
"  ;; Log files that I want to rotate.\n"
"  '(\"/var/log/something.log\" \"/var/log/another.log\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19672
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (services (cons (simple-service 'rotate-my-stuff\n"
"                                  rottlog-service-type\n"
"                                  (list (log-rotation\n"
"                                         (frequency 'daily)\n"
"                                         (files my-log-files))))\n"
"                  %base-services)))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19674
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "rottlog-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:19677
msgid "This is the type of the Rottlog service, whose value is a @code{rottlog-configuration} object."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19680
msgid "Other services can extend this one with new @code{log-rotation} objects (see below), thereby augmenting the set of files to be rotated."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19683
msgid "This service type can define mcron jobs (@pxref{Scheduled Job Execution}) to run the rottlog service."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19685
#, no-wrap
msgid "{Data Type} rottlog-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19687
msgid "Data type representing the configuration of rottlog."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19689
#, no-wrap
msgid "@code{rottlog} (default: @code{rottlog})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19691
msgid "The Rottlog package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19692
#, no-wrap
msgid "@code{rc-file} (default: @code{(file-append rottlog \"/etc/rc\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19695
msgid "The Rottlog configuration file to use (@pxref{Mandatory RC Variables,,, rottlog, GNU Rot[t]log Manual})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19696
#, no-wrap
msgid "@code{rotations} (default: @code{%default-rotations})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19698
msgid "A list of @code{log-rotation} objects as defined below."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:19699
#, no-wrap
msgid "jobs"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19702
msgid "This is a list of gexps where each gexp corresponds to an mcron job specification (@pxref{Scheduled Job Execution})."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19705
#, no-wrap
msgid "{Data Type} log-rotation"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19707
msgid "Data type representing the rotation of a group of log files."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19711
msgid "Taking an example from the Rottlog manual (@pxref{Period Related File Examples,,, rottlog, GNU Rot[t]log Manual}), a log rotation might be defined like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19720
#, no-wrap
msgid ""
"(log-rotation\n"
"  (frequency 'daily)\n"
"  (files '(\"/var/log/apache/*\"))\n"
"  (options '(\"storedir apache-archives\"\n"
"             \"rotate 6\"\n"
"             \"notifempty\"\n"
"             \"nocompress\")))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19723
msgid "The list of fields is as follows:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19725
#, no-wrap
msgid "@code{frequency} (default: @code{'weekly})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19727
msgid "The log rotation frequency, a symbol."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19730
msgid "The list of files or file glob patterns to rotate."
msgstr ""

#. type: vindex
#: guix-git/doc/guix.texi:19731
#, no-wrap
msgid "%default-log-rotation-options"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19732
#, fuzzy, no-wrap
msgid "@code{options} (default: @code{%default-log-rotation-options})"
msgstr "@code{options} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19735
msgid "The list of rottlog options for this rotation (@pxref{Configuration parameters,,, rottlog, GNU Rot[t]log Manual})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19736
#, no-wrap
msgid "@code{post-rotate} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19738
msgid "Either @code{#f} or a gexp to execute once the rotation has completed."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19741
#, no-wrap
msgid "%default-rotations"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19744
msgid "Specifies weekly rotation of @code{%rotated-files} and of @file{/var/log/guix-daemon.log}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19746
#, no-wrap
msgid "%rotated-files"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19750
msgid "The list of syslog-controlled files to be rotated.  By default it is: @code{'(\"/var/log/messages\" \"/var/log/secure\" \"/var/log/debug\" \\ \"/var/log/maillog\")}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19758
msgid "Some log files just need to be deleted periodically once they are old, without any other criterion and without any archival step.  This is the case of build logs stored by @command{guix-daemon} under @file{/var/log/guix/drvs} (@pxref{Invoking guix-daemon}).  The @code{log-cleanup} service addresses this use case.  For example, @code{%base-services} (@pxref{Base Services}) includes the following:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19764
#, no-wrap
msgid ""
";; Periodically delete old build logs.\n"
"(service log-cleanup-service-type\n"
"         (log-cleanup-configuration\n"
"          (directory \"/var/log/guix/drvs\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19767
msgid "That ensures build logs do not accumulate endlessly."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19768
#, fuzzy, no-wrap
msgid "log-cleanup-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:19771
msgid "This is the type of the service to delete old logs.  Its value must be a @code{log-cleanup-configuration} record as described below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19773
#, fuzzy, no-wrap
msgid "{Data Type} log-cleanup-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:19775
#, fuzzy
msgid "Data type representing the log cleanup configuration"
msgstr "Gerencie a configuração do sistema operacional."

#. type: code{#1}
#: guix-git/doc/guix.texi:19777
#, fuzzy, no-wrap
#| msgid "state directory"
msgid "directory"
msgstr "diretório de estado"

#. type: table
#: guix-git/doc/guix.texi:19779
msgid "Name of the directory containing log files."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19780
#, fuzzy, no-wrap
#| msgid "@code{port} (default: @code{\"6600\"})"
msgid "@code{expiry} (default: @code{(* 6 30 24 3600)})"
msgstr "@code{porta} (default: @code{\"6600\"})"

#. type: table
#: guix-git/doc/guix.texi:19783
msgid "Age in seconds after which a file is subject to deletion (six months by default)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19784
#, fuzzy, no-wrap
msgid "@code{schedule} (default: @code{\"30 12 01,08,15,22 * *\"})"
msgstr "@code{porta} (default: @code{15000})"

#. type: table
#: guix-git/doc/guix.texi:19787
msgid "String or gexp denoting the corresponding mcron job schedule (@pxref{Scheduled Job Execution})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19790
#, no-wrap
msgid "logging, anonymization"
msgstr ""

#. type: subheading
#: guix-git/doc/guix.texi:19791
#, fuzzy, no-wrap
#| msgid "Sound Services"
msgid "Anonip Service"
msgstr "Serviços de som"

#. type: Plain text
#: guix-git/doc/guix.texi:19796
msgid "Anonip is a privacy filter that removes IP address from web server logs.  This service creates a FIFO and filters any written lines with anonip before writing the filtered log to a target file."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19800
msgid "The following example sets up the FIFO @file{/var/run/anonip/https.access.log} and writes the filtered log file @file{/var/log/anonip/https.access.log}."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19806
#, no-wrap
msgid ""
"(service anonip-service-type\n"
"         (anonip-configuration\n"
"           (input  \"/var/run/anonip/https.access.log\")\n"
"           (output \"/var/log/anonip/https.access.log\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19811
msgid "Configure your web server to write its logs to the FIFO at @file{/var/run/anonip/https.access.log} and collect the anonymized log file at @file{/var/web-logs/https.access.log}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19812
#, fuzzy, no-wrap
msgid "{Data Type} anonip-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:19815
#, fuzzy
msgid "This data type represents the configuration of anonip.  It has the following parameters:"
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:19817
#, fuzzy, no-wrap
#| msgid "@code{hangup?} (default: @code{#f})"
msgid "@code{anonip} (default: @code{anonip})"
msgstr "@code{hangup?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19819
#, fuzzy
#| msgid "The GPM package to use."
msgid "The anonip package to use."
msgstr "O pacote GPM a ser usado."

#. type: code{#1}
#: guix-git/doc/guix.texi:19820
#, no-wrap
msgid "input"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19823
msgid "The file name of the input log file to process.  The service creates a FIFO of this name.  The web server should write its logs to this FIFO."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:19824
#, no-wrap
msgid "output"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19826
#, fuzzy
#| msgid "The host name of the remote machine."
msgid "The file name of the processed log file."
msgstr "O nome de host da máquina remota."

#. type: deftp
#: guix-git/doc/guix.texi:19829
#, fuzzy
#| msgid "The following command-line options are supported:"
msgid "The following optional settings may be provided:"
msgstr "As seguintes opções de linha de comando são suportadas:"

#. type: code{#1}
#: guix-git/doc/guix.texi:19831
#, no-wrap
msgid "skip-private?"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19833
msgid "When @code{#true} do not mask addresses in private ranges."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:19834
#, no-wrap
msgid "column"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19837
msgid "A 1-based indexed column number.  Assume IP address is in the specified column (default is 1)."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:19838
#, no-wrap
msgid "replacement"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19840
msgid "Replacement string in case address parsing fails, e.g. @code{\"0.0.0.0\"}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:19841
#, no-wrap
msgid "ipv4mask"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19843
msgid "Number of bits to mask in IPv4 addresses."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:19844
#, no-wrap
msgid "ipv6mask"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19846
msgid "Number of bits to mask in IPv6 addresses."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:19847
#, fuzzy, no-wrap
#| msgid "Requirements"
msgid "increment"
msgstr "Requisitos"

#. type: table
#: guix-git/doc/guix.texi:19849
msgid "Increment the IP address by the given number.  By default this is zero."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:19850
#, no-wrap
msgid "delimiter"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19852
msgid "Log delimiter string."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:19853
#, no-wrap
msgid "regex"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19855
msgid "Regular expression for detecting IP addresses.  Use this instead of @code{column}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19870
msgid "The @code{(gnu services networking)} module provides services to configure network interfaces and set up networking on your machine.  Those services provide different ways for you to set up your machine: by declaring a static network configuration, by running a Dynamic Host Configuration Protocol (DHCP) client, or by running daemons such as NetworkManager and Connman that automate the whole process, automatically adapt to connectivity changes, and provide a high-level user interface."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19876
msgid "On a laptop, NetworkManager and Connman are by far the most convenient options, which is why the default desktop services include NetworkManager (@pxref{Desktop Services, @code{%desktop-services}}).  For a server, or for a virtual machine or a container, static network configuration or a simple DHCP client are often more appropriate."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:19879
msgid "This section describes the various network setup services available, starting with static network configuration."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19880
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "static-networking-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:19885
msgid "This is the type for statically-configured network interfaces.  Its value must be a list of @code{static-networking} records.  Each of them declares a set of @dfn{addresses}, @dfn{routes}, and @dfn{links}, as shown below."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19886
#, no-wrap
msgid "network interface controller (NIC)"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:19887
#, no-wrap
msgid "NIC, networking interface controller"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19890
msgid "Here is the simplest configuration, with only one network interface controller (NIC) and only IPv4 connectivity:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19904
#, no-wrap
msgid ""
";; Static networking for one NIC, IPv4-only.\n"
"(service static-networking-service-type\n"
"         (list (static-networking\n"
"                (addresses\n"
"                 (list (network-address\n"
"                        (device \"eno1\")\n"
"                        (value \"10.0.2.15/24\"))))\n"
"                (routes\n"
"                 (list (network-route\n"
"                        (destination \"default\")\n"
"                        (gateway \"10.0.2.2\"))))\n"
"                (name-servers '(\"10.0.2.3\")))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:19913
msgid "The snippet above can be added to the @code{services} field of your operating system configuration (@pxref{Using the Configuration System}).  It will configure your machine to have 10.0.2.15 as its IP address, with a 24-bit netmask for the local network---meaning that any 10.0.2.@var{x} address is on the local area network (LAN).  Traffic to addresses outside the local network is routed @i{via} 10.0.2.2.  Host names are resolved by sending domain name system (DNS) queries to 10.0.2.3."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19915
#, fuzzy, no-wrap
#| msgid "{Data Type} build-machine"
msgid "{Data Type} static-networking"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:19917
#, fuzzy
msgid "This is the data type representing a static network configuration."
msgstr "Gerencie a configuração do sistema operacional."

#. type: deftp
#: guix-git/doc/guix.texi:19921
msgid "As an example, here is how you would declare the configuration of a machine with a single network interface controller (NIC) available as @code{eno1}, and with one IPv4 and one IPv6 address:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:19938
#, no-wrap
msgid ""
";; Network configuration for one NIC, IPv4 + IPv6.\n"
"(static-networking\n"
" (addresses (list (network-address\n"
"                   (device \"eno1\")\n"
"                   (value \"10.0.2.15/24\"))\n"
"                  (network-address\n"
"                   (device \"eno1\")\n"
"                   (value \"2001:123:4567:101::1/64\"))))\n"
" (routes (list (network-route\n"
"                (destination \"default\")\n"
"                (gateway \"10.0.2.2\"))\n"
"               (network-route\n"
"                (destination \"default\")\n"
"                (gateway \"2020:321:4567:42::1\"))))\n"
" (name-servers '(\"10.0.2.3\")))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19944
msgid "If you are familiar with the @command{ip} command of the @uref{https://wiki.linuxfoundation.org/networking/iproute2, @code{iproute2} package} found on Linux-based systems, the declaration above is equivalent to typing:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:19950
#, no-wrap
msgid ""
"ip address add 10.0.2.15/24 dev eno1\n"
"ip address add 2001:123:4567:101::1/64 dev eno1\n"
"ip route add default via inet 10.0.2.2\n"
"ip route add default via inet6 2020:321:4567:42::1\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19955
msgid "Run @command{man 8 ip} for more info.  Venerable GNU/Linux users will certainly know how to do it with @command{ifconfig} and @command{route}, but we'll spare you that."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19957
msgid "The available fields of this data type are as follows:"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:19959
#, no-wrap
msgid "addresses"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:19960
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{links} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: itemx
#: guix-git/doc/guix.texi:19961
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{routes} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:19964
msgid "The list of @code{network-address}, @code{network-link}, and @code{network-route} records for this network (see below)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19965
#, fuzzy, no-wrap
msgid "@code{name-servers} (default: @code{'()})"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:19968
msgid "The list of IP addresses (strings) of domain name servers.  These IP addresses go to @file{/etc/resolv.conf}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19969
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{provision} (default: @code{'(networking)})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:19972
msgid "If true, this should be a list of symbols for the Shepherd service corresponding to this network configuration."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19973
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{requirement} (default @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:19975
msgid "The list of Shepherd services depended on."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:19978
#, fuzzy, no-wrap
msgid "{Data Type} network-address"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:19981
msgid "This is the data type representing the IP address of a network interface."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19986
msgid "The name of the network interface for this address---e.g., @code{\"eno1\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19987
#, no-wrap
msgid "value"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19991
msgid "The actual IP address and network mask, in @uref{https://en.wikipedia.org/wiki/CIDR#CIDR_notation, @acronym{CIDR, Classless Inter-Domain Routing} notation}, as a string."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19995
msgid "For example, @code{\"10.0.2.15/24\"} denotes IPv4 address 10.0.2.15 on a 24-bit sub-network---all 10.0.2.@var{x} addresses are on the same local network."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:19996
#, no-wrap
msgid "ipv6?"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:19999
msgid "Whether @code{value} denotes an IPv6 address.  By default this is automatically determined."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20002
#, fuzzy, no-wrap
#| msgid "{Data Type} build-machine"
msgid "{Data Type} network-route"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:20004
msgid "This is the data type representing a network route."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:20006
#, fuzzy, no-wrap
#| msgid "deduplication"
msgid "destination"
msgstr "deduplicação"

#. type: table
#: guix-git/doc/guix.texi:20009
msgid "The route destination (a string), either an IP address and network mask or @code{\"default\"} to denote the default route."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20010
#, fuzzy, no-wrap
#| msgid "@code{chdir} (default: @code{#f})"
msgid "@code{source} (default: @code{#f})"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:20012
#, fuzzy
#| msgid "The rottlog service."
msgid "The route source."
msgstr "O serviço rottlog."

#. type: item
#: guix-git/doc/guix.texi:20013 guix-git/doc/guix.texi:39778
#, no-wrap
msgid "@code{device} (default: @code{#f})"
msgstr "@code{device} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:20015
msgid "The device used for this route---e.g., @code{\"eno2\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20016
#, fuzzy, no-wrap
#| msgid "@code{ipv6?} (default: @code{#t})"
msgid "@code{ipv6?} (default: auto)"
msgstr "@code{ipv6?} (default: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:20019
msgid "Whether this is an IPv6 route.  By default this is automatically determined based on @code{destination} or @code{gateway}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20020
#, fuzzy, no-wrap
#| msgid "@code{delay} (default: @code{#f})"
msgid "@code{gateway} (default: @code{#f})"
msgstr "@code{delay} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:20022
msgid "IP address (a string) through which traffic is routed."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20025
#, fuzzy, no-wrap
#| msgid "{Data Type} build-machine"
msgid "{Data Type} network-link"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:20028
msgid "Data type for a network link (@pxref{Link,,, guile-netlink, Guile-Netlink Manual})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20032
msgid "The name of the link---e.g., @code{\"v0p0\"}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20035
msgid "A symbol denoting the type of the link---e.g., @code{'veth}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20038
msgid "List of arguments for this type of link."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20041
#, no-wrap
msgid "loopback device"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20042
#, fuzzy, no-wrap
msgid "%loopback-static-networking"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20046
msgid "This is the @code{static-networking} record representing the ``loopback device'', @code{lo}, for IP addresses 127.0.0.1 and ::1, and providing the @code{loopback} Shepherd service."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20048
#, no-wrap
msgid "networking, with QEMU"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20049
#, fuzzy, no-wrap
#| msgid "Networking"
msgid "QEMU, networking"
msgstr "Rede"

#. type: defvar
#: guix-git/doc/guix.texi:20050
#, fuzzy, no-wrap
msgid "%qemu-static-networking"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20054
msgid "This is the @code{static-networking} record representing network setup when using QEMU's user-mode network stack on @code{eth0} (@pxref{Using the user mode network stack,,, QEMU, QEMU Documentation})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20056
#, no-wrap
msgid "DHCP, networking service"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20057
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "dhcp-client-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20060
msgid "This is the type of services that run @var{dhcp}, a Dynamic Host Configuration Protocol (DHCP) client."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20062
#, fuzzy, no-wrap
msgid "{Data Type} dhcp-client-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:20064
#, fuzzy
msgid "Data type representing the configuration of the DHCP client service."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:20066 guix-git/doc/guix.texi:20323
#, no-wrap
msgid "@code{package} (default: @code{isc-dhcp})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20068
#, fuzzy
msgid "DHCP client package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:20069
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{interfaces} (default: @code{'all})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:20072
msgid "Either @code{'all} or the list of interface names that the DHCP client should listen on---e.g., @code{'(\"eno1\")}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20076
msgid "When set to @code{'all}, the DHCP client listens on all the available non-loopback interfaces that can be activated.  Otherwise the DHCP client listens only on the specified interfaces."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20082 guix-git/doc/guix.texi:20109
#: guix-git/doc/guix.texi:20190
msgid "This option can be used to provide a list of symbols naming Shepherd services that this service will depend on, such as @code{'wpa-supplicant} or @code{'iwd} if you require authenticated access for encrypted WiFi or Ethernet networks."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20085
#, no-wrap
msgid "NetworkManager"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20087
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "network-manager-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20092
msgid "This is the service type for the @uref{https://wiki.gnome.org/Projects/NetworkManager, NetworkManager} service. The value for this service type is a @code{network-manager-configuration} record."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20095 guix-git/doc/guix.texi:20246
#: guix-git/doc/guix.texi:20275
msgid "This service is part of @code{%desktop-services} (@pxref{Desktop Services})."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20097
#, no-wrap
msgid "{Data Type} network-manager-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20099
msgid "Data type representing the configuration of NetworkManager."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20101
#, no-wrap
msgid "@code{network-manager} (default: @code{network-manager})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20103
msgid "The NetworkManager package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20104
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{shepherd-requirement} (default: @code{'(wpa-supplicant)})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: item
#: guix-git/doc/guix.texi:20110
#, no-wrap
msgid "@code{dns} (default: @code{\"default\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20113
msgid "Processing mode for DNS, which affects how NetworkManager uses the @code{resolv.conf} configuration file."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20118
msgid "NetworkManager will update @code{resolv.conf} to reflect the nameservers provided by currently active connections."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20119
#, no-wrap
msgid "dnsmasq"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20123
msgid "NetworkManager will run @code{dnsmasq} as a local caching nameserver, using a @dfn{conditional forwarding} configuration if you are connected to a VPN, and then update @code{resolv.conf} to point to the local nameserver."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20129
msgid "With this setting, you can share your network connection.  For example when you want to share your network connection to another laptop @i{via} an Ethernet cable, you can open @command{nm-connection-editor} and configure the Wired connection's method for IPv4 and IPv6 to be ``Shared to other computers'' and reestablish the connection (or reboot)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20136
msgid "You can also set up a @dfn{host-to-guest connection} to QEMU VMs (@pxref{Installing Guix in a VM}).  With a host-to-guest connection, you can e.g.@: access a Web server running on the VM (@pxref{Web Services}) from a Web browser on your host system, or connect to the VM @i{via} SSH (@pxref{Networking Services, @code{openssh-service-type}}).  To set up a host-to-guest connection, run this command once:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:20143
#, no-wrap
msgid ""
"nmcli connection add type tun \\\n"
" connection.interface-name tap0 \\\n"
" tun.mode tap tun.owner $(id -u) \\\n"
" ipv4.method shared \\\n"
" ipv4.addresses 172.28.112.1/24\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20148
msgid "Then each time you launch your QEMU VM (@pxref{Running Guix in a VM}), pass @option{-nic tap,ifname=tap0,script=no,downscript=no} to @command{qemu-system-...}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20151
msgid "NetworkManager will not modify @code{resolv.conf}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20153
#, no-wrap
msgid "@code{vpn-plugins} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20157
msgid "This is the list of available plugins for virtual private networks (VPNs).  An example of this is the @code{network-manager-openvpn} package, which allows NetworkManager to manage VPNs @i{via} OpenVPN."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20161
#, no-wrap
msgid "Connman"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20162
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "connman-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20165
msgid "This is the service type to run @url{https://01.org/connman,Connman}, a network connection manager."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20168
msgid "Its value must be an @code{connman-configuration} record as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:20173
#, no-wrap
msgid ""
"(service connman-service-type\n"
"         (connman-configuration\n"
"           (disable-vpn? #t)))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20176
msgid "See below for details about @code{connman-configuration}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20178
#, no-wrap
msgid "{Data Type} connman-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20180
msgid "Data Type representing the configuration of connman."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20182
#, no-wrap
msgid "@code{connman} (default: @var{connman})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20184
msgid "The connman package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20191
#, no-wrap
msgid "@code{disable-vpn?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20193
msgid "When true, disable connman's vpn plugin."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20197
#, no-wrap
msgid "WPA Supplicant"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20198
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "wpa-supplicant-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20202
msgid "This is the service type to run @url{https://w1.fi/wpa_supplicant/,WPA supplicant}, an authentication daemon required to authenticate against encrypted WiFi or ethernet networks."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20204
#, no-wrap
msgid "{Data Type} wpa-supplicant-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20206
msgid "Data type representing the configuration of WPA Supplicant."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20208 guix-git/doc/guix.texi:37408
msgid "It takes the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20210
#, no-wrap
msgid "@code{wpa-supplicant} (default: @code{wpa-supplicant})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20212
msgid "The WPA Supplicant package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20213
#, no-wrap
msgid "@code{requirement} (default: @code{'(user-processes loopback syslogd)}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20215
msgid "List of services that should be started before WPA Supplicant starts."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20216
#, no-wrap
msgid "@code{dbus?} (default: @code{#t})"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:20218
msgid "Whether to listen for requests on D-Bus."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20219
#, no-wrap
msgid "@code{pid-file} (default: @code{\"/var/run/wpa_supplicant.pid\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20221
msgid "Where to store the PID file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20222 guix-git/doc/guix.texi:35670
#: guix-git/doc/guix.texi:35812
#, no-wrap
msgid "@code{interface} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20225
msgid "If this is set, it must specify the name of a network interface that WPA supplicant will control."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20226 guix-git/doc/guix.texi:20328
#: guix-git/doc/guix.texi:26469 guix-git/doc/guix.texi:32984
#, no-wrap
msgid "@code{config-file} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20228
msgid "Optional configuration file to use."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20231
msgid "List of additional command-line arguments to pass to the daemon."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20234
#, no-wrap
msgid "ModemManager"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:20237
msgid "Some networking devices such as modems require special care, and this is what the services below focus on."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20238
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "modem-manager-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20243
msgid "This is the service type for the @uref{https://wiki.gnome.org/Projects/ModemManager, ModemManager} service.  The value for this service type is a @code{modem-manager-configuration} record."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20248
#, no-wrap
msgid "{Data Type} modem-manager-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20250
msgid "Data type representing the configuration of ModemManager."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20252
#, no-wrap
msgid "@code{modem-manager} (default: @code{modem-manager})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20254
msgid "The ModemManager package to use."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20258
#, no-wrap
msgid "USB_ModeSwitch"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20259
#, no-wrap
msgid "Modeswitching"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20261
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "usb-modeswitch-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20266
msgid "This is the service type for the @uref{https://www.draisberghof.de/usb_modeswitch/, USB_ModeSwitch} service.  The value for this service type is a @code{usb-modeswitch-configuration} record."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20272
msgid "When plugged in, some USB modems (and other USB devices) initially present themselves as a read-only storage medium and not as a modem.  They need to be @dfn{modeswitched} before they are usable.  The USB_ModeSwitch service type installs udev rules to automatically modeswitch these devices when they are plugged in."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20277
#, no-wrap
msgid "{Data Type} usb-modeswitch-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20279
msgid "Data type representing the configuration of USB_ModeSwitch."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20281
#, no-wrap
msgid "@code{usb-modeswitch} (default: @code{usb-modeswitch})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20283
msgid "The USB_ModeSwitch package providing the binaries for modeswitching."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20284
#, no-wrap
msgid "@code{usb-modeswitch-data} (default: @code{usb-modeswitch-data})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20287
msgid "The package providing the device data and udev rules file used by USB_ModeSwitch."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20288
#, no-wrap
msgid "@code{config-file} (default: @code{#~(string-append #$usb-modeswitch:dispatcher \"/etc/usb_modeswitch.conf\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20293
msgid "Which config file to use for the USB_ModeSwitch dispatcher.  By default the config file shipped with USB_ModeSwitch is used which disables logging to @file{/var/log} among other default settings.  If set to @code{#f}, no config file is used."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:20307
msgid "The @code{(gnu services networking)} module discussed in the previous section provides services for more advanced setups: providing a DHCP service for others to use, filtering packets with iptables or nftables, running a WiFi access point with @command{hostapd}, running the @command{inetd} ``superdaemon'', and more.  This section describes those."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20308
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "dhcpd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20312
msgid "This type defines a service that runs a DHCP daemon.  To create a service of this type, you must supply a @code{<dhcpd-configuration>}.  For example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:20318
#, no-wrap
msgid ""
"(service dhcpd-service-type\n"
"         (dhcpd-configuration\n"
"          (config-file (local-file \"my-dhcpd.conf\"))\n"
"          (interfaces '(\"enp0s25\"))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20321
#, no-wrap
msgid "{Data Type} dhcpd-configuration"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20328
msgid "The package that provides the DHCP daemon.  This package is expected to provide the daemon at @file{sbin/dhcpd} relative to its output directory.  The default package is the @uref{https://www.isc.org/dhcp/, ISC's DHCP server}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20333
msgid "The configuration file to use.  This is required.  It will be passed to @code{dhcpd} via its @code{-cf} option.  This may be any ``file-like'' object (@pxref{G-Expressions, file-like objects}).  See @code{man dhcpd.conf} for details on the configuration file syntax."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20333
#, no-wrap
msgid "@code{version} (default: @code{\"4\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20338
msgid "The DHCP version to use.  The ISC DHCP server supports the values ``4'', ``6'', and ``4o6''.  These correspond to the @code{dhcpd} program options @code{-4}, @code{-6}, and @code{-4o6}.  See @code{man dhcpd} for details."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20338
#, no-wrap
msgid "@code{run-directory} (default: @code{\"/run/dhcpd\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20341
msgid "The run directory to use.  At service activation time, this directory will be created if it does not exist."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20341
#, no-wrap
msgid "@code{pid-file} (default: @code{\"/run/dhcpd/dhcpd.pid\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20344
msgid "The PID file to use.  This corresponds to the @code{-pf} option of @code{dhcpd}.  See @code{man dhcpd} for details."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20344
#, no-wrap
msgid "@code{interfaces} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20350
msgid "The names of the network interfaces on which dhcpd should listen for broadcasts.  If this list is not empty, then its elements (which must be strings) will be appended to the @code{dhcpd} invocation when starting the daemon.  It may not be necessary to explicitly specify any interfaces here; see @code{man dhcpd} for details."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20353
#, no-wrap
msgid "hostapd service, for Wi-Fi access points"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20354
#, no-wrap
msgid "Wi-Fi access points, hostapd service"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20355
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "hostapd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20360
msgid "This is the service type to run the @uref{https://w1.fi/hostapd/, hostapd} daemon to set up WiFi (IEEE 802.11) access points and authentication servers.  Its associated value must be a @code{hostapd-configuration} as shown below:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:20368
#, no-wrap
msgid ""
";; Use wlan1 to run the access point for \"My Network\".\n"
"(service hostapd-service-type\n"
"         (hostapd-configuration\n"
"          (interface \"wlan1\")\n"
"          (ssid \"My Network\")\n"
"          (channel 12)))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20371
#, no-wrap
msgid "{Data Type} hostapd-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20374
msgid "This data type represents the configuration of the hostapd service, with the following fields:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20376
#, no-wrap
msgid "@code{package} (default: @code{hostapd})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20378
msgid "The hostapd package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20379
#, no-wrap
msgid "@code{interface} (default: @code{\"wlan0\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20381
msgid "The network interface to run the WiFi access point."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:20382
#, no-wrap
msgid "ssid"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20385
msgid "The SSID (@dfn{service set identifier}), a string that identifies this network."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20386
#, no-wrap
msgid "@code{broadcast-ssid?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20388
msgid "Whether to broadcast this SSID."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20389
#, no-wrap
msgid "@code{channel} (default: @code{1})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20391
msgid "The WiFi channel to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20392
#, no-wrap
msgid "@code{driver} (default: @code{\"nl80211\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20396
msgid "The driver interface type.  @code{\"nl80211\"} is used with all Linux mac80211 drivers.  Use @code{\"none\"} if building hostapd as a standalone RADIUS server that does # not control any wireless/wired driver."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20397 guix-git/doc/guix.texi:27320
#: guix-git/doc/guix.texi:30759
#, no-wrap
msgid "@code{extra-settings} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20401
msgid "Extra settings to append as-is to the hostapd configuration file.  See @uref{https://w1.fi/cgit/hostap/plain/hostapd/hostapd.conf} for the configuration file reference."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20404
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "simulated-wifi-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20411
msgid "This is the type of a service to simulate WiFi networking, which can be useful in virtual machines for testing purposes.  The service loads the Linux kernel @uref{https://www.kernel.org/doc/html/latest/networking/mac80211_hwsim/mac80211_hwsim.html, @code{mac80211_hwsim} module} and starts hostapd to create a pseudo WiFi network that can be seen on @code{wlan0}, by default."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20413
msgid "The service's value is a @code{hostapd-configuration} record."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20416
#, no-wrap
msgid "iptables"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20417
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "iptables-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20423
msgid "This is the service type to set up an iptables configuration.  iptables is a packet filtering framework supported by the Linux kernel.  This service supports configuring iptables for both IPv4 and IPv6.  A simple example configuration rejecting all incoming connections except those to the ssh port 22 is shown below."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:20445
#, no-wrap
msgid ""
"(service iptables-service-type\n"
"         (iptables-configuration\n"
"          (ipv4-rules (plain-file \"iptables.rules\" \"*filter\n"
":INPUT ACCEPT\n"
":FORWARD ACCEPT\n"
":OUTPUT ACCEPT\n"
"-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT\n"
"-A INPUT -p tcp --dport 22 -j ACCEPT\n"
"-A INPUT -j REJECT --reject-with icmp-port-unreachable\n"
"COMMIT\n"
"\"))\n"
"          (ipv6-rules (plain-file \"ip6tables.rules\" \"*filter\n"
":INPUT ACCEPT\n"
":FORWARD ACCEPT\n"
":OUTPUT ACCEPT\n"
"-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT\n"
"-A INPUT -p tcp --dport 22 -j ACCEPT\n"
"-A INPUT -j REJECT --reject-with icmp6-port-unreachable\n"
"COMMIT\n"
"\"))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20448
#, no-wrap
msgid "{Data Type} iptables-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20450
msgid "The data type representing the configuration of iptables."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20452
#, no-wrap
msgid "@code{iptables} (default: @code{iptables})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20455
msgid "The iptables package that provides @code{iptables-restore} and @code{ip6tables-restore}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20455
#, no-wrap
msgid "@code{ipv4-rules} (default: @code{%iptables-accept-all-rules})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20459
msgid "The iptables rules to use.  It will be passed to @code{iptables-restore}.  This may be any ``file-like'' object (@pxref{G-Expressions, file-like objects})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20459
#, no-wrap
msgid "@code{ipv6-rules} (default: @code{%iptables-accept-all-rules})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20463
msgid "The ip6tables rules to use.  It will be passed to @code{ip6tables-restore}.  This may be any ``file-like'' object (@pxref{G-Expressions, file-like objects})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20466
#, no-wrap
msgid "nftables"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20467
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "nftables-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20475
msgid "This is the service type to set up a nftables configuration.  nftables is a netfilter project that aims to replace the existing iptables, ip6tables, arptables and ebtables framework.  It provides a new packet filtering framework, a new user-space utility @command{nft}, and a compatibility layer for iptables.  This service comes with a default ruleset @code{%default-nftables-ruleset} that rejecting all incoming connections except those to the ssh port 22.  To use it, simply write:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:20478
#, no-wrap
msgid "(service nftables-service-type)\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20481
#, no-wrap
msgid "{Data Type} nftables-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20483
msgid "The data type representing the configuration of nftables."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20485
#, no-wrap
msgid "@code{package} (default: @code{nftables})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20487
msgid "The nftables package that provides @command{nft}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20487
#, no-wrap
msgid "@code{ruleset} (default: @code{%default-nftables-ruleset})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20490
msgid "The nftables ruleset to use.  This may be any ``file-like'' object (@pxref{G-Expressions, file-like objects})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20493
#, no-wrap
msgid "NTP (Network Time Protocol), service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20494
#, no-wrap
msgid "ntpd, service for the Network Time Protocol daemon"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20495
#, no-wrap
msgid "real time clock"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20496
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "ntp-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20500
msgid "This is the type of the service running the @uref{https://www.ntp.org, Network Time Protocol (NTP)} daemon, @command{ntpd}.  The daemon will keep the system clock synchronized with that of the specified NTP servers."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20503
msgid "The value of this service is an @code{ntpd-configuration} object, as described below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20505
#, no-wrap
msgid "{Data Type} ntp-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20507
msgid "This is the data type for the NTP service configuration."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20509
#, no-wrap
msgid "@code{servers} (default: @code{%ntp-servers})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20513
msgid "This is the list of servers (@code{<ntp-server>} records) with which @command{ntpd} will be synchronized.  See the @code{ntp-server} data type definition below."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20514
#, no-wrap
msgid "@code{allow-large-adjustment?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20517
msgid "This determines whether @command{ntpd} is allowed to make an initial adjustment of more than 1,000 seconds."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20518
#, no-wrap
msgid "@code{ntp} (default: @code{ntp})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20520
msgid "The NTP package to use."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20523
#, no-wrap
msgid "%ntp-servers"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20526
msgid "List of host names used as the default NTP servers.  These are servers of the @uref{https://www.ntppool.org/en/, NTP Pool Project}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20528
#, no-wrap
msgid "{Data Type} ntp-server"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20530
msgid "The data type representing the configuration of a NTP server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20532
#, no-wrap
msgid "@code{type} (default: @code{'server})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20535
msgid "The type of the NTP server, given as a symbol.  One of @code{'pool}, @code{'server}, @code{'peer}, @code{'broadcast} or @code{'manycastclient}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:20536
#, no-wrap
msgid "address"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20538
msgid "The address of the server, as a string."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:20539 guix-git/doc/guix.texi:38465
#: guix-git/doc/guix.texi:38485
#, no-wrap
msgid "options"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20544
msgid "NTPD options to use with that specific server, given as a list of option names and/or of option names and values tuples.  The following example define a server to use with the options @option{iburst} and @option{prefer}, as well as @option{version} 3 and a @option{maxpoll} time of 16 seconds."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:20550
#, no-wrap
msgid ""
"(ntp-server\n"
" (type 'server)\n"
" (address \"some.ntp.server.org\")\n"
" (options `(iburst (version 3) (maxpoll 16) prefer))))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20554
#, no-wrap
msgid "OpenNTPD"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20555
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "openntpd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20559
msgid "Run the @command{ntpd}, the Network Time Protocol (NTP) daemon, as implemented by @uref{http://www.openntpd.org, OpenNTPD}.  The daemon will keep the system clock synchronized with that of the given servers."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:20568
#, no-wrap
msgid ""
"(service\n"
" openntpd-service-type\n"
" (openntpd-configuration\n"
"  (listen-on '(\"127.0.0.1\" \"::1\"))\n"
"  (sensor '(\"udcf0 correction 70000\"))\n"
"  (constraint-from '(\"www.gnu.org\"))\n"
"  (constraints-from '(\"https://www.google.com/\"))))\n"
"\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20572
#, no-wrap
msgid "%openntpd-servers"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20575
msgid "This variable is a list of the server addresses defined in @code{%ntp-servers}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20577
#, no-wrap
msgid "{Data Type} openntpd-configuration"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20579
#, fuzzy, no-wrap
#| msgid "@code{shared?} (default: @code{#t})"
msgid "@code{openntpd} (default: @code{openntpd})"
msgstr "@code{shared?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:20581
#, fuzzy
#| msgid "The GPM package to use."
msgid "The openntpd package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:20581
#, no-wrap
msgid "@code{listen-on} (default: @code{'(\"127.0.0.1\" \"::1\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20583
msgid "A list of local IP addresses or hostnames the ntpd daemon should listen on."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20583
#, no-wrap
msgid "@code{query-from} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20585
msgid "A list of local IP address the ntpd daemon should use for outgoing queries."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20585
#, no-wrap
msgid "@code{sensor} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20590
msgid "Specify a list of timedelta sensor devices ntpd should use.  @code{ntpd} will listen to each sensor that actually exists and ignore non-existent ones.  See @uref{https://man.openbsd.org/ntpd.conf, upstream documentation} for more information."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20590
#, no-wrap
msgid "@code{server} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20592
msgid "Specify a list of IP addresses or hostnames of NTP servers to synchronize to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20592
#, no-wrap
msgid "@code{servers} (default: @code{%openntp-servers})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20594
msgid "Specify a list of IP addresses or hostnames of NTP pools to synchronize to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20594
#, no-wrap
msgid "@code{constraint-from} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20601
msgid "@code{ntpd} can be configured to query the ‘Date’ from trusted HTTPS servers via TLS.  This time information is not used for precision but acts as an authenticated constraint, thereby reducing the impact of unauthenticated NTP man-in-the-middle attacks.  Specify a list of URLs, IP addresses or hostnames of HTTPS servers to provide a constraint."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20601
#, no-wrap
msgid "@code{constraints-from} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20605
msgid "As with constraint from, specify a list of URLs, IP addresses or hostnames of HTTPS servers to provide a constraint.  Should the hostname resolve to multiple IP addresses, @code{ntpd} will calculate a median constraint from all of them."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20608
#, no-wrap
msgid "inetd"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20609
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "inetd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20614
msgid "This service runs the @command{inetd} (@pxref{inetd invocation,,, inetutils, GNU Inetutils}) daemon.  @command{inetd} listens for connections on internet sockets, and lazily starts the specified server program when a connection is made on one of these sockets."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20620
msgid "The value of this service is an @code{inetd-configuration} object.  The following example configures the @command{inetd} daemon to provide the built-in @command{echo} service, as well as an smtp service which forwards smtp traffic over ssh to a server @code{smtp-server} behind a gateway @code{hostname}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:20643
#, no-wrap
msgid ""
"(service\n"
" inetd-service-type\n"
" (inetd-configuration\n"
"  (entries (list\n"
"            (inetd-entry\n"
"             (name \"echo\")\n"
"             (socket-type 'stream)\n"
"             (protocol \"tcp\")\n"
"             (wait? #f)\n"
"             (user \"root\"))\n"
"            (inetd-entry\n"
"             (node \"127.0.0.1\")\n"
"             (name \"smtp\")\n"
"             (socket-type 'stream)\n"
"             (protocol \"tcp\")\n"
"             (wait? #f)\n"
"             (user \"root\")\n"
"             (program (file-append openssh \"/bin/ssh\"))\n"
"             (arguments\n"
"              '(\"ssh\" \"-qT\" \"-i\" \"/path/to/ssh_key\"\n"
"                \"-W\" \"smtp-server:25\" \"user@@hostname\")))))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20646
msgid "See below for more details about @code{inetd-configuration}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20648
#, no-wrap
msgid "{Data Type} inetd-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20650
msgid "Data type representing the configuration of @command{inetd}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20652
#, no-wrap
msgid "@code{program} (default: @code{(file-append inetutils \"/libexec/inetd\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20654
msgid "The @command{inetd} executable to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20655 guix-git/doc/guix.texi:31607
#, no-wrap
msgid "@code{entries} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20658
msgid "A list of @command{inetd} service entries.  Each entry should be created by the @code{inetd-entry} constructor."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20661
#, no-wrap
msgid "{Data Type} inetd-entry"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20665
msgid "Data type representing an entry in the @command{inetd} configuration.  Each entry corresponds to a socket where @command{inetd} will listen for requests."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20667
#, no-wrap
msgid "@code{node} (default: @code{#f})"
msgstr "@code{node} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:20672
msgid "Optional string, a comma-separated list of local addresses @command{inetd} should use when listening for this service.  @xref{Configuration file,,, inetutils, GNU Inetutils} for a complete description of all options."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20674
msgid "A string, the name must correspond to an entry in @code{/etc/services}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:20674
#, no-wrap
msgid "socket-type"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20677
msgid "One of @code{'stream}, @code{'dgram}, @code{'raw}, @code{'rdm} or @code{'seqpacket}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:20677
#, no-wrap
msgid "protocol"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20679
msgid "A string, must correspond to an entry in @code{/etc/protocols}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20679
#, no-wrap
msgid "@code{wait?} (default: @code{#t})"
msgstr "@code{wait?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:20682
msgid "Whether @command{inetd} should wait for the server to exit before listening to new service requests."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20687
msgid "A string containing the user (and, optionally, group) name of the user as whom the server should run.  The group name can be specified in a suffix, separated by a colon or period, i.e.@: @code{\"user\"}, @code{\"user:group\"} or @code{\"user.group\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20687
#, no-wrap
msgid "@code{program} (default: @code{\"internal\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20690
msgid "The server program which will serve the requests, or @code{\"internal\"} if @command{inetd} should use a built-in service."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20695
msgid "A list strings or file-like objects, which are the server program's arguments, starting with the zeroth argument, i.e.@: the name of the program itself.  For @command{inetd}'s internal services, this entry must be @code{'()} or @code{'(\"internal\")}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20699
msgid "@xref{Configuration file,,, inetutils, GNU Inetutils} for a more detailed discussion of each configuration field."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20701
#, no-wrap
msgid "opendht, distributed hash table network service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20702
#, no-wrap
msgid "dhtproxy, for use with jami"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20703
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "opendht-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20708
msgid "This is the type of the service running a @uref{https://opendht.net, OpenDHT} node, @command{dhtnode}.  The daemon can be used to host your own proxy service to the distributed hash table (DHT), for example to connect to with Jami, among other applications."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:20718
msgid "When using the OpenDHT proxy server, the IP addresses it ``sees'' from the clients should be addresses reachable from other peers.  In practice this means that a publicly reachable address is best suited for a proxy server, outside of your private network.  For example, hosting the proxy server on a IPv4 private local network and exposing it via port forwarding could work for external peers, but peers local to the proxy would have their private addresses shared with the external peers, leading to connectivity problems."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20722
msgid "The value of this service is a @code{opendht-configuration} object, as described below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20727
#, fuzzy, no-wrap
msgid "{Data Type} opendht-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:20729
msgid "Available @code{opendht-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20731
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{opendht} (default: @code{opendht}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:20733
#, fuzzy
#| msgid "The GPM package to use."
msgid "The @code{opendht} package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:20734
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{peer-discovery?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:20736
msgid "Whether to enable the multicast local peer discovery mechanism."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20737
#, fuzzy, no-wrap
#| msgid "@code{wait?} (default: @code{#t})"
msgid "@code{enable-logging?} (default: @code{#f}) (type: boolean)"
msgstr "@code{wait?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:20740
msgid "Whether to enable logging messages to syslog.  It is disabled by default as it is rather verbose."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20741 guix-git/doc/guix.texi:22277
#: guix-git/doc/guix.texi:27518
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{debug?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:20744
msgid "Whether to enable debug-level logging messages.  This has no effect if logging is disabled."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20745
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{bootstrap-host} (default: @code{\"bootstrap.jami.net:4222\"}) (type: maybe-string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:20752
msgid "The node host name that is used to make the first connection to the network.  A specific port value can be provided by appending the @code{:PORT} suffix.  By default, it uses the Jami bootstrap nodes, but any host can be specified here.  It's also possible to disable bootstrapping by explicitly setting this field to the @code{%unset-value} value."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20753
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{port} (default: @code{4222}) (type: maybe-number)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:20756
msgid "The UDP port to bind to.  When left unspecified, an available port is automatically selected."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20757
#, fuzzy, no-wrap
#| msgid "@code{no-hints?} (default: @code{#f})"
msgid "@code{proxy-server-port} (type: maybe-number)"
msgstr "@code{no-hints?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:20759
msgid "Spawn a proxy server listening on the specified port."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20760
#, fuzzy, no-wrap
#| msgid "@code{no-hints?} (default: @code{#f})"
msgid "@code{proxy-server-port-tls} (type: maybe-number)"
msgstr "@code{no-hints?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:20762
msgid "Spawn a proxy server listening to TLS connections on the specified port."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20766
#, no-wrap
msgid "Tor"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20767
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "tor-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20772
msgid "Type for a service that runs the @uref{https://torproject.org, Tor} anonymous networking daemon.  The service is configured using a @code{<tor-configuration>} record.  By default, the Tor daemon runs as the @code{tor} unprivileged user, which is a member of the @code{tor} group."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20773
#, fuzzy, no-wrap
#| msgid "Monitoring services."
msgid "onion services, for Tor"
msgstr "Serviços de monitoramento."

#. type: defvar
#: guix-git/doc/guix.texi:20777
msgid "Services of this type can be extended by other services to specify @dfn{onion services} (in addition to those already specified in @code{tor-configuration}) as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:20783
#, no-wrap
msgid ""
"(simple-service 'my-extra-onion-service tor-service-type\n"
"                (list (tor-onion-service-configuration\n"
"                        (name \"extra-onion-service\")\n"
"                        (mapping '((80 . \"127.0.0.1:8080\"))))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20786
#, no-wrap
msgid "{Data Type} tor-configuration"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20788
#, no-wrap
msgid "@code{tor} (default: @code{tor})"
msgstr "@code{tor} (default: @code{tor})"

#. type: table
#: guix-git/doc/guix.texi:20793
msgid "The package that provides the Tor daemon.  This package is expected to provide the daemon at @file{bin/tor} relative to its output directory.  The default package is the @uref{https://www.torproject.org, Tor Project's} implementation."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20794
#, no-wrap
msgid "@code{config-file} (default: @code{(plain-file \"empty\" \"\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20800
msgid "The configuration file to use.  It will be appended to a default configuration file, and the final configuration file will be passed to @code{tor} via its @code{-f} option.  This may be any ``file-like'' object (@pxref{G-Expressions, file-like objects}).  See @code{man tor} for details on the configuration file syntax."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20801
#, no-wrap
msgid "@code{hidden-services} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20806
msgid "The list of @code{<tor-onion-service-configuration>} records to use.  For any onion service you include in this list, appropriate configuration to enable the onion service will be automatically added to the default configuration file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20807
#, no-wrap
msgid "@code{socks-socket-type} (default: @code{'tcp})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20814
msgid "The default socket type that Tor should use for its SOCKS socket.  This must be either @code{'tcp} or @code{'unix}.  If it is @code{'tcp}, then by default Tor will listen on TCP port 9050 on the loopback interface (i.e., localhost).  If it is @code{'unix}, then Tor will listen on the UNIX domain socket @file{/var/run/tor/socks-sock}, which will be made writable by members of the @code{tor} group."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20819
msgid "If you want to customize the SOCKS socket in more detail, leave @code{socks-socket-type} at its default value of @code{'tcp} and use @code{config-file} to override the default by providing your own @code{SocksPort} option."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20820
#, no-wrap
msgid "@code{control-socket?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20826
msgid "Whether or not to provide a ``control socket'' by which Tor can be controlled to, for instance, dynamically instantiate tor onion services.  If @code{#t}, Tor will listen for control commands on the UNIX domain socket @file{/var/run/tor/control-sock}, which will be made writable by members of the @code{tor} group."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20830
#, fuzzy, no-wrap
#| msgid "Monitoring services."
msgid "onion service, tor"
msgstr "Serviços de monitoramento."

#. type: deftp
#: guix-git/doc/guix.texi:20831
#, fuzzy, no-wrap
msgid "{Data Type} tor-onion-service-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:20836
msgid "Data Type representing a Tor @dfn{Onion Service} configuration.  See @url{https://community.torproject.org/onion-services/, the Tor project's documentation} for more information.  Available @code{tor-onion-service-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20838 guix-git/doc/guix.texi:22514
#: guix-git/doc/guix.texi:34076 guix-git/doc/guix.texi:38884
#: guix-git/doc/guix.texi:38898 guix-git/doc/guix.texi:38996
#: guix-git/doc/guix.texi:43002 guix-git/doc/guix.texi:43598
#, fuzzy, no-wrap
msgid "@code{name} (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:20843
msgid "Name for this Onion Service.  This creates a @file{/var/lib/tor/hidden-services/@var{name}} directory, where the @file{hostname} file contains the @indicateurl{.onion} host name for this Onion Service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20844
#, fuzzy, no-wrap
msgid "@code{mapping} (type: alist)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:20846
msgid "Association list of port to address mappings.  The following example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:20849
#, no-wrap
msgid ""
"'((22 . \"127.0.0.1:22\")\n"
"  (80 . \"127.0.0.1:8080\"))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20851
msgid "maps ports 22 and 80 of the Onion Service to the local ports 22 and 8080."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:20856
msgid "The @code{(gnu services rsync)} module provides the following services:"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:20860
msgid "You might want an rsync daemon if you have files that you want available so anyone (or just yourself) can download existing files or upload new files."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20861
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "rsync-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20865
msgid "This is the service type for the @uref{https://rsync.samba.org, rsync} daemon, The value for this service type is a @command{rsync-configuration} record as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:20878
#, no-wrap
msgid ""
";; Export two directories over rsync.  By default rsync listens on\n"
";; all the network interfaces.\n"
"(service rsync-service-type\n"
"         (rsync-configuration\n"
"           (modules (list (rsync-module\n"
"                            (name \"music\")\n"
"                            (file-name \"/srv/zik\")\n"
"                            (read-only? #f))\n"
"                          (rsync-module\n"
"                            (name \"movies\")\n"
"                            (file-name \"/home/charlie/movies\"))))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20881
msgid "See below for details about @code{rsync-configuration}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20883
#, no-wrap
msgid "{Data Type} rsync-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20885
msgid "Data type representing the configuration for @code{rsync-service}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20887
#, no-wrap
msgid "@code{package} (default: @var{rsync})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20889
msgid "@code{rsync} package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20890 guix-git/doc/guix.texi:35904
#, no-wrap
msgid "@code{address} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20893
msgid "IP address on which @command{rsync} listens for incoming connections.  If unspecified, it defaults to listening on all available addresses."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20894
#, no-wrap
msgid "@code{port-number} (default: @code{873})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20898
msgid "TCP port on which @command{rsync} listens for incoming connections.  If port is less than @code{1024} @command{rsync} needs to be started as the @code{root} user and group."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20899
#, no-wrap
msgid "@code{pid-file} (default: @code{\"/var/run/rsyncd/rsyncd.pid\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20901
msgid "Name of the file where @command{rsync} writes its PID."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20902
#, no-wrap
msgid "@code{lock-file} (default: @code{\"/var/run/rsyncd/rsyncd.lock\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20904
msgid "Name of the file where @command{rsync} writes its lock file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20905
#, no-wrap
msgid "@code{log-file} (default: @code{\"/var/log/rsyncd.log\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20907
msgid "Name of the file where @command{rsync} writes its log file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20908 guix-git/doc/guix.texi:40698
#, no-wrap
msgid "@code{user} (default: @code{\"root\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20910
msgid "Owner of the @code{rsync} process."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20911
#, fuzzy, no-wrap
#| msgid "@code{hangup?} (default: @code{#f})"
msgid "@code{group} (default: @code{\"root\"})"
msgstr "@code{hangup?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:20913
msgid "Group of the @code{rsync} process."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20914
#, fuzzy, no-wrap
#| msgid "@code{uid} (default: @code{#f})"
msgid "@code{uid} (default: @code{\"rsyncd\"})"
msgstr "@code{uid} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:20917
msgid "User name or user ID that file transfers to and from that module should take place as when the daemon was run as @code{root}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20918
#, fuzzy, no-wrap
#| msgid "@code{gdm} (default: @code{gdm})"
msgid "@code{gid} (default: @code{\"rsyncd\"})"
msgstr "@code{gdm} (default: @code{gdm})"

#. type: table
#: guix-git/doc/guix.texi:20920 guix-git/doc/guix.texi:21444
msgid "Group name or group ID that will be used when accessing the module."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20921 guix-git/doc/guix.texi:41502
#, no-wrap
msgid "@code{modules} (default: @code{%default-modules})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20924
msgid "List of ``modules''---i.e., directories exported over rsync.  Each element must be a @code{rsync-module} record, as described below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20927
#, fuzzy, no-wrap
#| msgid "{Data Type} build-machine"
msgid "{Data Type} rsync-module"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:20930
msgid "This is the data type for rsync ``modules''.  A module is a directory exported over the rsync protocol.  The available fields are as follows:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20936
msgid "The module name.  This is the name that shows up in URLs.  For example, if the module is called @code{music}, the corresponding URL will be @code{rsync://host.example.org/music}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:20937
#, fuzzy, no-wrap
#| msgid "name"
msgid "file-name"
msgstr "name"

#. type: table
#: guix-git/doc/guix.texi:20939
msgid "Name of the directory being exported."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20943
msgid "Comment associated with the module.  Client user interfaces may display it when they obtain the list of available modules."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20944
#, fuzzy, no-wrap
#| msgid "@code{respawn?} (default: @code{#t})"
msgid "@code{read-only?} (default: @code{#t})"
msgstr "@code{respawn?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:20948
msgid "Whether or not client will be able to upload files.  If this is false, the uploads will be authorized if permissions on the daemon side permit it."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20949
#, fuzzy, no-wrap
#| msgid "@code{chroot} (default: @code{#f})"
msgid "@code{chroot?} (default: @code{#t})"
msgstr "@code{chroot} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:20953
msgid "When this is true, the rsync daemon changes root to the module's directory before starting file transfers with the client.  This improves security, but requires rsync to run as root."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20954
#, no-wrap
msgid "@code{timeout} (default: @code{300})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20957
msgid "Idle time in seconds after which the daemon closes a connection with the client."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:20961
msgid "The @code{(gnu services syncthing)} module provides the following services:"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:20961
#, no-wrap
msgid "syncthing"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:20966
msgid "You might want a syncthing daemon if you have files between two or more computers and want to sync them in real time, safely protected from prying eyes."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20967
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "syncthing-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:20971
msgid "This is the service type for the @uref{https://syncthing.net/, syncthing} daemon, The value for this service type is a @command{syncthing-configuration} record as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:20975
#, no-wrap
msgid ""
"(service syncthing-service-type\n"
"         (syncthing-configuration (user \"alice\")))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:20978
msgid "See below for details about @code{syncthing-configuration}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20979
#, no-wrap
msgid "{Data Type} syncthing-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:20981
msgid "Data type representing the configuration for @code{syncthing-service-type}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20983
#, no-wrap
msgid "@code{syncthing} (default: @var{syncthing})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20985
msgid "@code{syncthing} package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20986
#, no-wrap
msgid "@code{arguments} (default: @var{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20988
msgid "List of command-line arguments passing to @code{syncthing} binary."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20989
#, no-wrap
msgid "@code{logflags} (default: @var{0})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20992
msgid "Sum of logging flags, see @uref{https://docs.syncthing.net/users/syncthing.html#cmdoption-logflags, Syncthing documentation logflags}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20993
#, no-wrap
msgid "@code{user} (default: @var{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:20996
msgid "The user as which the Syncthing service is to be run.  This assumes that the specified user exists."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:20997
#, no-wrap
msgid "@code{group} (default: @var{\"users\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21000
msgid "The group as which the Syncthing service is to be run.  This assumes that the specified group exists."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21001
#, no-wrap
msgid "@code{home} (default: @var{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21004
msgid "Common configuration and data directory.  The default configuration directory is @file{$HOME} of the specified Syncthing @code{user}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:21010
msgid "Furthermore, @code{(gnu services ssh)} provides the following services."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21010 guix-git/doc/guix.texi:21079
#: guix-git/doc/guix.texi:40842
#, no-wrap
msgid "SSH"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21011 guix-git/doc/guix.texi:21080
#: guix-git/doc/guix.texi:40843
#, no-wrap
msgid "SSH server"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21013
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "lsh-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:21017
msgid "Type of the service that runs the GNU@tie{}lsh secure shell (SSH)  daemon, @command{lshd}.  The value for this service is a @code{<lsh-configuration>} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21019
#, fuzzy, no-wrap
msgid "{Data Type} lsh-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:21021
#, fuzzy
msgid "Data type representing the configuration of @command{lshd}."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:21023
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{lsh} (default: @code{lsh}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:21025
msgid "The package object of the GNU@tie{}lsh secure shell (SSH) daemon."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21026
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{daemonic?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21028
msgid "Whether to detach from the controlling terminal."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21029
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{host-key} (default: @code{\"/etc/lsh/host-key\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:21032
msgid "File containing the @dfn{host key}.  This file must be readable by root only."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21033
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{interfaces} (default: @code{'()}) (type: list)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21037
msgid "List of host names or addresses that @command{lshd} will listen on.  If empty, @command{lshd} listens for connections on all the network interfaces."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21038
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{port-number} (default: @code{22}) (type: integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21040
msgid "Port to listen on."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21041 guix-git/doc/guix.texi:22274
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{allow-empty-passwords?} (default: @code{#f}) (type: boolean)"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21043
msgid "Whether to accept log-ins with empty passwords."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21044
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{root-login?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21046
msgid "Whether to accept log-ins as root."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21047
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{syslog-output?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21050
msgid "Whether to log @command{lshd} standard output to syslogd.  This will make the service depend on the existence of a syslogd service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21051
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{pid-file?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21054
msgid "When @code{#t}, @command{lshd} writes its PID to the file specified in @var{pid-file}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21055
#, fuzzy, no-wrap
msgid "@code{pid-file} (default: @code{\"/var/run/lshd.pid\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21057
msgid "File that @command{lshd} will write its PID to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21058
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{x11-forwarding?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21060
msgid "Whether to enable X11 forwarding."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21061
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{tcp/ip-forwarding?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21063
msgid "Whether to enable TCP/IP forwarding."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21064
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{password-authentication?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21066
msgid "Whether to accept log-ins using password authentication."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21067
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{public-key-authentication?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21069
msgid "Whether to accept log-ins using public key authentication."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21070
#, fuzzy, no-wrap
#| msgid "@code{wait?} (default: @code{#t})"
msgid "@code{initialize?} (default: @code{#t}) (type: boolean)"
msgstr "@code{wait?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:21075
msgid "When @code{#f}, it is up to the user to initialize the randomness generator (@pxref{lsh-make-seed,,, lsh, LSH Manual}), and to create a key pair with the private key stored in file @var{host-key} (@pxref{lshd basics,,, lsh, LSH Manual})."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21081
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "openssh-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:21085
msgid "This is the type for the @uref{http://www.openssh.org, OpenSSH} secure shell daemon, @command{sshd}.  Its value must be an @code{openssh-configuration} record as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21094
#, no-wrap
msgid ""
"(service openssh-service-type\n"
"         (openssh-configuration\n"
"           (x11-forwarding? #t)\n"
"           (permit-root-login 'prohibit-password)\n"
"           (authorized-keys\n"
"             `((\"alice\" ,(local-file \"alice.pub\"))\n"
"               (\"bob\" ,(local-file \"bob.pub\"))))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21097
msgid "See below for details about @code{openssh-configuration}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21100
msgid "This service can be extended with extra authorized keys, as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21105
#, no-wrap
msgid ""
"(service-extension openssh-service-type\n"
"                   (const `((\"charlie\"\n"
"                             ,(local-file \"charlie.pub\")))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21108
#, no-wrap
msgid "{Data Type} openssh-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21110
msgid "This is the configuration record for OpenSSH's @command{sshd}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21112
#, no-wrap
msgid "@code{openssh} (default @var{openssh})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21114 guix-git/doc/guix.texi:43111
#, fuzzy
#| msgid "The GPM package to use."
msgid "The OpenSSH package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:21115
#, no-wrap
msgid "@code{pid-file} (default: @code{\"/var/run/sshd.pid\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21117
msgid "Name of the file where @command{sshd} writes its PID."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21118
#, no-wrap
msgid "@code{port-number} (default: @code{22})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21120
msgid "TCP port on which @command{sshd} listens for incoming connections."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21121
#, fuzzy, no-wrap
#| msgid "@code{max-zone-size} (default: @code{#f})"
msgid "@code{max-connections} (default: @code{200})"
msgstr "@code{max-zone-size} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21126
msgid "Hard limit on the maximum number of simultaneous client connections, enforced by the inetd-style Shepherd service (@pxref{Service De- and Constructors, @code{make-inetd-constructor},, shepherd, The GNU Shepherd Manual})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21127
#, no-wrap
msgid "@code{permit-root-login} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21132
msgid "This field determines whether and when to allow logins as root.  If @code{#f}, root logins are disallowed; if @code{#t}, they are allowed.  If it's the symbol @code{'prohibit-password}, then root logins are permitted but not with password-based authentication."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21133 guix-git/doc/guix.texi:21303
#, no-wrap
msgid "@code{allow-empty-passwords?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21136
msgid "When true, users with empty passwords may log in.  When false, they may not."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21137 guix-git/doc/guix.texi:21306
#, no-wrap
msgid "@code{password-authentication?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21140
msgid "When true, users may log in with their password.  When false, they have other authentication methods."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21141
#, no-wrap
msgid "@code{public-key-authentication?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21144
msgid "When true, users may log in using public key authentication.  When false, users have to use other authentication method."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21147
msgid "Authorized public keys are stored in @file{~/.ssh/authorized_keys}.  This is used only by protocol version 2."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21148
#, no-wrap
msgid "@code{x11-forwarding?} (default: @code{#f})"
msgstr "@code{x11-forwarding?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21152
msgid "When true, forwarding of X11 graphical client connections is enabled---in other words, @command{ssh} options @option{-X} and @option{-Y} will work."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21153
#, no-wrap
msgid "@code{allow-agent-forwarding?} (default: @code{#t})"
msgstr "@code{allow-agent-forwarding?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:21155
msgid "Whether to allow agent forwarding."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21156
#, no-wrap
msgid "@code{allow-tcp-forwarding?} (default: @code{#t})"
msgstr "@code{allow-tcp-forwarding?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:21158
msgid "Whether to allow TCP forwarding."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21159
#, no-wrap
msgid "@code{gateway-ports?} (default: @code{#f})"
msgstr "@code{gateway-ports?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21161
msgid "Whether to allow gateway ports."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21162
#, no-wrap
msgid "@code{challenge-response-authentication?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21165
msgid "Specifies whether challenge response authentication is allowed (e.g.@: via PAM)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21166
#, no-wrap
msgid "@code{use-pam?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21172
msgid "Enables the Pluggable Authentication Module interface.  If set to @code{#t}, this will enable PAM authentication using @code{challenge-response-authentication?} and @code{password-authentication?}, in addition to PAM account and session module processing for all authentication types."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21177
msgid "Because PAM challenge response authentication usually serves an equivalent role to password authentication, you should disable either @code{challenge-response-authentication?} or @code{password-authentication?}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21178
#, no-wrap
msgid "@code{print-last-log?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21181
msgid "Specifies whether @command{sshd} should print the date and time of the last user login when a user logs in interactively."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21182
#, no-wrap
msgid "@code{subsystems} (default: @code{'((\"sftp\" \"internal-sftp\"))})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21184
msgid "Configures external subsystems (e.g.@: file transfer daemon)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21188
msgid "This is a list of two-element lists, each of which containing the subsystem name and a command (with optional arguments) to execute upon subsystem request."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21191
msgid "The command @command{internal-sftp} implements an in-process SFTP server.  Alternatively, one can specify the @command{sftp-server} command:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21196
#, no-wrap
msgid ""
"(service openssh-service-type\n"
"         (openssh-configuration\n"
"          (subsystems\n"
"           `((\"sftp\" ,(file-append openssh \"/libexec/sftp-server\"))))))\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21198
#, no-wrap
msgid "@code{accepted-environment} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21200
msgid "List of strings describing which environment variables may be exported."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21203
msgid "Each string gets on its own line.  See the @code{AcceptEnv} option in @code{man sshd_config}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21208
msgid "This example allows ssh-clients to export the @env{COLORTERM} variable.  It is set by terminal emulators, which support colors.  You can use it in your shell's resource file to enable colors for the prompt and commands if this variable is set."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21213
#, no-wrap
msgid ""
"(service openssh-service-type\n"
"         (openssh-configuration\n"
"           (accepted-environment '(\"COLORTERM\"))))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21216
#, no-wrap
msgid "authorized keys, SSH"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21217
#, no-wrap
msgid "SSH authorized keys"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21221
msgid "This is the list of authorized keys.  Each element of the list is a user name followed by one or more file-like objects that represent SSH public keys.  For example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21228
#, no-wrap
msgid ""
"(openssh-configuration\n"
"  (authorized-keys\n"
"    `((\"rekado\" ,(local-file \"rekado.pub\"))\n"
"      (\"chris\" ,(local-file \"chris.pub\"))\n"
"      (\"root\" ,(local-file \"rekado.pub\") ,(local-file \"chris.pub\")))))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21233
msgid "registers the specified public keys for user accounts @code{rekado}, @code{chris}, and @code{root}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21236
msgid "Additional authorized keys can be specified @i{via} @code{service-extension}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21239
msgid "Note that this does @emph{not} interfere with the use of @file{~/.ssh/authorized_keys}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21240
#, fuzzy, no-wrap
#| msgid "@code{no-hosts?} (default: @code{#f})"
msgid "@code{generate-host-keys?} (default: @code{#t})"
msgstr "@code{no-hosts?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21243
msgid "Whether to generate host key pairs with @command{ssh-keygen -A} under @file{/etc/ssh} if there are none."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21249
msgid "Generating key pairs takes a few seconds when enough entropy is available and is only done once.  You might want to turn it off for instance in a virtual machine that does not need it because host keys are provided in some other way, and where the extra boot time is a problem."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21250 guix-git/doc/guix.texi:21656
#, no-wrap
msgid "@code{log-level} (default: @code{'info})"
msgstr "@code{log-level} (default: @code{'info})"

#. type: table
#: guix-git/doc/guix.texi:21254
msgid "This is a symbol specifying the logging level: @code{quiet}, @code{fatal}, @code{error}, @code{info}, @code{verbose}, @code{debug}, etc.  See the man page for @file{sshd_config} for the full list of level names."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21255 guix-git/doc/guix.texi:24907
#: guix-git/doc/guix.texi:30417
#, no-wrap
msgid "@code{extra-content} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21260
msgid "This field can be used to append arbitrary text to the configuration file.  It is especially useful for elaborate configurations that cannot be expressed otherwise.  This configuration, for example, would generally disable root logins, but permit them from one specific IP address:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21266
#, no-wrap
msgid ""
"(openssh-configuration\n"
"  (extra-content \"\\\n"
"Match Address 192.168.0.1\n"
"  PermitRootLogin yes\"))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21271
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "dropbear-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:21275
msgid "Type of the service that runs the @url{https://matt.ucc.asn.au/dropbear/dropbear.html, Dropbear SSH daemon}, whose value is a @code{<dropbear-configuration>} object."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21277
msgid "For example, to specify a Dropbear service listening on port 1234:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21281
#, no-wrap
msgid ""
"(service dropbear-service-type (dropbear-configuration\n"
"                                 (port-number 1234)))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21284
#, no-wrap
msgid "{Data Type} dropbear-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21286
msgid "This data type represents the configuration of a Dropbear SSH daemon."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21288
#, no-wrap
msgid "@code{dropbear} (default: @var{dropbear})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21290
msgid "The Dropbear package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21291
#, no-wrap
msgid "@code{port-number} (default: 22)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21293
msgid "The TCP port where the daemon waits for incoming connections."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21294
#, no-wrap
msgid "@code{syslog-output?} (default: @code{#t})"
msgstr "@code{syslog-output?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:21296
msgid "Whether to enable syslog output."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21297
#, no-wrap
msgid "@code{pid-file} (default: @code{\"/var/run/dropbear.pid\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21299
msgid "File name of the daemon's PID file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21300
#, no-wrap
msgid "@code{root-login?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21302
msgid "Whether to allow @code{root} logins."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21305 guix-git/doc/guix.texi:22522
msgid "Whether to allow empty passwords."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21308
msgid "Whether to enable password-based authentication."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21311
#, no-wrap
msgid "AutoSSH"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21312
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "autossh-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:21320
msgid "This is the type for the @uref{https://www.harding.motd.ca/autossh, AutoSSH} program that runs a copy of @command{ssh} and monitors it, restarting it as necessary should it die or stop passing traffic.  AutoSSH can be run manually from the command-line by passing arguments to the binary @command{autossh} from the package @code{autossh}, but it can also be run as a Guix service.  This latter use case is documented here."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21324
msgid "AutoSSH can be used to forward local traffic to a remote machine using an SSH tunnel, and it respects the @file{~/.ssh/config} of the user it is run as."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21329
msgid "For example, to specify a service running autossh as the user @code{pino} and forwarding all local connections to port @code{8081} to @code{remote:8081} using an SSH tunnel, add this call to the operating system's @code{services} field:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21335
#, no-wrap
msgid ""
"(service autossh-service-type\n"
"         (autossh-configuration\n"
"          (user \"pino\")\n"
"          (ssh-options (list \"-T\" \"-N\" \"-L\" \"8081:localhost:8081\" \"remote.net\"))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21338
#, no-wrap
msgid "{Data Type} autossh-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21340
msgid "This data type represents the configuration of an AutoSSH service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21343
#, no-wrap
msgid "@code{user} (default @code{\"autossh\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21346
msgid "The user as which the AutoSSH service is to be run.  This assumes that the specified user exists."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21347
#, no-wrap
msgid "@code{poll} (default @code{600})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21349
msgid "Specifies the connection poll time in seconds."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21350
#, no-wrap
msgid "@code{first-poll} (default @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21356
msgid "Specifies how many seconds AutoSSH waits before the first connection test.  After this first test, polling is resumed at the pace defined in @code{poll}.  When set to @code{#f}, the first poll is not treated specially and will also use the connection poll specified in @code{poll}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21357
#, no-wrap
msgid "@code{gate-time} (default @code{30})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21360
msgid "Specifies how many seconds an SSH connection must be active before it is considered successful."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21361
#, no-wrap
msgid "@code{log-level} (default @code{1})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21364
msgid "The log level, corresponding to the levels used by syslog---so @code{0} is the most silent while @code{7} is the chattiest."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21365
#, no-wrap
msgid "@code{max-start} (default @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21368
msgid "The maximum number of times SSH may be (re)started before AutoSSH exits.  When set to @code{#f}, no maximum is configured and AutoSSH may restart indefinitely."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21369
#, no-wrap
msgid "@code{message} (default @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21371
msgid "The message to append to the echo message sent when testing connections."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21372
#, no-wrap
msgid "@code{port} (default @code{\"0\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21382
msgid "The ports used for monitoring the connection.  When set to @code{\"0\"}, monitoring is disabled.  When set to @code{\"@var{n}\"} where @var{n} is a positive integer, ports @var{n} and @var{n}+1 are used for monitoring the connection, such that port @var{n} is the base monitoring port and @code{n+1} is the echo port.  When set to @code{\"@var{n}:@var{m}\"} where @var{n} and @var{m} are positive integers, the ports @var{n} and @var{m} are used for monitoring the connection, such that port @var{n} is the base monitoring port and @var{m} is the echo port."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21383
#, no-wrap
msgid "@code{ssh-options} (default @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21387
msgid "The list of command-line arguments to pass to @command{ssh} when it is run.  Options @option{-f} and @option{-M} are reserved for AutoSSH and may cause undefined behaviour."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21391
#, no-wrap
msgid "WebSSH"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21392
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "webssh-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:21398
msgid "This is the type for the @uref{https://webssh.huashengdun.org/, WebSSH} program that runs a web SSH client.  WebSSH can be run manually from the command-line by passing arguments to the binary @command{wssh} from the package @code{webssh}, but it can also be run as a Guix service.  This latter use case is documented here."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21404
msgid "For example, to specify a service running WebSSH on loopback interface on port @code{8888} with reject policy with a list of allowed to connection hosts, and NGINX as a reverse-proxy to this service listening for HTTPS connection, add this call to the operating system's @code{services} field:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21412
#, no-wrap
msgid ""
"(service webssh-service-type\n"
"  (webssh-configuration (address \"127.0.0.1\")\n"
"                        (port 8888)\n"
"                        (policy 'reject)\n"
"                        (known-hosts '(\"localhost ecdsa-sha2-nistp256 AAAA…\"\n"
"                                       \"127.0.0.1 ecdsa-sha2-nistp256 AAAA…\"))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21428
#, no-wrap
msgid ""
"(service nginx-service-type\n"
"         (nginx-configuration\n"
"          (server-blocks\n"
"           (list\n"
"            (nginx-server-configuration\n"
"             (inherit %webssh-configuration-nginx)\n"
"             (server-name '(\"webssh.example.com\"))\n"
"             (listen '(\"443 ssl\"))\n"
"             (ssl-certificate (letsencrypt-certificate \"webssh.example.com\"))\n"
"             (ssl-certificate-key (letsencrypt-key \"webssh.example.com\"))\n"
"             (locations\n"
"              (cons (nginx-location-configuration\n"
"                     (uri \"/.well-known\")\n"
"                     (body '(\"root /var/www;\")))\n"
"                    (nginx-server-configuration-locations %webssh-configuration-nginx))))))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21431
#, no-wrap
msgid "{Data Type} webssh-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21433
msgid "Data type representing the configuration for @code{webssh-service}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21435
#, no-wrap
msgid "@code{package} (default: @var{webssh})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21437
msgid "@code{webssh} package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21438
#, no-wrap
msgid "@code{user-name} (default: @var{\"webssh\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21441
msgid "User name or user ID that file transfers to and from that module should take place."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21442
#, no-wrap
msgid "@code{group-name} (default: @var{\"webssh\"})"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21445
#, no-wrap
msgid "@code{address} (default: @var{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21447
msgid "IP address on which @command{webssh} listens for incoming connections."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21448
#, no-wrap
msgid "@code{port} (default: @var{8888})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21450
msgid "TCP port on which @command{webssh} listens for incoming connections."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21451
#, no-wrap
msgid "@code{policy} (default: @var{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21453
msgid "Connection policy.  @var{reject} policy requires to specify @var{known-hosts}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21454
#, no-wrap
msgid "@code{known-hosts} (default: @var{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21456
msgid "List of hosts which allowed for SSH connection from @command{webssh}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21457
#, no-wrap
msgid "@code{log-file} (default: @file{\"/var/log/webssh.log\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21459
msgid "Name of the file where @command{webssh} writes its log file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21460
#, no-wrap
msgid "@code{log-level} (default: @var{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21462
msgid "Logging level."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21466
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "block-facebook-hosts-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:21473
msgid "This service type adds a list of known Facebook hosts to the @file{/etc/hosts} file.  (@pxref{Host Names,,, libc, The GNU C Library Reference Manual})  Each line contains a entry that maps a known server name of the Facebook on-line service---e.g., @code{www.facebook.com}---to the local host---@code{127.0.0.1} or its IPv6 equivalent, @code{::1}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21476
msgid "This mechanism can prevent programs running locally, such as Web browsers, from accessing Facebook."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:21479
msgid "The @code{(gnu services avahi)} provides the following definition."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21480
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "avahi-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:21485
msgid "This is the service that runs @command{avahi-daemon}, a system-wide mDNS/DNS-SD responder that allows for service discovery and ``zero-configuration'' host name lookups (see @uref{https://avahi.org/}).  Its value must be an @code{avahi-configuration} record---see below."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21490
msgid "This service extends the name service cache daemon (nscd) so that it can resolve @code{.local} host names using @uref{https://0pointer.de/lennart/projects/nss-mdns/, nss-mdns}.  @xref{Name Service Switch}, for information on host name resolution."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21493
msgid "Additionally, add the @var{avahi} package to the system profile so that commands such as @command{avahi-browse} are directly usable."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21495
#, no-wrap
msgid "{Data Type} avahi-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21497
msgid "Data type representation the configuration for Avahi."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21500 guix-git/doc/guix.texi:33055
#, no-wrap
msgid "@code{host-name} (default: @code{#f})"
msgstr "@code{host-name} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21503
msgid "If different from @code{#f}, use that as the host name to publish for this machine; otherwise, use the machine's actual host name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21504 guix-git/doc/guix.texi:33250
#, no-wrap
msgid "@code{publish?} (default: @code{#t})"
msgstr "@code{publish?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:21507
msgid "When true, allow host names and services to be published (broadcast) over the network."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21508
#, no-wrap
msgid "@code{publish-workstation?} (default: @code{#t})"
msgstr "@code{publish-workstation?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:21512
msgid "When true, @command{avahi-daemon} publishes the machine's host name and IP address via mDNS on the local network.  To view the host names published on your local network, you can run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:21515
#, no-wrap
msgid "avahi-browse _workstation._tcp\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21517
#, no-wrap
msgid "@code{wide-area?} (default: @code{#f})"
msgstr "@code{wide-area?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21519
msgid "When true, DNS-SD over unicast DNS is enabled."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21520
#, no-wrap
msgid "@code{ipv4?} (default: @code{#t})"
msgstr "@code{ipv4?} (default: @code{#t})"

#. type: itemx
#: guix-git/doc/guix.texi:21521
#, no-wrap
msgid "@code{ipv6?} (default: @code{#t})"
msgstr "@code{ipv6?} (default: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:21523
msgid "These fields determine whether to use IPv4/IPv6 sockets."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21524
#, no-wrap
msgid "@code{domains-to-browse} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21526
msgid "This is a list of domains to browse."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21529
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "openvswitch-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:21533
msgid "This is the type of the @uref{https://www.openvswitch.org, Open vSwitch} service, whose value should be an @code{openvswitch-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21535
#, no-wrap
msgid "{Data Type} openvswitch-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21539
msgid "Data type representing the configuration of Open vSwitch, a multilayer virtual switch which is designed to enable massive network automation through programmatic extension."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21541
#, no-wrap
msgid "@code{package} (default: @var{openvswitch})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21543
msgid "Package object of the Open vSwitch."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21547
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "pagekite-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:21552
msgid "This is the service type for the @uref{https://pagekite.net, PageKite} service, a tunneling solution for making localhost servers publicly visible, even from behind restrictive firewalls or NAT without forwarded ports.  The value for this service type is a @code{pagekite-configuration} record."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21554
msgid "Here's an example exposing the local HTTP and SSH daemons:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21561
#, no-wrap
msgid ""
"(service pagekite-service-type\n"
"         (pagekite-configuration\n"
"           (kites '(\"http:@@kitename:localhost:80:@@kitesecret\"\n"
"                    \"raw/22:@@kitename:localhost:22:@@kitesecret\"))\n"
"           (extra-file \"/etc/pagekite.rc\")))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21564
#, no-wrap
msgid "{Data Type} pagekite-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21566
msgid "Data type representing the configuration of PageKite."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21568
#, no-wrap
msgid "@code{package} (default: @var{pagekite})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21570
msgid "Package object of PageKite."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21571
#, no-wrap
msgid "@code{kitename} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21573
msgid "PageKite name for authenticating to the frontend server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21574
#, no-wrap
msgid "@code{kitesecret} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21577
msgid "Shared secret for authenticating to the frontend server.  You should probably put this inside @code{extra-file} instead."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21578
#, no-wrap
msgid "@code{frontend} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21581
msgid "Connect to the named PageKite frontend server instead of the @uref{https://pagekite.net,,pagekite.net} service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21582
#, no-wrap
msgid "@code{kites} (default: @code{'(\"http:@@kitename:localhost:80:@@kitesecret\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21585
msgid "List of service kites to use.  Exposes HTTP on port 80 by default.  The format is @code{proto:kitename:host:port:secret}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21586
#, no-wrap
msgid "@code{extra-file} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21589
msgid "Extra configuration file to read, which you are expected to create manually.  Use this to add additional options and manage shared secrets out-of-band."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21593
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "yggdrasil-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:21597
msgid "The service type for connecting to the @uref{https://yggdrasil-network.github.io/, Yggdrasil network}, an early-stage implementation of a fully end-to-end encrypted IPv6 network."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:21604
msgid "Yggdrasil provides name-independent routing with cryptographically generated addresses.  Static addressing means you can keep the same address as long as you want, even if you move to a new location, or generate a new address (by generating new keys) whenever you want.  @uref{https://yggdrasil-network.github.io/2018/07/28/addressing.html}"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21608
msgid "Pass it a value of @code{yggdrasil-configuration} to connect it to public peers and/or local peers."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21612
msgid "Here is an example using public peers and a static address.  The static signing and encryption keys are defined in @file{/etc/yggdrasil-private.conf} (the default value for @code{config-file})."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21624
#, no-wrap
msgid ""
";; part of the operating-system declaration\n"
"(service yggdrasil-service-type\n"
"              (yggdrasil-configuration\n"
"               (autoconf? #f) ;; use only the public peers\n"
"               (json-config\n"
"               ;; choose one from\n"
"               ;; https://github.com/yggdrasil-network/public-peers\n"
"                '((peers . #(\"tcp://1.2.3.4:1337\"))))\n"
"               ;; /etc/yggdrasil-private.conf is the default value for config-file\n"
"               ))\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:21631
#, no-wrap
msgid ""
"# sample content for /etc/yggdrasil-private.conf\n"
"@{\n"
"  # Your public key. Your peers may ask you for this to put\n"
"  # into their AllowedPublicKeys configuration.\n"
"  PublicKey: 64277...\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:21635
#, no-wrap
msgid ""
"  # Your private key. DO NOT share this with anyone!\n"
"  PrivateKey: 5c750...\n"
"@}\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21638
#, no-wrap
msgid "{Data Type} yggdrasil-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21640
msgid "Data type representing the configuration of Yggdrasil."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21642
#, no-wrap
msgid "@code{package} (default: @code{yggdrasil})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21644
msgid "Package object of Yggdrasil."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21645
#, no-wrap
msgid "@code{json-config} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21651
msgid "Contents of @file{/etc/yggdrasil.conf}.  Will be merged with @file{/etc/yggdrasil-private.conf}.  Note that these settings are stored in the Guix store, which is readable to all users. @strong{Do not store your private keys in it}.  See the output of @code{yggdrasil -genconf} for a quick overview of valid keys and their default values."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21652
#, no-wrap
msgid "@code{autoconf?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21655
msgid "Whether to use automatic mode.  Enabling it makes Yggdrasil use adynamic IP and peer with IPv6 neighbors."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21658
msgid "How much detail to include in logs.  Use @code{'debug} for more detail."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21659
#, no-wrap
msgid "@code{log-to} (default: @code{'stdout})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21663
msgid "Where to send logs.  By default, the service logs standard output to @file{/var/log/yggdrasil.log}.  The alternative is @code{'syslog}, which sends output to the running syslog service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21664
#, no-wrap
msgid "@code{config-file} (default: @code{\"/etc/yggdrasil-private.conf\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21671
msgid "What HJSON file to load sensitive data from.  This is where private keys should be stored, which are necessary to specify if you don't want a randomized address after each restart.  Use @code{#f} to disable.  Options defined in this file take precedence over @code{json-config}.  Use the output of @code{yggdrasil -genconf} as a starting point.  To configure a static address, delete everything except these options:"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:21673
#, no-wrap
msgid "EncryptionPublicKey"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:21674
#, no-wrap
msgid "EncryptionPrivateKey"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:21675
#, no-wrap
msgid "SigningPublicKey"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:21676
#, no-wrap
msgid "SigningPrivateKey"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21681
#, no-wrap
msgid "IPFS"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21682
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "ipfs-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:21686
msgid "The service type for connecting to the @uref{https://ipfs.io,IPFS network}, a global, versioned, peer-to-peer file system. Pass it a @code{ipfs-configuration} to change the ports used for the gateway and API."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21688
msgid "Here's an example configuration, using some non-standard ports:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21694
#, no-wrap
msgid ""
"(service ipfs-service-type\n"
"         (ipfs-configuration\n"
"          (gateway \"/ip4/127.0.0.1/tcp/8880\")\n"
"          (api \"/ip4/127.0.0.1/tcp/8881\")))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21697
#, fuzzy, no-wrap
msgid "{Data Type} ipfs-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:21699
#, fuzzy
msgid "Data type representing the configuration of IPFS."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:21701
#, fuzzy, no-wrap
msgid "@code{package} (default: @code{go-ipfs})"
msgstr "@code{cache} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21703
msgid "Package object of IPFS."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21704
#, fuzzy, no-wrap
msgid "@code{gateway} (default: @code{\"/ip4/127.0.0.1/tcp/8082\"})"
msgstr "@code{porta} (default: @code{15000})"

#. type: table
#: guix-git/doc/guix.texi:21706
msgid "Address of the gateway, in ‘multiaddress’ format."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21707
#, fuzzy, no-wrap
msgid "@code{api} (default: @code{\"/ip4/127.0.0.1/tcp/5001\"})"
msgstr "@code{porta} (default: @code{15000})"

#. type: table
#: guix-git/doc/guix.texi:21709
msgid "Address of the API endpoint, in ‘multiaddress’ format."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21712
#, no-wrap
msgid "keepalived"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21713
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "keepalived-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:21718
msgid "This is the type for the @uref{https://www.keepalived.org/, Keepalived} routing software, @command{keepalived}.  Its value must be an @code{keepalived-configuration} record as in this example for master machine:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21723
#, no-wrap
msgid ""
"(service keepalived-service-type\n"
"         (keepalived-configuration\n"
"           (config-file (local-file \"keepalived-master.conf\"))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21726
msgid "where @file{keepalived-master.conf}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:21738
#, no-wrap
msgid ""
"vrrp_instance my-group @{\n"
"  state MASTER\n"
"  interface enp9s0\n"
"  virtual_router_id 100\n"
"  priority 100\n"
"  unicast_peer @{ 10.0.0.2 @}\n"
"  virtual_ipaddress @{\n"
"    10.0.0.4/24\n"
"  @}\n"
"@}\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21741
msgid "and for backup machine:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21746
#, no-wrap
msgid ""
"(service keepalived-service-type\n"
"         (keepalived-configuration\n"
"          (config-file (local-file \"keepalived-backup.conf\"))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21749
msgid "where @file{keepalived-backup.conf}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:21761
#, no-wrap
msgid ""
"vrrp_instance my-group @{\n"
"  state BACKUP\n"
"  interface enp9s0\n"
"  virtual_router_id 100\n"
"  priority 99\n"
"  unicast_peer @{ 10.0.0.3 @}\n"
"  virtual_ipaddress @{\n"
"    10.0.0.4/24\n"
"  @}\n"
"@}\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21767
#, no-wrap
msgid "unattended upgrades"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21768
#, no-wrap
msgid "upgrades, unattended"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:21773
msgid "Guix provides a service to perform @emph{unattended upgrades}: periodically, the system automatically reconfigures itself from the latest Guix.  Guix System has several properties that make unattended upgrades safe:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:21778
msgid "upgrades are transactional (either the upgrade succeeds or it fails, but you cannot end up with an ``in-between'' system state);"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:21782
msgid "the upgrade log is kept---you can view it with @command{guix system list-generations}---and you can roll back to any previous generation, should the upgraded system fail to behave as intended;"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:21785
msgid "channel code is authenticated so you know you can only run genuine code (@pxref{Channels});"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:21788
msgid "@command{guix system reconfigure} prevents downgrades, which makes it immune to @dfn{downgrade attacks}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:21793
msgid "To set up unattended upgrades, add an instance of @code{unattended-upgrade-service-type} like the one below to the list of your operating system services:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21796
#, no-wrap
msgid "(service unattended-upgrade-service-type)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:21803
msgid "The defaults above set up weekly upgrades: every Sunday at midnight.  You do not need to provide the operating system configuration file: it uses @file{/run/current-system/configuration.scm}, which ensures it always uses your latest configuration---@pxref{provenance-service-type}, for more information about this file."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:21809
msgid "There are several things that can be configured, in particular the periodicity and services (daemons) to be restarted upon completion.  When the upgrade is successful, the service takes care of deleting system generations older that some threshold, as per @command{guix system delete-generations}.  See the reference below for details."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:21813
msgid "To ensure that upgrades are actually happening, you can run @command{guix system describe}.  To investigate upgrade failures, visit the unattended upgrade log file (see below)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21814
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "unattended-upgrade-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:21818
msgid "This is the service type for unattended upgrades.  It sets up an mcron job (@pxref{Scheduled Job Execution}) that runs @command{guix system reconfigure} from the latest version of the specified channels."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21821
msgid "Its value must be a @code{unattended-upgrade-configuration} record (see below)."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21823
#, no-wrap
msgid "{Data Type} unattended-upgrade-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21826
msgid "This data type represents the configuration of the unattended upgrade service.  The following fields are available:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21828
#, no-wrap
msgid "@code{schedule} (default: @code{\"30 01 * * 0\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21832
msgid "This is the schedule of upgrades, expressed as a gexp containing an mcron job schedule (@pxref{Guile Syntax, mcron job specifications,, mcron, GNU@tie{}mcron})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21833
#, no-wrap
msgid "@code{channels} (default: @code{#~%default-channels})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21837
msgid "This gexp specifies the channels to use for the upgrade (@pxref{Channels}).  By default, the tip of the official @code{guix} channel is used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21838
#, no-wrap
msgid "@code{operating-system-file} (default: @code{\"/run/current-system/configuration.scm\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21841
msgid "This field specifies the operating system configuration file to use.  The default is to reuse the config file of the current configuration."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21847
msgid "There are cases, though, where referring to @file{/run/current-system/configuration.scm} is not enough, for instance because that file refers to extra files (SSH public keys, extra configuration files, etc.) @i{via} @code{local-file} and similar constructs.  For those cases, we recommend something along these lines:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21853
#, no-wrap
msgid ""
"(unattended-upgrade-configuration\n"
"  (operating-system-file\n"
"    (file-append (local-file \".\" \"config-dir\" #:recursive? #t)\n"
"                 \"/config.scm\")))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21860
msgid "The effect here is to import all of the current directory into the store, and to refer to @file{config.scm} within that directory.  Therefore, uses of @code{local-file} within @file{config.scm} will work as expected.  @xref{G-Expressions}, for information about @code{local-file} and @code{file-append}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21861
#, fuzzy, no-wrap
#| msgid "@code{options} (default: @code{#f})"
msgid "@code{operating-system-expression} (default: @code{#f})"
msgstr "@code{options} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21865
msgid "This field specifies an expression that evaluates to the operating system to use for the upgrade.  If no value is provided the @code{operating-system-file} field value is used."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:21870
#, no-wrap
msgid ""
"(unattended-upgrade-configuration\n"
"  (operating-system-expression\n"
"    #~(@@ (guix system install) installation-os)))\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21872
#, no-wrap
msgid "@code{services-to-restart} (default: @code{'(mcron)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21875
msgid "This field specifies the Shepherd services to restart when the upgrade completes."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21882
msgid "Those services are restarted right away upon completion, as with @command{herd restart}, which ensures that the latest version is running---remember that by default @command{guix system reconfigure} only restarts services that are not currently running, which is conservative: it minimizes disruption but leaves outdated services running."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21886
msgid "Use @command{herd status} to find out candidates for restarting.  @xref{Services}, for general information about services.  Common services to restart would include @code{ntpd} and @code{ssh-daemon}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21889
msgid "By default, the @code{mcron} service is restarted.  This ensures that the latest version of the unattended upgrade job will be used next time."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21890
#, no-wrap
msgid "@code{system-expiration} (default: @code{(* 3 30 24 3600)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21894
msgid "This is the expiration time in seconds for system generations.  System generations older that this amount of time are deleted with @command{guix system delete-generations} when an upgrade completes."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:21899
msgid "The unattended upgrade service does not run the garbage collector.  You will probably want to set up your own mcron job to run @command{guix gc} periodically."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21901
#, no-wrap
msgid "@code{maximum-duration} (default: @code{3600})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21904
msgid "Maximum duration in seconds for the upgrade; past that time, the upgrade aborts."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21907
msgid "This is primarily useful to ensure the upgrade does not end up rebuilding or re-downloading ``the world''."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21908
#, no-wrap
msgid "@code{log-file} (default: @code{\"/var/log/unattended-upgrade.log\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21910
msgid "File where unattended upgrades are logged."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21916
#, no-wrap
msgid "X11"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21917
#, no-wrap
msgid "X Window System"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21918 guix-git/doc/guix.texi:22114
#, no-wrap
msgid "login manager"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:21923
msgid "Support for the X Window graphical display system---specifically Xorg---is provided by the @code{(gnu services xorg)} module.  Note that there is no @code{xorg-service} procedure.  Instead, the X server is started by the @dfn{login manager}, by default the GNOME Display Manager (GDM)."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21924
#, no-wrap
msgid "GDM"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21925
#, no-wrap
msgid "GNOME, login manager"
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:21930
msgid "gdm"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:21930
msgid "GDM of course allows users to log in into window managers and desktop environments other than GNOME; for those using GNOME, GDM is required for features such as automatic screen locking."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21931
#, no-wrap
msgid "window manager"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:21936
msgid "To use X11, you must install at least one @dfn{window manager}---for example the @code{windowmaker} or @code{openbox} packages---preferably by adding it to the @code{packages} field of your operating system definition (@pxref{operating-system Reference, system-wide packages})."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:21942
msgid "wayland-gdm"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:21942
msgid "GDM also supports Wayland: it can itself use Wayland instead of X11 for its user interface, and it can also start Wayland sessions.  The former is required for the latter, to enable, set @code{wayland?} to @code{#t} in @code{gdm-configuration}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21943
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "gdm-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:21948
msgid "This is the type for the @uref{https://wiki.gnome.org/Projects/GDM/, GNOME Desktop Manager} (GDM), a program that manages graphical display servers and handles graphical user logins.  Its value must be a @code{gdm-configuration} (see below)."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:21949
#, no-wrap
msgid "session types"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21957
msgid "GDM looks for @dfn{session types} described by the @file{.desktop} files in @file{/run/current-system/profile/share/xsessions} (for X11 sessions) and @file{/run/current-system/profile/share/wayland-sessions} (for Wayland sessions) and allows users to choose a session from the log-in screen.  Packages such as @code{gnome}, @code{xfce}, @code{i3} and @code{sway} provide @file{.desktop} files; adding them to the system-wide set of packages automatically makes them available at the log-in screen."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:21961
msgid "In addition, @file{~/.xsession} files are honored.  When available, @file{~/.xsession} must be an executable that starts a window manager and/or other X clients."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:21963
#, no-wrap
msgid "{Data Type} gdm-configuration"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21965 guix-git/doc/guix.texi:22059
#, no-wrap
msgid "@code{auto-login?} (default: @code{#f})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:21966
#, no-wrap
msgid "@code{default-user} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21968
msgid "When @code{auto-login?} is false, GDM presents a log-in screen."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21971
msgid "When @code{auto-login?} is true, GDM logs in directly as @code{default-user}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21972
#, fuzzy, no-wrap
#| msgid "@code{manual?} (default: @code{#f})"
msgid "@code{auto-suspend?} (default @code{#t})"
msgstr "@code{manual?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21977
msgid "When true, GDM will automatically suspend to RAM when nobody is physically connected.  When a machine is used via remote desktop or SSH, this should be set to false to avoid GDM interrupting remote sessions or rendering the machine unavailable."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21978 guix-git/doc/guix.texi:28680
#: guix-git/doc/guix.texi:30738 guix-git/doc/guix.texi:35690
#: guix-git/doc/guix.texi:35719 guix-git/doc/guix.texi:35748
#: guix-git/doc/guix.texi:35775 guix-git/doc/guix.texi:35830
#: guix-git/doc/guix.texi:35855 guix-git/doc/guix.texi:35882
#: guix-git/doc/guix.texi:35908 guix-git/doc/guix.texi:35950
#, no-wrap
msgid "@code{debug?} (default: @code{#f})"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21980
msgid "When true, GDM writes debug messages to its log."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21981
#, no-wrap
msgid "@code{gnome-shell-assets} (default: ...)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21983
msgid "List of GNOME Shell assets needed by GDM: icon theme, fonts, etc."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21984
#, no-wrap
msgid "@code{xorg-configuration} (default: @code{(xorg-configuration)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21986 guix-git/doc/guix.texi:22086
#: guix-git/doc/guix.texi:22191
msgid "Configuration of the Xorg graphical server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21987
#, fuzzy, no-wrap
#| msgid "@code{node} (default: @code{#f})"
msgid "@code{x-session} (default: @code{(xinitrc)})"
msgstr "@code{node} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21989 guix-git/doc/guix.texi:22206
msgid "Script to run before starting a X session."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21990
#, fuzzy, no-wrap
#| msgid "@code{id} (default: @code{#f})"
msgid "@code{xdmcp?} (default: @code{#f})"
msgstr "@code{id} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:21995
msgid "When true, enable the X Display Manager Control Protocol (XDMCP).  This should only be enabled in trusted environments, as the protocol is not secure.  When enabled, GDM listens for XDMCP queries on the UDP port 177."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21996
#, no-wrap
msgid "@code{dbus-daemon} (default: @code{dbus-daemon-wrapper})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:21998
msgid "File name of the @code{dbus-daemon} executable."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:21999
#, no-wrap
msgid "@code{gdm} (default: @code{gdm})"
msgstr "@code{gdm} (default: @code{gdm})"

#. type: table
#: guix-git/doc/guix.texi:22001
msgid "The GDM package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22002
#, fuzzy, no-wrap
#| msgid "@code{node} (default: @code{#f})"
msgid "@code{wayland?} (default: @code{#f})"
msgstr "@code{node} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22004
msgid "When true, enables Wayland in GDM, necessary to use Wayland sessions."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22005
#, fuzzy, no-wrap
msgid "@code{wayland-session} (default: @code{gdm-wayland-session-wrapper})"
msgstr "@code{tmpdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22008
msgid "The Wayland session wrapper to use, needed to setup the environment."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:22011
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "slim-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:22013
msgid "This is the type for the SLiM graphical login manager for X11."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:22017
msgid "Like GDM, SLiM looks for session types described by @file{.desktop} files and allows users to choose a session from the log-in screen using @kbd{F1}.  It also honors @file{~/.xsession} files."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:22024
msgid "Unlike GDM, SLiM does not spawn the user session on a different VT after logging in, which means that you can only start one graphical session.  If you want to be able to run multiple graphical sessions at the same time you have to add multiple SLiM services to your system services.  The following example shows how to replace the default GDM service with two SLiM services on tty7 and tty8."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:22029
#, no-wrap
msgid ""
"(use-modules (gnu services)\n"
"             (gnu services desktop)\n"
"             (gnu services xorg))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:22040
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; ...\n"
"  (services (cons* (service slim-service-type (slim-configuration\n"
"                                               (display \":0\")\n"
"                                               (vt \"vt7\")))\n"
"                   (service slim-service-type (slim-configuration\n"
"                                               (display \":1\")\n"
"                                               (vt \"vt8\")))\n"
"                   (modify-services %desktop-services\n"
"                     (delete gdm-service-type)))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:22044
#, no-wrap
msgid "{Data Type} slim-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:22046
msgid "Data type representing the configuration of @code{slim-service-type}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22050
msgid "Whether to allow logins with empty passwords."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22051
#, fuzzy, no-wrap
#| msgid "@code{hangup?} (default: @code{#f})"
msgid "@code{gnupg?} (default: @code{#f})"
msgstr "@code{hangup?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22058
msgid "If enabled, @code{pam-gnupg} will attempt to automatically unlock the user's GPG keys with the login password via @code{gpg-agent}.  The keygrips of all keys to be unlocked should be written to @file{~/.pam-gnupg}, and can be queried with @code{gpg -K --with-keygrip}.  Presetting passphrases must be enabled by adding @code{allow-preset-passphrase} in @file{~/.gnupg/gpg-agent.conf}."
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:22060
#, no-wrap
msgid "@code{default-user} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22062
msgid "When @code{auto-login?} is false, SLiM presents a log-in screen."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22065
msgid "When @code{auto-login?} is true, SLiM logs in directly as @code{default-user}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22066
#, no-wrap
msgid "@code{theme} (default: @code{%default-slim-theme})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:22067
#, no-wrap
msgid "@code{theme-name} (default: @code{%default-slim-theme-name})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22069
msgid "The graphical theme to use and its name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22070
#, no-wrap
msgid "@code{auto-login-session} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22073
msgid "If true, this must be the name of the executable to start as the default session---e.g., @code{(file-append windowmaker \"/bin/windowmaker\")}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22077
msgid "If false, a session described by one of the available @file{.desktop} files in @code{/run/current-system/profile} and @code{~/.guix-profile} will be used."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:22082
msgid "You must install at least one window manager in the system profile or in your user profile.  Failing to do that, if @code{auto-login-session} is false, you will be unable to log in."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22084 guix-git/doc/guix.texi:22189
#, no-wrap
msgid "@code{xorg-configuration} (default @code{(xorg-configuration)})"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22087
#, no-wrap
msgid "@code{display} (default @code{\":0\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22089
msgid "The display on which to start the Xorg graphical server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22090
#, no-wrap
msgid "@code{vt} (default @code{\"vt7\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22092
msgid "The VT on which to start the Xorg graphical server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22093
#, no-wrap
msgid "@code{xauth} (default: @code{xauth})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22095
msgid "The XAuth package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22096
#, no-wrap
msgid "@code{shepherd} (default: @code{shepherd})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22099
msgid "The Shepherd package used when invoking @command{halt} and @command{reboot}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22100
#, no-wrap
msgid "@code{sessreg} (default: @code{sessreg})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22102
msgid "The sessreg package used in order to register the session."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22103
#, no-wrap
msgid "@code{slim} (default: @code{slim})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22105
msgid "The SLiM package to use."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:22108
#, no-wrap
msgid "%default-theme"
msgstr ""

#. type: defvarx
#: guix-git/doc/guix.texi:22109
#, no-wrap
msgid "%default-theme-name"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:22111
msgid "The default SLiM theme and its name."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:22115
#, no-wrap
msgid "X11 login"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:22116
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "sddm-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:22120
msgid "This is the type of the service to run the @uref{https://github.com/sddm/sddm,SDDM display manager}.  Its value must be a @code{sddm-configuration} record (see below)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:22122
msgid "Here's an example use:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:22128
#, no-wrap
msgid ""
"(service sddm-service-type\n"
"         (sddm-configuration\n"
"           (auto-login-user \"alice\")\n"
"           (auto-login-session \"xfce.desktop\")))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:22131
#, no-wrap
msgid "{Data Type} sddm-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:22134
msgid "This data type represents the configuration of the SDDM login manager.  The available fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22136
#, no-wrap
msgid "@code{sddm} (default: @code{sddm})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22138
msgid "The SDDM package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22139
#, no-wrap
msgid "@code{display-server} (default: \"x11\")"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22142
msgid "Select display server to use for the greeter.  Valid values are @samp{\"x11\"} or @samp{\"wayland\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22143
#, no-wrap
msgid "@code{numlock} (default: \"on\")"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22145
msgid "Valid values are @samp{\"on\"}, @samp{\"off\"} or @samp{\"none\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22146
#, fuzzy, no-wrap
msgid "@code{halt-command} (default @code{#~(string-append #$shepherd \"/sbin/halt\")})"
msgstr "@code{tmpdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22148
msgid "Command to run when halting."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22149
#, no-wrap
msgid "@code{reboot-command} (default @code{#~(string-append #$shepherd \"/sbin/reboot\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22151
msgid "Command to run when rebooting."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22152
#, no-wrap
msgid "@code{theme} (default \"maldives\")"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22155
msgid "Theme to use.  Default themes provided by SDDM are @samp{\"elarun\"}, @samp{\"maldives\"} or @samp{\"maya\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22156
#, no-wrap
msgid "@code{themes-directory} (default \"/run/current-system/profile/share/sddm/themes\")"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22158
msgid "Directory to look for themes."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22159
#, no-wrap
msgid "@code{faces-directory} (default \"/run/current-system/profile/share/sddm/faces\")"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22161
msgid "Directory to look for faces."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22162
#, no-wrap
msgid "@code{default-path} (default \"/run/current-system/profile/bin\")"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22164
msgid "Default PATH to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22165
#, no-wrap
msgid "@code{minimum-uid} (default: 1000)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22167
msgid "Minimum UID displayed in SDDM and allowed for log-in."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22168
#, no-wrap
msgid "@code{maximum-uid} (default: 2000)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22170
msgid "Maximum UID to display in SDDM."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22171
#, no-wrap
msgid "@code{remember-last-user?} (default #t)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22173
msgid "Remember last user."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22174
#, no-wrap
msgid "@code{remember-last-session?} (default #t)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22176
msgid "Remember last session."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22177
#, no-wrap
msgid "@code{hide-users} (default \"\")"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22179
msgid "Usernames to hide from SDDM greeter."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22180
#, no-wrap
msgid "@code{hide-shells} (default @code{#~(string-append #$shadow \"/sbin/nologin\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22182
msgid "Users with shells listed will be hidden from the SDDM greeter."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22183
#, no-wrap
msgid "@code{session-command} (default @code{#~(string-append #$sddm \"/share/sddm/scripts/wayland-session\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22185
msgid "Script to run before starting a wayland session."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22186
#, no-wrap
msgid "@code{sessions-directory} (default \"/run/current-system/profile/share/wayland-sessions\")"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22188
msgid "Directory to look for desktop files starting wayland sessions."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22192
#, no-wrap
msgid "@code{xauth-path} (default @code{#~(string-append #$xauth \"/bin/xauth\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22194
msgid "Path to xauth."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22195
#, no-wrap
msgid "@code{xephyr-path} (default @code{#~(string-append #$xorg-server \"/bin/Xephyr\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22197
msgid "Path to Xephyr."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22198
#, no-wrap
msgid "@code{xdisplay-start} (default @code{#~(string-append #$sddm \"/share/sddm/scripts/Xsetup\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22200
msgid "Script to run after starting xorg-server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22201
#, no-wrap
msgid "@code{xdisplay-stop} (default @code{#~(string-append #$sddm \"/share/sddm/scripts/Xstop\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22203
msgid "Script to run before stopping xorg-server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22204
#, no-wrap
msgid "@code{xsession-command} (default: @code{xinitrc})"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22207
#, no-wrap
msgid "@code{xsessions-directory} (default: \"/run/current-system/profile/share/xsessions\")"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22209
msgid "Directory to look for desktop files starting X sessions."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22210
#, no-wrap
msgid "@code{minimum-vt} (default: 7)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22212
msgid "Minimum VT to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22213
#, no-wrap
msgid "@code{auto-login-user} (default \"\")"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22216
msgid "User account that will be automatically logged in.  Setting this to the empty string disables auto-login."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22217
#, no-wrap
msgid "@code{auto-login-session} (default \"\")"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22219
msgid "The @file{.desktop} file name to use as the auto-login session, or the empty string."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22220
#, no-wrap
msgid "@code{relogin?} (default #f)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22222
msgid "Relogin after logout."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:22226
#, no-wrap
msgid "lightdm, graphical login manager"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:22227
#, no-wrap
msgid "display manager, lightdm"
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:22229
msgid "lightdm"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:22229
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "lightdm-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:22237
msgid "This is the type of the service to run the @url{https://github.com/canonical/lightdm,LightDM display manager}.  Its value must be a @code{lightdm-configuration} record, which is documented below.  Among its distinguishing features are TigerVNC integration for easily remoting your desktop as well as support for the XDMCP protocol, which can be used by remote clients to start a session from the login manager."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:22239
msgid "In its most basic form, it can be used simply as:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:22242
#, fuzzy, no-wrap
msgid "(service lightdm-service-type)\n"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:22246
msgid "A more elaborate example making use of the VNC capabilities and enabling more features and verbose logs could look like:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:22260
#, no-wrap
msgid ""
"(service lightdm-service-type\n"
"         (lightdm-configuration\n"
"          (allow-empty-passwords? #t)\n"
"          (xdmcp? #t)\n"
"          (vnc-server? #t)\n"
"          (vnc-server-command\n"
"           (file-append tigervnc-server \"/bin/Xvnc\"\n"
"                        \"  -SecurityTypes None\"))\n"
"          (seats\n"
"           (list (lightdm-seat-configuration\n"
"                  (name \"*\")\n"
"                  (user-session \"ratpoison\"))))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:22267
#, fuzzy, no-wrap
msgid "{Data Type} lightdm-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:22269
msgid "Available @code{lightdm-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22271
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{lightdm} (default: @code{lightdm}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:22273
#, fuzzy
msgid "The lightdm package to use."
msgstr "O pacote GPM a ser usado."

#. type: table
#: guix-git/doc/guix.texi:22276
msgid "Whether users not having a password set can login."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22279
msgid "Enable verbose output."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22280
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{xorg-configuration} (type: xorg-configuration)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:22284
msgid "The default Xorg server configuration to use to generate the Xorg server start script.  It can be refined per seat via the @code{xserver-command} of the @code{<lightdm-seat-configuration>} record, if desired."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22285
#, fuzzy, no-wrap
msgid "@code{greeters} (type: list-of-greeter-configurations)"
msgstr "build-machine {Data Type}"

#. type: table
#: guix-git/doc/guix.texi:22287
msgid "The LightDM greeter configurations specifying the greeters to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22288
#, fuzzy, no-wrap
msgid "@code{seats} (type: list-of-seat-configurations)"
msgstr "build-machine {Data Type}"

#. type: table
#: guix-git/doc/guix.texi:22290
msgid "The seat configurations to use.  A LightDM seat is akin to a user."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22291 guix-git/doc/guix.texi:32329
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{xdmcp?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22293
msgid "Whether a XDMCP server should listen on port UDP 177."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22294
#, fuzzy, no-wrap
msgid "@code{xdmcp-listen-address} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22297
msgid "The host or IP address the XDMCP server listens for incoming connections.  When unspecified, listen on for any hosts/IP addresses."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22298
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{vnc-server?} (default: @code{#f}) (type: boolean)"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22300
msgid "Whether a VNC server is started."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22301
#, fuzzy, no-wrap
msgid "@code{vnc-server-command} (type: file-like)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22305
msgid "The Xvnc command to use for the VNC server, it's possible to provide extra options not otherwise exposed along the command, for example to disable security:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:22309
#, no-wrap
msgid ""
"(vnc-server-command (file-append tigervnc-server \"/bin/Xvnc\"\n"
"                                 \" -SecurityTypes None\" ))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22313
msgid "Or to set a PasswordFile for the classic (unsecure) VncAuth mechanism:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:22317
#, no-wrap
msgid ""
"(vnc-server-command (file-append tigervnc-server \"/bin/Xvnc\"\n"
"                                 \" -PasswordFile /var/lib/lightdm/.vnc/passwd\"))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22323
msgid "The password file should be manually created using the @command{vncpasswd} command.  Note that LightDM will create new sessions for VNC users, which means they need to authenticate in the same way as local users would."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22324
#, fuzzy, no-wrap
msgid "@code{vnc-server-listen-address} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22327
msgid "The host or IP address the VNC server listens for incoming connections.  When unspecified, listen for any hosts/IP addresses."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22328
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{vnc-server-port} (default: @code{5900}) (type: number)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22330
msgid "The TCP port the VNC server should listen to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22331 guix-git/doc/guix.texi:22380
#: guix-git/doc/guix.texi:22418
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{extra-config} (default: @code{'()}) (type: list-of-strings)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22333
msgid "Extra configuration values to append to the LightDM configuration file."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:22341
#, fuzzy, no-wrap
msgid "{Data Type} lightdm-gtk-greeter-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:22343
msgid "Available @code{lightdm-gtk-greeter-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22345
#, fuzzy, no-wrap
msgid "@code{lightdm-gtk-greeter} (default: @code{lightdm-gtk-greeter}) (type: file-like)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22347
#, fuzzy
msgid "The lightdm-gtk-greeter package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:22348
#, no-wrap
msgid "@code{assets} (default: @code{(adwaita-icon-theme gnome-themes-extra hicolor-icon-theme)}) (type: list-of-file-likes)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22351
msgid "The list of packages complementing the greeter, such as package providing icon themes."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22352
#, fuzzy, no-wrap
msgid "@code{theme-name} (default: @code{\"Adwaita\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22354
#, fuzzy
#| msgid "The host name of the remote machine."
msgid "The name of the theme to use."
msgstr "O nome de host da máquina remota."

#. type: item
#: guix-git/doc/guix.texi:22355
#, fuzzy, no-wrap
msgid "@code{icon-theme-name} (default: @code{\"Adwaita\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22357
#, fuzzy
#| msgid "The host name of the remote machine."
msgid "The name of the icon theme to use."
msgstr "O nome de host da máquina remota."

#. type: item
#: guix-git/doc/guix.texi:22358
#, fuzzy, no-wrap
msgid "@code{cursor-theme-name} (default: @code{\"Adwaita\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22360
#, fuzzy
#| msgid "The host name of the remote machine."
msgid "The name of the cursor theme to use."
msgstr "O nome de host da máquina remota."

#. type: item
#: guix-git/doc/guix.texi:22361
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{cursor-theme-size} (default: @code{16}) (type: number)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22363
#, fuzzy
#| msgid "The host name of the remote machine."
msgid "The size to use for the cursor theme."
msgstr "O nome de host da máquina remota."

#. type: item
#: guix-git/doc/guix.texi:22364
#, fuzzy, no-wrap
#| msgid "@code{no-hints?} (default: @code{#f})"
msgid "@code{allow-debugging?} (type: maybe-boolean)"
msgstr "@code{no-hints?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22366
msgid "Set to #t to enable debug log level."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22367
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{background} (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:22369
#, fuzzy
#| msgid "The GPM package to use."
msgid "The background image to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:22370
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{at-spi-enabled?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22373
msgid "Enable accessibility support through the Assistive Technology Service Provider Interface (AT-SPI)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22374
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{a11y-states} (default: @code{(contrast font keyboard reader)}) (type: list-of-a11y-states)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:22376
msgid "The accessibility features to enable, given as list of symbols."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22377
#, fuzzy, no-wrap
msgid "@code{reader} (type: maybe-file-like)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22379
msgid "The command to use to launch a screen reader."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22383
msgid "Extra configuration values to append to the LightDM GTK Greeter configuration file."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:22390
#, fuzzy, no-wrap
msgid "{Data Type} lightdm-seat-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:22392
msgid "Available @code{lightdm-seat-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22394
#, fuzzy, no-wrap
msgid "@code{name} (type: seat-name)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22397
msgid "The name of the seat.  An asterisk (*) can be used in the name to apply the seat configuration to all the seat names it matches."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22398
#, fuzzy, no-wrap
msgid "@code{user-session} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22401
msgid "The session to use by default.  The session name must be provided as a lowercase string, such as @code{\"gnome\"}, @code{\"ratpoison\"}, etc."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22402
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{type} (default: @code{local}) (type: seat-type)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:22404
msgid "The type of the seat, either the @code{local} or @code{xremote} symbol."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22405
#, fuzzy, no-wrap
msgid "@code{autologin-user} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22407
msgid "The username to automatically log in with by default."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22408
#, fuzzy, no-wrap
msgid "@code{greeter-session} (default: @code{lightdm-gtk-greeter}) (type: greeter-session)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22411
msgid "The greeter session to use, specified as a symbol.  Currently, only @code{lightdm-gtk-greeter} is supported."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22412
#, fuzzy, no-wrap
msgid "@code{xserver-command} (type: maybe-file-like)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22414
#, fuzzy
#| msgid "The GPM package to use."
msgid "The Xorg server command to run."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:22415
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{session-wrapper} (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:22417
#, fuzzy
msgid "The xinitrc session wrapper to use."
msgstr "O pacote GPM a ser usado."

#. type: table
#: guix-git/doc/guix.texi:22420
msgid "Extra configuration values to append to the seat configuration section."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:22426
#, no-wrap
msgid "Xorg, configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:22427
#, no-wrap
msgid "{Data Type} xorg-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:22433
msgid "This data type represents the configuration of the Xorg graphical display server.  Note that there is no Xorg service; instead, the X server is started by a ``display manager'' such as GDM, SDDM, LightDM or SLiM@.  Thus, the configuration of these display managers aggregates an @code{xorg-configuration} record."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22435
#, no-wrap
msgid "@code{modules} (default: @code{%default-xorg-modules})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22438
msgid "This is a list of @dfn{module packages} loaded by the Xorg server---e.g., @code{xf86-video-vesa}, @code{xf86-input-keyboard}, and so on."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22439
#, no-wrap
msgid "@code{fonts} (default: @code{%default-xorg-fonts})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22441
msgid "This is a list of font directories to add to the server's @dfn{font path}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22442
#, no-wrap
msgid "@code{drivers} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22446
msgid "This must be either the empty list, in which case Xorg chooses a graphics driver automatically, or a list of driver names that will be tried in this order---e.g., @code{'(\"modesetting\" \"vesa\")}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22447
#, no-wrap
msgid "@code{resolutions} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22451
msgid "When @code{resolutions} is the empty list, Xorg chooses an appropriate screen resolution.  Otherwise, it must be a list of resolutions---e.g., @code{'((1024 768) (640 480))}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:22452
#, no-wrap
msgid "keyboard layout, for Xorg"
msgstr "disposição do teclado, para Xorg"

#. type: cindex
#: guix-git/doc/guix.texi:22453
#, no-wrap
msgid "keymap, for Xorg"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22457
msgid "If this is @code{#f}, Xorg uses the default keyboard layout---usually US English (``qwerty'') for a 105-key PC keyboard."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22461
msgid "Otherwise this must be a @code{keyboard-layout} object specifying the keyboard layout in use when Xorg is running.  @xref{Keyboard Layout}, for more information on how to specify the keyboard layout."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22462 guix-git/doc/guix.texi:24802
#: guix-git/doc/guix.texi:38747
#, no-wrap
msgid "@code{extra-config} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22465 guix-git/doc/guix.texi:38751
msgid "This is a list of strings or objects appended to the configuration file.  It is used to pass extra text to be added verbatim to the configuration file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22466
#, no-wrap
msgid "@code{server} (default: @code{xorg-server})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22468
msgid "This is the package providing the Xorg server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22469
#, no-wrap
msgid "@code{server-arguments} (default: @code{%default-xorg-server-arguments})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22472
msgid "This is the list of command-line arguments to pass to the X server.  The default is @code{-nolisten tcp}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:22475
#, fuzzy, no-wrap
msgid "set-xorg-configuration config [login-manager-service-type]"
msgstr "guix-publish-service-type"

#. type: defun
#: guix-git/doc/guix.texi:22478
msgid "Tell the log-in manager (of type @var{login-manager-service-type}) to use @var{config}, an @code{<xorg-configuration>} record."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:22482
msgid "Since the Xorg configuration is embedded in the log-in manager's configuration---e.g., @code{gdm-configuration}---this procedure provides a shorthand to set the Xorg configuration."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:22484
#, no-wrap
msgid "xorg-start-command [config]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:22488
msgid "Return a @code{startx} script in which the modules, fonts, etc. specified in @var{config}, are available.  The result should be used in place of @code{startx}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:22490
msgid "Usually the X server is started by a login manager."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:22493
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "screen-locker-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:22497
msgid "Type for a service that adds a package for a screen locker or screen saver to the set of setuid programs and add a PAM entry for it.  The value for this service is a @code{<screen-locker-configuration>} object."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:22499
msgid "For example, to make XlockMore usable:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:22504
#, no-wrap
msgid ""
"(service screen-locker-service-type\n"
"         (screen-locker-configuration\n"
"           \"xlock\" (file-append xlockmore \"/bin/xlock\") #f))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:22507
msgid "makes the good ol' XlockMore usable."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:22509
#, fuzzy, no-wrap
msgid "{Data Type} screen-locker-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:22512
#, fuzzy
msgid "Data type representing the configuration of @code{screen-locker-service-type}."
msgstr "Gerencie a configuração do sistema operacional."

#. type: table
#: guix-git/doc/guix.texi:22516
#, fuzzy
#| msgid "The host name of the remote machine."
msgid "Name of the screen locker."
msgstr "O nome de host da máquina remota."

#. type: item
#: guix-git/doc/guix.texi:22517
#, fuzzy, no-wrap
msgid "@code{program} (type: gexp)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:22519
msgid "Path to the executable for the screen locker as a G-Expression."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22520
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{allow-empty-password?} (type: boolean)"
msgstr "@code{users} (default: @code{#f})"

#. type: cindex
#: guix-git/doc/guix.texi:22529
#, no-wrap
msgid "printer support with CUPS"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:22533
msgid "The @code{(gnu services cups)} module provides a Guix service definition for the CUPS printing service.  To add printer support to a Guix system, add a @code{cups-service} to the operating system definition:"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:22534
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "cups-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:22538
msgid "The service type for the CUPS print server.  Its value should be a valid CUPS configuration (see below).  To use the default settings, simply write:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:22540
#, no-wrap
msgid "(service cups-service-type)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:22550
msgid "The CUPS configuration controls the basic things about your CUPS installation: what interfaces it listens on, what to do if a print job fails, how much logging to do, and so on.  To actually add a printer, you have to visit the @url{http://localhost:631} URL, or use a tool such as GNOME's printer configuration services.  By default, configuring a CUPS service will generate a self-signed certificate if needed, for secure connections to the print server."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:22556
msgid "Suppose you want to enable the Web interface of CUPS and also add support for Epson printers @i{via} the @code{epson-inkjet-printer-escpr} package and for HP printers @i{via} the @code{hplip-minimal} package.  You can do that directly, like this (you need to use the @code{(gnu packages cups)} module):"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:22563
#, no-wrap
msgid ""
"(service cups-service-type\n"
"         (cups-configuration\n"
"           (web-interface? #t)\n"
"           (extensions\n"
"             (list cups-filters epson-inkjet-printer-escpr hplip-minimal))))\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:22569
msgid "If you wish to use the Qt5 based GUI which comes with the hplip package then it is suggested that you install the @code{hplip} package, either in your OS configuration file or as your user."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:22577
msgid "The available configuration parameters follow.  Each parameter definition is preceded by its type; for example, @samp{string-list foo} indicates that the @code{foo} parameter should be specified as a list of strings.  There is also a way to specify the configuration as a string, if you have an old @code{cupsd.conf} file that you want to port over from some other system; see the end for more details."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:22588
msgid "Available @code{cups-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22589
#, no-wrap
msgid "{@code{cups-configuration} parameter} package cups"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22591 guix-git/doc/guix.texi:23326
msgid "The CUPS package."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22593
#, no-wrap
msgid "{@code{cups-configuration} parameter} package-list extensions (default: @code{(list brlaser cups-filters epson-inkjet-printer-escpr foomatic-filters hplip-minimal splix)})"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22595
msgid "Drivers and other extensions to the CUPS package."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22597
#, no-wrap
msgid "{@code{cups-configuration} parameter} files-configuration files-configuration"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22600
msgid "Configuration of where to write logs, what directories to use for print spools, and related privileged configuration parameters."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22602
msgid "Available @code{files-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22603
#, no-wrap
msgid "{@code{files-configuration} parameter} log-location access-log"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22611
msgid "Defines the access log filename.  Specifying a blank filename disables access log generation.  The value @code{stderr} causes log entries to be sent to the standard error file when the scheduler is running in the foreground, or to the system log daemon when run in the background.  The value @code{syslog} causes log entries to be sent to the system log daemon.  The server name may be included in filenames using the string @code{%s}, as in @code{/var/log/cups/%s-access_log}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22613
msgid "Defaults to @samp{\"/var/log/cups/access_log\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22615
#, no-wrap
msgid "{@code{files-configuration} parameter} file-name cache-dir"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22617
msgid "Where CUPS should cache data."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22619
msgid "Defaults to @samp{\"/var/cache/cups\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22621
#, no-wrap
msgid "{@code{files-configuration} parameter} string config-file-perm"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22624
msgid "Specifies the permissions for all configuration files that the scheduler writes."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22630
msgid "Note that the permissions for the printers.conf file are currently masked to only allow access from the scheduler user (typically root).  This is done because printer device URIs sometimes contain sensitive authentication information that should not be generally known on the system.  There is no way to disable this security feature."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22632
msgid "Defaults to @samp{\"0640\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22634
#, no-wrap
msgid "{@code{files-configuration} parameter} log-location error-log"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22642
msgid "Defines the error log filename.  Specifying a blank filename disables error log generation.  The value @code{stderr} causes log entries to be sent to the standard error file when the scheduler is running in the foreground, or to the system log daemon when run in the background.  The value @code{syslog} causes log entries to be sent to the system log daemon.  The server name may be included in filenames using the string @code{%s}, as in @code{/var/log/cups/%s-error_log}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22644
msgid "Defaults to @samp{\"/var/log/cups/error_log\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22646
#, no-wrap
msgid "{@code{files-configuration} parameter} string fatal-errors"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22649
msgid "Specifies which errors are fatal, causing the scheduler to exit.  The kind strings are:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22653
msgid "No errors are fatal."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22656
msgid "All of the errors below are fatal."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22657
#, no-wrap
msgid "browse"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22660
msgid "Browsing initialization errors are fatal, for example failed connections to the DNS-SD daemon."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22661
#, no-wrap
msgid "config"
msgstr "config"

#. type: table
#: guix-git/doc/guix.texi:22663
msgid "Configuration file syntax errors are fatal."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22664
#, no-wrap
msgid "listen"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22667
msgid "Listen or Port errors are fatal, except for IPv6 failures on the loopback or @code{any} addresses."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22668
#, no-wrap
msgid "log"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22670
msgid "Log file creation or write errors are fatal."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:22671
#, no-wrap
msgid "permissions"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:22674
msgid "Bad startup file permissions are fatal, for example shared TLS certificate and key files with world-read permissions."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22677
msgid "Defaults to @samp{\"all -browse\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22679
#, no-wrap
msgid "{@code{files-configuration} parameter} boolean file-device?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22682
msgid "Specifies whether the file pseudo-device can be used for new printer queues.  The URI @uref{file:///dev/null} is always allowed."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22684 guix-git/doc/guix.texi:22760
#: guix-git/doc/guix.texi:22802 guix-git/doc/guix.texi:22821
#: guix-git/doc/guix.texi:22827 guix-git/doc/guix.texi:22915
#: guix-git/doc/guix.texi:22992 guix-git/doc/guix.texi:23300
#: guix-git/doc/guix.texi:23313 guix-git/doc/guix.texi:25072
#: guix-git/doc/guix.texi:26560 guix-git/doc/guix.texi:26666
#: guix-git/doc/guix.texi:26731 guix-git/doc/guix.texi:26740
#: guix-git/doc/guix.texi:27986 guix-git/doc/guix.texi:28030
#: guix-git/doc/guix.texi:28047 guix-git/doc/guix.texi:28055
#: guix-git/doc/guix.texi:28070 guix-git/doc/guix.texi:28088
#: guix-git/doc/guix.texi:28112 guix-git/doc/guix.texi:28165
#: guix-git/doc/guix.texi:28298 guix-git/doc/guix.texi:28332
#: guix-git/doc/guix.texi:28368 guix-git/doc/guix.texi:28384
#: guix-git/doc/guix.texi:28412 guix-git/doc/guix.texi:28473
#: guix-git/doc/guix.texi:28556 guix-git/doc/guix.texi:33544
#: guix-git/doc/guix.texi:33558 guix-git/doc/guix.texi:33758
#: guix-git/doc/guix.texi:33803 guix-git/doc/guix.texi:33890
#: guix-git/doc/guix.texi:34344 guix-git/doc/guix.texi:34377
#: guix-git/doc/guix.texi:34517 guix-git/doc/guix.texi:34528
#: guix-git/doc/guix.texi:34779 guix-git/doc/guix.texi:36321
#: guix-git/doc/guix.texi:36330 guix-git/doc/guix.texi:36338
#: guix-git/doc/guix.texi:36346 guix-git/doc/guix.texi:36362
#: guix-git/doc/guix.texi:36378 guix-git/doc/guix.texi:36386
#: guix-git/doc/guix.texi:36394 guix-git/doc/guix.texi:36403
#: guix-git/doc/guix.texi:36412 guix-git/doc/guix.texi:36428
#: guix-git/doc/guix.texi:36492 guix-git/doc/guix.texi:36598
#: guix-git/doc/guix.texi:36606 guix-git/doc/guix.texi:36614
#: guix-git/doc/guix.texi:36639 guix-git/doc/guix.texi:36693
#: guix-git/doc/guix.texi:36741 guix-git/doc/guix.texi:36942
#: guix-git/doc/guix.texi:36949
msgid "Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22686
#, no-wrap
msgid "{@code{files-configuration} parameter} string group"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22689
msgid "Specifies the group name or ID that will be used when executing external programs."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22691 guix-git/doc/guix.texi:22777
msgid "Defaults to @samp{\"lp\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22693
#, no-wrap
msgid "{@code{files-configuration} parameter} string log-file-group"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22695
msgid "Specifies the group name or ID that will be used for log files."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22697
msgid "Defaults to @samp{\"lpadmin\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22699
#, no-wrap
msgid "{@code{files-configuration} parameter} string log-file-perm"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22701
msgid "Specifies the permissions for all log files that the scheduler writes."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22703
msgid "Defaults to @samp{\"0644\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22705
#, no-wrap
msgid "{@code{files-configuration} parameter} log-location page-log"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22713
msgid "Defines the page log filename.  Specifying a blank filename disables page log generation.  The value @code{stderr} causes log entries to be sent to the standard error file when the scheduler is running in the foreground, or to the system log daemon when run in the background.  The value @code{syslog} causes log entries to be sent to the system log daemon.  The server name may be included in filenames using the string @code{%s}, as in @code{/var/log/cups/%s-page_log}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22715
msgid "Defaults to @samp{\"/var/log/cups/page_log\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22717
#, no-wrap
msgid "{@code{files-configuration} parameter} string remote-root"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22720
msgid "Specifies the username that is associated with unauthenticated accesses by clients claiming to be the root user.  The default is @code{remroot}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22722
msgid "Defaults to @samp{\"remroot\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22724
#, no-wrap
msgid "{@code{files-configuration} parameter} file-name request-root"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22727
msgid "Specifies the directory that contains print jobs and other HTTP request data."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22729
msgid "Defaults to @samp{\"/var/spool/cups\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22731
#, no-wrap
msgid "{@code{files-configuration} parameter} sandboxing sandboxing"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22736
msgid "Specifies the level of security sandboxing that is applied to print filters, backends, and other child processes of the scheduler; either @code{relaxed} or @code{strict}.  This directive is currently only used/supported on macOS."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22738
msgid "Defaults to @samp{strict}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22740
#, no-wrap
msgid "{@code{files-configuration} parameter} file-name server-keychain"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22745
msgid "Specifies the location of TLS certificates and private keys.  CUPS will look for public and private keys in this directory: @file{.crt} files for PEM-encoded certificates and corresponding @file{.key} files for PEM-encoded private keys."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22747
msgid "Defaults to @samp{\"/etc/cups/ssl\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22749
#, no-wrap
msgid "{@code{files-configuration} parameter} file-name server-root"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22751
msgid "Specifies the directory containing the server configuration files."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22753
msgid "Defaults to @samp{\"/etc/cups\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22755
#, no-wrap
msgid "{@code{files-configuration} parameter} boolean sync-on-close?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22758
msgid "Specifies whether the scheduler calls fsync(2) after writing configuration or state files."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22762
#, no-wrap
msgid "{@code{files-configuration} parameter} space-separated-string-list system-group"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22764
msgid "Specifies the group(s) to use for @code{@@SYSTEM} group authentication."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22766
#, no-wrap
msgid "{@code{files-configuration} parameter} file-name temp-dir"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22768
msgid "Specifies the directory where temporary files are stored."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22770
msgid "Defaults to @samp{\"/var/spool/cups/tmp\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22772
#, no-wrap
msgid "{@code{files-configuration} parameter} string user"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22775
msgid "Specifies the user name or ID that is used when running external programs."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22779
#, no-wrap
msgid "{@code{files-configuration} parameter} string set-env"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22781
msgid "Set the specified environment variable to be passed to child processes."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22783
msgid "Defaults to @samp{\"variable value\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22786
#, no-wrap
msgid "{@code{cups-configuration} parameter} access-log-level access-log-level"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22793
msgid "Specifies the logging level for the AccessLog file.  The @code{config} level logs when printers and classes are added, deleted, or modified and when configuration files are accessed or updated.  The @code{actions} level logs when print jobs are submitted, held, released, modified, or canceled, and any of the conditions for @code{config}.  The @code{all} level logs all requests."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22795
msgid "Defaults to @samp{actions}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22797
#, no-wrap
msgid "{@code{cups-configuration} parameter} boolean auto-purge-jobs?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22800
msgid "Specifies whether to purge job history data automatically when it is no longer required for quotas."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22804
#, no-wrap
msgid "{@code{cups-configuration} parameter} comma-separated-string-list browse-dns-sd-sub-types"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22806
msgid "Specifies a list of DNS-SD sub-types to advertise for each shared printer."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22809
msgid "The default @samp{(list \"_cups\" \"_print\" \"_universal\")} tells clients that CUPS sharing, IPP Everywhere, AirPrint, and Mopria are supported."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22811
#, no-wrap
msgid "{@code{cups-configuration} parameter} browse-local-protocols browse-local-protocols"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22813
msgid "Specifies which protocols to use for local printer sharing."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22815
msgid "Defaults to @samp{dnssd}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22817
#, no-wrap
msgid "{@code{cups-configuration} parameter} boolean browse-web-if?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22819
msgid "Specifies whether the CUPS web interface is advertised."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22823
#, no-wrap
msgid "{@code{cups-configuration} parameter} boolean browsing?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22825
msgid "Specifies whether shared printers are advertised."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22829
#, no-wrap
msgid "{@code{cups-configuration} parameter} default-auth-type default-auth-type"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22831
msgid "Specifies the default type of authentication to use."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22833
msgid "Defaults to @samp{Basic}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22835
#, no-wrap
msgid "{@code{cups-configuration} parameter} default-encryption default-encryption"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22837
msgid "Specifies whether encryption will be used for authenticated requests."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22839
msgid "Defaults to @samp{Required}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22841
#, no-wrap
msgid "{@code{cups-configuration} parameter} string default-language"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22843
msgid "Specifies the default language to use for text and web content."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22845
msgid "Defaults to @samp{\"en\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22847
#, no-wrap
msgid "{@code{cups-configuration} parameter} string default-paper-size"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22852
msgid "Specifies the default paper size for new print queues.  @samp{\"Auto\"} uses a locale-specific default, while @samp{\"None\"} specifies there is no default paper size.  Specific size names are typically @samp{\"Letter\"} or @samp{\"A4\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22854
msgid "Defaults to @samp{\"Auto\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22856
#, no-wrap
msgid "{@code{cups-configuration} parameter} string default-policy"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22858
msgid "Specifies the default access policy to use."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22860
msgid "Defaults to @samp{\"default\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22862
#, no-wrap
msgid "{@code{cups-configuration} parameter} boolean default-shared?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22864
msgid "Specifies whether local printers are shared by default."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22866 guix-git/doc/guix.texi:22946
#: guix-git/doc/guix.texi:23216 guix-git/doc/guix.texi:26657
#: guix-git/doc/guix.texi:26708 guix-git/doc/guix.texi:26715
#: guix-git/doc/guix.texi:28010 guix-git/doc/guix.texi:28198
#: guix-git/doc/guix.texi:28315 guix-git/doc/guix.texi:28351
#: guix-git/doc/guix.texi:28402 guix-git/doc/guix.texi:28421
#: guix-git/doc/guix.texi:28431 guix-git/doc/guix.texi:28441
#: guix-git/doc/guix.texi:28500 guix-git/doc/guix.texi:28522
#: guix-git/doc/guix.texi:28547 guix-git/doc/guix.texi:28573
#: guix-git/doc/guix.texi:28591 guix-git/doc/guix.texi:32148
#: guix-git/doc/guix.texi:32176 guix-git/doc/guix.texi:33411
#: guix-git/doc/guix.texi:33551 guix-git/doc/guix.texi:33765
#: guix-git/doc/guix.texi:33772 guix-git/doc/guix.texi:33794
#: guix-git/doc/guix.texi:33833 guix-git/doc/guix.texi:33853
#: guix-git/doc/guix.texi:33867 guix-git/doc/guix.texi:34332
#: guix-git/doc/guix.texi:36266 guix-git/doc/guix.texi:36354
#: guix-git/doc/guix.texi:36370 guix-git/doc/guix.texi:36420
msgid "Defaults to @samp{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22868
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer dirty-clean-interval"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22872
msgid "Specifies the delay for updating of configuration and state files, in seconds.  A value of 0 causes the update to happen as soon as possible, typically within a few milliseconds."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22874 guix-git/doc/guix.texi:22922
#: guix-git/doc/guix.texi:22931 guix-git/doc/guix.texi:23234
#: guix-git/doc/guix.texi:28360 guix-git/doc/guix.texi:28393
msgid "Defaults to @samp{30}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22876
#, no-wrap
msgid "{@code{cups-configuration} parameter} error-policy error-policy"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22882
msgid "Specifies what to do when an error occurs.  Possible values are @code{abort-job}, which will discard the failed print job; @code{retry-job}, which will retry the job at a later time; @code{retry-current-job}, which retries the failed job immediately; and @code{stop-printer}, which stops the printer."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22884
msgid "Defaults to @samp{stop-printer}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22886
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer filter-limit"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22894
msgid "Specifies the maximum cost of filters that are run concurrently, which can be used to minimize disk, memory, and CPU resource problems.  A limit of 0 disables filter limiting.  An average print to a non-PostScript printer needs a filter limit of about 200.  A PostScript printer needs about half that (100).  Setting the limit below these thresholds will effectively limit the scheduler to printing a single job at any time."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22896 guix-git/doc/guix.texi:22904
#: guix-git/doc/guix.texi:22953 guix-git/doc/guix.texi:23058
#: guix-git/doc/guix.texi:23072 guix-git/doc/guix.texi:23079
#: guix-git/doc/guix.texi:23100 guix-git/doc/guix.texi:23108
#: guix-git/doc/guix.texi:23116 guix-git/doc/guix.texi:23124
#: guix-git/doc/guix.texi:25202 guix-git/doc/guix.texi:25218
#: guix-git/doc/guix.texi:25875 guix-git/doc/guix.texi:25887
#: guix-git/doc/guix.texi:26676 guix-git/doc/guix.texi:26685
#: guix-git/doc/guix.texi:26693 guix-git/doc/guix.texi:26701
#: guix-git/doc/guix.texi:33427 guix-git/doc/guix.texi:33780
#: guix-git/doc/guix.texi:36259 guix-git/doc/guix.texi:36559
#: guix-git/doc/guix.texi:36733
msgid "Defaults to @samp{0}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22898
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer filter-nice"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22902
msgid "Specifies the scheduling priority of filters that are run to print a job.  The nice value ranges from 0, the highest priority, to 19, the lowest priority."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22906
#, no-wrap
msgid "{@code{cups-configuration} parameter} host-name-lookups host-name-lookups"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22913
msgid "Specifies whether to do reverse lookups on connecting clients.  The @code{double} setting causes @code{cupsd} to verify that the hostname resolved from the address matches one of the addresses returned for that hostname.  Double lookups also prevent clients with unregistered addresses from connecting to your server.  Only set this option to @code{#t} or @code{double} if absolutely required."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22917
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer job-kill-delay"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22920
msgid "Specifies the number of seconds to wait before killing the filters and backend associated with a canceled or held job."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22924
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer job-retry-interval"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22929
msgid "Specifies the interval between retries of jobs in seconds.  This is typically used for fax queues but can also be used with normal print queues whose error policy is @code{retry-job} or @code{retry-current-job}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22933
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer job-retry-limit"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22938
msgid "Specifies the number of retries that are done for jobs.  This is typically used for fax queues but can also be used with normal print queues whose error policy is @code{retry-job} or @code{retry-current-job}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22940 guix-git/doc/guix.texi:28324
#: guix-git/doc/guix.texi:34584 guix-git/doc/guix.texi:34604
#: guix-git/doc/guix.texi:34620 guix-git/doc/guix.texi:34634
#: guix-git/doc/guix.texi:34641 guix-git/doc/guix.texi:34648
#: guix-git/doc/guix.texi:34655 guix-git/doc/guix.texi:34815
#: guix-git/doc/guix.texi:34831 guix-git/doc/guix.texi:34838
#: guix-git/doc/guix.texi:34845 guix-git/doc/guix.texi:34856
#: guix-git/doc/guix.texi:36211 guix-git/doc/guix.texi:36219
#: guix-git/doc/guix.texi:36227 guix-git/doc/guix.texi:36251
msgid "Defaults to @samp{5}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22942
#, no-wrap
msgid "{@code{cups-configuration} parameter} boolean keep-alive?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22944
msgid "Specifies whether to support HTTP keep-alive connections."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22948
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer limit-request-body"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22951
msgid "Specifies the maximum size of print files, IPP requests, and HTML form data.  A limit of 0 disables the limit check."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22955
#, no-wrap
msgid "{@code{cups-configuration} parameter} multiline-string-list listen"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22962
msgid "Listens on the specified interfaces for connections.  Valid values are of the form @var{address}:@var{port}, where @var{address} is either an IPv6 address enclosed in brackets, an IPv4 address, or @code{*} to indicate all addresses.  Values can also be file names of local UNIX domain sockets.  The Listen directive is similar to the Port directive but allows you to restrict access to specific interfaces or networks."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22964
#, no-wrap
msgid "{@code{cups-configuration} parameter} location-access-control-list location-access-controls"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22966
msgid "Specifies a set of additional access controls."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22968
msgid "Available @code{location-access-controls} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22969
#, no-wrap
msgid "{@code{location-access-controls} parameter} file-name path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22971
msgid "Specifies the URI path to which the access control applies."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22973
#, no-wrap
msgid "{@code{location-access-controls} parameter} access-control-list access-controls"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22976
msgid "Access controls for all access to this path, in the same format as the @code{access-controls} of @code{operation-access-control}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22978 guix-git/doc/guix.texi:22984
#: guix-git/doc/guix.texi:22998 guix-git/doc/guix.texi:23005
#: guix-git/doc/guix.texi:23138 guix-git/doc/guix.texi:23197
#: guix-git/doc/guix.texi:23279 guix-git/doc/guix.texi:23293
#: guix-git/doc/guix.texi:25082 guix-git/doc/guix.texi:25091
#: guix-git/doc/guix.texi:26361 guix-git/doc/guix.texi:26574
#: guix-git/doc/guix.texi:26602 guix-git/doc/guix.texi:26632
#: guix-git/doc/guix.texi:26747 guix-git/doc/guix.texi:26760
#: guix-git/doc/guix.texi:26767 guix-git/doc/guix.texi:28530
#: guix-git/doc/guix.texi:29605 guix-git/doc/guix.texi:29613
#: guix-git/doc/guix.texi:29858 guix-git/doc/guix.texi:32207
#: guix-git/doc/guix.texi:34475 guix-git/doc/guix.texi:34535
#: guix-git/doc/guix.texi:34543 guix-git/doc/guix.texi:36274
#: guix-git/doc/guix.texi:36281 guix-git/doc/guix.texi:36623
#: guix-git/doc/guix.texi:36701 guix-git/doc/guix.texi:36795
#: guix-git/doc/guix.texi:36803 guix-git/doc/guix.texi:36839
#: guix-git/doc/guix.texi:36989 guix-git/doc/guix.texi:37040
#: guix-git/doc/guix.texi:37049
msgid "Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22980
#, no-wrap
msgid "{@code{location-access-controls} parameter} method-access-control-list method-access-controls"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22982
msgid "Access controls for method-specific access to this path."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22986
msgid "Available @code{method-access-controls} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22987
#, no-wrap
msgid "{@code{method-access-controls} parameter} boolean reverse?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22990
msgid "If @code{#t}, apply access controls to all methods except the listed methods.  Otherwise apply to only the listed methods."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22994
#, no-wrap
msgid "{@code{method-access-controls} parameter} method-list methods"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:22996
msgid "Methods to which this access control applies."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23000
#, no-wrap
msgid "{@code{method-access-controls} parameter} access-control-list access-controls"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23003
msgid "Access control directives, as a list of strings.  Each string should be one directive, such as @samp{\"Order allow,deny\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23009
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer log-debug-history"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23013
msgid "Specifies the number of debugging messages that are retained for logging if an error occurs in a print job.  Debug messages are logged regardless of the LogLevel setting."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23015 guix-git/doc/guix.texi:23036
#: guix-git/doc/guix.texi:23043 guix-git/doc/guix.texi:26121
#: guix-git/doc/guix.texi:28062 guix-git/doc/guix.texi:28077
msgid "Defaults to @samp{100}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23017
#, no-wrap
msgid "{@code{cups-configuration} parameter} log-level log-level"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23020
msgid "Specifies the level of logging for the ErrorLog file.  The value @code{none} stops all logging while @code{debug2} logs everything."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23022 guix-git/doc/guix.texi:28539
msgid "Defaults to @samp{info}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23024
#, no-wrap
msgid "{@code{cups-configuration} parameter} log-time-format log-time-format"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23027
msgid "Specifies the format of the date and time in the log files.  The value @code{standard} logs whole seconds while @code{usecs} logs microseconds."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23029
msgid "Defaults to @samp{standard}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23031
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer max-clients"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23034
msgid "Specifies the maximum number of simultaneous clients that are allowed by the scheduler."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23038
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer max-clients-per-host"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23041
msgid "Specifies the maximum number of simultaneous clients that are allowed from a single address."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23045
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer max-copies"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23048
msgid "Specifies the maximum number of copies that a user can print of each job."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23050
msgid "Defaults to @samp{9999}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23052
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer max-hold-time"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23056
msgid "Specifies the maximum time a job may remain in the @code{indefinite} hold state before it is canceled.  A value of 0 disables cancellation of held jobs."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23060
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer max-jobs"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23063
msgid "Specifies the maximum number of simultaneous jobs that are allowed.  Set to 0 to allow an unlimited number of jobs."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23065
msgid "Defaults to @samp{500}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23067
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer max-jobs-per-printer"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23070
msgid "Specifies the maximum number of simultaneous jobs that are allowed per printer.  A value of 0 allows up to @code{max-jobs} per printer."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23074
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer max-jobs-per-user"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23077
msgid "Specifies the maximum number of simultaneous jobs that are allowed per user.  A value of 0 allows up to @code{max-jobs} per user."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23081
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer max-job-time"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23084
msgid "Specifies the maximum time a job may take to print before it is canceled, in seconds.  Set to 0 to disable cancellation of ``stuck'' jobs."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23086
msgid "Defaults to @samp{10800}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23088
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer max-log-size"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23091
msgid "Specifies the maximum size of the log files before they are rotated, in bytes.  The value 0 disables log rotation."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23093
msgid "Defaults to @samp{1048576}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23095
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer max-subscriptions"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23098
msgid "Specifies the maximum number of simultaneous event subscriptions that are allowed.  Set to @samp{0} to allow an unlimited number of subscriptions."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23102
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer max-subscriptions-per-job"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23106
msgid "Specifies the maximum number of simultaneous event subscriptions that are allowed per job.  A value of @samp{0} allows up to @code{max-subscriptions} per job."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23110
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer max-subscriptions-per-printer"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23114
msgid "Specifies the maximum number of simultaneous event subscriptions that are allowed per printer.  A value of @samp{0} allows up to @code{max-subscriptions} per printer."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23118
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer max-subscriptions-per-user"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23122
msgid "Specifies the maximum number of simultaneous event subscriptions that are allowed per user.  A value of @samp{0} allows up to @code{max-subscriptions} per user."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23126
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer multiple-operation-timeout"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23129
msgid "Specifies the maximum amount of time to allow between files in a multiple file print job, in seconds."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23131 guix-git/doc/guix.texi:23306
msgid "Defaults to @samp{900}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23133
#, no-wrap
msgid "{@code{cups-configuration} parameter} environment-variables environment-variables"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23136
msgid "Passes the specified environment variable(s) to child processes; a list of strings."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23140
#, no-wrap
msgid "{@code{cups-configuration} parameter} policy-configuration-list policies"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23142
msgid "Specifies named access control policies."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23144
msgid "Available @code{policy-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23145
#, no-wrap
msgid "{@code{policy-configuration} parameter} string name"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23147
msgid "Name of the policy."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23149
#, no-wrap
msgid "{@code{policy-configuration} parameter} string job-private-access"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23159
msgid "Specifies an access list for a job's private values.  @code{@@ACL} maps to the printer's requesting-user-name-allowed or requesting-user-name-denied values.  @code{@@OWNER} maps to the job's owner.  @code{@@SYSTEM} maps to the groups listed for the @code{system-group} field of the @code{files-configuration}, which is reified into the @code{cups-files.conf(5)} file.  Other possible elements of the access list include specific user names, and @code{@@@var{group}} to indicate members of a specific group.  The access list may also be simply @code{all} or @code{default}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23161 guix-git/doc/guix.texi:23183
msgid "Defaults to @samp{\"@@OWNER @@SYSTEM\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23163
#, no-wrap
msgid "{@code{policy-configuration} parameter} string job-private-values"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23166 guix-git/doc/guix.texi:23188
msgid "Specifies the list of job values to make private, or @code{all}, @code{default}, or @code{none}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23169
msgid "Defaults to @samp{\"job-name job-originating-host-name job-originating-user-name phone\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23171
#, no-wrap
msgid "{@code{policy-configuration} parameter} string subscription-private-access"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23181
msgid "Specifies an access list for a subscription's private values.  @code{@@ACL} maps to the printer's requesting-user-name-allowed or requesting-user-name-denied values.  @code{@@OWNER} maps to the job's owner.  @code{@@SYSTEM} maps to the groups listed for the @code{system-group} field of the @code{files-configuration}, which is reified into the @code{cups-files.conf(5)} file.  Other possible elements of the access list include specific user names, and @code{@@@var{group}} to indicate members of a specific group.  The access list may also be simply @code{all} or @code{default}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23185
#, no-wrap
msgid "{@code{policy-configuration} parameter} string subscription-private-values"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23191
msgid "Defaults to @samp{\"notify-events notify-pull-method notify-recipient-uri notify-subscriber-user-name notify-user-data\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23193
#, no-wrap
msgid "{@code{policy-configuration} parameter} operation-access-control-list access-controls"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23195
msgid "Access control by IPP operation."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23200
#, no-wrap
msgid "{@code{cups-configuration} parameter} boolean-or-non-negative-integer preserve-job-files"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23205
msgid "Specifies whether job files (documents) are preserved after a job is printed.  If a numeric value is specified, job files are preserved for the indicated number of seconds after printing.  Otherwise a boolean value applies indefinitely."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23207
msgid "Defaults to @samp{86400}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23209
#, no-wrap
msgid "{@code{cups-configuration} parameter} boolean-or-non-negative-integer preserve-job-history"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23214
msgid "Specifies whether the job history is preserved after a job is printed.  If a numeric value is specified, the job history is preserved for the indicated number of seconds after printing.  If @code{#t}, the job history is preserved until the MaxJobs limit is reached."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23218
#, no-wrap
msgid "{@code{cups-configuration} parameter} comma-separated-string-list-or-#f ready-paper-sizes"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23222
msgid "Specifies a list of potential paper sizes that are reported as ready, that is: loaded.  The actual list will contain only the sizes that each printer supports."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23227
msgid "The default value of @code{#f} is a special case: CUPS will use @samp{(list \\\"Letter\\\" \\\"Legal\\\" \\\"Tabloid\\\" \\\"4x6\\\" \\\"Env10\\\")} if the default paper size is \\\"Letter\\\", and @samp{(list \\\"A3\\\" \\\"A4\\\" \\\"A5\\\" \\\"A6\\\" \\\"EnvDL\\\")} otherwise."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23229
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer reload-timeout"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23232
msgid "Specifies the amount of time to wait for job completion before restarting the scheduler."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23236
#, no-wrap
msgid "{@code{cups-configuration} parameter} string server-admin"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23238
msgid "Specifies the email address of the server administrator."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23240
msgid "Defaults to @samp{\"root@@localhost.localdomain\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23242
#, no-wrap
msgid "{@code{cups-configuration} parameter} host-name-list-or-* server-alias"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23250
msgid "The ServerAlias directive is used for HTTP Host header validation when clients connect to the scheduler from external interfaces.  Using the special name @code{*} can expose your system to known browser-based DNS rebinding attacks, even when accessing sites through a firewall.  If the auto-discovery of alternate names does not work, we recommend listing each alternate name with a ServerAlias directive instead of using @code{*}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23252
msgid "Defaults to @samp{*}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23254
#, no-wrap
msgid "{@code{cups-configuration} parameter} string server-name"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23256
msgid "Specifies the fully-qualified host name of the server."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23258
msgid "Defaults to @samp{\"localhost\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23260
#, no-wrap
msgid "{@code{cups-configuration} parameter} server-tokens server-tokens"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23268
msgid "Specifies what information is included in the Server header of HTTP responses.  @code{None} disables the Server header.  @code{ProductOnly} reports @code{CUPS}.  @code{Major} reports @code{CUPS 2}.  @code{Minor} reports @code{CUPS 2.0}.  @code{Minimal} reports @code{CUPS 2.0.0}.  @code{OS} reports @code{CUPS 2.0.0 (@var{uname})} where @var{uname} is the output of the @code{uname} command.  @code{Full} reports @code{CUPS 2.0.0 (@var{uname}) IPP/2.0}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23270
msgid "Defaults to @samp{Minimal}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23272
#, no-wrap
msgid "{@code{cups-configuration} parameter} multiline-string-list ssl-listen"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23277
msgid "Listens on the specified interfaces for encrypted connections.  Valid values are of the form @var{address}:@var{port}, where @var{address} is either an IPv6 address enclosed in brackets, an IPv4 address, or @code{*} to indicate all addresses."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23281
#, no-wrap
msgid "{@code{cups-configuration} parameter} ssl-options ssl-options"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23291
msgid "Sets encryption options.  By default, CUPS only supports encryption using TLS v1.0 or higher using known secure cipher suites.  Security is reduced when @code{Allow} options are used, and enhanced when @code{Deny} options are used.  The @code{AllowRC4} option enables the 128-bit RC4 cipher suites, which are required for some older clients.  The @code{AllowSSL3} option enables SSL v3.0, which is required for some older clients that do not support TLS v1.0.  The @code{DenyCBC} option disables all CBC cipher suites.  The @code{DenyTLS1.0} option disables TLS v1.0 support - this sets the minimum protocol version to TLS v1.1."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23295
#, no-wrap
msgid "{@code{cups-configuration} parameter} boolean strict-conformance?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23298
msgid "Specifies whether the scheduler requires clients to strictly adhere to the IPP specifications."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23302
#, no-wrap
msgid "{@code{cups-configuration} parameter} non-negative-integer timeout"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23304
msgid "Specifies the HTTP request timeout, in seconds."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23309
#, no-wrap
msgid "{@code{cups-configuration} parameter} boolean web-interface?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23311
msgid "Specifies whether the web interface is enabled."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:23321
msgid "At this point you're probably thinking ``oh dear, Guix manual, I like you but you can stop already with the configuration options''.  Indeed.  However, one more point: it could be that you have an existing @code{cupsd.conf} that you want to use.  In that case, you can pass an @code{opaque-cups-configuration} as the configuration of a @code{cups-service-type}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:23323
msgid "Available @code{opaque-cups-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23324
#, no-wrap
msgid "{@code{opaque-cups-configuration} parameter} package cups"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23328
#, no-wrap
msgid "{@code{opaque-cups-configuration} parameter} string cupsd.conf"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23330
msgid "The contents of the @code{cupsd.conf}, as a string."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23332
#, no-wrap
msgid "{@code{opaque-cups-configuration} parameter} string cups-files.conf"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:23334
msgid "The contents of the @code{cups-files.conf} file, as a string."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:23339
msgid "For example, if your @code{cupsd.conf} and @code{cups-files.conf} are in strings of the same name, you could instantiate a CUPS service like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:23345
#, no-wrap
msgid ""
"(service cups-service-type\n"
"         (opaque-cups-configuration\n"
"           (cupsd.conf cupsd.conf)\n"
"           (cups-files.conf cups-files.conf)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:23356
msgid "The @code{(gnu services desktop)} module provides services that are usually useful in the context of a ``desktop'' setup---that is, on a machine running a graphical display server, possibly with graphical user interfaces, etc.  It also defines services that provide specific desktop environments like GNOME, Xfce or MATE."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:23360
msgid "To simplify things, the module defines a variable containing the set of services that users typically expect on a machine with a graphical environment and networking:"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23361
#, fuzzy, no-wrap
#| msgid "Desktop Services"
msgid "%desktop-services"
msgstr "Serviços de desktop"

#. type: defvar
#: guix-git/doc/guix.texi:23364
msgid "This is a list of services that builds upon @code{%base-services} and adds or adjusts services for a typical ``desktop'' setup."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23373
msgid "In particular, it adds a graphical login manager (@pxref{X Window, @code{gdm-service-type}}), screen lockers, a network management tool (@pxref{Networking Services, @code{network-manager-service-type}}) with modem support (@pxref{Networking Services, @code{modem-manager-service-type}}), energy and color management services, the @code{elogind} login and seat manager, the Polkit privilege service, the GeoClue location service, the AccountsService daemon that allows authorized users change system passwords, a NTP client (@pxref{Networking Services}) and the Avahi daemon."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:23378
msgid "The @code{%desktop-services} variable can be used as the @code{services} field of an @code{operating-system} declaration (@pxref{operating-system Reference, @code{services}})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:23401
msgid "Additionally, the @code{gnome-desktop-service-type}, @code{xfce-desktop-service}, @code{mate-desktop-service-type}, @code{lxqt-desktop-service-type} and @code{enlightenment-desktop-service-type} procedures can add GNOME, Xfce, MATE and/or Enlightenment to a system.  To ``add GNOME'' means that system-level services like the backlight adjustment helpers and the power management utilities are added to the system, extending @code{polkit} and @code{dbus} appropriately, allowing GNOME to operate with elevated privileges on a limited number of special-purpose system interfaces.  Additionally, adding a service made by @code{gnome-desktop-service-type} adds the GNOME metapackage to the system profile.  Likewise, adding the Xfce service not only adds the @code{xfce} metapackage to the system profile, but it also gives the Thunar file manager the ability to open a ``root-mode'' file management window, if the user authenticates using the administrator's password via the standard polkit graphical interface.  To ``add MATE'' means that @code{polkit} and @code{dbus} are extended appropriately, allowing MATE to operate with elevated privileges on a limited number of special-purpose system interfaces.  Additionally, adding a service of type @code{mate-desktop-service-type} adds the MATE metapackage to the system profile.  ``Adding Enlightenment'' means that @code{dbus} is extended appropriately, and several of Enlightenment's binaries are set as setuid, allowing Enlightenment's screen locker and other functionality to work as expected."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:23411
msgid "The desktop environments in Guix use the Xorg display server by default.  If you'd like to use the newer display server protocol called Wayland, you need to enable Wayland support in GDM (@pxref{wayland-gdm}).  Another solution is to use the @code{sddm-service} instead of GDM as the graphical login manager.  You should then select the ``GNOME (Wayland)'' session in SDDM@.  Alternatively you can also try starting GNOME on Wayland manually from a TTY with the command ``XDG_SESSION_TYPE=wayland exec dbus-run-session gnome-session``.  Currently only GNOME has support for Wayland."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23412
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "gnome-desktop-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23416
msgid "This is the type of the service that adds the @uref{https://www.gnome.org, GNOME} desktop environment.  Its value is a @code{gnome-desktop-configuration} object (see below)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23419
msgid "This service adds the @code{gnome} package to the system profile, and extends polkit with the actions from @code{gnome-settings-daemon}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23421
#, no-wrap
msgid "{Data Type} gnome-desktop-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23423
msgid "Configuration record for the GNOME desktop environment."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23425
#, no-wrap
msgid "@code{gnome} (default: @code{gnome})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:23427
msgid "The GNOME package to use."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23430
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "xfce-desktop-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23434
msgid "This is the type of a service to run the @uref{Xfce, https://xfce.org/} desktop environment.  Its value is an @code{xfce-desktop-configuration} object (see below)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23439
msgid "This service adds the @code{xfce} package to the system profile, and extends polkit with the ability for @code{thunar} to manipulate the file system as root from within a user session, after the user has authenticated with the administrator's password."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23445
msgid "Note that @code{xfce4-panel} and its plugin packages should be installed in the same profile to ensure compatibility.  When using this service, you should add extra plugins (@code{xfce4-whiskermenu-plugin}, @code{xfce4-weather-plugin}, etc.) to the @code{packages} field of your @code{operating-system}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23447
#, no-wrap
msgid "{Data Type} xfce-desktop-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23449
msgid "Configuration record for the Xfce desktop environment."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23451
#, no-wrap
msgid "@code{xfce} (default: @code{xfce})"
msgstr "@code{xfce} (default: @code{xfce})"

#. type: table
#: guix-git/doc/guix.texi:23453
msgid "The Xfce package to use."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23456
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "mate-desktop-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23460
msgid "This is the type of the service that runs the @uref{https://mate-desktop.org/, MATE desktop environment}.  Its value is a @code{mate-desktop-configuration} object (see below)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23464
msgid "This service adds the @code{mate} package to the system profile, and extends polkit with the actions from @code{mate-settings-daemon}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23466
#, no-wrap
msgid "{Data Type} mate-desktop-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23468
msgid "Configuration record for the MATE desktop environment."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23470
#, no-wrap
msgid "@code{mate} (default: @code{mate})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:23472
msgid "The MATE package to use."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23475
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "lxqt-desktop-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23479
msgid "This is the type of the service that runs the @uref{https://lxqt-project.org, LXQt desktop environment}.  Its value is a @code{lxqt-desktop-configuration} object (see below)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23482
msgid "This service adds the @code{lxqt} package to the system profile."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23484
#, no-wrap
msgid "{Data Type} lxqt-desktop-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23486
msgid "Configuration record for the LXQt desktop environment."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23488
#, no-wrap
msgid "@code{lxqt} (default: @code{lxqt})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:23490
msgid "The LXQT package to use."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23493
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "sugar-desktop-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23497
msgid "This is the type of the service that runs the @uref{https://www.sugarlabs.org, Sugar desktop environment}.  Its value is a @code{sugar-desktop-configuration} object (see below)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23501
msgid "This service adds the @code{sugar} package to the system profile, as well as any selected Sugar activities.  By default it only includes a minimal set of activities."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23503
#, fuzzy, no-wrap
msgid "{Data Type} sugar-desktop-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:23505
#, fuzzy
msgid "Configuration record for the Sugar desktop environment."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:23507
#, fuzzy, no-wrap
#| msgid "@code{shared?} (default: @code{#t})"
msgid "@code{sugar} (default: @code{sugar})"
msgstr "@code{shared?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:23509
#, fuzzy
msgid "The Sugar package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:23509
#, fuzzy, no-wrap
msgid "@code{gobject-introspection} (default: @code{gobject-introspection})"
msgstr "@code{tmpdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:23512
msgid "The @code{gobject-introspection} package to use.  This package is used to access libraries installed as dependencies of Sugar activities."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23512
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{activities} (default: @code{(list sugar-help-activity)})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:23514
msgid "A list of Sugar activities to install."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:23519
msgid "The following example configures the Sugar desktop environment with a number of useful activities:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:23534
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-package-modules sugar)\n"
"(use-service-modules desktop)\n"
"(operating-system\n"
"  ...\n"
"  (services (cons* (service sugar-desktop-service-type\n"
"                            (sugar-desktop-configuration\n"
"                              (activities (list sugar-browse-activity\n"
"                                                sugar-help-activity\n"
"                                                sugar-jukebox-activity\n"
"                                                sugar-typing-turtle-activity))))\n"
"                   %desktop-services))\n"
"  ...)\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23536
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "enlightenment-desktop-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23539
msgid "Return a service that adds the @code{enlightenment} package to the system profile, and extends dbus with actions from @code{efl}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23541
#, no-wrap
msgid "{Data Type} enlightenment-desktop-service-configuration"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23543
#, no-wrap
msgid "@code{enlightenment} (default: @code{enlightenment})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:23545
msgid "The enlightenment package to use."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:23553
msgid "Because the GNOME, Xfce and MATE desktop services pull in so many packages, the default @code{%desktop-services} variable doesn't include any of them by default.  To add GNOME, Xfce or MATE, just @code{cons} them onto @code{%desktop-services} in the @code{services} field of your @code{operating-system}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:23564
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules desktop)\n"
"(operating-system\n"
"  ...\n"
"  ;; cons* adds items to the list given as its last argument.\n"
"  (services (cons* (service gnome-desktop-service-type)\n"
"                   (service xfce-desktop-service)\n"
"                   %desktop-services))\n"
"  ...)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:23568
msgid "These desktop environments will then be available as options in the graphical login window."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:23572
msgid "The actual service definitions included in @code{%desktop-services} and provided by @code{(gnu services dbus)} and @code{(gnu services desktop)} are described below."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23573
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "dbus-root-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23578
msgid "Type for a service that runs the D-Bus ``system bus''.  @footnote{@uref{https://dbus.freedesktop.org/, D-Bus} is an inter-process communication facility.  Its system bus is used to allow system services to communicate and to be notified of system-wide events.}"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23580
msgid "The value for this service type is a @code{<dbus-configuration>} record."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23582
#, fuzzy, no-wrap
msgid "{Data Type} dbus-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:23584
#, fuzzy
msgid "Data type representing the configuration for @code{dbus-root-service-type}."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:23586
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{dbus} (default: @code{dbus}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:23588
#, fuzzy
#| msgid "Package Modules"
msgid "Package object for dbus."
msgstr "Módulos de pacote"

#. type: item
#: guix-git/doc/guix.texi:23589
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{services} (default: @code{'()}) (type: list)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:23594
msgid "List of packages that provide an @file{etc/dbus-1/system.d} directory containing additional D-Bus configuration and policy files.  For example, to allow avahi-daemon to use the system bus, @var{services} must be equal to @code{(list avahi)}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23595
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{verbose?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:23601
msgid "When @code{#t}, D-Bus is launched with environment variable @samp{DBUS_VERBOSE} set to @samp{1}.  A verbose-enabled D-Bus package such as @code{dbus-verbose} should be provided to @var{dbus} in this scenario. The verbose output is logged to @file{/var/log/dbus-daemon.log}."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:23605
#, no-wrap
msgid "Elogind"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:23611
msgid "@uref{https://github.com/elogind/elogind, Elogind} is a login and seat management daemon that also handles most system-level power events for a computer, for example suspending the system when a lid is closed, or shutting it down when the power button is pressed."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:23615
msgid "It also provides a D-Bus interface that can be used to know which users are logged in, know what kind of sessions they have open, suspend the system, inhibit system suspend, reboot the system, and other tasks."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23616
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "elogind-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23620
msgid "Type of the service that runs @command{elogind}, a login and seat management daemon.  The value for this service is a @code{<elogind-configuration>} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23625
#, fuzzy, no-wrap
msgid "{Data Type} elogind-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:23627
#, fuzzy
msgid "Data type representing the configuration of @command{elogind}."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:23629
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{elogind} (default: @code{elogind}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:23631 guix-git/doc/guix.texi:23634
#: guix-git/doc/guix.texi:23637 guix-git/doc/guix.texi:23640
#: guix-git/doc/guix.texi:23643 guix-git/doc/guix.texi:23646
#: guix-git/doc/guix.texi:23649 guix-git/doc/guix.texi:23652
#: guix-git/doc/guix.texi:23655 guix-git/doc/guix.texi:23658
#: guix-git/doc/guix.texi:23661 guix-git/doc/guix.texi:23664
#: guix-git/doc/guix.texi:23667 guix-git/doc/guix.texi:23670
#: guix-git/doc/guix.texi:23673 guix-git/doc/guix.texi:23676
#: guix-git/doc/guix.texi:23679 guix-git/doc/guix.texi:23682
#: guix-git/doc/guix.texi:23685 guix-git/doc/guix.texi:23688
#: guix-git/doc/guix.texi:23691 guix-git/doc/guix.texi:23694
#: guix-git/doc/guix.texi:23697 guix-git/doc/guix.texi:23700
#: guix-git/doc/guix.texi:23703 guix-git/doc/guix.texi:23706
#: guix-git/doc/guix.texi:23709
msgid "..."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23632
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{kill-user-processes?} (default: @code{#f}) (type: boolean)"
msgstr "@code{users} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23635
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{kill-only-users} (default: @code{'()}) (type: list)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23638
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{kill-exclude-users} (default: @code{'(\"root\")}) (type: list-of-string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: item
#: guix-git/doc/guix.texi:23641
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{inhibit-delay-max-seconds} (default: @code{5}) (type: integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23644
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{handle-power-key} (default: @code{'poweroff}) (type: symbol)"
msgstr "@code{users} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23647
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{handle-suspend-key} (default: @code{'suspend}) (type: symbol)"
msgstr "@code{users} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23650
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{handle-hibernate-key} (default: @code{'hibernate}) (type: symbol)"
msgstr "@code{users} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23653
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{handle-lid-switch} (default: @code{'suspend}) (type: symbol)"
msgstr "@code{users} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23656
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{handle-lid-switch-docked} (default: @code{'ignore}) (type: symbol)"
msgstr "@code{users} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23659
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{handle-lid-switch-external-power} (default: @code{*unspecified*}) (type: symbol)"
msgstr "@code{users} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23662
#, fuzzy, no-wrap
#| msgid "@code{wait?} (default: @code{#t})"
msgid "@code{power-key-ignore-inhibited?} (default: @code{#f}) (type: boolean)"
msgstr "@code{wait?} (padrão: @code{#t})"

#. type: item
#: guix-git/doc/guix.texi:23665
#, fuzzy, no-wrap
#| msgid "@code{wait?} (default: @code{#t})"
msgid "@code{suspend-key-ignore-inhibited?} (default: @code{#f}) (type: boolean)"
msgstr "@code{wait?} (padrão: @code{#t})"

#. type: item
#: guix-git/doc/guix.texi:23668
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{hibernate-key-ignore-inhibited?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23671
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{lid-switch-ignore-inhibited?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23674
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{holdoff-timeout-seconds} (default: @code{30}) (type: integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23677
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{idle-action} (default: @code{'ignore}) (type: symbol)"
msgstr "@code{users} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23680
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{idle-action-seconds} (default: @code{(* 30 60)}) (type: integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23683
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{runtime-directory-size-percent} (default: @code{10}) (type: integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23686
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{runtime-directory-size} (default: @code{#f}) (type: integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23689
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{remove-ipc?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23692
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{suspend-state} (default: @code{'(\"mem\" \"standby\" \"freeze\")}) (type: list)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23695
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{suspend-mode} (default: @code{'()}) (type: list)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23698
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{hibernate-state} (default: @code{'(\"disk\")}) (type: list)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23701
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{hibernate-mode} (default: @code{'(\"platform\" \"shutdown\")}) (type: list)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: item
#: guix-git/doc/guix.texi:23704
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{hybrid-sleep-state} (default: @code{'(\"disk\")}) (type: list)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:23707
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{hybrid-sleep-mode} (default: @code{'(\"suspend\" \"platform\" \"shutdown\")}) (type: list)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: defvar
#: guix-git/doc/guix.texi:23713
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "accountsservice-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23720
msgid "Type for the service that runs AccountsService, a system service that can list available accounts, change their passwords, and so on.  AccountsService integrates with PolicyKit to enable unprivileged users to acquire the capability to modify their system configuration.  See @url{https://www.freedesktop.org/wiki/Software/AccountsService/, AccountsService} for more information."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23723
msgid "The value for this service is a file-like object, by default it is set to @code{accountsservice} (the package object for AccountsService)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23725
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "polkit-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23733
msgid "Type for the service that runs the @url{https://www.freedesktop.org/wiki/Software/polkit/, Polkit privilege management service}, which allows system administrators to grant access to privileged operations in a structured way.  By querying the Polkit service, a privileged system component can know when it should grant additional capabilities to ordinary users.  For example, an ordinary user can be granted the capability to suspend the system if the user is logged in locally."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23735
msgid "The value for this service is a @code{<polkit-configuration>} object."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23740
#, no-wrap
msgid "polkit-wheel-service"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23745
msgid "Service that adds the @code{wheel} group as admins to the Polkit service.  This makes it so that users in the @code{wheel} group are queried for their own passwords when performing administrative actions instead of @code{root}'s, similar to the behaviour used by @code{sudo}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23747
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "upower-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23751
msgid "Service that runs @uref{https://upower.freedesktop.org/, @command{upowerd}}, a system-wide monitor for power consumption and battery levels, with the given configuration settings."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23754
msgid "It implements the @code{org.freedesktop.UPower} D-Bus interface, and is notably used by GNOME."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23756
#, no-wrap
msgid "{Data Type} upower-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23758
msgid "Data type representation the configuration for UPower."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23761
#, no-wrap
msgid "@code{upower} (default: @var{upower})"
msgstr "@code{upower} (default: @var{upower})"

#. type: table
#: guix-git/doc/guix.texi:23763
msgid "Package to use for @code{upower}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23764
#, no-wrap
msgid "@code{watts-up-pro?} (default: @code{#f})"
msgstr "@code{watts-up-pro?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:23766
msgid "Enable the Watts Up Pro device."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23767
#, no-wrap
msgid "@code{poll-batteries?} (default: @code{#t})"
msgstr "@code{poll-batteries?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:23769
msgid "Enable polling the kernel for battery level changes."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23770
#, no-wrap
msgid "@code{ignore-lid?} (default: @code{#f})"
msgstr "@code{ignore-lid?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:23772
msgid "Ignore the lid state, this can be useful if it's incorrect on a device."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23773
#, fuzzy, no-wrap
#| msgid "@code{respawn?} (default: @code{#t})"
msgid "@code{use-percentage-for-policy?} (default: @code{#t})"
msgstr "@code{respawn?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:23777
msgid "Whether to use a policy based on battery percentage rather than on estimated time left.  A policy based on battery percentage is usually more reliable."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23778
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{percentage-low} (default: @code{20})"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:23781
msgid "When @code{use-percentage-for-policy?} is @code{#t}, this sets the percentage at which the battery is considered low."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23782
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{percentage-critical} (default: @code{5})"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:23785
msgid "When @code{use-percentage-for-policy?} is @code{#t}, this sets the percentage at which the battery is considered critical."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23786
#, no-wrap
msgid "@code{percentage-action} (default: @code{2})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:23789
msgid "When @code{use-percentage-for-policy?} is @code{#t}, this sets the percentage at which action will be taken."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23790
#, no-wrap
msgid "@code{time-low} (default: @code{1200})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:23793
msgid "When @code{use-time-for-policy?} is @code{#f}, this sets the time remaining in seconds at which the battery is considered low."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23794
#, no-wrap
msgid "@code{time-critical} (default: @code{300})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:23797
msgid "When @code{use-time-for-policy?} is @code{#f}, this sets the time remaining in seconds at which the battery is considered critical."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23798
#, no-wrap
msgid "@code{time-action} (default: @code{120})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:23801
msgid "When @code{use-time-for-policy?} is @code{#f}, this sets the time remaining in seconds at which action will be taken."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23802
#, no-wrap
msgid "@code{critical-power-action} (default: @code{'hybrid-sleep})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:23805
msgid "The action taken when @code{percentage-action} or @code{time-action} is reached (depending on the configuration of @code{use-percentage-for-policy?})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:23807 guix-git/doc/guix.texi:23974
#: guix-git/doc/guix.texi:24006 guix-git/doc/guix.texi:24026
#: guix-git/doc/guix.texi:24247 guix-git/doc/guix.texi:24265
#: guix-git/doc/guix.texi:24296 guix-git/doc/guix.texi:24309
#: guix-git/doc/guix.texi:24359
msgid "Possible values are:"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:23811
msgid "'power-off"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:23814
msgid "'hibernate"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:23817
msgid "@code{'hybrid-sleep}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23822
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "udisks-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23833
msgid "Type for the service that runs @uref{https://udisks.freedesktop.org/docs/latest/, UDisks}, a @dfn{disk management} daemon that provides user interfaces with notifications and ways to mount/unmount disks.  Programs that talk to UDisks include the @command{udisksctl} command, part of UDisks, and GNOME Disks.  Note that Udisks relies on the @command{mount} command, so it will only be able to use the file-system utilities installed in the system profile.  For example if you want to be able to mount NTFS file-systems in read and write fashion, you'll need to have @code{ntfs-3g} installed system-wide."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23835
msgid "The value for this service is a @code{<udisks-configuration>} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23837
#, fuzzy, no-wrap
msgid "{Data Type} udisks-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:23839
#, fuzzy
msgid "Data type representing the configuration for @code{udisks-service-type}."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:23841
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{udisks} (default: @code{udisks}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:23843
msgid "Package object for UDisks."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23847
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "colord-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23854
msgid "This is the type of the service that runs @command{colord}, a system service with a D-Bus interface to manage the color profiles of input and output devices such as screens and scanners.  It is notably used by the GNOME Color Manager graphical tool.  See @uref{https://www.freedesktop.org/software/colord/, the colord web site} for more information."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:23856
#, no-wrap
msgid "scanner access"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23857
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "sane-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23863
msgid "This service provides access to scanners @i{via} @uref{http://www.sane-project.org, SANE} by installing the necessary udev rules.  It is included in @code{%desktop-services} (@pxref{Desktop Services}) and relies by default on @code{sane-backends-minimal} package (see below) for hardware support."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23865
#, no-wrap
msgid "sane-backends-minimal"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23868
msgid "The default package which the @code{sane-service-type} installs.  It supports many recent scanners."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23870
#, fuzzy, no-wrap
#| msgid "--list-backends"
msgid "sane-backends"
msgstr "--list-backends"

#. type: defvar
#: guix-git/doc/guix.texi:23877
msgid "This package includes support for all scanners that @code{sane-backends-minimal} supports, plus older Hewlett-Packard scanners supported by @code{hplip} package.  In order to use this on a system which relies on @code{%desktop-services}, you may use @code{modify-services} (@pxref{Service Reference, @code{modify-services}}) as illustrated below:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:23886
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules\n"
"  @dots{}\n"
"  desktop)\n"
"(use-package-modules\n"
"  @dots{}\n"
"  scanner)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:23891
#, no-wrap
msgid ""
"(define %my-desktop-services\n"
"  ;; List of desktop services that supports a broader range of scanners.\n"
"  (modify-services %desktop-services\n"
"    (sane-service-type _ => sane-backends)))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:23895
#, no-wrap
msgid ""
"(operating-system\n"
"  @dots{}\n"
"  (services %my-desktop-services))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:23898
#, no-wrap
msgid "geoclue-application name [#:allowed? #t] [#:system? #f] [#:users '()]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:23907
msgid "Return a configuration allowing an application to access GeoClue location data.  @var{name} is the Desktop ID of the application, without the @code{.desktop} part.  If @var{allowed?} is true, the application will have access to location information by default.  The boolean @var{system?} value indicates whether an application is a system component or not.  Finally @var{users} is a list of UIDs of all users for which this application is allowed location info access.  An empty users list means that all users are allowed."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23909
#, no-wrap
msgid "%standard-geoclue-applications"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23916
msgid "The standard list of well-known GeoClue application configurations, granting authority to the GNOME date-and-time utility to ask for the current location in order to set the time zone, and allowing the IceCat and Epiphany web browsers to request location information.  IceCat and Epiphany both query the user before allowing a web page to know the user's location."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23918
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "geoclue-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23924
msgid "Type for the service that runs the @url{https://wiki.freedesktop.org/www/Software/GeoClue/, GeoClue} location service.  This service provides a D-Bus interface to allow applications to request access to a user's physical location, and optionally to add information to online location databases."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23926
msgid "The value for this service is a @code{<geoclue-configuration>} object."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23931
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "bluetooth-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:23936
msgid "This is the type for the @uref{https://bluez.org/, Linux Bluetooth Protocol Stack} (BlueZ) system, which generates the @file{/etc/bluetooth/main.conf} configuration file.  The value for this type is a @command{bluetooth-configuration} record as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:23939
#, no-wrap
msgid "(service bluetooth-service-type)\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:23942
msgid "See below for details about @code{bluetooth-configuration}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:23944
#, fuzzy, no-wrap
msgid "{Data Type} bluetooth-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:23946
#, fuzzy
msgid "Data type representing the configuration for @code{bluetooth-service}."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:23948
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{bluez} (default: @code{bluez})"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:23950
#, fuzzy
#| msgid "The GPM package to use."
msgid "@code{bluez} package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:23951
#, fuzzy, no-wrap
#| msgid "@code{hostname} (default: @code{#f})"
msgid "@code{name} (default: @code{\"BlueZ\"})"
msgstr "@code{hostname} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:23953
msgid "Default adapter name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23954
#, fuzzy, no-wrap
#| msgid "@code{chdir} (default: @code{#f})"
msgid "@code{class} (default: @code{#x000000})"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:23956
msgid "Default device class. Only the major and minor device class bits are considered."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23957
#, fuzzy, no-wrap
#| msgid "@code{cache-size} (default: @code{150})"
msgid "@code{discoverable-timeout} (default: @code{180})"
msgstr "@code{cache-size} (default: @code{150})"

#. type: table
#: guix-git/doc/guix.texi:23960
msgid "How long to stay in discoverable mode before going back to non-discoverable. The value is in seconds."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23961
#, fuzzy, no-wrap
#| msgid "@code{gateway-ports?} (default: @code{#f})"
msgid "@code{always-pairable?} (default: @code{#f})"
msgstr "@code{gateway-ports?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:23963
msgid "Always allow pairing even if there are no agents registered."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23964
#, fuzzy, no-wrap
msgid "@code{pairable-timeout} (default: @code{0})"
msgstr "@code{term} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:23967
msgid "How long to stay in pairable mode before going back to non-discoverable. The value is in seconds."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23968
#, fuzzy, no-wrap
#| msgid "@code{device} (default: @code{#f})"
msgid "@code{device-id} (default: @code{#f})"
msgstr "@code{device} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:23972
msgid "Use vendor id source (assigner), vendor, product and version information for DID profile support. The values are separated by \":\" and @var{assigner}, @var{VID}, @var{PID} and @var{version}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:23978
msgid "@code{#f} to disable it,"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:23982
msgid "@code{\"assigner:1234:5678:abcd\"}, where @var{assigner} is either @code{usb} (default)  or @code{bluetooth}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23985
#, fuzzy, no-wrap
msgid "@code{reverse-service-discovery?} (default: @code{#t})"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:23991
msgid "Do reverse service discovery for previously unknown devices that connect to us. For BR/EDR this option is really only needed for qualification since the BITE tester doesn't like us doing reverse SDP for some test cases, for LE this disables the GATT client functionally so it can be used in system which can only operate as peripheral."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23992
#, fuzzy, no-wrap
#| msgid "@code{no-resolv?} (default: @code{#f})"
msgid "@code{name-resolving?} (default: @code{#t})"
msgstr "@code{no-resolv?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:23995
msgid "Enable name resolving after inquiry. Set it to @code{#f} if you don't need remote devices name and want shorter discovery cycle."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:23996
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{debug-keys?} (default: @code{#f})"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24000
msgid "Enable runtime persistency of debug link keys. Default is false which makes debug link keys valid only for the duration of the connection that they were created for."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24001
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{controller-mode} (default: @code{'dual})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:24004
msgid "Restricts all controllers to the specified transport. @code{'dual} means both BR/EDR and LE are enabled (if supported by the hardware)."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24010
msgid "'dual"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24013
msgid "'bredr"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24016
msgid "'le"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24019
#, fuzzy, no-wrap
#| msgid "@code{log-file} (default: @code{#f})"
msgid "@code{multi-profile} (default: @code{'off})"
msgstr "@code{log-file} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24024
msgid "Enables Multi Profile Specification support. This allows to specify if system supports only Multiple Profiles Single Device (MPSD) configuration or both Multiple Profiles Single Device (MPSD) and Multiple Profiles Multiple Devices (MPMD) configurations."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24030
msgid "'off"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24033
msgid "'single"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24036
msgid "'multiple"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24039
#, fuzzy, no-wrap
#| msgid "@code{host-name} (default: @code{#f})"
msgid "@code{fast-connectable?} (default: @code{#f})"
msgstr "@code{host-name} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24044
msgid "Permanently enables the Fast Connectable setting for adapters that support it. When enabled other devices can connect faster to us, however the tradeoff is increased power consumptions. This feature will fully work only on kernel version 4.1 and newer."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24045
#, fuzzy, no-wrap
#| msgid "@code{chroot} (default: @code{#f})"
msgid "@code{privacy} (default: @code{'off})"
msgstr "@code{chroot} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24047
msgid "Default privacy settings."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24051
msgid "@code{'off}: Disable local privacy"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24056
msgid "@code{'network/on}: A device will only accept advertising packets from peer devices that contain private addresses. It may not be compatible with some legacy devices since it requires the use of RPA(s) all the time"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24062
msgid "@code{'device}: A device in device privacy mode is only concerned about the privacy of the device and will accept advertising packets from peer devices that contain their Identity Address as well as ones that contain a private address, even if the peer device has distributed its IRK in the past"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24066
msgid "and additionally, if @var{controller-mode} is set to @code{'dual}:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24072
msgid "@code{'limited-network}: Apply Limited Discoverable Mode to advertising, which follows the same policy as to BR/EDR that publishes the identity address when discoverable, and Network Privacy Mode for scanning"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24077
msgid "@code{'limited-device}: Apply Limited Discoverable Mode to advertising, which follows the same policy as to BR/EDR that publishes the identity address when discoverable, and Device Privacy Mode for scanning."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24080
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{just-works-repairing} (default: @code{'never})"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24082
msgid "Specify the policy to the JUST-WORKS repairing initiated by peer."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24084 guix-git/doc/guix.texi:24109
#: guix-git/doc/guix.texi:24326
msgid "Possible values:"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24087
msgid "'never"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24090
#, fuzzy
#| msgid "config"
msgid "'confirm"
msgstr "config"

#. type: code{#1}
#: guix-git/doc/guix.texi:24093
msgid "'always"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24096
#, fuzzy, no-wrap
#| msgid "@code{port} (default: @code{3306})"
msgid "@code{temporary-timeout} (default: @code{30})"
msgstr "@code{porta} (default: @code{3306})"

#. type: table
#: guix-git/doc/guix.texi:24099
msgid "How long to keep temporary devices around. The value is in seconds. @code{0} disables the timer completely."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24100
#, fuzzy, no-wrap
#| msgid "@code{persistent?} (default: @code{#t})"
msgid "@code{refresh-discovery?} (default: @code{#t})"
msgstr "@code{persistent?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:24103
msgid "Enables the device to issue an SDP request to update known services when profile is connected."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24104
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{experimental} (default: @code{#f})"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24107
msgid "Enables experimental features and interfaces, alternatively a list of UUIDs can be given."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24113
msgid "#t"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24116
msgid "#f"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24119 guix-git/doc/guix.texi:24333
msgid "@code{(list (uuid <uuid-1>) (uuid <uuid-2>) ...)}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24122
msgid "List of possible UUIDs:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24125
msgid "@code{d4992530-b9ec-469f-ab01-6c481c47da1c}: BlueZ Experimental Debug,"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24128
msgid "@code{671b10b5-42c0-4696-9227-eb28d1b049d6}: BlueZ Experimental Simultaneous Central and Peripheral,"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24131
msgid "@code{\"15c0a148-c273-11ea-b3de-0242ac130004}: BlueZ Experimental LL privacy,"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24134
msgid "@code{330859bc-7506-492d-9370-9a6f0614037f}: BlueZ Experimental Bluetooth Quality Report,"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24137
msgid "@code{a6695ace-ee7f-4fb9-881a-5fac66c629af}: BlueZ Experimental Offload Codecs."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24139
#, fuzzy, no-wrap
msgid "@code{remote-name-request-retry-delay} (default: @code{300})"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24142
msgid "The duration to avoid retrying to resolve a peer's name, if the previous try failed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24143
#, fuzzy, no-wrap
#| msgid "@code{snippet} (default: @code{#f})"
msgid "@code{page-scan-type} (default: @code{#f})"
msgstr "@code{snippet} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24145
msgid "BR/EDR Page scan activity type."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24146
#, fuzzy, no-wrap
#| msgid "@code{delay} (default: @code{#f})"
msgid "@code{page-scan-interval} (default: @code{#f})"
msgstr "@code{delay} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24148
msgid "BR/EDR Page scan activity interval."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24149
#, fuzzy, no-wrap
#| msgid "@code{password} (default: @code{#f})"
msgid "@code{page-scan-window} (default: @code{#f})"
msgstr "@code{password} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24151
msgid "BR/EDR Page scan activity window."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24152
#, fuzzy, no-wrap
#| msgid "@code{nice} (default: @code{#f})"
msgid "@code{inquiry-scan-type} (default: @code{#f})"
msgstr "@code{nice} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24154
msgid "BR/EDR Inquiry scan activity type."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24155
#, fuzzy, no-wrap
#| msgid "@code{nice} (default: @code{#f})"
msgid "@code{inquiry-scan-interval} (default: @code{#f})"
msgstr "@code{nice} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24157
msgid "BR/EDR Inquiry scan activity interval."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24158
#, fuzzy, no-wrap
#| msgid "@code{id} (default: @code{#f})"
msgid "@code{inquiry-scan-window} (default: @code{#f})"
msgstr "@code{id} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24160
msgid "BR/EDR Inquiry scan activity window."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24161
#, fuzzy, no-wrap
#| msgid "@code{chroot} (default: @code{#f})"
msgid "@code{link-supervision-timeout} (default: @code{#f})"
msgstr "@code{chroot} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24163
msgid "BR/EDR Link supervision timeout."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24164
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{page-timeout} (default: @code{#f})"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24166
msgid "BR/EDR Page timeout."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24167
#, fuzzy, no-wrap
#| msgid "@code{no-newline?} (default: @code{#f})"
msgid "@code{min-sniff-interval} (default: @code{#f})"
msgstr "@code{no-newline?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24169
msgid "BR/EDR minimum sniff interval."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24170
#, fuzzy, no-wrap
#| msgid "@code{max-zone-size} (default: @code{#f})"
msgid "@code{max-sniff-interval} (default: @code{#f})"
msgstr "@code{max-zone-size} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24172
msgid "BR/EDR maximum sniff interval."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24173
#, fuzzy, no-wrap
#| msgid "@code{ttl} (default: @code{#f})"
msgid "@code{min-advertisement-interval} (default: @code{#f})"
msgstr "@code{ttl} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24175
msgid "LE minimum advertisement interval (used for legacy advertisement only)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24176
#, fuzzy, no-wrap
msgid "@code{max-advertisement-interval} (default: @code{#f})"
msgstr "@code{term} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24178
msgid "LE maximum advertisement interval (used for legacy advertisement only)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24179
#, fuzzy, no-wrap
msgid "@code{multi-advertisement-rotation-interval} (default: @code{#f})"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24181
msgid "LE multiple advertisement rotation interval."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24182
#, fuzzy, no-wrap
#| msgid "@code{no-newline?} (default: @code{#f})"
msgid "@code{scan-interval-auto-connect} (default: @code{#f})"
msgstr "@code{no-newline?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24184
msgid "LE scanning interval used for passive scanning supporting auto connect."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24185
#, fuzzy, no-wrap
#| msgid "@code{chdir} (default: @code{#f})"
msgid "@code{scan-window-auto-connect} (default: @code{#f})"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24187
msgid "LE scanning window used for passive scanning supporting auto connect."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24188
#, fuzzy, no-wrap
#| msgid "@code{no-issue?} (default: @code{#f})"
msgid "@code{scan-interval-suspend} (default: @code{#f})"
msgstr "@code{no-issue?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24190
msgid "LE scanning interval used for active scanning supporting wake from suspend."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24191
#, fuzzy, no-wrap
#| msgid "@code{no-issue?} (default: @code{#f})"
msgid "@code{scan-window-suspend} (default: @code{#f})"
msgstr "@code{no-issue?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24193
msgid "LE scanning window used for active scanning supporting wake from suspend."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24194
#, fuzzy, no-wrap
#| msgid "@code{no-newline?} (default: @code{#f})"
msgid "@code{scan-interval-discovery} (default: @code{#f})"
msgstr "@code{no-newline?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24196
msgid "LE scanning interval used for active scanning supporting discovery."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24197
#, fuzzy, no-wrap
#| msgid "@code{no-issue?} (default: @code{#f})"
msgid "@code{scan-window-discovery} (default: @code{#f})"
msgstr "@code{no-issue?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24199
msgid "LE scanning window used for active scanning supporting discovery."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24200
#, fuzzy, no-wrap
#| msgid "@code{term} (default: @code{#f})"
msgid "@code{scan-interval-adv-monitor} (default: @code{#f})"
msgstr "@code{term} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24202
msgid "LE scanning interval used for passive scanning supporting the advertisement monitor APIs."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24203
#, fuzzy, no-wrap
#| msgid "@code{wide-area?} (default: @code{#f})"
msgid "@code{scan-window-adv-monitor} (default: @code{#f})"
msgstr "@code{wide-area?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24205
msgid "LE scanning window used for passive scanning supporting the advertisement monitor APIs."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24206
#, fuzzy, no-wrap
#| msgid "@code{no-newline?} (default: @code{#f})"
msgid "@code{scan-interval-connect} (default: @code{#f})"
msgstr "@code{no-newline?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24208
msgid "LE scanning interval used for connection establishment."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24209
#, fuzzy, no-wrap
#| msgid "@code{nice} (default: @code{#f})"
msgid "@code{scan-window-connect} (default: @code{#f})"
msgstr "@code{nice} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24211
msgid "LE scanning window used for connection establishment."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24212
#, fuzzy, no-wrap
#| msgid "@code{max-zone-size} (default: @code{#f})"
msgid "@code{min-connection-interval} (default: @code{#f})"
msgstr "@code{max-zone-size} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24215
msgid "LE default minimum connection interval. This value is superseded by any specific value provided via the Load Connection Parameters interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24216
#, fuzzy, no-wrap
#| msgid "@code{max-zone-size} (default: @code{#f})"
msgid "@code{max-connection-interval} (default: @code{#f})"
msgstr "@code{max-zone-size} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24219
msgid "LE default maximum connection interval. This value is superseded by any specific value provided via the Load Connection Parameters interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24220
#, fuzzy, no-wrap
#| msgid "@code{options} (default: @code{#f})"
msgid "@code{connection-latency} (default: @code{#f})"
msgstr "@code{options} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24223
msgid "LE default connection latency. This value is superseded by any specific value provided via the Load Connection Parameters interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24224
#, fuzzy, no-wrap
#| msgid "@code{no-reset?} (default: @code{#f})"
msgid "@code{connection-supervision-timeout} (default: @code{#f})"
msgstr "@code{no-reset?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24227
msgid "LE default connection supervision timeout. This value is superseded by any specific value provided via the Load Connection Parameters interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24228
#, fuzzy, no-wrap
#| msgid "@code{max-zone-size} (default: @code{#f})"
msgid "@code{autoconnect-timeout} (default: @code{#f})"
msgstr "@code{max-zone-size} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24231
msgid "LE default autoconnect timeout. This value is superseded by any specific value provided via the Load Connection Parameters interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24232
#, fuzzy, no-wrap
#| msgid "@code{allow-agent-forwarding?} (default: @code{#t})"
msgid "@code{adv-mon-allowlist-scan-duration} (default: @code{300})"
msgstr "@code{allow-agent-forwarding?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:24235
msgid "Allowlist scan duration during interleaving scan. Only used when scanning for ADV monitors. The units are msec."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24236
#, fuzzy, no-wrap
#| msgid "@code{zonefile-load} (default: @code{#f})"
msgid "@code{adv-mon-no-filter-scan-duration} (default: @code{500})"
msgstr "@code{zonefile-load} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24239
msgid "No filter scan duration during interleaving scan. Only used when scanning for ADV monitors. The units are msec."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24240
#, fuzzy, no-wrap
#| msgid "@code{negative-cache?} (default: @code{#t})"
msgid "@code{enable-adv-mon-interleave-scan?} (default: @code{#t})"
msgstr "@code{negative-cache?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:24242
msgid "Enable/Disable Advertisement Monitor interleave scan for power saving."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24243
#, fuzzy, no-wrap
#| msgid "@code{cache} (default: @code{#f})"
msgid "@code{cache} (default: @code{'always})"
msgstr "@code{cache} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24245
msgid "GATT attribute cache."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24253
msgid "@code{'always}: Always cache attributes even for devices not paired, this is recommended as it is best for interoperability, with more consistent reconnection times and enables proper tracking of notifications for all devices"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24256
msgid "@code{'yes}: Only cache attributes of paired devices"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24259
msgid "@code{'no}: Never cache attributes."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24261
#, fuzzy, no-wrap
#| msgid "@code{cache-size} (default: @code{150})"
msgid "@code{key-size} (default: @code{0})"
msgstr "@code{cache-size} (default: @code{150})"

#. type: table
#: guix-git/doc/guix.texi:24263
msgid "Minimum required Encryption Key Size for accessing secured characteristics."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24268
msgid "@code{0}: Don't care"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24271
msgid "7 <= N <= 16"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24273
#, fuzzy, no-wrap
#| msgid "@code{challenge} (default: @code{#f})"
msgid "@code{exchange-mtu} (default: @code{517})"
msgstr "@code{challenge} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24275
msgid "Exchange MTU size. Possible values are:"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24279
msgid "23 <= N <= 517"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24281
#, fuzzy, no-wrap
#| msgid "@code{cache} (default: @code{#f})"
msgid "@code{att-channels} (default: @code{3})"
msgstr "@code{cache} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24283
msgid "Number of ATT channels. Possible values are:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24287
msgid "@code{1}: Disables EATT"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24290
msgid "2 <= N <= 5"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24292
#, fuzzy, no-wrap
#| msgid "@code{node} (default: @code{#f})"
msgid "@code{session-mode} (default: @code{'basic})"
msgstr "@code{node} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24294
msgid "AVDTP L2CAP signalling channel mode."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24300 guix-git/doc/guix.texi:24313
msgid "@code{'basic}: Use L2CAP basic mode"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24303
msgid "@code{'ertm}: Use L2CAP enhanced retransmission mode."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24305
#, fuzzy, no-wrap
#| msgid "@code{chdir} (default: @code{#f})"
msgid "@code{stream-mode} (default: @code{'basic})"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24307
msgid "AVDTP L2CAP transport channel mode."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24316
msgid "@code{'streaming}: Use L2CAP streaming mode."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24318
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{reconnect-uuids} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:24324
msgid "The ReconnectUUIDs defines the set of remote services that should try to be reconnected to in case of a link loss (link supervision timeout). The policy plugin should contain a sane set of values by default, but this list can be overridden here. By setting the list to empty the reconnection feature gets disabled."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24330
msgid "'()"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24335
#, fuzzy, no-wrap
#| msgid "@code{remote?} (default: @code{#f})"
msgid "@code{reconnect-attempts} (default: @code{7})"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24338
msgid "Defines the number of attempts to reconnect after a link lost. Setting the value to 0 disables reconnecting feature."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24339
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{reconnect-intervals} (default: @code{'(1 2 4 8 16 32 64)})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:24343
msgid "Defines a list of intervals in seconds to use in between attempts. If the number of attempts defined in @var{reconnect-attempts} is bigger than the list of intervals the last interval is repeated until the last attempt."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24344
#, fuzzy, no-wrap
#| msgid "@code{manual?} (default: @code{#f})"
msgid "@code{auto-enable?} (default: @code{#f})"
msgstr "@code{manual?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24347
msgid "Defines option to enable all controllers when they are found. This includes adapters present on start as well as adapters that are plugged in later on."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24348
#, fuzzy, no-wrap
#| msgid "@code{delay} (default: @code{#f})"
msgid "@code{resume-delay} (default: @code{2})"
msgstr "@code{delay} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24353
msgid "Audio devices that were disconnected due to suspend will be reconnected on resume. @var{resume-delay} determines the delay between when the controller resumes from suspend and a connection attempt is made. A longer delay is better for better co-existence with Wi-Fi. The value is in seconds."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24354
#, fuzzy, no-wrap
#| msgid "@code{snippet} (default: @code{#f})"
msgid "@code{rssi-sampling-period} (default: @code{#xFF})"
msgstr "@code{snippet} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24357
msgid "Default RSSI Sampling Period. This is used when a client registers an advertisement monitor and leaves the RSSISamplingPeriod unset."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24362
msgid "@code{#x0}: Report all advertisements"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24365
msgid "@code{N = #xXX}: Report advertisements every N x 100 msec (range: #x01 to #xFE)"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:24368
msgid "@code{#xFF}: Report only one advertisement per device during monitoring period."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24373
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "gnome-keyring-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:24377
msgid "This is the type of the service that adds the @uref{https://wiki.gnome.org/Projects/GnomeKeyring, GNOME Keyring}.  Its value is a @code{gnome-keyring-configuration} object (see below)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24381
msgid "This service adds the @code{gnome-keyring} package to the system profile and extends PAM with entries using @code{pam_gnome_keyring.so}, unlocking a user's login keyring when they log in or setting its password with passwd."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24383
#, no-wrap
msgid "{Data Type} gnome-keyring-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24385
msgid "Configuration record for the GNOME Keyring service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24387
#, no-wrap
msgid "@code{keyring} (default: @code{gnome-keyring})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24389
msgid "The GNOME keyring package to use."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24390
#, no-wrap
msgid "pam-services"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24395
msgid "A list of @code{(@var{service} . @var{kind})} pairs denoting PAM services to extend, where @var{service} is the name of an existing service to extend and @var{kind} is one of @code{login} or @code{passwd}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24401
msgid "If @code{login} is given, it adds an optional @code{pam_gnome_keyring.so} to the auth block without arguments and to the session block with @code{auto_start}.  If @code{passwd} is given, it adds an optional @code{pam_gnome_keyring.so} to the password block without arguments."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24404
msgid "By default, this field contains ``gdm-password'' with the value @code{login} and ``passwd'' is with the value @code{passwd}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24407
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "seatd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:24410
msgid "@uref{https://sr.ht/~kennylevinsen/seatd/, seatd} is a minimal seat management daemon."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24413
msgid "Seat management takes care of mediating access to shared devices (graphics, input), without requiring the applications needing access to be root."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:24419
#, no-wrap
msgid ""
"(append\n"
"  (list\n"
"   ;; make sure seatd is running\n"
"   (service seatd-service-type))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:24422
#, no-wrap
msgid ""
"  ;; normally one would want %base-services\n"
"  %base-services)\n"
"\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24431
msgid "@code{seatd} operates over a UNIX domain socket, with @code{libseat} providing the client side of the protocol.  Applications that acquire access to the shared resources via @code{seatd} (e.g. @code{sway})  need to be able to talk to this socket.  This can be achieved by adding the user they run under to the group owning @code{seatd}'s socket (usually ``seat''), like so:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:24442
#, no-wrap
msgid ""
"(user-account\n"
"  (name \"alice\")\n"
"  (group \"users\")\n"
"  (supplementary-groups '(\"wheel\"   ; allow use of sudo, etc.\n"
"                          \"seat\"    ; seat management\n"
"                          \"audio\"   ; sound card\n"
"                          \"video\"   ; video devices such as webcams\n"
"                          \"cdrom\")) ; the good ol' CD-ROM\n"
"  (comment \"Bob's sister\"))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24447
msgid "Depending on your setup, you will have to not only add regular users, but also system users to this group.  For instance, some greetd greeters require graphics and therefore also need to negotiate with seatd."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24450
#, fuzzy, no-wrap
msgid "{Data Type} seatd-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:24452
#, fuzzy
msgid "Configuration record for the seatd daemon service."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:24454
#, fuzzy, no-wrap
#| msgid "@code{shared?} (default: @code{#t})"
msgid "@code{seatd} (default: @code{seatd})"
msgstr "@code{shared?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:24456
#, fuzzy
#| msgid "The GPM package to use."
msgid "The seatd package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:24457
#, fuzzy, no-wrap
#| msgid "@code{hangup?} (default: @code{#f})"
msgid "@code{group} (default: @samp{\"seat\"})"
msgstr "@code{hangup?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24459
msgid "Group to own the seatd socket."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24460
#, fuzzy, no-wrap
#| msgid "@code{tor} (default: @code{tor})"
msgid "@code{socket} (default: @samp{\"/run/seatd.sock\"})"
msgstr "@code{tor} (default: @code{tor})"

#. type: table
#: guix-git/doc/guix.texi:24462
msgid "Where to create the seatd socket."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24463
#, fuzzy, no-wrap
msgid "@code{logfile} (default: @samp{\"/var/log/seatd.log\"})"
msgstr "@code{daemon-socket} (padrão: @code{\"/var/guix/daemon-socket/socket\"})"

#. type: table
#: guix-git/doc/guix.texi:24465
msgid "Log file to write to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24466
#, fuzzy, no-wrap
#| msgid "@code{log-level} (default: @code{'info})"
msgid "@code{loglevel} (default: @samp{\"error\"})"
msgstr "@code{log-level} (default: @code{'info})"

#. type: table
#: guix-git/doc/guix.texi:24469
msgid "Log level to output logs. Possible values: @samp{\"silent\"}, @samp{\"error\"}, @samp{\"info\"} and @samp{\"debug\"}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:24477
#, no-wrap
msgid "sound support"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:24478
#, no-wrap
msgid "ALSA"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:24479
#, no-wrap
msgid "PulseAudio, sound support"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:24484
msgid "The @code{(gnu services sound)} module provides a service to configure the Advanced Linux Sound Architecture (ALSA) system, which makes PulseAudio the preferred ALSA output driver."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24485
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "alsa-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:24490
msgid "This is the type for the @uref{https://alsa-project.org/, Advanced Linux Sound Architecture} (ALSA) system, which generates the @file{/etc/asound.conf} configuration file.  The value for this type is a @command{alsa-configuration} record as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:24493
#, no-wrap
msgid "(service alsa-service-type)\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24496
msgid "See below for details about @code{alsa-configuration}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24498
#, no-wrap
msgid "{Data Type} alsa-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24500
msgid "Data type representing the configuration for @code{alsa-service}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24502
#, no-wrap
msgid "@code{alsa-plugins} (default: @var{alsa-plugins})"
msgstr "@code{alsa-plugins} (default: @var{alsa-plugins})"

#. type: table
#: guix-git/doc/guix.texi:24504
msgid "@code{alsa-plugins} package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24505
#, no-wrap
msgid "@code{pulseaudio?} (default: @var{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24508
msgid "Whether ALSA applications should transparently be made to use the @uref{https://www.pulseaudio.org/, PulseAudio} sound server."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24512
msgid "Using PulseAudio allows you to run several sound-producing applications at the same time and to individual control them @i{via} @command{pavucontrol}, among other things."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24513
#, no-wrap
msgid "@code{extra-options} (default: @var{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24515
msgid "String to append to the @file{/etc/asound.conf} file."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:24521
msgid "Individual users who want to override the system configuration of ALSA can do it with the @file{~/.asoundrc} file:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:24527
#, no-wrap
msgid ""
"# In guix, we have to specify the absolute path for plugins.\n"
"pcm_type.jack @{\n"
"  lib \"/home/alice/.guix-profile/lib/alsa-lib/libasound_module_pcm_jack.so\"\n"
"@}\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:24536
#, no-wrap
msgid ""
"# Routing ALSA to jack:\n"
"# <http://jackaudio.org/faq/routing_alsa.html>.\n"
"pcm.rawjack @{\n"
"  type jack\n"
"  playback_ports @{\n"
"    0 system:playback_1\n"
"    1 system:playback_2\n"
"  @}\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:24542
#, no-wrap
msgid ""
"  capture_ports @{\n"
"    0 system:capture_1\n"
"    1 system:capture_2\n"
"  @}\n"
"@}\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:24549
#, no-wrap
msgid ""
"pcm.!default @{\n"
"  type plug\n"
"  slave @{\n"
"    pcm \"rawjack\"\n"
"  @}\n"
"@}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:24553
msgid "See @uref{https://www.alsa-project.org/main/index.php/Asoundrc} for the details."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24554
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "pulseaudio-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:24558
msgid "This is the type for the @uref{https://www.pulseaudio.org/, PulseAudio} sound server.  It exists to allow system overrides of the default settings via @code{pulseaudio-configuration}, see below."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:24564
msgid "This service overrides per-user configuration files.  If you want PulseAudio to honor configuration files in @file{~/.config/pulse} you have to unset the environment variables @env{PULSE_CONFIG} and @env{PULSE_CLIENTCONFIG} in your @file{~/.bash_profile}."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:24572
msgid "This service on its own does not ensure, that the @code{pulseaudio} package exists on your machine.  It merely adds configuration files for it, as detailed below.  In the (admittedly unlikely) case, that you find yourself without a @code{pulseaudio} package, consider enabling it through the @code{alsa-service-type} above."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24575
#, no-wrap
msgid "{Data Type} pulseaudio-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24577
msgid "Data type representing the configuration for @code{pulseaudio-service}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24579
#, no-wrap
msgid "@code{client-conf} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24584
msgid "List of settings to set in @file{client.conf}.  Accepts a list of strings or symbol-value pairs.  A string will be inserted as-is with a newline added.  A pair will be formatted as ``key = value'', again with a newline added."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24585
#, no-wrap
msgid "@code{daemon-conf} (default: @code{'((flat-volumes . no))})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24588
msgid "List of settings to set in @file{daemon.conf}, formatted just like @var{client-conf}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24589
#, no-wrap
msgid "@code{script-file} (default: @code{(file-append pulseaudio \"/etc/pulse/default.pa\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24594
msgid "Script file to use as @file{default.pa}.  In case the @code{extra-script-files} field below is used, an @code{.include} directive pointing to @file{/etc/pulse/default.pa.d} is appended to the provided script."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24595
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{extra-script-files} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:24602
msgid "A list of file-like objects defining extra PulseAudio scripts to run at the initialization of the @command{pulseaudio} daemon, after the main @code{script-file}.  The scripts are deployed to the @file{/etc/pulse/default.pa.d} directory; they should have the @samp{.pa} file name extension.  For a reference of the available commands, refer to @command{man pulse-cli-syntax}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24603
#, no-wrap
msgid "@code{system-script-file} (default: @code{(file-append pulseaudio \"/etc/pulse/system.pa\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24605
msgid "Script file to use as @file{system.pa}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24610
msgid "The example below sets the default PulseAudio card profile, the default sink and the default source to use for a old SoundBlaster Audigy sound card:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:24619
#, no-wrap
msgid ""
"(pulseaudio-configuration\n"
" (extra-script-files\n"
"  (list (plain-file \"audigy.pa\"\n"
"                    (string-append \"\\\n"
"set-card-profile alsa_card.pci-0000_01_01.0 \\\n"
"  output:analog-surround-40+input:analog-mono\n"
"set-default-source alsa_input.pci-0000_01_01.0.analog-mono\n"
"set-default-sink alsa_output.pci-0000_01_01.0.analog-surround-40\\n\")))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24627
msgid "Note that @code{pulseaudio-service-type} is part of @code{%desktop-services}; if your operating system declaration was derived from one of the desktop templates, you'll want to adjust the above example to modify the existing @code{pulseaudio-service-type} via @code{modify-services} (@pxref{Service Reference, @code{modify-services}}), instead of defining a new one."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24630
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "ladspa-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:24633
msgid "This service sets the @var{LADSPA_PATH} variable, so that programs, which respect it, e.g. PulseAudio, can load LADSPA plugins."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24636
msgid "The following example will setup the service to enable modules from the @code{swh-plugins} package:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:24640
#, no-wrap
msgid ""
"(service ladspa-service-type\n"
"         (ladspa-configuration (plugins (list swh-plugins))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24644
msgid "See @uref{http://plugin.org.uk/ladspa-swh/docs/ladspa-swh.html} for the details."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:24651
#, no-wrap
msgid "SQL"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:24653
msgid "The @code{(gnu services databases)} module provides the following services."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:24654
#, no-wrap
msgid "PostgreSQL"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:24658
msgid "The following example describes a PostgreSQL service with the default configuration."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:24663
#, no-wrap
msgid ""
"(service postgresql-service-type\n"
"         (postgresql-configuration\n"
"          (postgresql postgresql-10)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:24669
msgid "If the services fails to start, it may be due to an incompatible cluster already present in @var{data-directory}.  Adjust it (or, if you don't need the cluster anymore, delete @var{data-directory}), then restart the service."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:24676
msgid "Peer authentication is used by default and the @code{postgres} user account has no shell, which prevents the direct execution of @code{psql} commands as this user.  To use @code{psql}, you can temporarily log in as @code{postgres} using a shell, create a PostgreSQL superuser with the same name as one of the system users and then create the associated database."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:24681
#, no-wrap
msgid ""
"sudo -u postgres -s /bin/sh\n"
"createuser --interactive\n"
"createdb $MY_USER_LOGIN      # Replace appropriately.\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24683
#, no-wrap
msgid "{Data Type} postgresql-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24686
msgid "Data type representing the configuration for the @code{postgresql-service-type}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:24688
#, no-wrap
msgid "postgresql"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24690
msgid "PostgreSQL package to use for the service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24691
#, no-wrap
msgid "@code{port} (default: @code{5432})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24693
msgid "Port on which PostgreSQL should listen."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24696
msgid "Locale to use as the default when creating the database cluster."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24697
#, no-wrap
msgid "@code{config-file} (default: @code{(postgresql-config-file)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24701
msgid "The configuration file to use when running PostgreSQL@.  The default behaviour uses the postgresql-config-file record with the default values for the fields."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24702
#, no-wrap
msgid "@code{log-directory} (default: @code{\"/var/log/postgresql\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24706
msgid "The directory where @command{pg_ctl} output will be written in a file named @code{\"pg_ctl.log\"}.  This file can be useful to debug PostgreSQL configuration errors for instance."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24707
#, no-wrap
msgid "@code{data-directory} (default: @code{\"/var/lib/postgresql/data\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24709
msgid "Directory in which to store the data."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24710
#, no-wrap
msgid "@code{extension-packages} (default: @code{'()})"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:24711
#, no-wrap
msgid "postgresql extension-packages"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24716
msgid "Additional extensions are loaded from packages listed in @var{extension-packages}.  Extensions are available at runtime.  For instance, to create a geographic database using the @code{postgis} extension, a user can configure the postgresql-service as in this example:"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:24717
#, no-wrap
msgid "postgis"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:24720
#, no-wrap
msgid ""
"(use-package-modules databases geo)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:24733
#, no-wrap
msgid ""
"(operating-system\n"
"  ...\n"
"  ;; postgresql is required to run `psql' but postgis is not required for\n"
"  ;; proper operation.\n"
"  (packages (cons* postgresql %base-packages))\n"
"  (services\n"
"    (cons*\n"
"      (service postgresql-service-type\n"
"               (postgresql-configuration\n"
"                (postgresql postgresql-10)\n"
"                (extension-packages (list postgis))))\n"
"      %base-services)))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24737
msgid "Then the extension becomes visible and you can initialise an empty geographic database in this way:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:24744
#, no-wrap
msgid ""
"psql -U postgres\n"
"> create database postgistest;\n"
"> \\connect postgistest;\n"
"> create extension postgis;\n"
"> create extension postgis_topology;\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24749
msgid "There is no need to add this field for contrib extensions such as hstore or dblink as they are already loadable by postgresql.  This field is only required to add extensions provided by other packages."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24753
#, no-wrap
msgid "{Data Type} postgresql-config-file"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24759
msgid "Data type representing the PostgreSQL configuration file.  As shown in the following example, this can be used to customize the configuration of PostgreSQL@.  Note that you can use any G-expression or filename in place of this record, if you already have a configuration file you'd like to use for example."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:24779
#, no-wrap
msgid ""
"(service postgresql-service-type\n"
"         (postgresql-configuration\n"
"          (config-file\n"
"           (postgresql-config-file\n"
"            (log-destination \"stderr\")\n"
"            (hba-file\n"
"             (plain-file \"pg_hba.conf\"\n"
"                         \"\n"
"local\tall\tall\t\t\ttrust\n"
"host\tall\tall\t127.0.0.1/32 \tmd5\n"
"host\tall\tall\t::1/128 \tmd5\"))\n"
"            (extra-config\n"
"             '((\"session_preload_libraries\"     \"auto_explain\")\n"
"               (\"random_page_cost\"              2)\n"
"               (\"auto_explain.log_min_duration\" \"100 ms\")\n"
"               (\"work_mem\"                      \"500 MB\")\n"
"               (\"logging_collector\"             #t)\n"
"               (\"log_directory\"                 \"/var/log/postgresql\")))))))\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24782
#, no-wrap
msgid "@code{log-destination} (default: @code{\"syslog\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24785
msgid "The logging method to use for PostgreSQL@.  Multiple values are accepted, separated by commas."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24786
#, no-wrap
msgid "@code{hba-file} (default: @code{%default-postgres-hba})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24789
msgid "Filename or G-expression for the host-based authentication configuration."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24790
#, no-wrap
msgid "@code{ident-file} (default: @code{%default-postgres-ident})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24792
msgid "Filename or G-expression for the user name mapping configuration."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24793
#, fuzzy, no-wrap
msgid "@code{socket-directory} (default: @code{\"/var/run/postgresql\"})"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24798
msgid "Specifies the directory of the Unix-domain socket(s) on which PostgreSQL is to listen for connections from client applications. If set to @code{\"\"} PostgreSQL does not listen on any Unix-domain sockets, in which case only TCP/IP sockets can be used to connect to the server."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24801
msgid "By default, the @code{#false} value means the PostgreSQL default value will be used, which is currently @samp{/tmp}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24806
msgid "List of additional keys and values to include in the PostgreSQL config file.  Each entry in the list should be a list where the first element is the key, and the remaining elements are the values."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24812
msgid "The values can be numbers, booleans or strings and will be mapped to PostgreSQL parameters types @code{Boolean}, @code{String}, @code{Numeric}, @code{Numeric with Unit} and @code{Enumerated} described @uref{https://www.postgresql.org/docs/current/config-setting.html, here}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24816
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "postgresql-role-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:24819
msgid "This service allows to create PostgreSQL roles and databases after PostgreSQL service start.  Here is an example of its use."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:24827
#, no-wrap
msgid ""
"(service postgresql-role-service-type\n"
"            (postgresql-role-configuration\n"
"             (roles\n"
"              (list (postgresql-role\n"
"                     (name \"test\")\n"
"                     (create-database? #t))))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24831
msgid "This service can be extended with extra roles, as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:24837
#, no-wrap
msgid ""
"(service-extension postgresql-role-service-type\n"
"                   (const (postgresql-role\n"
"                           (name \"alice\")\n"
"                           (create-database? #t))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24840
#, no-wrap
msgid "{Data Type} postgresql-role"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24846
msgid "PostgreSQL manages database access permissions using the concept of roles.  A role can be thought of as either a database user, or a group of database users, depending on how the role is set up.  Roles can own database objects (for example, tables) and can assign privileges on those objects to other roles to control who has access to which objects."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24850
msgid "The role name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24851
#, no-wrap
msgid "@code{permissions} (default: @code{'(createdb login)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24855
msgid "The role permissions list.  Supported permissions are @code{bypassrls}, @code{createdb}, @code{createrole}, @code{login}, @code{replication} and @code{superuser}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24856
#, no-wrap
msgid "@code{create-database?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24858
msgid "Whether to create a database with the same name as the role."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24862
#, no-wrap
msgid "{Data Type} postgresql-role-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24865
msgid "Data type representing the configuration of @var{postgresql-role-service-type}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24867
#, no-wrap
msgid "@code{host} (default: @code{\"/var/run/postgresql\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24869
msgid "The PostgreSQL host to connect to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24870
#, no-wrap
msgid "@code{log} (default: @code{\"/var/log/postgresql_roles.log\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24872
msgid "File name of the log file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24873
#, no-wrap
msgid "@code{roles} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24875
msgid "The initial PostgreSQL roles to create."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:24878
#, no-wrap
msgid "MariaDB/MySQL"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24880
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "mysql-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:24884
msgid "This is the service type for a MySQL or MariaDB database server.  Its value is a @code{mysql-configuration} object that specifies which package to use, as well as various settings for the @command{mysqld} daemon."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24886
#, no-wrap
msgid "{Data Type} mysql-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24888
msgid "Data type representing the configuration of @var{mysql-service-type}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24890
#, no-wrap
msgid "@code{mysql} (default: @var{mariadb})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24893
msgid "Package object of the MySQL database server, can be either @var{mariadb} or @var{mysql}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24896
msgid "For MySQL, a temporary root password will be displayed at activation time.  For MariaDB, the root password is empty."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24897 guix-git/doc/guix.texi:28741
#, no-wrap
msgid "@code{bind-address} (default: @code{\"127.0.0.1\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24900
msgid "The IP on which to listen for network connections.  Use @code{\"0.0.0.0\"} to bind to all available network interfaces."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24901
#, no-wrap
msgid "@code{port} (default: @code{3306})"
msgstr "@code{porta} (default: @code{3306})"

#. type: table
#: guix-git/doc/guix.texi:24903
msgid "TCP port on which the database server listens for incoming connections."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24904
#, no-wrap
msgid "@code{socket} (default: @code{\"/run/mysqld/mysqld.sock\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24906
msgid "Socket file to use for local (non-network) connections."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24909
msgid "Additional settings for the @file{my.cnf} configuration file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24910
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{extra-environment} (default: @code{#~'()})"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:24912
msgid "List of environment variables passed to the @command{mysqld} process."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24913
#, no-wrap
msgid "@code{auto-upgrade?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24918
msgid "Whether to automatically run @command{mysql_upgrade} after starting the service.  This is necessary to upgrade the @dfn{system schema} after ``major'' updates (such as switching from MariaDB 10.4 to 10.5), but can be disabled if you would rather do that manually."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:24922
#, no-wrap
msgid "Memcached"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24924
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "memcached-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:24928
msgid "This is the service type for the @uref{https://memcached.org/, Memcached} service, which provides a distributed in memory cache.  The value for the service type is a @code{memcached-configuration} object."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:24932
#, no-wrap
msgid "(service memcached-service-type)\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24934
#, no-wrap
msgid "{Data Type} memcached-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24936
msgid "Data type representing the configuration of memcached."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24938
#, no-wrap
msgid "@code{memcached} (default: @code{memcached})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24940
msgid "The Memcached package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24941
#, no-wrap
msgid "@code{interfaces} (default: @code{'(\"0.0.0.0\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24943
msgid "Network interfaces on which to listen."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24944
#, no-wrap
msgid "@code{tcp-port} (default: @code{11211})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24946
msgid "Port on which to accept connections."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24947
#, no-wrap
msgid "@code{udp-port} (default: @code{11211})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24950
msgid "Port on which to accept UDP connections on, a value of 0 will disable listening on a UDP socket."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24951
#, no-wrap
msgid "@code{additional-options} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24953
msgid "Additional command line options to pass to @code{memcached}."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:24956
#, no-wrap
msgid "Redis"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24958
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "redis-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:24961
msgid "This is the service type for the @uref{https://redis.io/, Redis} key/value store, whose value is a @code{redis-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24963
#, no-wrap
msgid "{Data Type} redis-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:24965
msgid "Data type representing the configuration of redis."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24967
#, no-wrap
msgid "@code{redis} (default: @code{redis})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24969
msgid "The Redis package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24970
#, no-wrap
msgid "@code{bind} (default: @code{\"127.0.0.1\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24972
msgid "Network interface on which to listen."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24973
#, no-wrap
msgid "@code{port} (default: @code{6379})"
msgstr "@code{porta} (default: @code{6379})"

#. type: table
#: guix-git/doc/guix.texi:24976
msgid "Port on which to accept connections on, a value of 0 will disable listening on a TCP socket."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:24977
#, no-wrap
msgid "@code{working-directory} (default: @code{\"/var/lib/redis\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:24979
msgid "Directory in which to store the database and related files."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:24985
#, no-wrap
msgid "mail"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:24986
#, no-wrap
msgid "email"
msgstr "e-mail"

#. type: Plain text
#: guix-git/doc/guix.texi:24991
msgid "The @code{(gnu services mail)} module provides Guix service definitions for email services: IMAP, POP3, and LMTP servers, as well as mail transport agents (MTAs).  Lots of acronyms! These services are detailed in the subsections below."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:24992
#, no-wrap
msgid "Dovecot Service"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:24994
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "dovecot-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:24997
msgid "Type for the service that runs the Dovecot IMAP/POP3/LMTP mail server, whose value is a @code{<dovecot-configuration>} object."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:25007
msgid "By default, Dovecot does not need much configuration; the default configuration object created by @code{(dovecot-configuration)} will suffice if your mail is delivered to @code{~/Maildir}.  A self-signed certificate will be generated for TLS-protected connections, though Dovecot will also listen on cleartext ports by default.  There are a number of options, though, which mail administrators might need to change, and as is the case with other services, Guix allows the system administrator to specify these parameters via a uniform Scheme interface."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:25010
msgid "For example, to specify that mail is located at @code{maildir~/.mail}, one would instantiate the Dovecot service like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:25015
#, no-wrap
msgid ""
"(service dovecot-service-type\n"
"         (dovecot-configuration\n"
"           (mail-location \"maildir:~/.mail\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:25023
msgid "The available configuration parameters follow.  Each parameter definition is preceded by its type; for example, @samp{string-list foo} indicates that the @code{foo} parameter should be specified as a list of strings.  There is also a way to specify the configuration as a string, if you have an old @code{dovecot.conf} file that you want to port over from some other system; see the end for more details."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:25033
msgid "Available @code{dovecot-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25034
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} package dovecot"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25036 guix-git/doc/guix.texi:26385
msgid "The dovecot package."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25038
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} comma-separated-string-list listen"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25044
msgid "A list of IPs or hosts where to listen for connections.  @samp{*} listens on all IPv4 interfaces, @samp{::} listens on all IPv6 interfaces.  If you want to specify non-default ports or anything more complex, customize the address and port fields of the @samp{inet-listener} of the specific services you are interested in."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25046
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} protocol-configuration-list protocols"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25049
msgid "List of protocols we want to serve.  Available protocols include @samp{imap}, @samp{pop3}, and @samp{lmtp}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25051
msgid "Available @code{protocol-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25052
#, no-wrap
msgid "{@code{protocol-configuration} parameter} string name"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25054
msgid "The name of the protocol."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25056
#, no-wrap
msgid "{@code{protocol-configuration} parameter} string auth-socket-path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25060
msgid "UNIX socket path to the master authentication server to find users.  This is used by imap (for shared users) and lda.  It defaults to @samp{\"/var/run/dovecot/auth-userdb\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25062
#, no-wrap
msgid "{@code{protocol-configuration} parameter} boolean imap-metadata?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25067
msgid "Whether to enable the @code{IMAP METADATA} extension as defined in @uref{https://tools.ietf.org/html/rfc5464,RFC@tie{}5464}, which provides a means for clients to set and retrieve per-mailbox, per-user metadata and annotations over IMAP."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25070
msgid "If this is @samp{#t}, you must also specify a dictionary @i{via} the @code{mail-attribute-dict} setting."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25075
#, no-wrap
msgid "{@code{protocol-configuration} parameter} space-separated-string-list managesieve-notify-capabilities"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25080
msgid "Which NOTIFY capabilities to report to clients that first connect to the ManageSieve service, before authentication.  These may differ from the capabilities offered to authenticated users.  If this field is left empty, report what the Sieve interpreter supports by default."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25084
#, no-wrap
msgid "{@code{protocol-configuration} parameter} space-separated-string-list managesieve-sieve-capability"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25089
msgid "Which SIEVE capabilities to report to clients that first connect to the ManageSieve service, before authentication.  These may differ from the capabilities offered to authenticated users.  If this field is left empty, report what the Sieve interpreter supports by default."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25094
#, no-wrap
msgid "{@code{protocol-configuration} parameter} space-separated-string-list mail-plugins"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25096
msgid "Space separated list of plugins to load."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25098
#, no-wrap
msgid "{@code{protocol-configuration} parameter} non-negative-integer mail-max-userip-connections"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25102
msgid "Maximum number of IMAP connections allowed for a user from each IP address.  NOTE: The username is compared case-sensitively.  Defaults to @samp{10}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25106
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} service-configuration-list services"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25110
msgid "List of services to enable.  Available services include @samp{imap}, @samp{imap-login}, @samp{pop3}, @samp{pop3-login}, @samp{auth}, and @samp{lmtp}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25112
msgid "Available @code{service-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25113
#, no-wrap
msgid "{@code{service-configuration} parameter} string kind"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25118
msgid "The service kind.  Valid values include @code{director}, @code{imap-login}, @code{pop3-login}, @code{lmtp}, @code{imap}, @code{pop3}, @code{auth}, @code{auth-worker}, @code{dict}, @code{tcpwrap}, @code{quota-warning}, or anything else."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25120
#, no-wrap
msgid "{@code{service-configuration} parameter} listener-configuration-list listeners"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25125
msgid "Listeners for the service.  A listener is either a @code{unix-listener-configuration}, a @code{fifo-listener-configuration}, or an @code{inet-listener-configuration}.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25127
msgid "Available @code{unix-listener-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25128
#, no-wrap
msgid "{@code{unix-listener-configuration} parameter} string path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25131 guix-git/doc/guix.texi:25154
msgid "Path to the file, relative to @code{base-dir} field.  This is also used as the section name."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25133
#, no-wrap
msgid "{@code{unix-listener-configuration} parameter} string mode"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25136 guix-git/doc/guix.texi:25159
msgid "The access mode for the socket.  Defaults to @samp{\"0600\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25138
#, no-wrap
msgid "{@code{unix-listener-configuration} parameter} string user"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25141 guix-git/doc/guix.texi:25164
msgid "The user to own the socket.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25143
#, no-wrap
msgid "{@code{unix-listener-configuration} parameter} string group"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25146 guix-git/doc/guix.texi:25169
msgid "The group to own the socket.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25150
msgid "Available @code{fifo-listener-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25151
#, no-wrap
msgid "{@code{fifo-listener-configuration} parameter} string path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25156
#, no-wrap
msgid "{@code{fifo-listener-configuration} parameter} string mode"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25161
#, no-wrap
msgid "{@code{fifo-listener-configuration} parameter} string user"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25166
#, no-wrap
msgid "{@code{fifo-listener-configuration} parameter} string group"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25173
msgid "Available @code{inet-listener-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25174
#, no-wrap
msgid "{@code{inet-listener-configuration} parameter} string protocol"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25176
msgid "The protocol to listen for."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25178
#, no-wrap
msgid "{@code{inet-listener-configuration} parameter} string address"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25181
msgid "The address on which to listen, or empty for all addresses.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25183
#, no-wrap
msgid "{@code{inet-listener-configuration} parameter} non-negative-integer port"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25185
msgid "The port on which to listen."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25187
#, no-wrap
msgid "{@code{inet-listener-configuration} parameter} boolean ssl?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25191
msgid "Whether to use SSL for this service; @samp{yes}, @samp{no}, or @samp{required}.  Defaults to @samp{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25195
#, no-wrap
msgid "{@code{service-configuration} parameter} non-negative-integer client-limit"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25200
msgid "Maximum number of simultaneous client connections per process.  Once this number of connections is received, the next incoming connection will prompt Dovecot to spawn another process.  If set to 0, @code{default-client-limit} is used instead."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25205
#, no-wrap
msgid "{@code{service-configuration} parameter} non-negative-integer service-count"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25210
msgid "Number of connections to handle before starting a new process.  Typically the only useful values are 0 (unlimited) or 1.  1 is more secure, but 0 is faster.  <doc/wiki/LoginProcess.txt>.  Defaults to @samp{1}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25213
#, no-wrap
msgid "{@code{service-configuration} parameter} non-negative-integer process-limit"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25216
msgid "Maximum number of processes that can exist for this service.  If set to 0, @code{default-process-limit} is used instead."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25221
#, no-wrap
msgid "{@code{service-configuration} parameter} non-negative-integer process-min-avail"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25224
msgid "Number of processes to always keep waiting for more connections.  Defaults to @samp{0}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25226
#, no-wrap
msgid "{@code{service-configuration} parameter} non-negative-integer vsz-limit"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25230
msgid "If you set @samp{service-count 0}, you probably need to grow this.  Defaults to @samp{256000000}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25234
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} dict-configuration dict"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25237
msgid "Dict configuration, as created by the @code{dict-configuration} constructor."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25239
msgid "Available @code{dict-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25240
#, no-wrap
msgid "{@code{dict-configuration} parameter} free-form-fields entries"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25243
msgid "A list of key-value pairs that this dict should hold.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25247
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} passdb-configuration-list passdbs"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25250
msgid "A list of passdb configurations, each one created by the @code{passdb-configuration} constructor."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25252
msgid "Available @code{passdb-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25253
#, no-wrap
msgid "{@code{passdb-configuration} parameter} string driver"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25258
msgid "The driver that the passdb should use.  Valid values include @samp{pam}, @samp{passwd}, @samp{shadow}, @samp{bsdauth}, and @samp{static}.  Defaults to @samp{\"pam\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25260
#, no-wrap
msgid "{@code{passdb-configuration} parameter} space-separated-string-list args"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25263
msgid "Space separated list of arguments to the passdb driver.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25267
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} userdb-configuration-list userdbs"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25270
msgid "List of userdb configurations, each one created by the @code{userdb-configuration} constructor."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25272
msgid "Available @code{userdb-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25273
#, no-wrap
msgid "{@code{userdb-configuration} parameter} string driver"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25277
msgid "The driver that the userdb should use.  Valid values include @samp{passwd} and @samp{static}.  Defaults to @samp{\"passwd\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25279
#, no-wrap
msgid "{@code{userdb-configuration} parameter} space-separated-string-list args"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25282
msgid "Space separated list of arguments to the userdb driver.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25284
#, no-wrap
msgid "{@code{userdb-configuration} parameter} free-form-args override-fields"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25287
msgid "Override fields from passwd.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25291
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} plugin-configuration plugin-configuration"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25294
msgid "Plug-in configuration, created by the @code{plugin-configuration} constructor."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25296
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} list-of-namespace-configuration namespaces"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25299
msgid "List of namespaces.  Each item in the list is created by the @code{namespace-configuration} constructor."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25301
msgid "Available @code{namespace-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25302
#, no-wrap
msgid "{@code{namespace-configuration} parameter} string name"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25304
msgid "Name for this namespace."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25306
#, no-wrap
msgid "{@code{namespace-configuration} parameter} string type"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25309
msgid "Namespace type: @samp{private}, @samp{shared} or @samp{public}.  Defaults to @samp{\"private\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25311
#, no-wrap
msgid "{@code{namespace-configuration} parameter} string separator"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25317
msgid "Hierarchy separator to use.  You should use the same separator for all namespaces or some clients get confused.  @samp{/} is usually a good one.  The default however depends on the underlying mail storage format.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25319
#, no-wrap
msgid "{@code{namespace-configuration} parameter} string prefix"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25323
msgid "Prefix required to access this namespace.  This needs to be different for all namespaces.  For example @samp{Public/}.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25325
#, no-wrap
msgid "{@code{namespace-configuration} parameter} string location"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25329
msgid "Physical location of the mailbox. This is in the same format as mail_location, which is also the default for it.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25331
#, no-wrap
msgid "{@code{namespace-configuration} parameter} boolean inbox?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25335
msgid "There can be only one INBOX, and this setting defines which namespace has it.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25337
#, no-wrap
msgid "{@code{namespace-configuration} parameter} boolean hidden?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25345
msgid "If namespace is hidden, it's not advertised to clients via NAMESPACE extension.  You'll most likely also want to set @samp{list? #f}.  This is mostly useful when converting from another server with different namespaces which you want to deprecate but still keep working.  For example you can create hidden namespaces with prefixes @samp{~/mail/}, @samp{~%u/mail/} and @samp{mail/}.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25347
#, no-wrap
msgid "{@code{namespace-configuration} parameter} boolean list?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25353
msgid "Show the mailboxes under this namespace with the LIST command.  This makes the namespace visible for clients that do not support the NAMESPACE extension.  The special @code{children} value lists child mailboxes, but hides the namespace prefix.  Defaults to @samp{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25355
#, no-wrap
msgid "{@code{namespace-configuration} parameter} boolean subscriptions?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25360
msgid "Namespace handles its own subscriptions.  If set to @code{#f}, the parent namespace handles them.  The empty prefix should always have this as @code{#t}).  Defaults to @samp{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25362
#, no-wrap
msgid "{@code{namespace-configuration} parameter} mailbox-configuration-list mailboxes"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25365
msgid "List of predefined mailboxes in this namespace.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25367
msgid "Available @code{mailbox-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25368
#, no-wrap
msgid "{@code{mailbox-configuration} parameter} string name"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25370
msgid "Name for this mailbox."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25372
#, no-wrap
msgid "{@code{mailbox-configuration} parameter} string auto"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25376
msgid "@samp{create} will automatically create this mailbox.  @samp{subscribe} will both create and subscribe to the mailbox.  Defaults to @samp{\"no\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25378
#, no-wrap
msgid "{@code{mailbox-configuration} parameter} space-separated-string-list special-use"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25383
msgid "List of IMAP @code{SPECIAL-USE} attributes as specified by RFC 6154.  Valid values are @code{\\All}, @code{\\Archive}, @code{\\Drafts}, @code{\\Flagged}, @code{\\Junk}, @code{\\Sent}, and @code{\\Trash}.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25389
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} file-name base-dir"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25392
msgid "Base directory where to store runtime data.  Defaults to @samp{\"/var/run/dovecot/\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25394
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string login-greeting"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25397
msgid "Greeting message for clients.  Defaults to @samp{\"Dovecot ready.\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25399
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} space-separated-string-list login-trusted-networks"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25406
msgid "List of trusted network ranges.  Connections from these IPs are allowed to override their IP addresses and ports (for logging and for authentication checks).  @samp{disable-plaintext-auth} is also ignored for these networks.  Typically you would specify your IMAP proxy servers here.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25408
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} space-separated-string-list login-access-sockets"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25411
msgid "List of login access check sockets (e.g.@: tcpwrap).  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25413
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean verbose-proctitle?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25419
msgid "Show more verbose process titles (in ps).  Currently shows user name and IP address.  Useful for seeing who is actually using the IMAP processes (e.g.@: shared mailboxes or if the same uid is used for multiple accounts).  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25421
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean shutdown-clients?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25427
msgid "Should all processes be killed when Dovecot master process shuts down.  Setting this to @code{#f} means that Dovecot can be upgraded without forcing existing client connections to close (although that could also be a problem if the upgrade is e.g.@: due to a security fix).  Defaults to @samp{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25429
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer doveadm-worker-count"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25433
msgid "If non-zero, run mail commands via this many connections to doveadm server, instead of running them directly in the same process.  Defaults to @samp{0}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25435
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string doveadm-socket-path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25438
msgid "UNIX socket or host:port used for connecting to doveadm server.  Defaults to @samp{\"doveadm-server\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25440
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} space-separated-string-list import-environment"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25444
msgid "List of environment variables that are preserved on Dovecot startup and passed down to all of its child processes.  You can also give key=value pairs to always set specific settings."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25446
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean disable-plaintext-auth?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25453
msgid "Disable LOGIN command and all other plaintext authentications unless SSL/TLS is used (LOGINDISABLED capability).  Note that if the remote IP matches the local IP (i.e.@: you're connecting from the same computer), the connection is considered secure and plaintext authentication is allowed.  See also ssl=required setting.  Defaults to @samp{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25455
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer auth-cache-size"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25460
msgid "Authentication cache size (e.g.@: @samp{#e10e6}).  0 means it's disabled.  Note that bsdauth, PAM and vpopmail require @samp{cache-key} to be set for caching to be used.  Defaults to @samp{0}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25462
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string auth-cache-ttl"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25470
msgid "Time to live for cached data.  After TTL expires the cached record is no longer used, *except* if the main database lookup returns internal failure.  We also try to handle password changes automatically: If user's previous authentication was successful, but this one wasn't, the cache isn't used.  For now this works only with plaintext authentication.  Defaults to @samp{\"1 hour\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25472
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string auth-cache-negative-ttl"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25476
msgid "TTL for negative hits (user not found, password mismatch).  0 disables caching them completely.  Defaults to @samp{\"1 hour\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25478
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} space-separated-string-list auth-realms"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25484
msgid "List of realms for SASL authentication mechanisms that need them.  You can leave it empty if you don't want to support multiple realms.  Many clients simply use the first one listed here, so keep the default realm first.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25486
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string auth-default-realm"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25491
msgid "Default realm/domain to use if none was specified.  This is used for both SASL realms and appending @@domain to username in plaintext logins.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25493
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string auth-username-chars"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25500
msgid "List of allowed characters in username.  If the user-given username contains a character not listed in here, the login automatically fails.  This is just an extra check to make sure user can't exploit any potential quote escaping vulnerabilities with SQL/LDAP databases.  If you want to allow all characters, set this value to empty.  Defaults to @samp{\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890.-_@@\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25502
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string auth-username-translation"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25508
msgid "Username character translations before it's looked up from databases.  The value contains series of from -> to characters.  For example @samp{#@@/@@} means that @samp{#} and @samp{/} characters are translated to @samp{@@}.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25510
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string auth-username-format"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25517
msgid "Username formatting before it's looked up from databases.  You can use the standard variables here, e.g.@: %Lu would lowercase the username, %n would drop away the domain if it was given, or @samp{%n-AT-%d} would change the @samp{@@} into @samp{-AT-}.  This translation is done after @samp{auth-username-translation} changes.  Defaults to @samp{\"%Lu\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25519
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string auth-master-user-separator"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25527
msgid "If you want to allow master users to log in by specifying the master username within the normal username string (i.e.@: not using SASL mechanism's support for it), you can specify the separator character here.  The format is then <username><separator><master username>.  UW-IMAP uses @samp{*} as the separator, so that could be a good choice.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25529
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string auth-anonymous-username"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25533
msgid "Username to use for users logging in with ANONYMOUS SASL mechanism.  Defaults to @samp{\"anonymous\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25535
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer auth-worker-max-count"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25540
msgid "Maximum number of dovecot-auth worker processes.  They're used to execute blocking passdb and userdb queries (e.g.@: MySQL and PAM).  They're automatically created and destroyed as needed.  Defaults to @samp{30}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25542
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string auth-gssapi-hostname"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25547
msgid "Host name to use in GSSAPI principal names.  The default is to use the name returned by gethostname().  Use @samp{$ALL} (with quotes) to allow all keytab entries.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25549
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string auth-krb5-keytab"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25555
msgid "Kerberos keytab to use for the GSSAPI mechanism.  Will use the system default (usually @file{/etc/krb5.keytab}) if not specified.  You may need to change the auth service to run as root to be able to read this file.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25557
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean auth-use-winbind?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25562
msgid "Do NTLM and GSS-SPNEGO authentication using Samba's winbind daemon and @samp{ntlm-auth} helper.  <doc/wiki/Authentication/Mechanisms/Winbind.txt>.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25564
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} file-name auth-winbind-helper-path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25567
msgid "Path for Samba's @samp{ntlm-auth} helper binary.  Defaults to @samp{\"/usr/bin/ntlm_auth\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25569
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string auth-failure-delay"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25572
msgid "Time to delay before replying to failed authentications.  Defaults to @samp{\"2 secs\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25574
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean auth-ssl-require-client-cert?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25578
msgid "Require a valid SSL client certificate or the authentication fails.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25580
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean auth-ssl-username-from-cert?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25585
msgid "Take the username from client's SSL certificate, using @code{X509_NAME_get_text_by_NID()} which returns the subject's DN's CommonName.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25587
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} space-separated-string-list auth-mechanisms"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25593
msgid "List of wanted authentication mechanisms.  Supported mechanisms are: @samp{plain}, @samp{login}, @samp{digest-md5}, @samp{cram-md5}, @samp{ntlm}, @samp{rpa}, @samp{apop}, @samp{anonymous}, @samp{gssapi}, @samp{otp}, @samp{skey}, and @samp{gss-spnego}.  NOTE: See also @samp{disable-plaintext-auth} setting."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25595
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} space-separated-string-list director-servers"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25600
msgid "List of IPs or hostnames to all director servers, including ourself.  Ports can be specified as ip:port.  The default port is the same as what director service's @samp{inet-listener} is using.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25602
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} space-separated-string-list director-mail-servers"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25606
msgid "List of IPs or hostnames to all backend mail servers.  Ranges are allowed too, like 10.0.0.10-10.0.0.30.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25608
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string director-user-expire"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25612
msgid "How long to redirect users to a specific server after it no longer has any connections.  Defaults to @samp{\"15 min\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25614
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string director-username-hash"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25619
msgid "How the username is translated before being hashed.  Useful values include %Ln if user can log in with or without @@domain, %Ld if mailboxes are shared within domain.  Defaults to @samp{\"%Lu\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25621
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string log-path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25625
msgid "Log file to use for error messages.  @samp{syslog} logs to syslog, @samp{/dev/stderr} logs to stderr.  Defaults to @samp{\"syslog\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25627
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string info-log-path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25631
msgid "Log file to use for informational messages.  Defaults to @samp{log-path}.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25633
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string debug-log-path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25637
msgid "Log file to use for debug messages.  Defaults to @samp{info-log-path}.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25639
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string syslog-facility"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25644
msgid "Syslog facility to use if you're logging to syslog.  Usually if you don't want to use @samp{mail}, you'll use local0..local7.  Also other standard facilities are supported.  Defaults to @samp{\"mail\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25646
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean auth-verbose?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25650
msgid "Log unsuccessful authentication attempts and the reasons why they failed.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25652
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string auth-verbose-passwords"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25659
msgid "In case of password mismatches, log the attempted password.  Valid values are no, plain and sha1.  sha1 can be useful for detecting brute force password attempts vs.  user simply trying the same password over and over again.  You can also truncate the value to n chars by appending \":n\" (e.g.@: sha1:6).  Defaults to @samp{\"no\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25661
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean auth-debug?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25665
msgid "Even more verbose logging for debugging purposes.  Shows for example SQL queries.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25667
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean auth-debug-passwords?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25672
msgid "In case of password mismatches, log the passwords and used scheme so the problem can be debugged.  Enabling this also enables @samp{auth-debug}.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25674
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean mail-debug?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25678
msgid "Enable mail process debugging.  This can help you figure out why Dovecot isn't finding your mails.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25680
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean verbose-ssl?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25683
msgid "Show protocol level SSL errors.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25685
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string log-timestamp"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25689
msgid "Prefix for each line written to log file.  % codes are in strftime(3) format.  Defaults to @samp{\"\\\"%b %d %H:%M:%S \\\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25691
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} space-separated-string-list login-log-format-elements"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25695
msgid "List of elements we want to log.  The elements which have a non-empty variable value are joined together to form a comma-separated string."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25697
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string login-log-format"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25701
msgid "Login log format.  %s contains @samp{login-log-format-elements} string, %$ contains the data we want to log.  Defaults to @samp{\"%$: %s\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25703
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mail-log-prefix"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25707
msgid "Log prefix for mail processes.  See doc/wiki/Variables.txt for list of possible variables you can use.  Defaults to @samp{\"\\\"%s(%u)<%@{pid@}><%@{session@}>: \\\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25709
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string deliver-log-format"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25711
msgid "Format to use for logging mail deliveries.  You can use variables:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:25712
#, no-wrap
msgid "%$"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:25714
msgid "Delivery status message (e.g.@: @samp{saved to INBOX})"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:25714
#, no-wrap
msgid "%m"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:25716
msgid "Message-ID"
msgstr "Mensagem-ID"

#. type: item
#: guix-git/doc/guix.texi:25716 guix-git/doc/guix.texi:26259
#, no-wrap
msgid "%s"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:25718
msgid "Subject"
msgstr "Assunto"

#. type: item
#: guix-git/doc/guix.texi:25718
#, no-wrap
msgid "%f"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:25720
msgid "From address"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:25720
#, no-wrap
msgid "%p"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:25722
msgid "Physical size"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:25722
#, no-wrap
msgid "%w"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:25724
msgid "Virtual size."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25726
msgid "Defaults to @samp{\"msgid=%m: %$\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25728
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mail-location"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25733
msgid "Location for users' mailboxes.  The default is empty, which means that Dovecot tries to find the mailboxes automatically.  This won't work if the user doesn't yet have any mail, so you should explicitly tell Dovecot the full location."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25739
msgid "If you're using mbox, giving a path to the INBOX file (e.g.@: @file{/var/mail/%u}) isn't enough.  You'll also need to tell Dovecot where the other mailboxes are kept.  This is called the @emph{root mail directory}, and it must be the first path given in the @samp{mail-location} setting."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25741
msgid "There are a few special variables you can use, e.g.:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:25743
#, no-wrap
msgid "%u"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:25745
msgid "username"
msgstr "nome de usuário"

#. type: item
#: guix-git/doc/guix.texi:25745 guix-git/doc/guix.texi:26255
#, no-wrap
msgid "%n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:25747
msgid "user part in user@@domain, same as %u if there's no domain"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:25747
#, no-wrap
msgid "%d"
msgstr "%d"

#. type: table
#: guix-git/doc/guix.texi:25749
msgid "domain part in user@@domain, empty if there's no domain"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:25749
#, no-wrap
msgid "%h"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:25751
msgid "home director"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25754
msgid "See doc/wiki/Variables.txt for full list.  Some examples:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:25755
#, no-wrap
msgid "maildir:~/Maildir"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:25756
#, no-wrap
msgid "mbox:~/mail:INBOX=/var/mail/%u"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:25757
#, no-wrap
msgid "mbox:/var/mail/%d/%1n/%n:INDEX=/var/indexes/%d/%1n/%"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25760 guix-git/doc/guix.texi:25772
#: guix-git/doc/guix.texi:25800 guix-git/doc/guix.texi:26567
#: guix-git/doc/guix.texi:26581 guix-git/doc/guix.texi:26588
#: guix-git/doc/guix.texi:26595 guix-git/doc/guix.texi:26625
#: guix-git/doc/guix.texi:26723 guix-git/doc/guix.texi:34483
#: guix-git/doc/guix.texi:34491 guix-git/doc/guix.texi:34499
#: guix-git/doc/guix.texi:34507 guix-git/doc/guix.texi:34786
#: guix-git/doc/guix.texi:36164 guix-git/doc/guix.texi:36172
#: guix-git/doc/guix.texi:36180 guix-git/doc/guix.texi:36288
#: guix-git/doc/guix.texi:36313 guix-git/doc/guix.texi:36444
#: guix-git/doc/guix.texi:36452 guix-git/doc/guix.texi:36460
#: guix-git/doc/guix.texi:36468 guix-git/doc/guix.texi:36476
#: guix-git/doc/guix.texi:36484 guix-git/doc/guix.texi:36507
#: guix-git/doc/guix.texi:36515 guix-git/doc/guix.texi:36567
#: guix-git/doc/guix.texi:36583 guix-git/doc/guix.texi:36591
#: guix-git/doc/guix.texi:36630 guix-git/doc/guix.texi:36653
#: guix-git/doc/guix.texi:36675 guix-git/doc/guix.texi:36682
#: guix-git/doc/guix.texi:36717 guix-git/doc/guix.texi:36725
#: guix-git/doc/guix.texi:36749 guix-git/doc/guix.texi:36781
#: guix-git/doc/guix.texi:36810 guix-git/doc/guix.texi:36817
#: guix-git/doc/guix.texi:36824 guix-git/doc/guix.texi:36832
#: guix-git/doc/guix.texi:36846 guix-git/doc/guix.texi:36855
#: guix-git/doc/guix.texi:36865 guix-git/doc/guix.texi:36872
#: guix-git/doc/guix.texi:36879 guix-git/doc/guix.texi:36886
#: guix-git/doc/guix.texi:36957 guix-git/doc/guix.texi:36964
#: guix-git/doc/guix.texi:36971 guix-git/doc/guix.texi:36980
#: guix-git/doc/guix.texi:36996 guix-git/doc/guix.texi:37003
#: guix-git/doc/guix.texi:37010 guix-git/doc/guix.texi:37017
#: guix-git/doc/guix.texi:37025 guix-git/doc/guix.texi:37033
msgid "Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25762
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mail-uid"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25767
msgid "System user and group used to access mails.  If you use multiple, userdb can override these by returning uid or gid fields.  You can use either numbers or names.  <doc/wiki/UserIds.txt>.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25769
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mail-gid"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25774
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mail-privileged-group"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25780
msgid "Group to enable temporarily for privileged operations.  Currently this is used only with INBOX when either its initial creation or dotlocking fails.  Typically this is set to @samp{\"mail\"} to give access to @file{/var/mail}.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25782
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mail-access-groups"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25790
msgid "Grant access to these supplementary groups for mail processes.  Typically these are used to set up access to shared mailboxes.  Note that it may be dangerous to set these if users can create symlinks (e.g.@: if @samp{mail} group is set here, @code{ln -s /var/mail ~/mail/var} could allow a user to delete others' mailboxes, or @code{ln -s /secret/shared/box ~/mail/mybox} would allow reading it).  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25792
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mail-attribute-dict"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25795
msgid "The location of a dictionary used to store @code{IMAP METADATA} as defined by @uref{https://tools.ietf.org/html/rfc5464, RFC@tie{}5464}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25798
msgid "The IMAP METADATA commands are available only if the ``imap'' protocol configuration's @code{imap-metadata?} field is @samp{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25803
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean mail-full-filesystem-access?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25809
msgid "Allow full file system access to clients.  There's no access checks other than what the operating system does for the active UID/GID@.  It works with both maildir and mboxes, allowing you to prefix mailboxes names with e.g.@: @file{/path/} or @file{~user/}.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25811
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean mmap-disable?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25815
msgid "Don't use @code{mmap()} at all.  This is required if you store indexes to shared file systems (NFS or clustered file system).  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25817
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean dotlock-use-excl?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25822
msgid "Rely on @samp{O_EXCL} to work when creating dotlock files.  NFS supports @samp{O_EXCL} since version 3, so this should be safe to use nowadays by default.  Defaults to @samp{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25824
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mail-fsync"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25826
msgid "When to use fsync() or fdatasync() calls:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:25827
#, no-wrap
msgid "optimized"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:25829
msgid "Whenever necessary to avoid losing important data"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:25831
msgid "Useful with e.g.@: NFS when @code{write()}s are delayed"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:25833
msgid "Never use it (best performance, but crashes can lose data)."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25835
msgid "Defaults to @samp{\"optimized\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25837
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean mail-nfs-storage?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25842
msgid "Mail storage exists in NFS@.  Set this to yes to make Dovecot flush NFS caches whenever needed.  If you're using only a single mail server this isn't needed.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25844
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean mail-nfs-index?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25848
msgid "Mail index files also exist in NFS@.  Setting this to yes requires @samp{mmap-disable? #t} and @samp{fsync-disable? #f}.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25850
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string lock-method"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25856
msgid "Locking method for index files.  Alternatives are fcntl, flock and dotlock.  Dotlocking uses some tricks which may create more disk I/O than other locking methods.  NFS users: flock doesn't work, remember to change @samp{mmap-disable}.  Defaults to @samp{\"fcntl\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25858
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} file-name mail-temp-dir"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25862
msgid "Directory in which LDA/LMTP temporarily stores incoming mails >128 kB.  Defaults to @samp{\"/tmp\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25864
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer first-valid-uid"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25870
msgid "Valid UID range for users.  This is mostly to make sure that users can't log in as daemons or other system users.  Note that denying root logins is hardcoded to dovecot binary and can't be done even if @samp{first-valid-uid} is set to 0.  Defaults to @samp{500}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25872
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer last-valid-uid"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25877
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer first-valid-gid"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25882
msgid "Valid GID range for users.  Users having non-valid GID as primary group ID aren't allowed to log in.  If user belongs to supplementary groups with non-valid GIDs, those groups are not set.  Defaults to @samp{1}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25884
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer last-valid-gid"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25889
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer mail-max-keyword-length"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25893
msgid "Maximum allowed length for mail keyword name.  It's only forced when trying to create new keywords.  Defaults to @samp{50}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25895
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} colon-separated-file-name-list valid-chroot-dirs"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25905
msgid "List of directories under which chrooting is allowed for mail processes (i.e.@: @file{/var/mail} will allow chrooting to @file{/var/mail/foo/bar} too).  This setting doesn't affect @samp{login-chroot} @samp{mail-chroot} or auth chroot settings.  If this setting is empty, @samp{/./} in home dirs are ignored.  WARNING: Never add directories here which local users can modify, that may lead to root exploit.  Usually this should be done only if you don't allow shell access for users.  <doc/wiki/Chrooting.txt>.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25907
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mail-chroot"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25916
msgid "Default chroot directory for mail processes.  This can be overridden for specific users in user database by giving @samp{/./} in user's home directory (e.g.@: @samp{/home/./user} chroots into @file{/home}).  Note that usually there is no real need to do chrooting, Dovecot doesn't allow users to access files outside their mail directory anyway.  If your home directories are prefixed with the chroot directory, append @samp{/.} to @samp{mail-chroot}.  <doc/wiki/Chrooting.txt>.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25918
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} file-name auth-socket-path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25922
msgid "UNIX socket path to master authentication server to find users.  This is used by imap (for shared users) and lda.  Defaults to @samp{\"/var/run/dovecot/auth-userdb\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25924
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} file-name mail-plugin-dir"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25927
msgid "Directory where to look up mail plugins.  Defaults to @samp{\"/usr/lib/dovecot\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25929
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} space-separated-string-list mail-plugins"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25933
msgid "List of plugins to load for all services.  Plugins specific to IMAP, LDA, etc.@: are added to this list in their own .conf files.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25935
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer mail-cache-min-mail-count"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25940
msgid "The minimum number of mails in a mailbox before updates are done to cache file.  This allows optimizing Dovecot's behavior to do less disk writes at the cost of more disk reads.  Defaults to @samp{0}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25942
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mailbox-idle-check-interval"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25949
msgid "When IDLE command is running, mailbox is checked once in a while to see if there are any new mails or other changes.  This setting defines the minimum time to wait between those checks.  Dovecot can also use dnotify, inotify and kqueue to find out immediately when changes occur.  Defaults to @samp{\"30 secs\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25951
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean mail-save-crlf?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25958
msgid "Save mails with CR+LF instead of plain LF@.  This makes sending those mails take less CPU, especially with sendfile() syscall with Linux and FreeBSD@.  But it also creates a bit more disk I/O which may just make it slower.  Also note that if other software reads the mboxes/maildirs, they may handle the extra CRs wrong and cause problems.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25960
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean maildir-stat-dirs?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25968
msgid "By default LIST command returns all entries in maildir beginning with a dot.  Enabling this option makes Dovecot return only entries which are directories.  This is done by stat()ing each entry, so it causes more disk I/O.  (For systems setting struct @samp{dirent->d_type} this check is free and it's done always regardless of this setting).  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25970
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean maildir-copy-with-hardlinks?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25975
msgid "When copying a message, do it with hard links whenever possible.  This makes the performance much better, and it's unlikely to have any side effects.  Defaults to @samp{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25977
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean maildir-very-dirty-syncs?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25982
msgid "Assume Dovecot is the only MUA accessing Maildir: Scan cur/ directory only when its mtime changes unexpectedly or when we can't find the mail otherwise.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25984
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} space-separated-string-list mbox-read-locks"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:25987
msgid "Which locking methods to use for locking mbox.  There are four available:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:25989
#, no-wrap
msgid "dotlock"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:25993
msgid "Create <mailbox>.lock file.  This is the oldest and most NFS-safe solution.  If you want to use /var/mail/ like directory, the users will need write access to that directory."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:25993
#, no-wrap
msgid "dotlock-try"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:25996
msgid "Same as dotlock, but if it fails because of permissions or because there isn't enough disk space, just skip it."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:25996
#, no-wrap
msgid "fcntl"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:25998
msgid "Use this if possible.  Works with NFS too if lockd is used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:25998
#, no-wrap
msgid "flock"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26000 guix-git/doc/guix.texi:26002
msgid "May not exist in all systems.  Doesn't work with NFS."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26000
#, no-wrap
msgid "lockf"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26008
msgid "You can use multiple locking methods; if you do the order they're declared in is important to avoid deadlocks if other MTAs/MUAs are using multiple locking methods as well.  Some operating systems don't allow using some of them simultaneously."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26010
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} space-separated-string-list mbox-write-locks"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26014
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mbox-lock-timeout"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26017
msgid "Maximum time to wait for lock (all of them) before aborting.  Defaults to @samp{\"5 mins\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26019
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mbox-dotlock-change-timeout"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26023
msgid "If dotlock exists but the mailbox isn't modified in any way, override the lock file after this much time.  Defaults to @samp{\"2 mins\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26025
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean mbox-dirty-syncs?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26036
msgid "When mbox changes unexpectedly we have to fully read it to find out what changed.  If the mbox is large this can take a long time.  Since the change is usually just a newly appended mail, it'd be faster to simply read the new mails.  If this setting is enabled, Dovecot does this but still safely fallbacks to re-reading the whole mbox file whenever something in mbox isn't how it's expected to be.  The only real downside to this setting is that if some other MUA changes message flags, Dovecot doesn't notice it immediately.  Note that a full sync is done with SELECT, EXAMINE, EXPUNGE and CHECK commands.  Defaults to @samp{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26038
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean mbox-very-dirty-syncs?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26043
msgid "Like @samp{mbox-dirty-syncs}, but don't do full syncs even with SELECT, EXAMINE, EXPUNGE or CHECK commands.  If this is set, @samp{mbox-dirty-syncs} is ignored.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26045
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean mbox-lazy-writes?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26051
msgid "Delay writing mbox headers until doing a full write sync (EXPUNGE and CHECK commands and when closing the mailbox).  This is especially useful for POP3 where clients often delete all mails.  The downside is that our changes aren't immediately visible to other MUAs.  Defaults to @samp{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26053
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer mbox-min-index-size"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26058
msgid "If mbox size is smaller than this (e.g.@: 100k), don't write index files.  If an index file already exists it's still read, just not updated.  Defaults to @samp{0}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26060
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer mdbox-rotate-size"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26063
msgid "Maximum dbox file size until it's rotated.  Defaults to @samp{10000000}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26065
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mdbox-rotate-interval"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26070
msgid "Maximum dbox file age until it's rotated.  Typically in days.  Day begins from midnight, so 1d = today, 2d = yesterday, etc.  0 = check disabled.  Defaults to @samp{\"1d\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26072
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean mdbox-preallocate-space?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26077
msgid "When creating new mdbox files, immediately preallocate their size to @samp{mdbox-rotate-size}.  This setting currently works only in Linux with some file systems (ext4, xfs).  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26079
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mail-attachment-dir"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26083
msgid "sdbox and mdbox support saving mail attachments to external files, which also allows single instance storage for them.  Other backends don't support this for now."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26085
msgid "WARNING: This feature hasn't been tested much yet.  Use at your own risk."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26088
msgid "Directory root where to store mail attachments.  Disabled, if empty.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26090
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer mail-attachment-min-size"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26095
msgid "Attachments smaller than this aren't saved externally.  It's also possible to write a plugin to disable saving specific attachments externally.  Defaults to @samp{128000}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26097
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mail-attachment-fs"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26099
msgid "File system backend to use for saving attachments:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26100
#, no-wrap
msgid "posix"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26102
msgid "No SiS done by Dovecot (but this might help FS's own deduplication)"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26102
#, no-wrap
msgid "sis posix"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26104
msgid "SiS with immediate byte-by-byte comparison during saving"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26104
#, no-wrap
msgid "sis-queue posix"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26106
msgid "SiS with delayed comparison and deduplication."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26108
msgid "Defaults to @samp{\"sis posix\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26110
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string mail-attachment-hash"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26116
msgid "Hash format to use in attachment filenames.  You can add any text and variables: @code{%@{md4@}}, @code{%@{md5@}}, @code{%@{sha1@}}, @code{%@{sha256@}}, @code{%@{sha512@}}, @code{%@{size@}}.  Variables can be truncated, e.g.@: @code{%@{sha256:80@}} returns only first 80 bits.  Defaults to @samp{\"%@{sha1@}\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26118
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer default-process-limit"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26123
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer default-client-limit"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26126 guix-git/doc/guix.texi:34569
msgid "Defaults to @samp{1000}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26128
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer default-vsz-limit"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26133
msgid "Default VSZ (virtual memory size) limit for service processes.  This is mainly intended to catch and kill processes that leak memory before they eat up everything.  Defaults to @samp{256000000}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26135
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string default-login-user"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26140
msgid "Login user is internally used by login processes.  This is the most untrusted user in Dovecot system.  It shouldn't have access to anything at all.  Defaults to @samp{\"dovenull\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26142
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string default-internal-user"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26147
msgid "Internal user is used by unprivileged processes.  It should be separate from login user, so that login processes can't disturb other processes.  Defaults to @samp{\"dovecot\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26149
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string ssl?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26152
msgid "SSL/TLS support: yes, no, required.  <doc/wiki/SSL.txt>.  Defaults to @samp{\"required\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26154
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string ssl-cert"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26157
msgid "PEM encoded X.509 SSL/TLS certificate (public key).  Defaults to @samp{\"</etc/dovecot/default.pem\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26159
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string ssl-key"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26164
msgid "PEM encoded SSL/TLS private key.  The key is opened before dropping root privileges, so keep the key file unreadable by anyone but root.  Defaults to @samp{\"</etc/dovecot/private/default.pem\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26166
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string ssl-key-password"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26172
msgid "If key file is password protected, give the password here.  Alternatively give it when starting dovecot with -p parameter.  Since this file is often world-readable, you may want to place this setting instead to a different.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26174
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string ssl-ca"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26180
msgid "PEM encoded trusted certificate authority.  Set this only if you intend to use @samp{ssl-verify-client-cert? #t}.  The file should contain the CA certificate(s) followed by the matching CRL(s).  (e.g.@: @samp{ssl-ca </etc/ssl/certs/ca.pem}).  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26182
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean ssl-require-crl?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26185
msgid "Require that CRL check succeeds for client certificates.  Defaults to @samp{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26187
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean ssl-verify-client-cert?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26191
msgid "Request client to send a certificate.  If you also want to require it, set @samp{auth-ssl-require-client-cert? #t} in auth section.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26193
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string ssl-cert-username-field"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26198
msgid "Which field from certificate to use for username.  commonName and x500UniqueIdentifier are the usual choices.  You'll also need to set @samp{auth-ssl-username-from-cert? #t}.  Defaults to @samp{\"commonName\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26200
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string ssl-min-protocol"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26203
msgid "Minimum SSL protocol version to accept.  Defaults to @samp{\"TLSv1\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26205
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string ssl-cipher-list"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26208
msgid "SSL ciphers to use.  Defaults to @samp{\"ALL:!kRSA:!SRP:!kDHd:!DSS:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK:!RC4:!ADH:!LOW@@STRENGTH\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26210
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string ssl-crypto-device"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26213
msgid "SSL crypto device to use, for valid values run \"openssl engine\".  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26215
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string postmaster-address"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26219
msgid "Address to use when sending rejection mails.  %d expands to recipient domain.  Defaults to @samp{\"postmaster@@%d\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26221
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string hostname"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26225
msgid "Hostname to use in various parts of sent mails (e.g.@: in Message-Id)  and in LMTP replies.  Default is the system's real hostname@@domain.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26227
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean quota-full-tempfail?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26231
msgid "If user is over quota, return with temporary failure instead of bouncing the mail.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26233
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} file-name sendmail-path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26236
msgid "Binary to use for sending mails.  Defaults to @samp{\"/usr/sbin/sendmail\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26238
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string submission-host"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26242
msgid "If non-empty, send mails via this SMTP host[:port] instead of sendmail.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26244
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string rejection-subject"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26248
msgid "Subject: header to use for rejection mails.  You can use the same variables as for @samp{rejection-reason} below.  Defaults to @samp{\"Rejected: %s\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26250
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string rejection-reason"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26253
msgid "Human readable error message for rejection mails.  You can use variables:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26257
msgid "CRLF"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26257
#, no-wrap
msgid "%r"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26259
msgid "reason"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26261
msgid "original subject"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26261
#, no-wrap
msgid "%t"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26263
msgid "recipient"
msgstr "destinatário"

#. type: deftypevr
#: guix-git/doc/guix.texi:26265
msgid "Defaults to @samp{\"Your message to <%t> was automatically rejected:%n%r\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26267
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string recipient-delimiter"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26271
msgid "Delimiter character between local-part and detail in email address.  Defaults to @samp{\"+\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26273
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string lda-original-recipient-header"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26279
msgid "Header where the original recipient address (SMTP's RCPT TO: address) is taken from if not available elsewhere.  With dovecot-lda -a parameter overrides this.  A commonly used header for this is X-Original-To.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26281
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean lda-mailbox-autocreate?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26285
msgid "Should saving a mail to a nonexistent mailbox automatically create it?.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26287
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} boolean lda-mailbox-autosubscribe?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26291
msgid "Should automatically created mailboxes be also automatically subscribed?.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26293
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} non-negative-integer imap-max-line-length"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26299
msgid "Maximum IMAP command line length.  Some clients generate very long command lines with huge mailboxes, so you may need to raise this if you get \"Too long argument\" or \"IMAP command line too large\" errors often.  Defaults to @samp{64000}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26301
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string imap-logout-format"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26303
msgid "IMAP logout format string:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26304
#, no-wrap
msgid "%i"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26306
msgid "total number of bytes read from client"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26306
#, no-wrap
msgid "%o"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26308
msgid "total number of bytes sent to client."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26311
msgid "See @file{doc/wiki/Variables.txt} for a list of all the variables you can use.  Defaults to @samp{\"in=%i out=%o deleted=%@{deleted@} expunged=%@{expunged@} trashed=%@{trashed@} hdr_count=%@{fetch_hdr_count@} hdr_bytes=%@{fetch_hdr_bytes@} body_count=%@{fetch_body_count@} body_bytes=%@{fetch_body_bytes@}\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26313
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string imap-capability"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26317
msgid "Override the IMAP CAPABILITY response.  If the value begins with '+', add the given capabilities on top of the defaults (e.g.@: +XFOO XBAR).  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26319
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string imap-idle-notify-interval"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26323
msgid "How long to wait between \"OK Still here\" notifications when client is IDLEing.  Defaults to @samp{\"2 mins\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26325
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string imap-id-send"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26331
msgid "ID field names and values to send to clients.  Using * as the value makes Dovecot use the default value.  The following fields have default values currently: name, version, os, os-version, support-url, support-email.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26333
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string imap-id-log"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26336
msgid "ID fields sent by client to log.  * means everything.  Defaults to @samp{\"\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26338
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} space-separated-string-list imap-client-workarounds"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26340
msgid "Workarounds for various client bugs:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26342
#, no-wrap
msgid "delay-newmail"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26349
msgid "Send EXISTS/RECENT new mail notifications only when replying to NOOP and CHECK commands.  Some clients ignore them otherwise, for example OSX Mail (<v2.1).  Outlook Express breaks more badly though, without this it may show user \"Message no longer in server\" errors.  Note that OE6 still breaks even with this workaround if synchronization is set to \"Headers Only\"."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26350
#, no-wrap
msgid "tb-extra-mailbox-sep"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26354
msgid "Thunderbird gets somehow confused with LAYOUT=fs (mbox and dbox) and adds extra @samp{/} suffixes to mailbox names.  This option causes Dovecot to ignore the extra @samp{/} instead of treating it as invalid mailbox name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26355
#, no-wrap
msgid "tb-lsub-flags"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26359
msgid "Show \\Noselect flags for LSUB replies with LAYOUT=fs (e.g.@: mbox).  This makes Thunderbird realize they aren't selectable and show them greyed out, instead of only later giving \"not selectable\" popup error."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26363
#, no-wrap
msgid "{@code{dovecot-configuration} parameter} string imap-urlauth-host"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26366
msgid "Host allowed in URLAUTH URLs sent by client.  \"*\" allows all.  Defaults to @samp{\"\"}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:26374
msgid "Whew! Lots of configuration options.  The nice thing about it though is that Guix has a complete interface to Dovecot's configuration language.  This allows not only a nice way to declare configurations, but also offers reflective capabilities as well: users can write code to inspect and transform configurations from within Scheme."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:26380
msgid "However, it could be that you just want to get a @code{dovecot.conf} up and running.  In that case, you can pass an @code{opaque-dovecot-configuration} as the @code{#:config} parameter to @code{dovecot-service}.  As its name indicates, an opaque configuration does not have easy reflective capabilities."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:26382
msgid "Available @code{opaque-dovecot-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26383
#, no-wrap
msgid "{@code{opaque-dovecot-configuration} parameter} package dovecot"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26387
#, no-wrap
msgid "{@code{opaque-dovecot-configuration} parameter} string string"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26389
msgid "The contents of the @code{dovecot.conf}, as a string."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:26393
msgid "For example, if your @code{dovecot.conf} is just the empty string, you could instantiate a dovecot service like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:26398
#, no-wrap
msgid ""
"(dovecot-service #:config\n"
"                 (opaque-dovecot-configuration\n"
"                  (string \"\")))\n"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:26400
#, no-wrap
msgid "OpenSMTPD Service"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:26402
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "opensmtpd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:26406
msgid "This is the type of the @uref{https://www.opensmtpd.org, OpenSMTPD} service, whose value should be an @code{opensmtpd-configuration} object as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:26411
#, no-wrap
msgid ""
"(service opensmtpd-service-type\n"
"         (opensmtpd-configuration\n"
"           (config-file (local-file \"./my-smtpd.conf\"))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:26414
#, no-wrap
msgid "{Data Type} opensmtpd-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:26416
msgid "Data type representing the configuration of opensmtpd."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26418
#, no-wrap
msgid "@code{package} (default: @var{opensmtpd})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26420
msgid "Package object of the OpenSMTPD SMTP server."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26425
msgid "This option can be used to provide a list of symbols naming Shepherd services that this service will depend on, such as @code{'networking} if you want to configure OpenSMTPD to listen on non-loopback interfaces."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26426
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{config-file} (default: @code{%default-opensmtpd-config-file})"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:26431
msgid "File-like object of the OpenSMTPD configuration file to use.  By default it listens on the loopback network interface, and allows for mail from users and daemons on the local machine, as well as permitting email to remote servers.  Run @command{man smtpd.conf} for more information."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26432
#, fuzzy, no-wrap
#| msgid "@code{shared?} (default: @code{#t})"
msgid "@code{setgid-commands?} (default: @code{#t})"
msgstr "@code{shared?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:26437
msgid "Make the following commands setgid to @code{smtpq} so they can be executed: @command{smtpctl}, @command{sendmail}, @command{send-mail}, @command{makemap}, @command{mailq}, and @command{newaliases}.  @xref{Setuid Programs}, for more information on setgid programs."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:26440
#, no-wrap
msgid "Exim Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:26442
#, no-wrap
msgid "mail transfer agent (MTA)"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:26443
#, no-wrap
msgid "MTA (mail transfer agent)"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:26444
#, no-wrap
msgid "SMTP"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:26446
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "exim-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:26450
msgid "This is the type of the @uref{https://exim.org, Exim} mail transfer agent (MTA), whose value should be an @code{exim-configuration} object as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:26455
#, no-wrap
msgid ""
"(service exim-service-type\n"
"         (exim-configuration\n"
"           (config-file (local-file \"./my-exim.conf\"))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:26461
msgid "In order to use an @code{exim-service-type} service you must also have a @code{mail-aliases-service-type} service present in your @code{operating-system} (even if it has no aliases)."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:26462
#, no-wrap
msgid "{Data Type} exim-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:26464
msgid "Data type representing the configuration of exim."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26466
#, no-wrap
msgid "@code{package} (default: @var{exim})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26468
msgid "Package object of the Exim server."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26475
msgid "File-like object of the Exim configuration file to use.  If its value is @code{#f} then use the default configuration file from the package provided in @code{package}.  The resulting configuration file is loaded after setting the @code{exim_user} and @code{exim_group} configuration variables."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:26479
#, no-wrap
msgid "Getmail service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:26481
#, no-wrap
msgid "IMAP"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:26482
#, no-wrap
msgid "POP"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:26484
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "getmail-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:26487
msgid "This is the type of the @uref{http://pyropus.ca/software/getmail/, Getmail} mail retriever, whose value should be a @code{getmail-configuration}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:26490
msgid "Available @code{getmail-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26491
#, no-wrap
msgid "{@code{getmail-configuration} parameter} symbol name"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26493
msgid "A symbol to identify the getmail service."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26495
msgid "Defaults to @samp{\"unset\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26498
#, no-wrap
msgid "{@code{getmail-configuration} parameter} package package"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26500
msgid "The getmail package to use."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26503
#, no-wrap
msgid "{@code{getmail-configuration} parameter} string user"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26505
msgid "The user to run getmail as."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26507 guix-git/doc/guix.texi:26514
msgid "Defaults to @samp{\"getmail\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26510
#, no-wrap
msgid "{@code{getmail-configuration} parameter} string group"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26512
msgid "The group to run getmail as."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26517
#, no-wrap
msgid "{@code{getmail-configuration} parameter} string directory"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26519
msgid "The getmail directory to use."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26521
msgid "Defaults to @samp{\"/var/lib/getmail/default\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26524
#, no-wrap
msgid "{@code{getmail-configuration} parameter} getmail-configuration-file rcfile"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26526
msgid "The getmail configuration file to use."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26528
msgid "Available @code{getmail-configuration-file} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26529
#, no-wrap
msgid "{@code{getmail-configuration-file} parameter} getmail-retriever-configuration retriever"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26531
msgid "What mail account to retrieve mail from, and how to access that account."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26533
msgid "Available @code{getmail-retriever-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26534
#, no-wrap
msgid "{@code{getmail-retriever-configuration} parameter} string type"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26537
msgid "The type of mail retriever to use.  Valid values include @samp{passwd} and @samp{static}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26539
msgid "Defaults to @samp{\"SimpleIMAPSSLRetriever\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26542
#, no-wrap
msgid "{@code{getmail-retriever-configuration} parameter} string server"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26544 guix-git/doc/guix.texi:26551
msgid "Username to login to the mail server with."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26546 guix-git/doc/guix.texi:26553
#: guix-git/doc/guix.texi:26617
msgid "Defaults to @samp{unset}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26549
#, no-wrap
msgid "{@code{getmail-retriever-configuration} parameter} string username"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26556
#, no-wrap
msgid "{@code{getmail-retriever-configuration} parameter} non-negative-integer port"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26558
msgid "Port number to connect to."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26563
#, no-wrap
msgid "{@code{getmail-retriever-configuration} parameter} string password"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26565 guix-git/doc/guix.texi:26572
msgid "Override fields from passwd."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26570
#, no-wrap
msgid "{@code{getmail-retriever-configuration} parameter} list password-command"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26577
#, no-wrap
msgid "{@code{getmail-retriever-configuration} parameter} string keyfile"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26579
msgid "PEM-formatted key file to use for the TLS negotiation."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26584
#, no-wrap
msgid "{@code{getmail-retriever-configuration} parameter} string certfile"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26586
msgid "PEM-formatted certificate file to use for the TLS negotiation."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26591
#, no-wrap
msgid "{@code{getmail-retriever-configuration} parameter} string ca-certs"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26593
msgid "CA certificates to use."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26598
#, no-wrap
msgid "{@code{getmail-retriever-configuration} parameter} parameter-alist extra-parameters"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26600
msgid "Extra retriever parameters."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26607
#, no-wrap
msgid "{@code{getmail-configuration-file} parameter} getmail-destination-configuration destination"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26609
msgid "What to do with retrieved messages."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26611
msgid "Available @code{getmail-destination-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26612
#, no-wrap
msgid "{@code{getmail-destination-configuration} parameter} string type"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26615
msgid "The type of mail destination.  Valid values include @samp{Maildir}, @samp{Mboxrd} and @samp{MDA_external}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26620
#, no-wrap
msgid "{@code{getmail-destination-configuration} parameter} string-or-filelike path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26623
msgid "The path option for the mail destination.  The behaviour depends on the chosen type."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26628
#, no-wrap
msgid "{@code{getmail-destination-configuration} parameter} parameter-alist extra-parameters"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26630
msgid "Extra destination parameters"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26637
#, no-wrap
msgid "{@code{getmail-configuration-file} parameter} getmail-options-configuration options"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26639
msgid "Configure getmail."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26641
msgid "Available @code{getmail-options-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26642
#, no-wrap
msgid "{@code{getmail-options-configuration} parameter} non-negative-integer verbose"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26647
msgid "If set to @samp{0}, getmail will only print warnings and errors.  A value of @samp{1} means that messages will be printed about retrieving and deleting messages.  If set to @samp{2}, getmail will print messages about each of its actions."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26649 guix-git/doc/guix.texi:33787
#: guix-git/doc/guix.texi:34627 guix-git/doc/guix.texi:34772
msgid "Defaults to @samp{1}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26652
#, no-wrap
msgid "{@code{getmail-options-configuration} parameter} boolean read-all"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26655
msgid "If true, getmail will retrieve all available messages.  Otherwise it will only retrieve messages it hasn't seen previously."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26660
#, no-wrap
msgid "{@code{getmail-options-configuration} parameter} boolean delete"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26664
msgid "If set to true, messages will be deleted from the server after retrieving and successfully delivering them.  Otherwise, messages will be left on the server."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26669
#, no-wrap
msgid "{@code{getmail-options-configuration} parameter} non-negative-integer delete-after"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26674
msgid "Getmail will delete messages this number of days after seeing them, if they have been delivered.  This means messages will be left on the server this number of days after delivering them.  A value of @samp{0} disabled this feature."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26679
#, no-wrap
msgid "{@code{getmail-options-configuration} parameter} non-negative-integer delete-bigger-than"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26683
msgid "Delete messages larger than this of bytes after retrieving them, even if the delete and delete-after options are disabled.  A value of @samp{0} disables this feature."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26688
#, no-wrap
msgid "{@code{getmail-options-configuration} parameter} non-negative-integer max-bytes-per-session"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26691
msgid "Retrieve messages totalling up to this number of bytes before closing the session with the server.  A value of @samp{0} disables this feature."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26696
#, no-wrap
msgid "{@code{getmail-options-configuration} parameter} non-negative-integer max-message-size"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26699
msgid "Don't retrieve messages larger than this number of bytes.  A value of @samp{0} disables this feature."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26704
#, no-wrap
msgid "{@code{getmail-options-configuration} parameter} boolean delivered-to"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26706
msgid "If true, getmail will add a Delivered-To header to messages."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26711
#, no-wrap
msgid "{@code{getmail-options-configuration} parameter} boolean received"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26713
msgid "If set, getmail adds a Received header to the messages."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26718
#, no-wrap
msgid "{@code{getmail-options-configuration} parameter} string message-log"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26721
msgid "Getmail will record a log of its actions to the named file.  A value of @samp{\"\"} disables this feature."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26726
#, no-wrap
msgid "{@code{getmail-options-configuration} parameter} boolean message-log-syslog"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26729
msgid "If true, getmail will record a log of its actions using the system logger."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26734
#, no-wrap
msgid "{@code{getmail-options-configuration} parameter} boolean message-log-verbose"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26738
msgid "If true, getmail will log information about messages not retrieved and the reason for not retrieving them, as well as starting and ending information lines."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26743
#, no-wrap
msgid "{@code{getmail-options-configuration} parameter} parameter-alist extra-parameters"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26745
msgid "Extra options to include."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26754
#, no-wrap
msgid "{@code{getmail-configuration} parameter} list idle"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26758
msgid "A list of mailboxes that getmail should wait on the server for new mail notifications.  This depends on the server supporting the IDLE extension."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26763
#, no-wrap
msgid "{@code{getmail-configuration} parameter} list environment-variables"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26765
msgid "Environment variables to set for getmail."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:26770
#, no-wrap
msgid "Mail Aliases Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:26772
#, no-wrap
msgid "email aliases"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:26773
#, no-wrap
msgid "aliases, for email addresses"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:26775
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "mail-aliases-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:26778
msgid "This is the type of the service which provides @code{/etc/aliases}, specifying how to deliver mail to users on this system."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:26783
#, no-wrap
msgid ""
"(service mail-aliases-service-type\n"
"         '((\"postmaster\" \"bob\")\n"
"           (\"bob\" \"bob@@example.com\" \"bob@@example2.com\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:26791
msgid "The configuration for a @code{mail-aliases-service-type} service is an association list denoting how to deliver mail that comes to this system.  Each entry is of the form @code{(alias addresses ...)}, with @code{alias} specifying the local alias and @code{addresses} specifying where to deliver this user's mail."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:26797
msgid "The aliases aren't required to exist as users on the local system.  In the above example, there doesn't need to be a @code{postmaster} entry in the @code{operating-system}'s @code{user-accounts} in order to deliver the @code{postmaster} mail to @code{bob} (which subsequently would deliver mail to @code{bob@@example.com} and @code{bob@@example2.com})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:26798 guix-git/doc/guix.texi:26799
#, no-wrap
msgid "GNU Mailutils IMAP4 Daemon"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:26801
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "imap4d-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:26805
msgid "This is the type of the GNU Mailutils IMAP4 Daemon (@pxref{imap4d,,, mailutils, GNU Mailutils Manual}), whose value should be an @code{imap4d-configuration} object as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:26810
#, no-wrap
msgid ""
"(service imap4d-service-type\n"
"         (imap4d-configuration\n"
"           (config-file (local-file \"imap4d.conf\"))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:26813
#, no-wrap
msgid "{Data Type} imap4d-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:26815
msgid "Data type representing the configuration of @command{imap4d}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26817
#, no-wrap
msgid "@code{package} (default: @code{mailutils})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26819
msgid "The package that provides @command{imap4d}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26820
#, no-wrap
msgid "@code{config-file} (default: @code{%default-imap4d-config-file})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26824
msgid "File-like object of the configuration file to use, by default it will listen on TCP port 143 of @code{localhost}.  @xref{Conf-imap4d,,, mailutils, GNU Mailutils Manual}, for details."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:26828
#, no-wrap
msgid "Radicale Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:26829
#, no-wrap
msgid "CalDAV"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:26830
#, no-wrap
msgid "CardDAV"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:26832
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "radicale-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:26835
msgid "This is the type of the @uref{https://radicale.org, Radicale} CalDAV/CardDAV server whose value should be a @code{radicale-configuration}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:26837
#, no-wrap
msgid "{Data Type} radicale-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:26839
msgid "Data type representing the configuration of @command{radicale}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26841
#, no-wrap
msgid "@code{package} (default: @code{radicale})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26843
msgid "The package that provides @command{radicale}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:26844
#, no-wrap
msgid "@code{config-file} (default: @code{%default-radicale-config-file})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:26848
msgid "File-like object of the configuration file to use, by default it will listen on TCP port 5232 of @code{localhost} and use the @code{htpasswd} file at @file{/var/lib/radicale/users} with no (@code{plain}) encryption."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:26855
#, no-wrap
msgid "messaging"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:26856
#, no-wrap
msgid "jabber"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:26857
#, no-wrap
msgid "XMPP"
msgstr "XMPP"

#. type: Plain text
#: guix-git/doc/guix.texi:26861
msgid "The @code{(gnu services messaging)} module provides Guix service definitions for messaging services.  Currently it provides the following services:"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:26862
#, no-wrap
msgid "Prosody Service"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:26864
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "prosody-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:26868
msgid "This is the type for the @uref{https://prosody.im, Prosody XMPP communication server}.  Its value must be a @code{prosody-configuration} record as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:26883
#, no-wrap
msgid ""
"(service prosody-service-type\n"
"         (prosody-configuration\n"
"          (modules-enabled (cons* \"groups\" \"mam\" %default-modules-enabled))\n"
"          (int-components\n"
"           (list\n"
"            (int-component-configuration\n"
"             (hostname \"conference.example.net\")\n"
"             (plugin \"muc\")\n"
"             (mod-muc (mod-muc-configuration)))))\n"
"          (virtualhosts\n"
"           (list\n"
"            (virtualhost-configuration\n"
"             (domain \"example.net\"))))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:26886
msgid "See below for details about @code{prosody-configuration}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:26892
msgid "By default, Prosody does not need much configuration.  Only one @code{virtualhosts} field is needed: it specifies the domain you wish Prosody to serve."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:26895
msgid "You can perform various sanity checks on the generated configuration with the @code{prosodyctl check} command."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:26899
msgid "Prosodyctl will also help you to import certificates from the @code{letsencrypt} directory so that the @code{prosody} user can access them.  See @url{https://prosody.im/doc/letsencrypt}."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:26902
#, no-wrap
msgid "prosodyctl --root cert import /etc/letsencrypt/live\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:26909
msgid "The available configuration parameters follow.  Each parameter definition is preceded by its type; for example, @samp{string-list foo} indicates that the @code{foo} parameter should be specified as a list of strings.  Types starting with @code{maybe-} denote parameters that won't show up in @code{prosody.cfg.lua} when their value is left unspecified."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:26913
msgid "There is also a way to specify the configuration as a string, if you have an old @code{prosody.cfg.lua} file that you want to port over from some other system; see the end for more details."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:26916
msgid "The @code{file-object} type designates either a file-like object (@pxref{G-Expressions, file-like objects}) or a file name."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:26926
msgid "Available @code{prosody-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26927
#, no-wrap
msgid "{@code{prosody-configuration} parameter} package prosody"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26929
msgid "The Prosody package."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26931
#, no-wrap
msgid "{@code{prosody-configuration} parameter} file-name data-path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26935
msgid "Location of the Prosody data storage directory.  See @url{https://prosody.im/doc/configure}.  Defaults to @samp{\"/var/lib/prosody\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26937
#, no-wrap
msgid "{@code{prosody-configuration} parameter} file-object-list plugin-paths"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26941
msgid "Additional plugin directories.  They are searched in all the specified paths in order.  See @url{https://prosody.im/doc/plugins_directory}.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26943
#, no-wrap
msgid "{@code{prosody-configuration} parameter} file-name certificates"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26948
msgid "Every virtual host and component needs a certificate so that clients and servers can securely verify its identity.  Prosody will automatically load certificates/keys from the directory specified here.  Defaults to @samp{\"/etc/prosody/certs\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26950
#, no-wrap
msgid "{@code{prosody-configuration} parameter} string-list admins"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26956
msgid "This is a list of accounts that are admins for the server.  Note that you must create the accounts separately.  See @url{https://prosody.im/doc/admins} and @url{https://prosody.im/doc/creating_accounts}.  Example: @code{(admins '(\"user1@@example.com\" \"user2@@example.net\"))} Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26958
#, no-wrap
msgid "{@code{prosody-configuration} parameter} boolean use-libevent?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26962
msgid "Enable use of libevent for better performance under high load.  See @url{https://prosody.im/doc/libevent}.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26964
#, no-wrap
msgid "{@code{prosody-configuration} parameter} module-list modules-enabled"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26970
msgid "This is the list of modules Prosody will load on startup.  It looks for @code{mod_modulename.lua} in the plugins folder, so make sure that exists too.  Documentation on modules can be found at: @url{https://prosody.im/doc/modules}.  Defaults to @samp{'(\"roster\" \"saslauth\" \"tls\" \"dialback\" \"disco\" \"carbons\" \"private\" \"blocklist\" \"vcard\" \"version\" \"uptime\" \"time\" \"ping\" \"pep\" \"register\" \"admin_adhoc\")}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26972
#, no-wrap
msgid "{@code{prosody-configuration} parameter} string-list modules-disabled"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26976
msgid "@samp{\"offline\"}, @samp{\"c2s\"} and @samp{\"s2s\"} are auto-loaded, but should you want to disable them then add them to this list.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26978
#, no-wrap
msgid "{@code{prosody-configuration} parameter} file-object groups-file"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26983
msgid "Path to a text file where the shared groups are defined.  If this path is empty then @samp{mod_groups} does nothing.  See @url{https://prosody.im/doc/modules/mod_groups}.  Defaults to @samp{\"/var/lib/prosody/sharedgroups.txt\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26985
#, no-wrap
msgid "{@code{prosody-configuration} parameter} boolean allow-registration?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26989
msgid "Disable account creation by default, for security.  See @url{https://prosody.im/doc/creating_accounts}.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26991
#, no-wrap
msgid "{@code{prosody-configuration} parameter} maybe-ssl-configuration ssl"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26996
msgid "These are the SSL/TLS-related settings.  Most of them are disabled so to use Prosody's defaults.  If you do not completely understand these options, do not add them to your config, it is easy to lower the security of your server using them.  See @url{https://prosody.im/doc/advanced_ssl_config}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26998
msgid "Available @code{ssl-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:26999
#, no-wrap
msgid "{@code{ssl-configuration} parameter} maybe-string protocol"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27001
msgid "This determines what handshake to use."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27003
#, no-wrap
msgid "{@code{ssl-configuration} parameter} maybe-file-name key"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27005
msgid "Path to your private key file."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27007
#, no-wrap
msgid "{@code{ssl-configuration} parameter} maybe-file-name certificate"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27009
msgid "Path to your certificate file."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27011
#, no-wrap
msgid "{@code{ssl-configuration} parameter} file-object capath"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27015
msgid "Path to directory containing root certificates that you wish Prosody to trust when verifying the certificates of remote servers.  Defaults to @samp{\"/etc/ssl/certs\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27017
#, no-wrap
msgid "{@code{ssl-configuration} parameter} maybe-file-object cafile"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27020
msgid "Path to a file containing root certificates that you wish Prosody to trust.  Similar to @code{capath} but with all certificates concatenated together."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27022
#, no-wrap
msgid "{@code{ssl-configuration} parameter} maybe-string-list verify"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27025
msgid "A list of verification options (these mostly map to OpenSSL's @code{set_verify()} flags)."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27027
#, no-wrap
msgid "{@code{ssl-configuration} parameter} maybe-string-list options"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27031
msgid "A list of general options relating to SSL/TLS@.  These map to OpenSSL's @code{set_options()}.  For a full list of options available in LuaSec, see the LuaSec source."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27033
#, no-wrap
msgid "{@code{ssl-configuration} parameter} maybe-non-negative-integer depth"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27036
msgid "How long a chain of certificate authorities to check when looking for a trusted root certificate."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27038
#, no-wrap
msgid "{@code{ssl-configuration} parameter} maybe-string ciphers"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27041
msgid "An OpenSSL cipher string.  This selects what ciphers Prosody will offer to clients, and in what order."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27043
#, no-wrap
msgid "{@code{ssl-configuration} parameter} maybe-file-name dhparam"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27047
msgid "A path to a file containing parameters for Diffie-Hellman key exchange.  You can create such a file with: @code{openssl dhparam -out /etc/prosody/certs/dh-2048.pem 2048}"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27049
#, no-wrap
msgid "{@code{ssl-configuration} parameter} maybe-string curve"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27052
msgid "Curve for Elliptic curve Diffie-Hellman.  Prosody's default is @samp{\"secp384r1\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27054
#, no-wrap
msgid "{@code{ssl-configuration} parameter} maybe-string-list verifyext"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27056
msgid "A list of ``extra'' verification options."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27058
#, no-wrap
msgid "{@code{ssl-configuration} parameter} maybe-string password"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27060
msgid "Password for encrypted private keys."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27064
#, no-wrap
msgid "{@code{prosody-configuration} parameter} boolean c2s-require-encryption?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27068
msgid "Whether to force all client-to-server connections to be encrypted or not.  See @url{https://prosody.im/doc/modules/mod_tls}.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27070
#, no-wrap
msgid "{@code{prosody-configuration} parameter} string-list disable-sasl-mechanisms"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27074
msgid "Set of mechanisms that will never be offered.  See @url{https://prosody.im/doc/modules/mod_saslauth}.  Defaults to @samp{'(\"DIGEST-MD5\")}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27076
#, no-wrap
msgid "{@code{prosody-configuration} parameter} boolean s2s-require-encryption?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27080
msgid "Whether to force all server-to-server connections to be encrypted or not.  See @url{https://prosody.im/doc/modules/mod_tls}.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27082
#, no-wrap
msgid "{@code{prosody-configuration} parameter} boolean s2s-secure-auth?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27088
msgid "Whether to require encryption and certificate authentication.  This provides ideal security, but requires servers you communicate with to support encryption AND present valid, trusted certificates.  See @url{https://prosody.im/doc/s2s#security}.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27090
#, no-wrap
msgid "{@code{prosody-configuration} parameter} string-list s2s-insecure-domains"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27096
msgid "Many servers don't support encryption or have invalid or self-signed certificates.  You can list domains here that will not be required to authenticate using certificates.  They will be authenticated using DNS@.  See @url{https://prosody.im/doc/s2s#security}.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27098
#, no-wrap
msgid "{@code{prosody-configuration} parameter} string-list s2s-secure-domains"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27103
msgid "Even if you leave @code{s2s-secure-auth?} disabled, you can still require valid certificates for some domains by specifying a list here.  See @url{https://prosody.im/doc/s2s#security}.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27105
#, no-wrap
msgid "{@code{prosody-configuration} parameter} string authentication"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27113
msgid "Select the authentication backend to use.  The default provider stores passwords in plaintext and uses Prosody's configured data storage to store the authentication data.  If you do not trust your server please see @url{https://prosody.im/doc/modules/mod_auth_internal_hashed} for information about using the hashed backend.  See also @url{https://prosody.im/doc/authentication} Defaults to @samp{\"internal_plain\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27115
#, no-wrap
msgid "{@code{prosody-configuration} parameter} maybe-string log"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27119
msgid "Set logging options.  Advanced logging configuration is not yet supported by the Prosody service.  See @url{https://prosody.im/doc/logging}.  Defaults to @samp{\"*syslog\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27121
#, no-wrap
msgid "{@code{prosody-configuration} parameter} file-name pidfile"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27124
msgid "File to write pid in.  See @url{https://prosody.im/doc/modules/mod_posix}.  Defaults to @samp{\"/var/run/prosody/prosody.pid\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27126
#, no-wrap
msgid "{@code{prosody-configuration} parameter} maybe-non-negative-integer http-max-content-size"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27128
msgid "Maximum allowed size of the HTTP body (in bytes)."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27130
#, no-wrap
msgid "{@code{prosody-configuration} parameter} maybe-string http-external-url"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27135
msgid "Some modules expose their own URL in various ways.  This URL is built from the protocol, host and port used.  If Prosody sits behind a proxy, the public URL will be @code{http-external-url} instead.  See @url{https://prosody.im/doc/http#external_url}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27137
#, no-wrap
msgid "{@code{prosody-configuration} parameter} virtualhost-configuration-list virtualhosts"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27142
msgid "A host in Prosody is a domain on which user accounts can be created.  For example if you want your users to have addresses like @samp{\"john.smith@@example.com\"} then you need to add a host @samp{\"example.com\"}.  All options in this list will apply only to this host."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:27149
msgid "The name @emph{virtual} host is used in configuration to avoid confusion with the actual physical host that Prosody is installed on.  A single Prosody instance can serve many domains, each one defined as a VirtualHost entry in Prosody's configuration.  Conversely a server that hosts a single domain would have just one VirtualHost entry."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:27151
msgid "See @url{https://prosody.im/doc/configure#virtual_host_settings}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27154
msgid "Available @code{virtualhost-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27156 guix-git/doc/guix.texi:27178
#: guix-git/doc/guix.texi:27231
msgid "all these @code{prosody-configuration} fields: @code{admins}, @code{use-libevent?}, @code{modules-enabled}, @code{modules-disabled}, @code{groups-file}, @code{allow-registration?}, @code{ssl}, @code{c2s-require-encryption?}, @code{disable-sasl-mechanisms}, @code{s2s-require-encryption?}, @code{s2s-secure-auth?}, @code{s2s-insecure-domains}, @code{s2s-secure-domains}, @code{authentication}, @code{log}, @code{http-max-content-size}, @code{http-external-url}, @code{raw-content}, plus:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27156
#, no-wrap
msgid "{@code{virtualhost-configuration} parameter} string domain"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27158
msgid "Domain you wish Prosody to serve."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27162
#, no-wrap
msgid "{@code{prosody-configuration} parameter} int-component-configuration-list int-components"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27167
msgid "Components are extra services on a server which are available to clients, usually on a subdomain of the main server (such as @samp{\"mycomponent.example.com\"}).  Example components might be chatroom servers, user directories, or gateways to other protocols."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27171
msgid "Internal components are implemented with Prosody-specific plugins.  To add an internal component, you simply fill the hostname field, and the plugin you wish to use for the component."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27174
msgid "See @url{https://prosody.im/doc/components}.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27176
msgid "Available @code{int-component-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27178
#, no-wrap
msgid "{@code{int-component-configuration} parameter} string hostname"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27180 guix-git/doc/guix.texi:27237
msgid "Hostname of the component."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27182
#, no-wrap
msgid "{@code{int-component-configuration} parameter} string plugin"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27184
msgid "Plugin you wish to use for the component."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27186
#, no-wrap
msgid "{@code{int-component-configuration} parameter} maybe-mod-muc-configuration mod-muc"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27189
msgid "Multi-user chat (MUC) is Prosody's module for allowing you to create hosted chatrooms/conferences for XMPP users."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27193
msgid "General information on setting up and using multi-user chatrooms can be found in the ``Chatrooms'' documentation (@url{https://prosody.im/doc/chatrooms}), which you should read if you are new to XMPP chatrooms."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27195
msgid "See also @url{https://prosody.im/doc/modules/mod_muc}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27197
msgid "Available @code{mod-muc-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27198
#, no-wrap
msgid "{@code{mod-muc-configuration} parameter} string name"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27201
msgid "The name to return in service discovery responses.  Defaults to @samp{\"Prosody Chatrooms\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27203
#, no-wrap
msgid "{@code{mod-muc-configuration} parameter} string-or-boolean restrict-room-creation"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27210
msgid "If @samp{#t}, this will only allow admins to create new chatrooms.  Otherwise anyone can create a room.  The value @samp{\"local\"} restricts room creation to users on the service's parent domain.  E.g.@: @samp{user@@example.com} can create rooms on @samp{rooms.example.com}.  The value @samp{\"admin\"} restricts to service administrators only.  Defaults to @samp{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27212
#, no-wrap
msgid "{@code{mod-muc-configuration} parameter} non-negative-integer max-history-messages"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27216
msgid "Maximum number of history messages that will be sent to the member that has just joined the room.  Defaults to @samp{20}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27222
#, no-wrap
msgid "{@code{prosody-configuration} parameter} ext-component-configuration-list ext-components"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27227
msgid "External components use XEP-0114, which most standalone components support.  To add an external component, you simply fill the hostname field.  See @url{https://prosody.im/doc/components}.  Defaults to @samp{'()}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27229
msgid "Available @code{ext-component-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27231
#, no-wrap
msgid "{@code{ext-component-configuration} parameter} string component-secret"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27233
msgid "Password which the component will use to log in."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27235
#, no-wrap
msgid "{@code{ext-component-configuration} parameter} string hostname"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27241
#, no-wrap
msgid "{@code{prosody-configuration} parameter} non-negative-integer-list component-ports"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27244
msgid "Port(s) Prosody listens on for component connections.  Defaults to @samp{'(5347)}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27246
#, no-wrap
msgid "{@code{prosody-configuration} parameter} string component-interface"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27249
msgid "Interface Prosody listens on for component connections.  Defaults to @samp{\"127.0.0.1\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27251
#, no-wrap
msgid "{@code{prosody-configuration} parameter} maybe-raw-content raw-content"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27253
msgid "Raw content that will be added to the configuration file."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27261
msgid "It could be that you just want to get a @code{prosody.cfg.lua} up and running.  In that case, you can pass an @code{opaque-prosody-configuration} record as the value of @code{prosody-service-type}.  As its name indicates, an opaque configuration does not have easy reflective capabilities.  Available @code{opaque-prosody-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27262
#, no-wrap
msgid "{@code{opaque-prosody-configuration} parameter} package prosody"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27264
msgid "The prosody package."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27266
#, no-wrap
msgid "{@code{opaque-prosody-configuration} parameter} string prosody.cfg.lua"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27268
msgid "The contents of the @code{prosody.cfg.lua} to use."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27272
msgid "For example, if your @code{prosody.cfg.lua} is just the empty string, you could instantiate a prosody service like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:27277
#, no-wrap
msgid ""
"(service prosody-service-type\n"
"         (opaque-prosody-configuration\n"
"          (prosody.cfg.lua \"\")))\n"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:27281
#, no-wrap
msgid "BitlBee Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:27283 guix-git/doc/guix.texi:27327
#, no-wrap
msgid "IRC (Internet Relay Chat)"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:27284
#, no-wrap
msgid "IRC gateway"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27287
msgid "@url{https://bitlbee.org,BitlBee} is a gateway that provides an IRC interface to a variety of messaging protocols such as XMPP."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:27288
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "bitlbee-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:27292
msgid "This is the service type for the @url{https://bitlbee.org,BitlBee} IRC gateway daemon.  Its value is a @code{bitlbee-configuration} (see below)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:27295
msgid "To have BitlBee listen on port 6667 on localhost, add this line to your services:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:27298
#, no-wrap
msgid "(service bitlbee-service-type)\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:27301
#, no-wrap
msgid "{Data Type} bitlbee-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:27303
msgid "This is the configuration for BitlBee, with the following fields:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27305
#, no-wrap
msgid "@code{interface} (default: @code{\"127.0.0.1\"})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:27306
#, no-wrap
msgid "@code{port} (default: @code{6667})"
msgstr "@code{porta} (default: @code{6667})"

#. type: table
#: guix-git/doc/guix.texi:27309
msgid "Listen on the network interface corresponding to the IP address specified in @var{interface}, on @var{port}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27313
msgid "When @var{interface} is @code{127.0.0.1}, only local clients can connect; when it is @code{0.0.0.0}, connections can come from any networking interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27314
#, no-wrap
msgid "@code{bitlbee} (default: @code{bitlbee})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27316
msgid "The BitlBee package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27317
#, no-wrap
msgid "@code{plugins} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27319
msgid "List of plugin packages to use---e.g., @code{bitlbee-discord}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27322
msgid "Configuration snippet added as-is to the BitlBee configuration file."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:27325
#, no-wrap
msgid "Quassel Service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27331
msgid "@url{https://quassel-irc.org/,Quassel} is a distributed IRC client, meaning that one or more clients can attach to and detach from the central core."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:27332
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "quassel-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:27336
msgid "This is the service type for the @url{https://quassel-irc.org/,Quassel} IRC backend daemon.  Its value is a @code{quassel-configuration} (see below)."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:27338
#, no-wrap
msgid "{Data Type} quassel-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:27340
msgid "This is the configuration for Quassel, with the following fields:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27342
#, no-wrap
msgid "@code{quassel} (default: @code{quassel})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27344
msgid "The Quassel package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27345
#, no-wrap
msgid "@code{interface} (default: @code{\"::,0.0.0.0\"})"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27346
#, no-wrap
msgid "@code{port} (default: @code{4242})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27350
msgid "Listen on the network interface(s) corresponding to the IPv4 or IPv6 interfaces specified in the comma delimited @var{interface}, on @var{port}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27351
#, no-wrap
msgid "@code{loglevel} (default: @code{\"Info\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27354
msgid "The level of logging desired.  Accepted values are Debug, Info, Warning and Error."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:27360
#, no-wrap
msgid "telephony, services"
msgstr "telefonia, serviços"

#. type: Plain text
#: guix-git/doc/guix.texi:27364
msgid "The @code{(gnu services telephony)} module contains Guix service definitions for telephony services.  Currently it provides the following services:"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:27365
#, no-wrap
msgid "Jami"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:27367
#, fuzzy, no-wrap
#| msgid "Mail Services"
msgid "jami, service"
msgstr "Serviços de correio"

#. type: Plain text
#: guix-git/doc/guix.texi:27373
msgid "This section describes how to configure a Jami server that can be used to host video (or audio) conferences, among other uses.  The following example demonstrates how to specify Jami account archives (backups) to be provisioned automatically:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:27382
#, no-wrap
msgid ""
"(service jami-service-type\n"
"         (jami-configuration\n"
"          (accounts\n"
"           (list (jami-account\n"
"                  (archive \"/etc/jami/unencrypted-account-1.gz\"))\n"
"                 (jami-account\n"
"                  (archive \"/etc/jami/unencrypted-account-2.gz\"))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27387
msgid "When the accounts field is specified, the Jami account files of the service found under @file{/var/lib/jami} are recreated every time the service starts."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27392
msgid "Jami accounts and their corresponding backup archives can be generated using the @code{jami} or @code{jami-gnome} Jami clients.  The accounts should not be password-protected, but it is wise to ensure their files are only readable by @samp{root}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27395
msgid "The next example shows how to declare that only some contacts should be allowed to communicate with a given account:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:27407
#, no-wrap
msgid ""
"(service jami-service-type\n"
"         (jami-configuration\n"
"          (accounts\n"
"           (list (jami-account\n"
"                  (archive \"/etc/jami/unencrypted-account-1.gz\")\n"
"                  (peer-discovery? #t)\n"
"                  (rendezvous-point? #t)\n"
"                  (allowed-contacts\n"
"                   '(\"1dbcb0f5f37324228235564b79f2b9737e9a008f\"\n"
"                     \"2dbcb0f5f37324228235564b79f2b9737e9a008f\")))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27413
msgid "In this mode, only the declared @code{allowed-contacts} can initiate communication with the Jami account.  This can be used, for example, with rendezvous point accounts to create a private video conferencing space."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27416
msgid "To put the system administrator in full control of the conferences hosted on their system, the Jami service supports the following actions:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:27428
#, no-wrap
msgid ""
"# herd doc jami list-actions\n"
"(list-accounts\n"
" list-account-details\n"
" list-banned-contacts\n"
" list-contacts\n"
" list-moderators\n"
" add-moderator\n"
" ban-contact\n"
" enable-account\n"
" disable-account)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27435
msgid "The above actions aim to provide the most valuable actions for moderation purposes, not to cover the whole Jami API.  Users wanting to interact with the Jami daemon from Guile may be interested in experimenting with the @code{(gnu build jami-service)} module, which powers the above Shepherd actions."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27441
msgid "The @code{add-moderator} and @code{ban-contact} actions accept a contact @emph{fingerprint} (40 characters long hash) as first argument and an account fingerprint or username as second argument:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:27445
#, no-wrap
msgid ""
"# herd add-moderator jami 1dbcb0f5f37324228235564b79f2b9737e9a008f \\\n"
"  f3345f2775ddfe07a4b0d95daea111d15fbc1199\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:27449
#, no-wrap
msgid ""
"# herd list-moderators jami\n"
"Moderators for account f3345f2775ddfe07a4b0d95daea111d15fbc1199:\n"
"  - 1dbcb0f5f37324228235564b79f2b9737e9a008f\n"
"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27454
msgid "In the case of @code{ban-contact}, the second username argument is optional; when omitted, the account is banned from all Jami accounts:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:27457
#, no-wrap
msgid ""
"# herd ban-contact jami 1dbcb0f5f37324228235564b79f2b9737e9a008f\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:27461
#, no-wrap
msgid ""
"# herd list-banned-contacts jami\n"
"Banned contacts for account f3345f2775ddfe07a4b0d95daea111d15fbc1199:\n"
"  - 1dbcb0f5f37324228235564b79f2b9737e9a008f\n"
"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27465
msgid "Banned contacts are also stripped from their moderation privileges."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27470
msgid "The @code{disable-account} action allows to completely disconnect an account from the network, making it unreachable, while @code{enable-account} does the inverse.  They accept a single account username or fingerprint as first argument:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:27473
#, no-wrap
msgid ""
"# herd disable-account jami f3345f2775ddfe07a4b0d95daea111d15fbc1199\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:27477
#, no-wrap
msgid ""
"# herd list-accounts jami\n"
"The following Jami accounts are available:\n"
"  - f3345f2775ddfe07a4b0d95daea111d15fbc1199 (dummy) [disabled]\n"
"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27488
msgid "The @code{list-account-details} action prints the detailed parameters of each accounts in the Recutils format, which means the @command{recsel} command can be used to select accounts of interest (@pxref{Selection Expressions,,,recutils, GNU recutils manual}).  Note that period characters (@samp{.}) found in the account parameter keys are mapped to underscores (@samp{_}) in the output, to meet the requirements of the Recutils format.  The following example shows how to print the account fingerprints for all accounts operating in the rendezvous point mode:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:27493
#, no-wrap
msgid ""
"# herd list-account-details jami | \\\n"
"  recsel -p Account.username -e 'Account.rendezVous ~ \"true\"'\n"
"Account_username: f3345f2775ddfe07a4b0d95daea111d15fbc1199\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27496
msgid "The remaining actions should be self-explanatory."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27498
msgid "The complete set of available configuration options is detailed below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:27502
#, fuzzy, no-wrap
msgid "{Data Type} jami-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:27504
msgid "Available @code{jami-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27506
#, fuzzy, no-wrap
msgid "@code{libjami} (default: @code{libjami}) (type: package)"
msgstr "@code{tmpdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:27508
#, fuzzy
msgid "The Jami daemon package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:27509
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{dbus} (default: @code{dbus-for-jami}) (type: package)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:27511
msgid "The D-Bus package to use to start the required D-Bus session."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27512
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{nss-certs} (default: @code{nss-certs}) (type: package)"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:27514
msgid "The nss-certs package to use to provide TLS certificates."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27515
#, fuzzy, no-wrap
#| msgid "@code{wait?} (default: @code{#t})"
msgid "@code{enable-logging?} (default: @code{#t}) (type: boolean)"
msgstr "@code{wait?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:27517
msgid "Whether to enable logging to syslog."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27520
msgid "Whether to enable debug level messages."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27521
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{auto-answer?} (default: @code{#f}) (type: boolean)"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:27523
msgid "Whether to force automatic answer to incoming calls."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27524
#, no-wrap
msgid "@code{accounts} (type: maybe-jami-account-list)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27529
msgid "A list of Jami accounts to be (re-)provisioned every time the Jami daemon service starts.  When providing this field, the account directories under @file{/var/lib/jami/} are recreated every time the service starts, ensuring a consistent state."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:27535
#, fuzzy, no-wrap
msgid "{Data Type} jami-account"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:27537
msgid "Available @code{jami-account} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27539
#, no-wrap
msgid "@code{archive} (type: string-or-computed-file)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27545
msgid "The account archive (backup) file name of the account.  This is used to provision the account when the service starts.  The account archive should @emph{not} be encrypted.  It is highly recommended to make it readable only to the @samp{root} user (i.e., not in the store), to guard against leaking the secret key material of the Jami account it contains."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27546
#, no-wrap
msgid "@code{allowed-contacts} (type: maybe-account-fingerprint-list)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27553
msgid "The list of allowed contacts for the account, entered as their 40 characters long fingerprint.  Messages or calls from accounts not in that list will be rejected.  When left specified, the configuration of the account archive is used as-is with respect to contacts and public inbound calls/messaging allowance, which typically defaults to allow any contact to communicate with the account."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27554
#, no-wrap
msgid "@code{moderators} (type: maybe-account-fingerprint-list)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27560
msgid "The list of contacts that should have moderation privileges (to ban, mute, etc.  other users) in rendezvous conferences, entered as their 40 characters long fingerprint.  When left unspecified, the configuration of the account archive is used as-is with respect to moderation, which typically defaults to allow anyone to moderate."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27561
#, fuzzy, no-wrap
#| msgid "@code{no-hints?} (default: @code{#f})"
msgid "@code{rendezvous-point?} (type: maybe-boolean)"
msgstr "@code{no-hints?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:27565
msgid "Whether the account should operate in the rendezvous mode.  In this mode, all the incoming audio/video calls are mixed into a conference.  When left unspecified, the value from the account archive prevails."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27566
#, fuzzy, no-wrap
msgid "@code{peer-discovery?} (type: maybe-boolean)"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:27572
msgid "Whether peer discovery should be enabled.  Peer discovery is used to discover other OpenDHT nodes on the local network, which can be useful to maintain communication between devices on such network even when the connection to the Internet has been lost.  When left unspecified, the value from the account archive prevails."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27573
#, fuzzy, no-wrap
msgid "@code{bootstrap-hostnames} (type: maybe-string-list)"
msgstr "@code{options} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:27577
msgid "A list of hostnames or IPs pointing to OpenDHT nodes, that should be used to initially join the OpenDHT network.  When left unspecified, the value from the account archive prevails."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27578
#, fuzzy, no-wrap
msgid "@code{name-server-uri} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:27581
msgid "The URI of the name server to use, that can be used to retrieve the account fingerprint for a registered username."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:27586
#, fuzzy, no-wrap
#| msgid "Game servers."
msgid "Mumble server"
msgstr "Servidores de jogos."

#. type: cindex
#: guix-git/doc/guix.texi:27588
#, no-wrap
msgid "Mumble"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:27589
#, no-wrap
msgid "Murmur"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:27590
#, no-wrap
msgid "VoIP server"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27593
msgid "This section describes how to set up and run a @uref{https://mumble.info, Mumble} server (formerly known as Murmur)."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:27594
#, fuzzy, no-wrap
msgid "{Data Type} mumble-server-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:27597
msgid "The service type for the Mumble server.  An example configuration can look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:27606
#, no-wrap
msgid ""
"(service mumble-server-service-type\n"
"         (mumble-server-configuration\n"
"          (welcome-text\n"
"            \"Welcome to this Mumble server running on Guix!\")\n"
"          (cert-required? #t) ;disallow text password logins\n"
"          (ssl-cert \"/etc/letsencrypt/live/mumble.example.com/fullchain.pem\")\n"
"          (ssl-key \"/etc/letsencrypt/live/mumble.example.com/privkey.pem\")))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:27611
msgid "After reconfiguring your system, you can manually set the mumble-server @code{SuperUser} password with the command that is printed during the activation phase."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:27620
msgid "It is recommended to register a normal Mumble user account and grant it admin or moderator rights.  You can use the @code{mumble} client to login as new normal user, register yourself, and log out.  For the next step login with the name @code{SuperUser} use the @code{SuperUser} password that you set previously, and grant your newly registered mumble user administrator or moderator rights and create some channels."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:27622
msgid "Available @code{mumble-server-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27624
#, no-wrap
msgid "@code{package} (default: @code{mumble})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27626
msgid "Package that contains @code{bin/mumble-server}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27627
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{user} (default: @code{\"mumble-server\"})"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:27629
msgid "User who will run the Mumble-Server server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27630
#, fuzzy, no-wrap
#| msgid "@code{hangup?} (default: @code{#f})"
msgid "@code{group} (default: @code{\"mumble-server\"})"
msgstr "@code{hangup?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:27632
msgid "Group of the user who will run the mumble-server server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27633
#, no-wrap
msgid "@code{port} (default: @code{64738})"
msgstr "@code{porta} (default: @code{64738})"

#. type: table
#: guix-git/doc/guix.texi:27635
msgid "Port on which the server will listen."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27636
#, no-wrap
msgid "@code{welcome-text} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27638
msgid "Welcome text sent to clients when they connect."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27639
#, no-wrap
msgid "@code{server-password} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27641
msgid "Password the clients have to enter in order to connect."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27642
#, no-wrap
msgid "@code{max-users} (default: @code{100})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27644
msgid "Maximum of users that can be connected to the server at once."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27645
#, no-wrap
msgid "@code{max-user-bandwidth} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27647
msgid "Maximum voice traffic a user can send per second."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27648
#, fuzzy, no-wrap
msgid "@code{database-file} (default: @code{\"/var/lib/mumble-server/db.sqlite\"})"
msgstr "@code{daemon-socket} (padrão: @code{\"/var/guix/daemon-socket/socket\"})"

#. type: table
#: guix-git/doc/guix.texi:27651
msgid "File name of the sqlite database.  The service's user will become the owner of the directory."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27652
#, fuzzy, no-wrap
msgid "@code{log-file} (default: @code{\"/var/log/mumble-server/mumble-server.log\"})"
msgstr "@code{daemon-socket} (padrão: @code{\"/var/guix/daemon-socket/socket\"})"

#. type: table
#: guix-git/doc/guix.texi:27655
msgid "File name of the log file.  The service's user will become the owner of the directory."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27656
#, no-wrap
msgid "@code{autoban-attempts} (default: @code{10})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27659
msgid "Maximum number of logins a user can make in @code{autoban-timeframe} without getting auto banned for @code{autoban-time}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27660
#, no-wrap
msgid "@code{autoban-timeframe} (default: @code{120})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27662
msgid "Timeframe for autoban in seconds."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27663
#, no-wrap
msgid "@code{autoban-time} (default: @code{300})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27666
msgid "Amount of time in seconds for which a client gets banned when violating the autoban limits."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27667
#, no-wrap
msgid "@code{opus-threshold} (default: @code{100})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27670
msgid "Percentage of clients that need to support opus before switching over to opus audio codec."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27671
#, no-wrap
msgid "@code{channel-nesting-limit} (default: @code{10})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27673
msgid "How deep channels can be nested at maximum."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27674
#, no-wrap
msgid "@code{channelname-regex} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27676
msgid "A string in form of a Qt regular expression that channel names must conform to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27677
#, no-wrap
msgid "@code{username-regex} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27679
msgid "A string in form of a Qt regular expression that user names must conform to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27680
#, no-wrap
msgid "@code{text-message-length} (default: @code{5000})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27682
msgid "Maximum size in bytes that a user can send in one text chat message."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27683
#, no-wrap
msgid "@code{image-message-length} (default: @code{(* 128 1024)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27685
msgid "Maximum size in bytes that a user can send in one image message."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27686
#, no-wrap
msgid "@code{cert-required?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27689
msgid "If it is set to @code{#t} clients that use weak password authentication will not be accepted.  Users must have completed the certificate wizard to join."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27690
#, no-wrap
msgid "@code{remember-channel?} (default: @code{#f})"
msgstr "@code{remember-channel?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:27694
msgid "Should mumble-server remember the last channel each user was in when they disconnected and put them into the remembered channel when they rejoin."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27695
#, no-wrap
msgid "@code{allow-html?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27697
msgid "Should html be allowed in text messages, user comments, and channel descriptions."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27698
#, no-wrap
msgid "@code{allow-ping?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27702
msgid "Setting to true exposes the current user count, the maximum user count, and the server's maximum bandwidth per client to unauthenticated users.  In the Mumble client, this information is shown in the Connect dialog."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27704
msgid "Disabling this setting will prevent public listing of the server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27705
#, no-wrap
msgid "@code{bonjour?} (default: @code{#f})"
msgstr "@code{bonjour?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:27707
msgid "Should the server advertise itself in the local network through the bonjour protocol."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27708
#, no-wrap
msgid "@code{send-version?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27710
msgid "Should the mumble-server server version be exposed in ping requests."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27711
#, no-wrap
msgid "@code{log-days} (default: @code{31})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27715
msgid "Mumble also stores logs in the database, which are accessible via RPC.  The default is 31 days of months, but you can set this setting to 0 to keep logs forever, or -1 to disable logging to the database."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27716
#, no-wrap
msgid "@code{obfuscate-ips?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27718
msgid "Should logged ips be obfuscated to protect the privacy of users."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27719
#, no-wrap
msgid "@code{ssl-cert} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27721
msgid "File name of the SSL/TLS certificate used for encrypted connections."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:27724
#, no-wrap
msgid "(ssl-cert \"/etc/letsencrypt/live/example.com/fullchain.pem\")\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27725
#, no-wrap
msgid "@code{ssl-key} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27727
msgid "Filepath to the ssl private key used for encrypted connections."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:27729
#, no-wrap
msgid "(ssl-key \"/etc/letsencrypt/live/example.com/privkey.pem\")\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27731
#, no-wrap
msgid "@code{ssl-dh-params} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27736
msgid "File name of a PEM-encoded file with Diffie-Hellman parameters for the SSL/TLS encryption.  Alternatively you set it to @code{\"@@ffdhe2048\"}, @code{\"@@ffdhe3072\"}, @code{\"@@ffdhe4096\"}, @code{\"@@ffdhe6144\"} or @code{\"@@ffdhe8192\"} to use bundled parameters from RFC 7919."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27737
#, no-wrap
msgid "@code{ssl-ciphers} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27740
msgid "The @code{ssl-ciphers} option chooses the cipher suites to make available for use in SSL/TLS."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27744
msgid "This option is specified using @uref{https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT, OpenSSL cipher list notation}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27751
msgid "It is recommended that you try your cipher string using 'openssl ciphers <string>' before setting it here, to get a feel for which cipher suites you will get.  After setting this option, it is recommend that you inspect your Mumble server log to ensure that Mumble is using the cipher suites that you expected it to."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:27755
msgid "Changing this option may impact the backwards compatibility of your Mumble-Server server, and can remove the ability for older Mumble clients to be able to connect to it."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27757
#, no-wrap
msgid "@code{public-registration} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27760
msgid "Must be a @code{<mumble-server-public-registration-configuration>} record or @code{#f}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27765
msgid "You can optionally register your server in the public server list that the @code{mumble} client shows on startup.  You cannot register your server if you have set a @code{server-password}, or set @code{allow-ping} to @code{#f}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27767
msgid "It might take a few hours until it shows up in the public list."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27768 guix-git/doc/guix.texi:30355
#, no-wrap
msgid "@code{file} (default: @code{#f})"
msgstr "@code{file} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:27770
msgid "Optional alternative override for this configuration."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:27773
#, fuzzy, no-wrap
msgid "{Data Type} mumble-server-public-registration-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:27775
msgid "Configuration for public registration of a mumble-server service."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27779
msgid "This is a display name for your server.  Not to be confused with the hostname."
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:27780 guix-git/doc/guix.texi:37612
#: guix-git/doc/guix.texi:39260
#, no-wrap
msgid "password"
msgstr "senha"

#. type: table
#: guix-git/doc/guix.texi:27783
msgid "A password to identify your registration.  Subsequent updates will need the same password.  Don't lose your password."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:27787
msgid "This should be a @code{http://} or @code{https://} link to your web site."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:27788 guix-git/doc/guix.texi:31244
#, no-wrap
msgid "@code{hostname} (default: @code{#f})"
msgstr "@code{hostname} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:27791
msgid "By default your server will be listed by its IP address.  If it is set your server will be linked by this host name instead."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:27794
#, no-wrap
msgid "Deprecation notice"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:27799
msgid "Due to historical reasons, all of the above @code{mumble-server-} procedures are also exported with the @code{murmur-} prefix.  It is recommended that you switch to using @code{mumble-server-} going forward."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27806
msgid "The @code{(gnu services file-sharing)} module provides services that assist with transferring files over peer-to-peer file-sharing networks."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:27807
#, no-wrap
msgid "Transmission Daemon Service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27815
msgid "@uref{https://transmissionbt.com/, Transmission} is a flexible BitTorrent client that offers a variety of graphical and command-line interfaces.  A @code{transmission-daemon-service-type} service provides Transmission's headless variant, @command{transmission-daemon}, as a system service, allowing users to share files via BitTorrent even when they are not logged in."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:27816
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "transmission-daemon-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:27820
msgid "The service type for the Transmission Daemon BitTorrent client. Its value must be a @code{transmission-daemon-configuration} object as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:27831
#, no-wrap
msgid ""
"(service transmission-daemon-service-type\n"
"         (transmission-daemon-configuration\n"
"          ;; Restrict access to the RPC (\"control\") interface\n"
"          (rpc-authentication-required? #t)\n"
"          (rpc-username \"transmission\")\n"
"          (rpc-password\n"
"           (transmission-password-hash\n"
"            \"transmission\" ; desired password\n"
"            \"uKd1uMs9\"))   ; arbitrary salt value\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:27836
#, no-wrap
msgid ""
"          ;; Accept requests from this and other hosts on the\n"
"          ;; local network\n"
"          (rpc-whitelist-enabled? #t)\n"
"          (rpc-whitelist '(\"::1\" \"127.0.0.1\" \"192.168.0.*\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:27840
#, no-wrap
msgid ""
"          ;; Limit bandwidth use during work hours\n"
"          (alt-speed-down (* 1024 2)) ;   2 MB/s\n"
"          (alt-speed-up 512)          ; 512 kB/s\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:27847
#, no-wrap
msgid ""
"          (alt-speed-time-enabled? #t)\n"
"          (alt-speed-time-day 'weekdays)\n"
"          (alt-speed-time-begin\n"
"           (+ (* 60 8) 30))           ; 8:30 am\n"
"          (alt-speed-time-end\n"
"           (+ (* 60 (+ 12 5)) 30))))  ; 5:30 pm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27860
msgid "Once the service is started, users can interact with the daemon through its Web interface (at @code{http://localhost:9091/}) or by using the @command{transmission-remote} command-line tool, available in the @code{transmission} package.  (Emacs users may want to also consider the @code{emacs-transmission} package.)  Both communicate with the daemon through its remote procedure call (RPC) interface, which by default is available to all users on the system; you may wish to change this by assigning values to the @code{rpc-authentication-required?}, @code{rpc-username} and @code{rpc-password} settings, as shown in the example above and documented further below."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27868
msgid "The value for @code{rpc-password} must be a password hash of the type generated and used by Transmission clients.  This can be copied verbatim from an existing @file{settings.json} file, if another Transmission client is already being used.  Otherwise, the @code{transmission-password-hash} and @code{transmission-random-salt} procedures provided by this module can be used to obtain a suitable hash value."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:27869
#, no-wrap
msgid "transmission-password-hash password salt"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:27873
msgid "Returns a string containing the result of hashing @var{password} together with @var{salt}, in the format recognized by Transmission clients for their @code{rpc-password} configuration setting."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:27877
msgid "@var{salt} must be an eight-character string.  The @code{transmission-random-salt} procedure can be used to generate a suitable salt value at random."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:27879
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "transmission-random-salt"
msgstr "guix-publish-service-type"

#. type: defun
#: guix-git/doc/guix.texi:27883
msgid "Returns a string containing a random, eight-character salt value of the type generated and used by Transmission clients, suitable for passing to the @code{transmission-password-hash} procedure."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27889
msgid "These procedures are accessible from within a Guile REPL started with the @command{guix repl} command (@pxref{Invoking guix repl}).  This is useful for obtaining a random salt value to provide as the second parameter to `transmission-password-hash`, as in this example session:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:27895
#, no-wrap
msgid ""
"$ guix repl\n"
"scheme@@(guix-user)> ,use (gnu services file-sharing)\n"
"scheme@@(guix-user)> (transmission-random-salt)\n"
"$1 = \"uKd1uMs9\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27898
msgid "Alternatively, a complete password hash can generated in a single step:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:27903
#, no-wrap
msgid ""
"scheme@@(guix-user)> (transmission-password-hash \"transmission\"\n"
"(transmission-random-salt))\n"
"$2 = \"@{c8bbc6d1740cd8dc819a6e25563b67812c1c19c9VtFPfdsX\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27908
msgid "The resulting string can be used as-is for the value of @code{rpc-password}, allowing the password to be kept hidden even in the operating-system configuration."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27917
msgid "Torrent files downloaded by the daemon are directly accessible only to users in the ``transmission'' user group, who receive read-only access to the directory specified by the @code{download-dir} configuration setting (and also the directory specified by @code{incomplete-dir}, if @code{incomplete-dir-enabled?} is @code{#t}).  Downloaded files can be moved to another directory or deleted altogether using @command{transmission-remote} with its @code{--move} and @code{--remove-and-delete} options."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27924
msgid "If the @code{watch-dir-enabled?} setting is set to @code{#t}, users in the ``transmission'' group are able also to place @file{.torrent} files in the directory specified by @code{watch-dir} to have the corresponding torrents added by the daemon.  (The @code{trash-original-torrent-files?} setting controls whether the daemon deletes these files after processing them.)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27929
msgid "Some of the daemon's configuration settings can be changed temporarily by @command{transmission-remote} and similar tools. To undo these changes, use the service's @code{reload} action to have the daemon reload its settings from disk:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:27932
#, no-wrap
msgid "# herd reload transmission-daemon\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27936
msgid "The full set of available configuration settings is defined by the @code{transmission-daemon-configuration} data type."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:27937
#, no-wrap
msgid "{Data Type} transmission-daemon-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:27941
msgid "The data type representing configuration settings for Transmission Daemon.  These correspond directly to the settings recognized by Transmission clients in their @file{settings.json} file."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:27955
msgid "Available @code{transmission-daemon-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27956
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} package transmission"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27958
msgid "The Transmission package to use."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27961
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer stop-wait-period"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27967
msgid "The period, in seconds, to wait when stopping the service for @command{transmission-daemon} to exit before killing its process.  This allows the daemon time to complete its housekeeping and send a final update to trackers as it shuts down.  On slow hosts, or hosts with a slow network connection, this value may need to be increased."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27969 guix-git/doc/guix.texi:28341
#: guix-git/doc/guix.texi:36522 guix-git/doc/guix.texi:36757
#: guix-git/doc/guix.texi:36765 guix-git/doc/guix.texi:36773
msgid "Defaults to @samp{10}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27972
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} string download-dir"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27974
msgid "The directory to which torrent files are downloaded."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27976
msgid "Defaults to @samp{\"/var/lib/transmission-daemon/downloads\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27979
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean incomplete-dir-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27984
msgid "If @code{#t}, files will be held in @code{incomplete-dir} while their torrent is being downloaded, then moved to @code{download-dir} once the torrent is complete.  Otherwise, files for all torrents (including those still being downloaded) will be placed in @code{download-dir}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27989
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} maybe-string incomplete-dir"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27992
msgid "The directory in which files from incompletely downloaded torrents will be held when @code{incomplete-dir-enabled?} is @code{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27994 guix-git/doc/guix.texi:28038
#: guix-git/doc/guix.texi:28251 guix-git/doc/guix.texi:28307
#: guix-git/doc/guix.texi:28481 guix-git/doc/guix.texi:28492
#: guix-git/doc/guix.texi:28565 guix-git/doc/guix.texi:29439
#: guix-git/doc/guix.texi:29482 guix-git/doc/guix.texi:29490
#: guix-git/doc/guix.texi:29498 guix-git/doc/guix.texi:29506
#: guix-git/doc/guix.texi:29515 guix-git/doc/guix.texi:29523
#: guix-git/doc/guix.texi:29530 guix-git/doc/guix.texi:29538
#: guix-git/doc/guix.texi:29546 guix-git/doc/guix.texi:29556
#: guix-git/doc/guix.texi:29563 guix-git/doc/guix.texi:29587
#: guix-git/doc/guix.texi:29595 guix-git/doc/guix.texi:29621
#: guix-git/doc/guix.texi:29630 guix-git/doc/guix.texi:29639
#: guix-git/doc/guix.texi:29648 guix-git/doc/guix.texi:29657
#: guix-git/doc/guix.texi:29666 guix-git/doc/guix.texi:29674
#: guix-git/doc/guix.texi:29682 guix-git/doc/guix.texi:29689
#: guix-git/doc/guix.texi:29697 guix-git/doc/guix.texi:29704
#: guix-git/doc/guix.texi:29712 guix-git/doc/guix.texi:29720
#: guix-git/doc/guix.texi:29729 guix-git/doc/guix.texi:29738
#: guix-git/doc/guix.texi:29746 guix-git/doc/guix.texi:29754
#: guix-git/doc/guix.texi:29762 guix-git/doc/guix.texi:29773
#: guix-git/doc/guix.texi:29783 guix-git/doc/guix.texi:29794
#: guix-git/doc/guix.texi:29803 guix-git/doc/guix.texi:29813
#: guix-git/doc/guix.texi:29821 guix-git/doc/guix.texi:29832
#: guix-git/doc/guix.texi:29841 guix-git/doc/guix.texi:29851
#: guix-git/doc/guix.texi:33457 guix-git/doc/guix.texi:33464
#: guix-git/doc/guix.texi:33471 guix-git/doc/guix.texi:33478
#: guix-git/doc/guix.texi:33485 guix-git/doc/guix.texi:33492
#: guix-git/doc/guix.texi:33500 guix-git/doc/guix.texi:33508
#: guix-git/doc/guix.texi:33515 guix-git/doc/guix.texi:33522
#: guix-git/doc/guix.texi:33529 guix-git/doc/guix.texi:33536
#: guix-git/doc/guix.texi:33566 guix-git/doc/guix.texi:33604
#: guix-git/doc/guix.texi:33611 guix-git/doc/guix.texi:33620
#: guix-git/doc/guix.texi:33642 guix-git/doc/guix.texi:33650
#: guix-git/doc/guix.texi:33657 guix-git/doc/guix.texi:33686
#: guix-git/doc/guix.texi:33693 guix-git/doc/guix.texi:33700
#: guix-git/doc/guix.texi:33707 guix-git/doc/guix.texi:33840
#: guix-git/doc/guix.texi:33860 guix-git/doc/guix.texi:33875
#: guix-git/doc/guix.texi:33882 guix-git/doc/guix.texi:36894
#: guix-git/doc/guix.texi:36902 guix-git/doc/guix.texi:36910
#: guix-git/doc/guix.texi:36918 guix-git/doc/guix.texi:36926
#: guix-git/doc/guix.texi:36934
msgid "Defaults to @samp{disabled}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:27997
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} umask umask"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28000
msgid "The file mode creation mask used for downloaded files.  (See the @command{umask} man page for more information.)"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28002
msgid "Defaults to @samp{18}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28005
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean rename-partial-files?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28008
msgid "When @code{#t}, ``.part'' is appended to the name of partially downloaded files."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28013
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} preallocation-mode preallocation"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28018
msgid "The mode by which space should be preallocated for downloaded files, one of @code{none}, @code{fast} (or @code{sparse}) and @code{full}.  Specifying @code{full} will minimize disk fragmentation at a cost to file-creation speed."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28020
msgid "Defaults to @samp{fast}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28023
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean watch-dir-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28028
msgid "If @code{#t}, the directory specified by @code{watch-dir} will be watched for new @file{.torrent} files and the torrents they describe added automatically (and the original files removed, if @code{trash-original-torrent-files?} is @code{#t})."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28033
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} maybe-string watch-dir"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28036
msgid "The directory to be watched for @file{.torrent} files indicating new torrents to be added, when @code{watch-dir-enabled} is @code{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28041
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean trash-original-torrent-files?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28045
msgid "When @code{#t}, @file{.torrent} files will be deleted from the watch directory once their torrent has been added (see @code{watch-directory-enabled?})."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28050
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean speed-limit-down-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28053
msgid "When @code{#t}, the daemon's download speed will be limited to the rate specified by @code{speed-limit-down}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28058
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer speed-limit-down"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28060
msgid "The default global-maximum download speed, in kilobytes per second."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28065
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean speed-limit-up-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28068
msgid "When @code{#t}, the daemon's upload speed will be limited to the rate specified by @code{speed-limit-up}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28073
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer speed-limit-up"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28075
msgid "The default global-maximum upload speed, in kilobytes per second."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28080
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean alt-speed-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28086
msgid "When @code{#t}, the alternate speed limits @code{alt-speed-down} and @code{alt-speed-up} are used (in place of @code{speed-limit-down} and @code{speed-limit-up}, if they are enabled) to constrain the daemon's bandwidth usage.  This can be scheduled to occur automatically at certain times during the week; see @code{alt-speed-time-enabled?}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28091
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer alt-speed-down"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28093
msgid "The alternate global-maximum download speed, in kilobytes per second."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28095 guix-git/doc/guix.texi:28102
#: guix-git/doc/guix.texi:28274 guix-git/doc/guix.texi:36529
#: guix-git/doc/guix.texi:36544
msgid "Defaults to @samp{50}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28098
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer alt-speed-up"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28100
msgid "The alternate global-maximum upload speed, in kilobytes per second."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28105
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean alt-speed-time-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28110
msgid "When @code{#t}, the alternate speed limits @code{alt-speed-down} and @code{alt-speed-up} will be enabled automatically during the periods specified by @code{alt-speed-time-day}, @code{alt-speed-time-begin} and @code{alt-time-speed-end}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28115
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} day-list alt-speed-time-day"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28120
msgid "The days of the week on which the alternate-speed schedule should be used, specified either as a list of days (@code{sunday}, @code{monday}, and so on) or using one of the symbols @code{weekdays}, @code{weekends} or @code{all}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28122
msgid "Defaults to @samp{all}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28125
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer alt-speed-time-begin"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28128
msgid "The time of day at which to enable the alternate speed limits, expressed as a number of minutes since midnight."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28130
msgid "Defaults to @samp{540}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28133
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer alt-speed-time-end"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28136
msgid "The time of day at which to disable the alternate speed limits, expressed as a number of minutes since midnight."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28138
msgid "Defaults to @samp{1020}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28141
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} string bind-address-ipv4"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28144
msgid "The IP address at which to listen for peer connections, or ``0.0.0.0'' to listen at all available IP addresses."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28146 guix-git/doc/guix.texi:28449
#: guix-git/doc/guix.texi:34367
msgid "Defaults to @samp{\"0.0.0.0\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28149
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} string bind-address-ipv6"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28152
msgid "The IPv6 address at which to listen for peer connections, or ``::'' to listen at all available IPv6 addresses."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28154
msgid "Defaults to @samp{\"::\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28157
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean peer-port-random-on-start?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28163
msgid "If @code{#t}, when the daemon starts it will select a port at random on which to listen for peer connections, from the range specified (inclusively) by @code{peer-port-random-low} and @code{peer-port-random-high}.  Otherwise, it listens on the port specified by @code{peer-port}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28168
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} port-number peer-port-random-low"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28171
msgid "The lowest selectable port number when @code{peer-port-random-on-start?} is @code{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28173
msgid "Defaults to @samp{49152}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28176
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} port-number peer-port-random-high"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28179
msgid "The highest selectable port number when @code{peer-port-random-on-start} is @code{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28181
msgid "Defaults to @samp{65535}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28184
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} port-number peer-port"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28187
msgid "The port on which to listen for peer connections when @code{peer-port-random-on-start?} is @code{#f}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28189
msgid "Defaults to @samp{51413}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28192
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean port-forwarding-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28196
msgid "If @code{#t}, the daemon will attempt to configure port-forwarding on an upstream gateway automatically using @acronym{UPnP} and @acronym{NAT-PMP}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28201
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} encryption-mode encryption"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28206
msgid "The encryption preference for peer connections, one of @code{prefer-unencrypted-connections}, @code{prefer-encrypted-connections} or @code{require-encrypted-connections}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28208
msgid "Defaults to @samp{prefer-encrypted-connections}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28211
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} maybe-string peer-congestion-algorithm"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28216
msgid "The TCP congestion-control algorithm to use for peer connections, specified using a string recognized by the operating system in calls to @code{setsockopt}.  When left unspecified, the operating-system default is used."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28225
msgid "Note that on GNU/Linux systems, the kernel must be configured to allow processes to use a congestion-control algorithm not in the default set; otherwise, it will deny these requests with ``Operation not permitted''.  To see which algorithms are available on your system and which are currently permitted for use, look at the contents of the files @file{tcp_available_congestion_control} and @file{tcp_allowed_congestion_control} in the @file{/proc/sys/net/ipv4} directory."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28233
msgid "As an example, to have Transmission Daemon use @uref{http://www-ece.rice.edu/networks/TCP-LP/,the TCP Low Priority congestion-control algorithm}, you'll need to modify your kernel configuration to build in support for the algorithm, then update your operating-system configuration to allow its use by adding a @code{sysctl-service-type} service (or updating the existing one's configuration) with lines like the following:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:28240
#, no-wrap
msgid ""
"(service sysctl-service-type\n"
"         (sysctl-configuration\n"
"          (settings\n"
"           (\"net.ipv4.tcp_allowed_congestion_control\" .\n"
"            \"reno cubic lp\"))))\n"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28243
msgid "The Transmission Daemon configuration can then be updated with"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:28246
#, no-wrap
msgid "(peer-congestion-algorithm \"lp\")\n"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28249
msgid "and the system reconfigured to have the changes take effect."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28254
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} tcp-type-of-service peer-socket-tos"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28258
msgid "The type of service to request in outgoing @acronym{TCP} packets, one of @code{default}, @code{low-cost}, @code{throughput}, @code{low-delay} and @code{reliability}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28260
msgid "Defaults to @samp{default}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28263
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer peer-limit-global"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28265
msgid "The global limit on the number of connected peers."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28267
msgid "Defaults to @samp{200}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28270
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer peer-limit-per-torrent"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28272
msgid "The per-torrent limit on the number of connected peers."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28277
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer upload-slots-per-torrent"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28280
msgid "The maximum number of peers to which the daemon will upload data simultaneously for each torrent."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28282
msgid "Defaults to @samp{14}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28285
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer peer-id-ttl-hours"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28288
msgid "The maximum lifespan, in hours, of the peer ID associated with each public torrent before it is regenerated."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28290
msgid "Defaults to @samp{6}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28293
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean blocklist-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28296
msgid "When @code{#t}, the daemon will ignore peers mentioned in the blocklist it has most recently downloaded from @code{blocklist-url}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28301
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} maybe-string blocklist-url"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28305
msgid "The URL of a peer blocklist (in @acronym{P2P}-plaintext or eMule @file{.dat} format) to be periodically downloaded and applied when @code{blocklist-enabled?} is @code{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28310
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean download-queue-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28313
msgid "If @code{#t}, the daemon will be limited to downloading at most @code{download-queue-size} non-stalled torrents simultaneously."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28318
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer download-queue-size"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28322
msgid "The size of the daemon's download queue, which limits the number of non-stalled torrents it will download at any one time when @code{download-queue-enabled?} is @code{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28327
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean seed-queue-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28330
msgid "If @code{#t}, the daemon will be limited to seeding at most @code{seed-queue-size} non-stalled torrents simultaneously."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28335
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer seed-queue-size"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28339
msgid "The size of the daemon's seed queue, which limits the number of non-stalled torrents it will seed at any one time when @code{seed-queue-enabled?} is @code{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28344
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean queue-stalled-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28349
msgid "When @code{#t}, the daemon will consider torrents for which it has not shared data in the past @code{queue-stalled-minutes} minutes to be stalled and not count them against its @code{download-queue-size} and @code{seed-queue-size} limits."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28354
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer queue-stalled-minutes"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28358
msgid "The maximum period, in minutes, a torrent may be idle before it is considered to be stalled, when @code{queue-stalled-enabled?} is @code{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28363
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean ratio-limit-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28366
msgid "When @code{#t}, a torrent being seeded will automatically be paused once it reaches the ratio specified by @code{ratio-limit}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28371
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-rational ratio-limit"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28374
msgid "The ratio at which a torrent being seeded will be paused, when @code{ratio-limit-enabled?} is @code{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28376
msgid "Defaults to @samp{2.0}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28379
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean idle-seeding-limit-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28382
msgid "When @code{#t}, a torrent being seeded will automatically be paused once it has been idle for @code{idle-seeding-limit} minutes."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28387
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer idle-seeding-limit"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28391
msgid "The maximum period, in minutes, a torrent being seeded may be idle before it is paused, when @code{idle-seeding-limit-enabled?} is @code{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28396
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean dht-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28400
msgid "Enable @uref{http://bittorrent.org/beps/bep_0005.html,the distributed hash table (@acronym{DHT}) protocol}, which supports the use of trackerless torrents."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28405
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean lpd-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28410
msgid "Enable @uref{https://en.wikipedia.org/wiki/Local_Peer_Discovery,local peer discovery} (@acronym{LPD}), which allows the discovery of peers on the local network and may reduce the amount of data sent over the public Internet."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28415
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean pex-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28419
msgid "Enable @uref{https://en.wikipedia.org/wiki/Peer_exchange,peer exchange} (@acronym{PEX}), which reduces the daemon's reliance on external trackers and may improve its performance."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28424
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean utp-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28429
msgid "Enable @uref{http://bittorrent.org/beps/bep_0029.html,the micro transport protocol} (@acronym{uTP}), which aims to reduce the impact of BitTorrent traffic on other users of the local network while maintaining full utilization of the available bandwidth."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28434
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean rpc-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28439
msgid "If @code{#t}, enable the remote procedure call (@acronym{RPC})  interface, which allows remote control of the daemon via its Web interface, the @command{transmission-remote} command-line client, and similar tools."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28444
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} string rpc-bind-address"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28447
msgid "The IP address at which to listen for @acronym{RPC} connections, or ``0.0.0.0'' to listen at all available IP addresses."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28452
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} port-number rpc-port"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28454
msgid "The port on which to listen for @acronym{RPC} connections."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28456
msgid "Defaults to @samp{9091}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28459
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} string rpc-url"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28461
msgid "The path prefix to use in the @acronym{RPC}-endpoint @acronym{URL}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28463
msgid "Defaults to @samp{\"/transmission/\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28466
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean rpc-authentication-required?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28471
msgid "When @code{#t}, clients must authenticate (see @code{rpc-username} and @code{rpc-password}) when using the @acronym{RPC} interface.  Note this has the side effect of disabling host-name whitelisting (see @code{rpc-host-whitelist-enabled?}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28476
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} maybe-string rpc-username"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28479
msgid "The username required by clients to access the @acronym{RPC} interface when @code{rpc-authentication-required?} is @code{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28484
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} maybe-transmission-password-hash rpc-password"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28490
msgid "The password required by clients to access the @acronym{RPC} interface when @code{rpc-authentication-required?} is @code{#t}.  This must be specified using a password hash in the format recognized by Transmission clients, either copied from an existing @file{settings.json} file or generated using the @code{transmission-password-hash} procedure."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28495
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean rpc-whitelist-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28498
msgid "When @code{#t}, @acronym{RPC} requests will be accepted only when they originate from an address specified in @code{rpc-whitelist}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28503
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} string-list rpc-whitelist"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28507
msgid "The list of IP and IPv6 addresses from which @acronym{RPC} requests will be accepted when @code{rpc-whitelist-enabled?} is @code{#t}.  Wildcards may be specified using @samp{*}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28509
msgid "Defaults to @samp{'(\"127.0.0.1\" \"::1\")}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28512
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean rpc-host-whitelist-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28517
msgid "When @code{#t}, @acronym{RPC} requests will be accepted only when they are addressed to a host named in @code{rpc-host-whitelist}.  Note that requests to ``localhost'' or ``localhost.'', or to a numeric address, are always accepted regardless of these settings."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28520
msgid "Note also this functionality is disabled when @code{rpc-authentication-required?} is @code{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28525
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} string-list rpc-host-whitelist"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28528
msgid "The list of host names recognized by the @acronym{RPC} server when @code{rpc-host-whitelist-enabled?} is @code{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28533
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} message-level message-level"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28537
msgid "The minimum severity level of messages to be logged (to @file{/var/log/transmission.log}) by the daemon, one of @code{none} (no logging), @code{error}, @code{info} and @code{debug}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28542
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean start-added-torrents?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28545
msgid "When @code{#t}, torrents are started as soon as they are added; otherwise, they are added in ``paused'' state."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28550
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean script-torrent-done-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28554
msgid "When @code{#t}, the script specified by @code{script-torrent-done-filename} will be invoked each time a torrent completes."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28559
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} maybe-file-object script-torrent-done-filename"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28563
msgid "A file name or file-like object specifying a script to run each time a torrent completes, when @code{script-torrent-done-enabled?} is @code{#t}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28568
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean scrape-paused-torrents-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28571
msgid "When @code{#t}, the daemon will scrape trackers for a torrent even when the torrent is paused."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28576
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} non-negative-integer cache-size-mb"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28580
msgid "The amount of memory, in megabytes, to allocate for the daemon's in-memory cache.  A larger value may increase performance by reducing the frequency of disk I/O."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28582
msgid "Defaults to @samp{4}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28585
#, no-wrap
msgid "{@code{transmission-daemon-configuration} parameter} boolean prefetch-enabled?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:28589
msgid "When @code{#t}, the daemon will try to improve I/O performance by hinting to the operating system which data is likely to be read next from disk to satisfy requests from peers."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:28602
#, no-wrap
msgid "Tailon Service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:28606
msgid "@uref{https://tailon.readthedocs.io/, Tailon} is a web application for viewing and searching log files."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:28609
msgid "The following example will configure the service with default values.  By default, Tailon can be accessed on port 8080 (@code{http://localhost:8080})."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:28612
#, no-wrap
msgid "(service tailon-service-type)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:28616
msgid "The following example customises more of the Tailon configuration, adding @command{sed} to the list of allowed commands."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:28623
#, no-wrap
msgid ""
"(service tailon-service-type\n"
"         (tailon-configuration\n"
"           (config-file\n"
"             (tailon-configuration-file\n"
"               (allowed-commands '(\"tail\" \"grep\" \"awk\" \"sed\"))))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:28626
#, no-wrap
msgid "{Data Type} tailon-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:28629
msgid "Data type representing the configuration of Tailon.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28631
#, no-wrap
msgid "@code{config-file} (default: @code{(tailon-configuration-file)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28635
msgid "The configuration file to use for Tailon.  This can be set to a @dfn{tailon-configuration-file} record value, or any gexp (@pxref{G-Expressions})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28638
msgid "For example, to instead use a local file, the @code{local-file} function can be used:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:28643
#, no-wrap
msgid ""
"(service tailon-service-type\n"
"         (tailon-configuration\n"
"           (config-file (local-file \"./my-tailon.conf\"))))\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28645
#, no-wrap
msgid "@code{package} (default: @code{tailon})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28647
msgid "The tailon package to use."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:28651
#, no-wrap
msgid "{Data Type} tailon-configuration-file"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:28654
msgid "Data type representing the configuration options for Tailon.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28656
#, no-wrap
msgid "@code{files} (default: @code{(list \"/var/log\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28661
msgid "List of files to display.  The list can include strings for a single file or directory, or a list, where the first item is the name of a subsection, and the remaining items are the files or directories in that subsection."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28662
#, no-wrap
msgid "@code{bind} (default: @code{\"localhost:8080\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28664
msgid "Address and port to which Tailon should bind on."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28665
#, no-wrap
msgid "@code{relative-root} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28667
msgid "URL path to use for Tailon, set to @code{#f} to not use a path."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28668
#, no-wrap
msgid "@code{allow-transfers?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28670
msgid "Allow downloading the log files in the web interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28671
#, no-wrap
msgid "@code{follow-names?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28673
msgid "Allow tailing of not-yet existent files."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28674
#, no-wrap
msgid "@code{tail-lines} (default: @code{200})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28676
msgid "Number of lines to read initially from each file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28677
#, no-wrap
msgid "@code{allowed-commands} (default: @code{(list \"tail\" \"grep\" \"awk\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28679
msgid "Commands to allow running.  By default, @code{sed} is disabled."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28682
msgid "Set @code{debug?} to @code{#t} to show debug messages."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28683
#, no-wrap
msgid "@code{wrap-lines} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28687
msgid "Initial line wrapping state in the web interface.  Set to @code{#t} to initially wrap lines (the default), or to @code{#f} to initially not wrap lines."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28688
#, no-wrap
msgid "@code{http-auth} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28692
msgid "HTTP authentication type to use.  Set to @code{#f} to disable authentication (the default).  Supported values are @code{\"digest\"} or @code{\"basic\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28693
#, no-wrap
msgid "@code{users} (default: @code{#f})"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28698
msgid "If HTTP authentication is enabled (see @code{http-auth}), access will be restricted to the credentials provided here.  To configure users, use a list of pairs, where the first element of the pair is the username, and the 2nd element of the pair is the password."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:28704
#, no-wrap
msgid ""
"(tailon-configuration-file\n"
"  (http-auth \"basic\")\n"
"  (users     '((\"user1\" . \"password1\")\n"
"               (\"user2\" . \"password2\"))))\n"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:28710
#, no-wrap
msgid "Darkstat Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:28711
#, no-wrap
msgid "darkstat"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:28714
msgid "Darkstat is a packet sniffer that captures network traffic, calculates statistics about usage, and serves reports over HTTP."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:28715
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "darkstat-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:28720
msgid "This is the service type for the @uref{https://unix4lyfe.org/darkstat/, darkstat} service, its value must be a @code{darkstat-configuration} record as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:28725
#, no-wrap
msgid ""
"(service darkstat-service-type\n"
"         (darkstat-configuration\n"
"           (interface \"eno1\")))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:28728
#, no-wrap
msgid "{Data Type} darkstat-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:28730
msgid "Data type representing the configuration of @command{darkstat}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28732
#, no-wrap
msgid "@code{package} (default: @code{darkstat})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28734
msgid "The darkstat package to use."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:28735
#, no-wrap
msgid "interface"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28737
msgid "Capture traffic on the specified network interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28738
#, no-wrap
msgid "@code{port} (default: @code{\"667\"})"
msgstr "@code{porta} (default: @code{\"667\"})"

#. type: table
#: guix-git/doc/guix.texi:28740
msgid "Bind the web interface to the specified port."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28743 guix-git/doc/guix.texi:28779
msgid "Bind the web interface to the specified address."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28744
#, no-wrap
msgid "@code{base} (default: @code{\"/\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28747
msgid "Specify the path of the base URL@.  This can be useful if @command{darkstat} is accessed via a reverse proxy."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:28752 guix-git/doc/guix.texi:28753
#, no-wrap
msgid "prometheus-node-exporter"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:28752
#, no-wrap
msgid "Prometheus Node Exporter Service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:28759
msgid "The Prometheus ``node exporter'' makes hardware and operating system statistics provided by the Linux kernel available for the Prometheus monitoring system.  This service should be deployed on all physical nodes and virtual machines, where monitoring these statistics is desirable."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:28760
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "prometheus-node-exporter-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:28764
msgid "This is the service type for the @uref{https://github.com/prometheus/node_exporter/, prometheus-node-exporter} service, its value must be a @code{prometheus-node-exporter-configuration}."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:28767
#, no-wrap
msgid "(service prometheus-node-exporter-service-type)\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:28770
#, no-wrap
msgid "{Data Type} prometheus-node-exporter-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:28772
msgid "Data type representing the configuration of @command{node_exporter}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28774
#, no-wrap
msgid "@code{package} (default: @code{go-github-com-prometheus-node-exporter})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28776
msgid "The prometheus-node-exporter package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28777
#, no-wrap
msgid "@code{web-listen-address} (default: @code{\":9100\"})"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28780
#, no-wrap
msgid "@code{textfile-directory} (default: @code{\"/var/lib/prometheus/node-exporter\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28784
msgid "This directory can be used to export metrics specific to this machine.  Files containing metrics in the text format, with the filename ending in @code{.prom} should be placed in this directory."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28787
msgid "Extra options to pass to the Prometheus node exporter."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:28792 guix-git/doc/guix.texi:28793
#, fuzzy, no-wrap
#| msgid "install"
msgid "vnstat"
msgstr "instalar"

#. type: subsubheading
#: guix-git/doc/guix.texi:28792
#, no-wrap
msgid "vnStat Network Traffic Monitor"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:28798
msgid "vnStat is a network traffic monitor that uses interface statistics provided by the kernel rather than traffic sniffing.  This makes it a light resource monitor, regardless of network traffic rate."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:28799
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "vnstat-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:28802
msgid "This is the service type for the @uref{https://humdi.net/vnstat/,vnStat} daemon and accepts a @code{vnstat-configuration} value."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:28804
msgid "The following example will configure the service with default values:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:28807
#, fuzzy, no-wrap
msgid "(service vnstat-service-type)\n"
msgstr "guix-publish-service-type"

#. type: deftp
#: guix-git/doc/guix.texi:28811
#, fuzzy, no-wrap
msgid "{Data Type} vnstat-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:28813
#, fuzzy
msgid "Available @code{vnstat-configuration} fields are:"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:28815
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{package} (default: @code{vnstat}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:28817
#, fuzzy
#| msgid "The GPM package to use."
msgid "The vnstat package."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:28818
#, fuzzy, no-wrap
msgid "@code{database-directory} (default: @code{\"/var/lib/vnstat\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28821
msgid "Specifies the directory where the database is to be stored.  A full path must be given and a leading '/' isn't required."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28822
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{5-minute-hours} (default: @code{48}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28827
msgid "Data retention duration for the 5 minute resolution entries.  The configuration defines for how many past hours entries will be stored.  Set to @code{-1} for unlimited entries or to @code{0} to disable the data collection of this resolution."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28828
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{64bit-interface-counters} (default: @code{-2}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28837
msgid "Select interface counter handling.  Set to @code{1} for defining that all interfaces use 64-bit counters on the kernel side and @code{0} for defining 32-bit counter.  Set to @code{-1} for using the old style logic used in earlier versions where counter values within 32-bits are assumed to be 32-bit and anything larger is assumed to be a 64-bit counter.  This may produce false results if a 64-bit counter is reset within the 32-bits.  Set to @code{-2} for using automatic detection based on available kernel datastructures."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28838
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{always-add-new-interfaces?} (default: @code{#t}) (type: maybe-boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28845
msgid "Enable or disable automatic creation of new database entries for interfaces not currently in the database even if the database file already exists when the daemon is started.  New database entries will also get created for new interfaces seen while the daemon is running.  Pseudo interfaces @samp{lo}, @samp{lo0} and @samp{sit0} are always excluded from getting added."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28846
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{bandwidth-detection?} (default: @code{#t}) (type: maybe-boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28854
msgid "Try to automatically detect @var{max-bandwidth} value for each monitored interface.  Mostly only ethernet interfaces support this feature.  @var{max-bandwidth} will be used as fallback value if detection fails.  Any interface specific @var{max-BW} configuration will disable the detection for the specified interface.  In Linux, the detection is disabled for tun interfaces due to the Linux kernel always reporting 10 Mbit regardless of the used real interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28855
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{bandwidth-detection-interval} (default: @code{5}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28860
msgid "How often in minutes interface specific detection of @var{max-bandwidth} is done for detecting possible changes when @var{bandwidth-detection} is enabled.  Can be disabled by setting to @code{0}.  Value range: @samp{0}..@samp{30}"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28861
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{boot-variation} (default: @code{15}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28864
msgid "Time in seconds how much the boot time reported by system kernel can variate between updates.  Value range: @samp{0}..@samp{300}"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28865
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{check-disk-space?} (default: @code{#t}) (type: maybe-boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28868
msgid "Enable or disable the availability check of at least some free disk space before a database write."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28869
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{create-directories?} (default: @code{#t}) (type: maybe-boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28872
msgid "Enable or disable the creation of directories when a configured path doesn't exist.  This includes @var{database-directory}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28873
#, fuzzy, no-wrap
msgid "@code{daemon-group} (type: maybe-user-group)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28876
msgid "Specify the group to which the daemon process should switch during startup.  Set to @code{%unset-value} to disable group switching."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28877
#, fuzzy, no-wrap
msgid "@code{daemon-user} (type: maybe-user-account)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28880
msgid "Specify the user to which the daemon process should switch during startup.  Set to @code{%unset-value} to disable user switching."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28881
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{daily-days} (default: @code{62}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28886
msgid "Data retention duration for the one day resolution entries.  The configuration defines for how many past days entries will be stored.  Set to @code{-1} for unlimited entries or to @code{0} to disable the data collection of this resolution."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28887
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{database-synchronous} (default: @code{-1}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28898
msgid "Change the setting of the SQLite \"synchronous\" flag which controls how much care is taken to ensure disk writes have fully completed when writing data to the database before continuing other actions.  Higher values take extra steps to ensure data safety at the cost of slower performance.  A value of @code{0} will result in all handling being left to the filesystem itself.  Set to @code{-1} to select the default value according to database mode controlled by @var{database-write-ahead-logging} setting.  See SQLite documentation for more details regarding values from @code{1} to @code{3}.  Value range: @samp{-1}..@samp{3}"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28899
#, fuzzy, no-wrap
#| msgid "@code{wait?} (default: @code{#t})"
msgid "@code{database-write-ahead-logging?} (default: @code{#f}) (type: maybe-boolean)"
msgstr "@code{wait?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:28903
msgid "Enable or disable SQLite Write-Ahead Logging mode for the database.  See SQLite documentation for more details and note that support for read-only operations isn't available in older SQLite versions."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28904
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{hourly-days} (default: @code{4}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28909
msgid "Data retention duration for the one hour resolution entries.  The configuration defines for how many past days entries will be stored.  Set to @code{-1} for unlimited entries or to @code{0} to disable the data collection of this resolution."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28910 guix-git/doc/guix.texi:43630
#, fuzzy, no-wrap
msgid "@code{log-file} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28913
msgid "Specify log file path and name to be used if @var{use-logging} is set to @code{1}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28914
#, fuzzy, no-wrap
msgid "@code{max-bandwidth} (type: maybe-integer)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28919
msgid "Maximum bandwidth for all interfaces.  If the interface specific traffic exceeds the given value then the data is assumed to be invalid and rejected.  Set to 0 in order to disable the feature.  Value range: @samp{0}..@samp{50000}"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28920
#, fuzzy, no-wrap
msgid "@code{max-bw} (type: maybe-alist)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28924
msgid "Same as @var{max-bandwidth} but can be used for setting individual limits for selected interfaces.  This is an association list of interfaces as strings to integer values.  For example,"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:28927
#, no-wrap
msgid ""
"(max-bw `((\"eth0\" .  15000)\n"
"          (\"ppp0\" .  10000)))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:28930
msgid "@var{bandwidth-detection} is disabled on an interface specific level for each @var{max-bw} configuration.  Value range: @samp{0}..@samp{50000}"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28931
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{monthly-months} (default: @code{25}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28936
msgid "Data retention duration for the one month resolution entries.  The configuration defines for how many past months entries will be stored.  Set to @code{-1} for unlimited entries or to @code{0} to disable the data collection of this resolution."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28937
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{month-rotate} (default: @code{1}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28944
msgid "Day of month that months are expected to change.  Usually set to 1 but can be set to alternative values for example for tracking monthly billed traffic where the billing period doesn't start on the first day.  For example, if set to 7, days of February up to and including the 6th will count for January.  Changing this option will not cause existing data to be recalculated.  Value range: @samp{1}..@samp{28}"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28945
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{month-rotate-affects-years?} (default: @code{#f}) (type: maybe-boolean)"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28948
msgid "Enable or disable @var{month-rotate} also affecting yearly data.  Applicable only when @var{month-rotate} has a value greater than one."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28949
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{offline-save-interval} (default: @code{30}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28953
msgid "How often in minutes cached interface data is saved to file when all monitored interfaces are offline.  Value range: @var{save-interval}..@samp{60}"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28954
#, fuzzy, no-wrap
msgid "@code{pid-file} (default: @code{\"/var/run/vnstatd.pid\"}) (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28956
msgid "Specify pid file path and name to be used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28957
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{poll-interval} (default: @code{5}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28960
msgid "How often in seconds interfaces are checked for status changes.  Value range: @samp{2}..@samp{60}"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28961
#, fuzzy, no-wrap
msgid "@code{rescan-database-on-save?} (type: maybe-boolean)"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28966
msgid "Automatically discover added interfaces from the database and start monitoring.  The rescan is done every @var{save-interval} or @var{offline-save-interval} minutes depending on the current activity state."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28967
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{save-interval} (default: @code{5}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28970
msgid "How often in minutes cached interface data is saved to file.  Value range: ( @var{update-interval} / 60 )..@samp{60}"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28971
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{save-on-status-change?} (default: @code{#t}) (type: maybe-boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28975
msgid "Enable or disable the additional saving to file of cached interface data when the availability of an interface changes, i.e., when an interface goes offline or comes online."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28976
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{time-sync-wait} (default: @code{5}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28982
msgid "How many minutes to wait during daemon startup for system clock to sync if most recent database update appears to be in the future.  This may be needed in systems without a real-time clock (RTC) which require some time after boot to query and set the correct time.  @code{0} = wait disabled.  Value range: @samp{0}..@samp{60}"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28983
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{top-day-entries} (default: @code{20}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28988
msgid "Data retention duration for the top day entries.  The configuration defines how many of the past top day entries will be stored.  Set to @code{-1} for unlimited entries or to @code{0} to disable the data collection of this resolution."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28989
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{trafficless-entries?} (default: @code{#t}) (type: maybe-boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:28992
msgid "Create database entries even when there is no traffic during the entry's time period."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:28993
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{update-file-owner?} (default: @code{#t}) (type: maybe-boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29002
msgid "Enable or disable the update of file ownership during daemon process startup.  During daemon startup, only database, log and pid files will be modified if the user or group change feature ( @var{daemon-user} or @var{daemon-group} ) is enabled and the files don't match the requested user or group.  During manual database creation, this option will cause file ownership to be inherited from the database directory if the directory already exists.  This option only has effect when the process is started as root or via sudo."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29003
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{update-interval} (default: @code{20}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29006
msgid "How often in seconds the interface data is updated.  Value range: @var{poll-interval}..@samp{300}"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29007
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{use-logging} (default: @code{2}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29010
msgid "Enable or disable logging.  Accepted values are: @code{0} = disabled, @code{1} = logfile and @code{2} = syslog."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29011
#, fuzzy, no-wrap
msgid "@code{use-utc?} (type: maybe-boolean)"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29017
msgid "Enable or disable using UTC as timezone in the database for all entries.  When enabled, all entries added to the database will use UTC regardless of the configured system timezone.  When disabled, the configured system timezone will be used.  Changing this setting will not result in already existing data to be modified."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29018
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{yearly-years} (default: @code{-1}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29023
msgid "Data retention duration for the one year resolution entries.  The configuration defines for how many past years entries will be stored.  Set to @code{-1} for unlimited entries or to @code{0} to disable the data collection of this resolution."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:29028
#, no-wrap
msgid "Zabbix server"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:29029
#, no-wrap
msgid "zabbix zabbix-server"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29034
msgid "Zabbix is a high performance monitoring system that can collect data from a variety of sources and provide the results in a web-based interface.  Alerting and reporting is built-in, as well as @dfn{templates} for common operating system metrics such as network utilization, CPU load, and disk space consumption."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29041
msgid "This service provides the central Zabbix monitoring service; you also need @ref{zabbix-front-end,@code{zabbix-front-end-service-type}} to configure Zabbix and display results, and optionally @ref{zabbix-agent, @code{zabbix-agent-service-type}} on machines that should be monitored (other data sources are supported, such as @ref{prometheus-node-exporter, Prometheus Node Exporter})."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:29042
#, fuzzy, no-wrap
msgid "zabbix-server-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:29045
msgid "This is the service type for the Zabbix server service.  Its value must be a @code{zabbix-server-configuration} record, shown below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:29049
#, fuzzy, no-wrap
msgid "{Data Type} zabbix-server-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:29051
msgid "Available @code{zabbix-server-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29053 guix-git/doc/guix.texi:29216
#, fuzzy, no-wrap
msgid "@code{zabbix-server} (default: @code{zabbix-server}) (type: file-like)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29055
msgid "The zabbix-server package."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29056 guix-git/doc/guix.texi:29142
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{user} (default: @code{\"zabbix\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29058
msgid "User who will run the Zabbix server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29059 guix-git/doc/guix.texi:29145
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{group} (default: @code{\"zabbix\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29061
msgid "Group who will run the Zabbix server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29062
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{db-host} (default: @code{\"127.0.0.1\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29064 guix-git/doc/guix.texi:29226
msgid "Database host name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29065 guix-git/doc/guix.texi:29230
#, fuzzy, no-wrap
msgid "@code{db-name} (default: @code{\"zabbix\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29067 guix-git/doc/guix.texi:29232
msgid "Database name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29068 guix-git/doc/guix.texi:29233
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{db-user} (default: @code{\"zabbix\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29070 guix-git/doc/guix.texi:29235
msgid "Database user."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29071 guix-git/doc/guix.texi:29236
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{db-password} (default: @code{\"\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29074
msgid "Database password.  Please, use @code{include-files} with @code{DBPassword=SECRET} inside a specified file instead."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29075 guix-git/doc/guix.texi:29227
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{db-port} (default: @code{5432}) (type: number)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29077 guix-git/doc/guix.texi:29229
msgid "Database port."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29078 guix-git/doc/guix.texi:29152
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{log-type} (default: @code{\"\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29080 guix-git/doc/guix.texi:29154
msgid "Specifies where log messages are written to:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:29083 guix-git/doc/guix.texi:29158
#, no-wrap
msgid "@code{system} - syslog."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29085
#, no-wrap
msgid "@code{file} - file specified with @code{log-file} parameter."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29087 guix-git/doc/guix.texi:29162
#, no-wrap
msgid "@code{console} - standard output."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29091
#, fuzzy, no-wrap
msgid "@code{log-file} (default: @code{\"/var/log/zabbix/server.log\"}) (type: string)"
msgstr "@code{daemon-socket} (padrão: @code{\"/var/guix/daemon-socket/socket\"})"

#. type: table
#: guix-git/doc/guix.texi:29093 guix-git/doc/guix.texi:29168
msgid "Log file name for @code{log-type} @code{file} parameter."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29094
#, fuzzy, no-wrap
msgid "@code{pid-file} (default: @code{\"/var/run/zabbix/zabbix_server.pid\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29096 guix-git/doc/guix.texi:29171
msgid "Name of PID file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29097
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{ssl-ca-location} (default: @code{\"/etc/ssl/certs/ca-certificates.crt\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29100
msgid "The location of certificate authority (CA) files for SSL server certificate verification."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29101
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{ssl-cert-location} (default: @code{\"/etc/ssl/certs\"}) (type: string)"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29103
msgid "Location of SSL client certificates."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29104 guix-git/doc/guix.texi:29182
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{extra-options} (default: @code{\"\"}) (type: extra-options)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29106 guix-git/doc/guix.texi:29184
msgid "Extra options will be appended to Zabbix server configuration file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29107 guix-git/doc/guix.texi:29185
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{include-files} (default: @code{'()}) (type: include-files)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29110 guix-git/doc/guix.texi:29188
msgid "You may include individual files or all files in a directory in the configuration file."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:29119
msgid "zabbix-agent"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:29119
#, no-wrap
msgid "Zabbix agent"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:29120
#, no-wrap
msgid "zabbix zabbix-agent"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29127
msgid "The Zabbix agent gathers information about the running system for the Zabbix monitoring server.  It has a variety of built-in checks, and can be extended with custom @uref{https://www.zabbix.com/documentation/current/en/manual/config/items/userparameters, @dfn{user parameters}}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:29128
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "zabbix-agent-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:29131
msgid "This is the service type for the Zabbix agent service.  Its value must be a @code{zabbix-agent-configuration} record, shown below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:29135
#, fuzzy, no-wrap
msgid "{Data Type} zabbix-agent-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:29137
msgid "Available @code{zabbix-agent-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29139
#, fuzzy, no-wrap
msgid "@code{zabbix-agent} (default: @code{zabbix-agentd}) (type: file-like)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29141
msgid "The zabbix-agent package."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:29144
msgid "User who will run the Zabbix agent."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:29147
msgid "Group who will run the Zabbix agent."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29148
#, fuzzy, no-wrap
msgid "@code{hostname} (default: @code{\"\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29151
msgid "Unique, case sensitive hostname which is required for active checks and must match hostname as configured on the server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29159
#, no-wrap
msgid "@code{file} - file specified with"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:29161
#, fuzzy
#| msgid "@code{log-file} (default: @code{#f})"
msgid "@code{log-file} parameter."
msgstr "@code{log-file} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:29166
#, fuzzy, no-wrap
msgid "@code{log-file} (default: @code{\"/var/log/zabbix/agent.log\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:29169
#, fuzzy, no-wrap
msgid "@code{pid-file} (default: @code{\"/var/run/zabbix/zabbix_agent.pid\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:29172
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{server} (default: @code{'(\"127.0.0.1\")}) (type: list)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29176
msgid "List of IP addresses, optionally in CIDR notation, or hostnames of Zabbix servers and Zabbix proxies.  Incoming connections will be accepted only from the hosts listed here."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29177
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{server-active} (default: @code{'(\"127.0.0.1\")}) (type: list)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29181
msgid "List of IP:port (or hostname:port) pairs of Zabbix servers and Zabbix proxies for active checks.  If port is not specified, default port is used.  If this parameter is not specified, active checks are disabled."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:29197
msgid "zabbix-front-end"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:29197
#, no-wrap
msgid "Zabbix front-end"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:29198
#, no-wrap
msgid "zabbix zabbix-front-end"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29204
msgid "The Zabbix front-end provides a web interface to Zabbix.  It does not need to run on the same machine as the Zabbix server.  This service works by extending the @ref{PHP-FPM} and @ref{NGINX} services with the configuration necessary for loading the Zabbix user interface."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:29205
#, fuzzy, no-wrap
msgid "zabbix-front-end-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:29208
msgid "This is the service type for the Zabbix web frontend.  Its value must be a @code{zabbix-front-end-configuration} record, shown below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:29212
#, fuzzy, no-wrap
msgid "{Data Type} zabbix-front-end-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:29214
msgid "Available @code{zabbix-front-end-configuration} fields are:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:29218
#, fuzzy
#| msgid "The GPM package to use."
msgid "The Zabbix server package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:29219
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{nginx} (default: @code{'()}) (type: list)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29223
msgid "List of @ref{nginx-server-configuration,@code{nginx-server-configuration}} blocks for the Zabbix front-end.  When empty, a default that listens on port 80 is used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29224
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{db-host} (default: @code{\"localhost\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29238
msgid "Database password.  Please, use @code{db-secret-file} instead."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29239
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{db-secret-file} (default: @code{\"\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29243
msgid "Secret file which will be appended to @file{zabbix.conf.php} file.  This file contains credentials for use by Zabbix front-end.  You are expected to create it manually."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29244
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{zabbix-host} (default: @code{\"localhost\"}) (type: string)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29246
msgid "Zabbix server hostname."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29247
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{zabbix-port} (default: @code{10051}) (type: number)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29249
msgid "Zabbix server port."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:29259
#, no-wrap
msgid "Kerberos"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29263
msgid "The @code{(gnu services kerberos)} module provides services relating to the authentication protocol @dfn{Kerberos}."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:29264
#, no-wrap
msgid "Krb5 Service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29271
msgid "Programs using a Kerberos client library normally expect a configuration file in @file{/etc/krb5.conf}.  This service generates such a file from a definition provided in the operating system declaration.  It does not cause any daemon to be started."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29275
msgid "No ``keytab'' files are provided by this service---you must explicitly create them.  This service is known to work with the MIT client library, @code{mit-krb5}.  Other implementations have not been tested."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:29276
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "krb5-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:29278
msgid "A service type for Kerberos 5 clients."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29282
msgid "Here is an example of its use:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:29296
#, no-wrap
msgid ""
"(service krb5-service-type\n"
"         (krb5-configuration\n"
"          (default-realm \"EXAMPLE.COM\")\n"
"          (allow-weak-crypto? #t)\n"
"          (realms (list\n"
"                   (krb5-realm\n"
"                    (name \"EXAMPLE.COM\")\n"
"                    (admin-server \"groucho.example.com\")\n"
"                    (kdc \"karl.example.com\"))\n"
"                   (krb5-realm\n"
"                    (name \"ARGRX.EDU\")\n"
"                    (admin-server \"kerb-admin.argrx.edu\")\n"
"                    (kdc \"keys.argrx.edu\"))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29300
msgid "This example provides a Kerberos@tie{}5 client configuration which:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29301
#, no-wrap
msgid "Recognizes two realms, @i{viz:} ``EXAMPLE.COM'' and ``ARGRX.EDU'', both"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:29303
msgid "of which have distinct administration servers and key distribution centers;"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29303
#, no-wrap
msgid "Will default to the realm ``EXAMPLE.COM'' if the realm is not explicitly"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:29305
msgid "specified by clients;"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29305
#, no-wrap
msgid "Accepts services which only support encryption types known to be weak."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29313
msgid "The @code{krb5-realm} and @code{krb5-configuration} types have many fields.  Only the most commonly used ones are described here.  For a full list, and more detailed explanation of each, see the MIT @uref{https://web.mit.edu/kerberos/krb5-devel/doc/admin/conf_files/krb5_conf.html,,krb5.conf} documentation."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:29315
#, no-wrap
msgid "{Data Type} krb5-realm"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:29316
#, no-wrap
msgid "realm, kerberos"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:29322
msgid "This field is a string identifying the name of the realm.  A common convention is to use the fully qualified DNS name of your organization, converted to upper case."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:29323
#, no-wrap
msgid "admin-server"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:29326
msgid "This field is a string identifying the host where the administration server is running."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:29327
#, no-wrap
msgid "kdc"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:29330
msgid "This field is a string identifying the key distribution center for the realm."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:29333
#, no-wrap
msgid "{Data Type} krb5-configuration"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29336
#, no-wrap
msgid "@code{allow-weak-crypto?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:29339
msgid "If this flag is @code{#t} then services which only offer encryption algorithms known to be weak will be accepted."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29340
#, no-wrap
msgid "@code{default-realm} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:29347
msgid "This field should be a string identifying the default Kerberos realm for the client.  You should set this field to the name of your Kerberos realm.  If this value is @code{#f} then a realm must be specified with every Kerberos principal when invoking programs such as @command{kinit}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:29348
#, no-wrap
msgid "realms"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:29353
msgid "This should be a non-empty list of @code{krb5-realm} objects, which clients may access.  Normally, one of them will have a @code{name} field matching the @code{default-realm} field."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:29357
#, no-wrap
msgid "PAM krb5 Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:29358
#, no-wrap
msgid "pam-krb5"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29364
msgid "The @code{pam-krb5} service allows for login authentication and password management via Kerberos.  You will need this service if you want PAM enabled applications to authenticate users using Kerberos."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:29365
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "pam-krb5-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:29367
msgid "A service type for the Kerberos 5 PAM module."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:29369
#, no-wrap
msgid "{Data Type} pam-krb5-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:29372
msgid "Data type representing the configuration of the Kerberos 5 PAM module.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29373
#, no-wrap
msgid "@code{pam-krb5} (default: @code{pam-krb5})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:29375
msgid "The pam-krb5 package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29376
#, no-wrap
msgid "@code{minimum-uid} (default: @code{1000})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:29379
msgid "The smallest user ID for which Kerberos authentications should be attempted.  Local accounts with lower values will silently fail to authenticate."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:29385
#, no-wrap
msgid "LDAP"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:29387
#, no-wrap
msgid "Authentication against LDAP with nslcd"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:29388
#, no-wrap
msgid "nslcd, LDAP service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29395
msgid "The @code{(gnu services authentication)} module provides the @code{nslcd-service-type}, which can be used to authenticate against an LDAP server.  In addition to configuring the service itself, you may want to add @code{ldap} as a name service to the Name Service Switch. @xref{Name Service Switch} for detailed information."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29399
msgid "Here is a simple operating system declaration with a default configuration of the @code{nslcd-service-type} and a Name Service Switch configuration that consults the @code{ldap} name service last:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:29422
#, no-wrap
msgid ""
"(use-service-modules authentication)\n"
"(use-modules (gnu system nss))\n"
"...\n"
"(operating-system\n"
"  ...\n"
"  (services\n"
"    (cons*\n"
"      (service nslcd-service-type)\n"
"      (service dhcp-client-service-type)\n"
"      %base-services))\n"
"  (name-service-switch\n"
"   (let ((services (list (name-service (name \"db\"))\n"
"                         (name-service (name \"files\"))\n"
"                         (name-service (name \"ldap\")))))\n"
"     (name-service-switch\n"
"      (inherit %mdns-host-lookup-nss)\n"
"      (password services)\n"
"      (shadow   services)\n"
"      (group    services)\n"
"      (netgroup services)\n"
"      (gshadow  services)))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29427
msgid "Available @code{nslcd-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29428
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} package nss-pam-ldapd"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29430
msgid "The @code{nss-pam-ldapd} package to use."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29433
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-number threads"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29437
msgid "The number of threads to start that can handle requests and perform LDAP queries.  Each thread opens a separate connection to the LDAP server.  The default is to start 5 threads."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29442
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} string uid"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29444
msgid "This specifies the user id with which the daemon should be run."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29446 guix-git/doc/guix.texi:29453
msgid "Defaults to @samp{\"nslcd\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29449
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} string gid"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29451
msgid "This specifies the group id with which the daemon should be run."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29456
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} log-option log"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29464
msgid "This option controls the way logging is done via a list containing SCHEME and LEVEL@.  The SCHEME argument may either be the symbols @samp{none} or @samp{syslog}, or an absolute file name.  The LEVEL argument is optional and specifies the log level.  The log level may be one of the following symbols: @samp{crit}, @samp{error}, @samp{warning}, @samp{notice}, @samp{info} or @samp{debug}.  All messages with the specified log level or higher are logged."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29466
msgid "Defaults to @samp{'(\"/var/log/nslcd\" info)}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29469
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} list uri"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29472
msgid "The list of LDAP server URIs.  Normally, only the first server will be used with the following servers as fall-back."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29474
msgid "Defaults to @samp{'(\"ldap://localhost:389/\")}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29477
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string ldap-version"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29480
msgid "The version of the LDAP protocol to use.  The default is to use the maximum version supported by the LDAP library."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29485
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string binddn"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29488
msgid "Specifies the distinguished name with which to bind to the directory server for lookups.  The default is to bind anonymously."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29493
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string bindpw"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29496
msgid "Specifies the credentials with which to bind.  This option is only applicable when used with binddn."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29501
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string rootpwmoddn"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29504
msgid "Specifies the distinguished name to use when the root user tries to modify a user's password using the PAM module."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29509
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string rootpwmodpw"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29513
msgid "Specifies the credentials with which to bind if the root user tries to change a user's password.  This option is only applicable when used with rootpwmoddn"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29518
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string sasl-mech"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29521
msgid "Specifies the SASL mechanism to be used when performing SASL authentication."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29526
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string sasl-realm"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29528
msgid "Specifies the SASL realm to be used when performing SASL authentication."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29533
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string sasl-authcid"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29536
msgid "Specifies the authentication identity to be used when performing SASL authentication."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29541
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string sasl-authzid"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29544
msgid "Specifies the authorization identity to be used when performing SASL authentication."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29549
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-boolean sasl-canonicalize?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29554
msgid "Determines whether the LDAP server host name should be canonicalised.  If this is enabled the LDAP library will do a reverse host name lookup.  By default, it is left up to the LDAP library whether this check is performed or not."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29559
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string krb5-ccname"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29561
msgid "Set the name for the GSS-API Kerberos credentials cache."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29566
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} string base"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29568
msgid "The directory search base."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29570
msgid "Defaults to @samp{\"dc=example,dc=com\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29573
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} scope-option scope"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29577
msgid "Specifies the search scope (subtree, onelevel, base or children).  The default scope is subtree; base scope is almost never useful for name service lookups; children scope is not supported on all servers."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29579
msgid "Defaults to @samp{'(subtree)}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29582
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-deref-option deref"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29585
msgid "Specifies the policy for dereferencing aliases.  The default policy is to never dereference aliases."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29590
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-boolean referrals"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29593
msgid "Specifies whether automatic referral chasing should be enabled.  The default behaviour is to chase referrals."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29598
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} list-of-map-entries maps"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29603
msgid "This option allows for custom attributes to be looked up instead of the default RFC 2307 attributes.  It is a list of maps, each consisting of the name of a map, the RFC 2307 attribute to match and the query expression for the attribute as it is available in the directory."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29608
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} list-of-filter-entries filters"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29611
msgid "A list of filters consisting of the name of a map to which the filter applies and an LDAP search filter expression."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29616
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-number bind-timelimit"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29619
msgid "Specifies the time limit in seconds to use when connecting to the directory server.  The default value is 10 seconds."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29624
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-number timelimit"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29628
msgid "Specifies the time limit (in seconds) to wait for a response from the LDAP server.  A value of zero, which is the default, is to wait indefinitely for searches to be completed."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29633
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-number idle-timelimit"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29637
msgid "Specifies the period if inactivity (in seconds) after which the con‐ nection to the LDAP server will be closed.  The default is not to time out connections."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29642
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-number reconnect-sleeptime"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29646
msgid "Specifies the number of seconds to sleep when connecting to all LDAP servers fails.  By default one second is waited between the first failure and the first retry."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29651
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-number reconnect-retrytime"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29655
msgid "Specifies the time after which the LDAP server is considered to be permanently unavailable.  Once this time is reached retries will be done only once per this time period.  The default value is 10 seconds."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29660
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-ssl-option ssl"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29664
msgid "Specifies whether to use SSL/TLS or not (the default is not to).  If 'start-tls is specified then StartTLS is used rather than raw LDAP over SSL."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29669
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-tls-reqcert-option tls-reqcert"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29672
msgid "Specifies what checks to perform on a server-supplied certificate.  The meaning of the values is described in the ldap.conf(5) manual page."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29677
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string tls-cacertdir"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29680
msgid "Specifies the directory containing X.509 certificates for peer authen‐ tication.  This parameter is ignored when using GnuTLS."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29685
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string tls-cacertfile"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29687
msgid "Specifies the path to the X.509 certificate for peer authentication."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29692
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string tls-randfile"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29695
msgid "Specifies the path to an entropy source.  This parameter is ignored when using GnuTLS."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29700
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string tls-ciphers"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29702
msgid "Specifies the ciphers to use for TLS as a string."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29707
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string tls-cert"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29710
msgid "Specifies the path to the file containing the local certificate for client TLS authentication."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29715
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string tls-key"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29718
msgid "Specifies the path to the file containing the private key for client TLS authentication."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29723
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-number pagesize"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29727
msgid "Set this to a number greater than 0 to request paged results from the LDAP server in accordance with RFC2696.  The default (0) is to not request paged results."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29732
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-ignore-users-option nss-initgroups-ignoreusers"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29736
msgid "This option prevents group membership lookups through LDAP for the specified users.  Alternatively, the value 'all-local may be used.  With that value nslcd builds a full list of non-LDAP users on startup."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29741
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-number nss-min-uid"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29744
msgid "This option ensures that LDAP users with a numeric user id lower than the specified value are ignored."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29749
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-number nss-uid-offset"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29752
msgid "This option specifies an offset that is added to all LDAP numeric user ids.  This can be used to avoid user id collisions with local users."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29757
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-number nss-gid-offset"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29760
msgid "This option specifies an offset that is added to all LDAP numeric group ids.  This can be used to avoid user id collisions with local groups."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29765
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-boolean nss-nested-groups"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29771
msgid "If this option is set, the member attribute of a group may point to another group.  Members of nested groups are also returned in the higher level group and parent groups are returned when finding groups for a specific user.  The default is not to perform extra searches for nested groups."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29776
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-boolean nss-getgrent-skipmembers"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29781
msgid "If this option is set, the group member list is not retrieved when looking up groups.  Lookups for finding which groups a user belongs to will remain functional so the user will likely still get the correct groups assigned on login."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29786
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-boolean nss-disable-enumeration"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29792
msgid "If this option is set, functions which cause all user/group entries to be loaded from the directory will not succeed in doing so.  This can dramatically reduce LDAP server load in situations where there are a great number of users and/or groups.  This option is not recommended for most configurations."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29797
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string validnames"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29801
msgid "This option can be used to specify how user and group names are verified within the system.  This pattern is used to check all user and group names that are requested and returned from LDAP."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29806
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-boolean ignorecase"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29811
msgid "This specifies whether or not to perform searches using case-insensitive matching.  Enabling this could open up the system to authorization bypass vulnerabilities and introduce nscd cache poisoning vulnerabilities which allow denial of service."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29816
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-boolean pam-authc-ppolicy"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29819
msgid "This option specifies whether password policy controls are requested and handled from the LDAP server when performing user authentication."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29824
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string pam-authc-search"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29830
msgid "By default nslcd performs an LDAP search with the user's credentials after BIND (authentication) to ensure that the BIND operation was successful.  The default search is a simple check to see if the user's DN exists.  A search filter can be specified that will be used instead.  It should return at least one entry."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29835
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string pam-authz-search"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29839
msgid "This option allows flexible fine tuning of the authorisation check that should be performed.  The search filter specified is executed and if any entries match, access is granted, otherwise access is denied."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29844
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} maybe-string pam-password-prohibit-message"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29849
msgid "If this option is set password modification using pam_ldap will be denied and the specified message will be presented to the user instead.  The message can be used to direct the user to an alternative means of changing their password."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29854
#, no-wrap
msgid "{@code{nslcd-configuration} parameter} list pam-services"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:29856
msgid "List of pam service names for which LDAP authentication should suffice."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:29864
#, no-wrap
msgid "LDAP Directory Server"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:29865
#, no-wrap
msgid "LDAP, server"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29870
msgid "The @code{(gnu services ldap)} module provides the @code{directory-server-service-type}, which can be used to create and launch an LDAP server instance."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29873
#, fuzzy
msgid "Here is an example configuration of the @code{directory-server-service-type}:"
msgstr "Gerencie a configuração do sistema operacional."

#. type: lisp
#: guix-git/doc/guix.texi:29876
#, fuzzy, no-wrap
#| msgid ""
#| "(use-package-modules guile emacs)\n"
#| "\n"
msgid ""
"(use-service-modules ldap)\n"
"\n"
msgstr ""
"(use-package-modules guile emacs)\n"
"\n"

#. type: lisp
#: guix-git/doc/guix.texi:29888
#, no-wrap
msgid ""
"...\n"
"(operating-system\n"
"  ...\n"
"  (services\n"
"    (cons\n"
"      (service directory-server-service-type\n"
"               (directory-server-instance-configuration\n"
"                (slapd\n"
"                 (slapd-configuration\n"
"                  (root-password \"@{PBKDF2_SHA256@}AAAgAG@dots{}ABSOLUTELYSECRET\")))))\n"
"      %base-services)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29892
msgid "The root password should be generated with the @command{pwdhash} utility that is provided by the @code{389-ds-base} package."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:29897
msgid "Note that changes to the directory server configuration will not be applied to existing instances.  You will need to back up and restore server data manually.  Only new directory server instances will be created upon system reconfiguration."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:29899
#, fuzzy, no-wrap
msgid "{Data Type} directory-server-instance-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:29901
#, fuzzy
msgid "Available @code{directory-server-instance-configuration} fields are:"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:29903
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{package} (default: @code{389-ds-base}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29905
#, fuzzy
#| msgid "The GPM package to use."
msgid "The @code{389-ds-base} package."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:29906
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{config-version} (default: @code{2}) (type: number)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29909
msgid "Sets the format version of the configuration file.  To use the INF file with @command{dscreate}, this parameter must be 2."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29910
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{full-machine-name} (default: @code{\"localhost\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29912
msgid "Sets the fully qualified hostname (FQDN) of this system."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29913
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{selinux} (default: @code{#false}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29917
msgid "Enables SELinux detection and integration during the installation of this instance.  If set to @code{#true}, @command{dscreate} auto-detects whether SELinux is enabled."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29918
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{strict-host-checking} (default: @code{#true}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29923
msgid "Sets whether the server verifies the forward and reverse record set in the @code{full-machine-name} parameter.  When installing this instance with GSSAPI authentication behind a load balancer, set this parameter to @code{#false}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29924
#, fuzzy, no-wrap
#| msgid "@code{wait?} (default: @code{#t})"
msgid "@code{systemd} (default: @code{#false}) (type: boolean)"
msgstr "@code{wait?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29927
msgid "Enables systemd platform features.  If set to @code{#true}, @command{dscreate} auto-detects whether systemd is installed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29928
#, fuzzy, no-wrap
msgid "@code{slapd} (type: slapd-configuration)"
msgstr "build-machine {Data Type}"

#. type: table
#: guix-git/doc/guix.texi:29930
#, fuzzy
#| msgid "Configuring the boot loader."
msgid "Configuration of slapd."
msgstr "Configurando o \"bootloader\"."

#. type: deftp
#: guix-git/doc/guix.texi:29931
#, fuzzy, no-wrap
msgid "{Data Type} slapd-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:29933
#, fuzzy
msgid "Available @code{slapd-configuration} fields are:"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:29935
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{instance-name} (default: @code{\"localhost\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29939
msgid "Sets the name of the instance.  You can refer to this value in other parameters of this INF file using the @code{@{instance_name@}} variable.  Note that this name cannot be changed after the installation!"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29940
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{user} (default: @code{\"dirsrv\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29943
msgid "Sets the user name the ns-slapd process will use after the service started."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29944
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{group} (default: @code{\"dirsrv\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29947
msgid "Sets the group name the ns-slapd process will use after the service started."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29948
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{port} (default: @code{389}) (type: number)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29950
msgid "Sets the TCP port the instance uses for LDAP connections."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29951
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{secure-port} (default: @code{636}) (type: number)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29954
msgid "Sets the TCP port the instance uses for TLS-secured LDAP connections (LDAPS)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29955
#, fuzzy, no-wrap
msgid "@code{root-dn} (default: @code{\"cn=Directory Manager\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29958
msgid "Sets the @dfn{Distinquished Name} (DN) of the administrator account for this instance."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29959
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{root-password} (default: @code{\"@{invalid@}YOU-SHOULD-CHANGE-THIS\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29966
msgid "Sets the password of the account specified in the @code{root-dn} parameter.  You can either set this parameter to a plain text password @command{dscreate} hashes during the installation or to a \"@{algorithm@}hash\" string generated by the @command{pwdhash} utility.  Note that setting a plain text password can be a security risk if unprivileged users can read this INF file!"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29967
#, fuzzy, no-wrap
#| msgid "@code{wait?} (default: @code{#t})"
msgid "@code{self-sign-cert} (default: @code{#true}) (type: boolean)"
msgstr "@code{wait?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29973
msgid "Sets whether the setup creates a self-signed certificate and enables TLS encryption during the installation.  This is not suitable for production, but it enables administrators to use TLS right after the installation.  You can replace the self-signed certificate with a certificate issued by a certificate authority."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29974
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{self-sign-cert-valid-months} (default: @code{24}) (type: number)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29977
msgid "Set the number of months the issued self-signed certificate will be valid."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29978
#, fuzzy, no-wrap
msgid "@code{backup-dir} (default: @code{\"/var/lib/dirsrv/slapd-@{instance_name@}/bak\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29980
msgid "Set the backup directory of the instance."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29981
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{cert-dir} (default: @code{\"/etc/dirsrv/slapd-@{instance_name@}\"}) (type: string)"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29984
msgid "Sets the directory of the instance's Network Security Services (NSS)  database."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29985
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{config-dir} (default: @code{\"/etc/dirsrv/slapd-@{instance_name@}\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29987
#, fuzzy
msgid "Sets the configuration directory of the instance."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:29988
#, fuzzy, no-wrap
msgid "@code{db-dir} (default: @code{\"/var/lib/dirsrv/slapd-@{instance_name@}/db\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29990
msgid "Sets the database directory of the instance."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29991
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{initconfig-dir} (default: @code{\"/etc/dirsrv/registry\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:29993
#, fuzzy
#| msgid "Manage the operating system configuration."
msgid "Sets the directory of the operating system's rc configuration directory."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:29994
#, fuzzy, no-wrap
msgid "@code{ldif-dir} (default: @code{\"/var/lib/dirsrv/slapd-@{instance_name@}/ldif\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29996
msgid "Sets the LDIF export and import directory of the instance."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:29997
#, fuzzy, no-wrap
msgid "@code{lock-dir} (default: @code{\"/var/lock/dirsrv/slapd-@{instance_name@}\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:29999
msgid "Sets the lock directory of the instance."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30000
#, fuzzy, no-wrap
msgid "@code{log-dir} (default: @code{\"/var/log/dirsrv/slapd-@{instance_name@}\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:30002
msgid "Sets the log directory of the instance."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30003
#, fuzzy, no-wrap
msgid "@code{run-dir} (default: @code{\"/run/dirsrv\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:30005
msgid "Sets PID directory of the instance."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30006
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{schema-dir} (default: @code{\"/etc/dirsrv/slapd-@{instance_name@}/schema\"}) (type: string)"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:30008
msgid "Sets schema directory of the instance."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30009
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{tmp-dir} (default: @code{\"/tmp\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:30011
msgid "Sets the temporary directory of the instance."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30014
#, fuzzy, no-wrap
msgid "@code{backend-userroot} (type: backend-userroot-configuration)"
msgstr "build-machine {Data Type}"

#. type: table
#: guix-git/doc/guix.texi:30016
#, fuzzy
#| msgid "Configuring the boot loader."
msgid "Configuration of the userroot backend."
msgstr "Configurando o \"bootloader\"."

#. type: deftp
#: guix-git/doc/guix.texi:30017
#, fuzzy, no-wrap
msgid "{Data Type} backend-userroot-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:30019
#, fuzzy
msgid "Available @code{backend-userroot-configuration} fields are:"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:30021
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{create-suffix-entry?} (default: @code{#false}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:30024
msgid "Set this parameter to @code{#true} to create a generic root node entry for the suffix in the database."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30025
#, fuzzy, no-wrap
#| msgid "@code{wait?} (default: @code{#t})"
msgid "@code{require-index?} (default: @code{#false}) (type: boolean)"
msgstr "@code{wait?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:30028
msgid "Set this parameter to @code{#true} to refuse unindexed searches in this database."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30029
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{sample-entries} (default: @code{\"no\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:30034
msgid "Set this parameter to @code{\"yes\"} to add latest version of sample entries to this database.  Or, use @code{\"001003006\"} to use the 1.3.6 version sample entries.  Use this option, for example, to create a database for testing purposes."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30035
#, fuzzy, no-wrap
msgid "@code{suffix} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:30040
msgid "Sets the root suffix stored in this database.  If you do not set the suffix attribute the install process will not create the backend/suffix.  You can also create multiple backends/suffixes by duplicating this section."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:30050
#, no-wrap
msgid "web"
msgstr "web"

#. type: cindex
#: guix-git/doc/guix.texi:30051
#, no-wrap
msgid "www"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:30052
#, no-wrap
msgid "HTTP"
msgstr "HTTP"

#. type: Plain text
#: guix-git/doc/guix.texi:30055
msgid "The @code{(gnu services web)} module provides the Apache HTTP Server, the nginx web server, and also a fastcgi wrapper daemon."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:30056
#, no-wrap
msgid "Apache HTTP Server"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:30058
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "httpd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:30062
msgid "Service type for the @uref{https://httpd.apache.org/,Apache HTTP} server (@dfn{httpd}).  The value for this service type is a @code{httpd-configuration} record."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:30064 guix-git/doc/guix.texi:30246
msgid "A simple example configuration is given below."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30072
#, no-wrap
msgid ""
"(service httpd-service-type\n"
"         (httpd-configuration\n"
"           (config\n"
"             (httpd-config-file\n"
"               (server-name \"www.example.com\")\n"
"               (document-root \"/srv/http/www.example.com\")))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:30076
msgid "Other services can also extend the @code{httpd-service-type} to add to the configuration."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30085 guix-git/doc/guix.texi:30225
#, no-wrap
msgid ""
"(simple-service 'www.example.com-server httpd-service-type\n"
"                (list\n"
"                  (httpd-virtualhost\n"
"                    \"*:80\"\n"
"                    (list (string-join '(\"ServerName www.example.com\"\n"
"                                          \"DocumentRoot /srv/http/www.example.com\")\n"
"                                       \"\\n\")))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:30091
msgid "The details for the @code{httpd-configuration}, @code{httpd-module}, @code{httpd-config-file} and @code{httpd-virtualhost} record types are given below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30092
#, no-wrap
msgid "{Data Type} httpd-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30094
msgid "This data type represents the configuration for the httpd service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30096
#, no-wrap
msgid "@code{package} (default: @code{httpd})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30098
msgid "The httpd package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30099 guix-git/doc/guix.texi:30188
#, no-wrap
msgid "@code{pid-file} (default: @code{\"/var/run/httpd\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30101
msgid "The pid file used by the shepherd-service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30102
#, no-wrap
msgid "@code{config} (default: @code{(httpd-config-file)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30107
msgid "The configuration file to use with the httpd service.  The default value is a @code{httpd-config-file} record, but this can also be a different G-expression that generates a file, for example a @code{plain-file}.  A file outside of the store can also be specified through a string."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30111
#, no-wrap
msgid "{Data Type} httpd-module"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30113
msgid "This data type represents a module for the httpd service."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30117
msgid "The name of the module."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30123
msgid "The file for the module.  This can be relative to the httpd package being used, the absolute location of a file, or a G-expression for a file within the store, for example @code{(file-append mod-wsgi \"/modules/mod_wsgi.so\")}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:30127
#, no-wrap
msgid "%default-httpd-modules"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:30129
msgid "A default list of @code{httpd-module} objects."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30131
#, no-wrap
msgid "{Data Type} httpd-config-file"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30133
msgid "This data type represents a configuration file for the httpd service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30135
#, no-wrap
msgid "@code{modules} (default: @code{%default-httpd-modules})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30138
msgid "The modules to load.  Additional modules can be added here, or loaded by additional configuration."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30141
msgid "For example, in order to handle requests for PHP files, you can use Apache’s @code{mod_proxy_fcgi} module along with @code{php-fpm-service-type}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30163
#, no-wrap
msgid ""
"(service httpd-service-type\n"
"         (httpd-configuration\n"
"          (config\n"
"           (httpd-config-file\n"
"            (modules (cons*\n"
"                      (httpd-module\n"
"                       (name \"proxy_module\")\n"
"                       (file \"modules/mod_proxy.so\"))\n"
"                      (httpd-module\n"
"                       (name \"proxy_fcgi_module\")\n"
"                       (file \"modules/mod_proxy_fcgi.so\"))\n"
"                      %default-httpd-modules))\n"
"            (extra-config (list \"\\\n"
"<FilesMatch \\\\.php$>\n"
"    SetHandler \\\"proxy:unix:/var/run/php-fpm.sock|fcgi://localhost/\\\"\n"
"</FilesMatch>\"))))))\n"
"(service php-fpm-service-type\n"
"         (php-fpm-configuration\n"
"          (socket \"/var/run/php-fpm.sock\")\n"
"          (socket-group \"httpd\")))\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30165
#, no-wrap
msgid "@code{server-root} (default: @code{httpd})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30169
msgid "The @code{ServerRoot} in the configuration file, defaults to the httpd package.  Directives including @code{Include} and @code{LoadModule} are taken as relative to the server root."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30170
#, no-wrap
msgid "@code{server-name} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30174
msgid "The @code{ServerName} in the configuration file, used to specify the request scheme, hostname and port that the server uses to identify itself."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30178
msgid "This doesn't need to be set in the server config, and can be specified in virtual hosts.  The default is @code{#f} to not specify a @code{ServerName}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30179
#, no-wrap
msgid "@code{document-root} (default: @code{\"/srv/http\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30181
msgid "The @code{DocumentRoot} from which files will be served."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30182
#, no-wrap
msgid "@code{listen} (default: @code{'(\"80\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30187
msgid "The list of values for the @code{Listen} directives in the config file.  The value should be a list of strings, when each string can specify the port number to listen on, and optionally the IP address and protocol to use."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30192
msgid "The @code{PidFile} to use.  This should match the @code{pid-file} set in the @code{httpd-configuration} so that the Shepherd service is configured correctly."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30193
#, no-wrap
msgid "@code{error-log} (default: @code{\"/var/log/httpd/error_log\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30195
msgid "The @code{ErrorLog} to which the server will log errors."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30196 guix-git/doc/guix.texi:30775
#, no-wrap
msgid "@code{user} (default: @code{\"httpd\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30198
msgid "The @code{User} which the server will answer requests as."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30199
#, no-wrap
msgid "@code{group} (default: @code{\"httpd\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30201
msgid "The @code{Group} which the server will answer requests as."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30202
#, no-wrap
msgid "@code{extra-config} (default: @code{(list \"TypesConfig etc/httpd/mime.types\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30205
msgid "A flat list of strings and G-expressions which will be added to the end of the configuration file."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30208
msgid "Any values which the service is extended with will be appended to this list."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30212
#, no-wrap
msgid "{Data Type} httpd-virtualhost"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30214
msgid "This data type represents a virtualhost configuration block for the httpd service."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30216
msgid "These should be added to the extra-config for the httpd-service."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30228
#, no-wrap
msgid "addresses-and-ports"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30230
msgid "The addresses and ports for the @code{VirtualHost} directive."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30231
#, no-wrap
msgid "contents"
msgstr "conteúdo"

#. type: table
#: guix-git/doc/guix.texi:30234
msgid "The contents of the @code{VirtualHost} directive, this should be a list of strings and G-expressions."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:30239
#, no-wrap
msgid "NGINX"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:30241
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "nginx-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:30244
msgid "Service type for the @uref{https://nginx.org/,NGinx} web server.  The value for this service type is a @code{<nginx-configuration>} record."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30254 guix-git/doc/guix.texi:30321
#, no-wrap
msgid ""
"(service nginx-service-type\n"
"         (nginx-configuration\n"
"           (server-blocks\n"
"             (list (nginx-server-configuration\n"
"                     (server-name '(\"www.example.com\"))\n"
"                     (root \"/srv/http/www.example.com\"))))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:30259
msgid "In addition to adding server blocks to the service configuration directly, this service can be extended by other services to add server blocks, as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30265
#, no-wrap
msgid ""
"(simple-service 'my-extra-server nginx-service-type\n"
"                (list (nginx-server-configuration\n"
"                        (root \"/srv/http/extra-website\")\n"
"                        (try-files (list \"$uri\" \"$uri/index.html\")))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:30276
msgid "At startup, @command{nginx} has not yet read its configuration file, so it uses a default file to log error messages.  If it fails to load its configuration file, that is where error messages are logged.  After the configuration file is loaded, the default error log file changes as per configuration.  In our case, startup error messages can be found in @file{/var/run/nginx/logs/error.log}, and after configuration in @file{/var/log/nginx/error.log}.  The second location can be changed with the @var{log-directory} configuration option."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30277
#, no-wrap
msgid "{Data Type} nginx-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30281
msgid "This data type represents the configuration for NGinx.  Some configuration can be done through this and the other provided record types, or alternatively, a config file can be provided."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30283
#, no-wrap
msgid "@code{nginx} (default: @code{nginx})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30285
msgid "The nginx package to use."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30289
msgid "This is a list of symbols naming Shepherd services the nginx service will depend on."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30293
msgid "This is useful if you would like @command{nginx} to be started after a back-end web server or a logging service such as Anonip has been started."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30294
#, no-wrap
msgid "@code{log-directory} (default: @code{\"/var/log/nginx\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30296
msgid "The directory to which NGinx will write log files."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30297
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{log-level} (default: @code{'error}) (type: symbol)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:30301
msgid "Logging level, which can be any of the following values: @code{'debug}, @code{'info}, @code{'notice}, @code{'warn}, @code{'error}, @code{'crit}, @code{'alert}, or @code{'emerg}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30302
#, no-wrap
msgid "@code{run-directory} (default: @code{\"/var/run/nginx\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30305
msgid "The directory in which NGinx will create a pid file, and write temporary files."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30306
#, no-wrap
msgid "@code{server-blocks} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30310
msgid "A list of @dfn{server blocks} to create in the generated configuration file, the elements should be of type @code{<nginx-server-configuration>}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30314
msgid "The following example would setup NGinx to serve @code{www.example.com} from the @code{/srv/http/www.example.com} directory, without using HTTPS."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30323
#, no-wrap
msgid "@code{upstream-blocks} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30327
msgid "A list of @dfn{upstream blocks} to create in the generated configuration file, the elements should be of type @code{<nginx-upstream-configuration>}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30334
msgid "Configuring upstreams through the @code{upstream-blocks} can be useful when combined with @code{locations} in the @code{<nginx-server-configuration>} records.  The following example creates a server configuration with one location configuration, that will proxy requests to a upstream configuration, which will handle requests with two servers."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30353
#, no-wrap
msgid ""
"(service\n"
"  nginx-service-type\n"
"  (nginx-configuration\n"
"    (server-blocks\n"
"      (list (nginx-server-configuration\n"
"              (server-name '(\"www.example.com\"))\n"
"              (root \"/srv/http/www.example.com\")\n"
"              (locations\n"
"                (list\n"
"                  (nginx-location-configuration\n"
"                  (uri \"/path1\")\n"
"                  (body '(\"proxy_pass http://server-proxy;\"))))))))\n"
"    (upstream-blocks\n"
"      (list (nginx-upstream-configuration\n"
"              (name \"server-proxy\")\n"
"              (servers (list \"server1.example.com\"\n"
"                             \"server2.example.com\")))))))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30361
msgid "If a configuration @var{file} is provided, this will be used, rather than generating a configuration file from the provided @code{log-directory}, @code{run-directory}, @code{server-blocks} and @code{upstream-blocks}.  For proper operation, these arguments should match what is in @var{file} to ensure that the directories are created when the service is activated."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30365
msgid "This can be useful if you have an existing configuration file, or it's not possible to do what is required through the other parts of the nginx-configuration record."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30366
#, no-wrap
msgid "@code{server-names-hash-bucket-size} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30369
msgid "Bucket size for the server names hash tables, defaults to @code{#f} to use the size of the processors cache line."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30370
#, no-wrap
msgid "@code{server-names-hash-bucket-max-size} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30372
msgid "Maximum bucket size for the server names hash tables."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30376
msgid "List of nginx dynamic modules to load.  This should be a list of file names of loadable modules, as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30384
#, no-wrap
msgid ""
"(modules\n"
" (list\n"
"  (file-append nginx-accept-language-module \"\\\n"
"/etc/nginx/modules/ngx_http_accept_language_module.so\")\n"
"  (file-append nginx-lua-module \"\\\n"
"/etc/nginx/modules/ngx_http_lua_module.so\")))\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30386
#, no-wrap
msgid "@code{lua-package-path} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30389
msgid "List of nginx lua packages to load.  This should be a list of package names of loadable lua modules, as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30396
#, no-wrap
msgid ""
"(lua-package-path (list lua-resty-core\n"
"                        lua-resty-lrucache\n"
"                        lua-resty-signal\n"
"                        lua-tablepool\n"
"                        lua-resty-shell))\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30398
#, no-wrap
msgid "@code{lua-package-cpath} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30401
msgid "List of nginx lua C packages to load.  This should be a list of package names of loadable lua C modules, as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30404
#, no-wrap
msgid "(lua-package-cpath (list lua-resty-signal))\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30406
#, no-wrap
msgid "@code{global-directives} (default: @code{'((events . ()))})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30409
msgid "Association list of global directives for the top level of the nginx configuration.  Values may themselves be association lists."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30415
#, no-wrap
msgid ""
"(global-directives\n"
" `((worker_processes . 16)\n"
"   (pcre_jit . on)\n"
"   (events . ((worker_connections . 1024)))))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30420
msgid "Extra content for the @code{http} block.  Should be string or a string valued G-expression."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:30425
#, fuzzy
msgid "nginx-server-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:30425
#, no-wrap
msgid "{Data Type} nginx-server-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30428
msgid "Data type representing the configuration of an nginx server block.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30430
#, no-wrap
msgid "@code{listen} (default: @code{'(\"80\" \"443 ssl\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30435
msgid "Each @code{listen} directive sets the address and port for IP, or the path for a UNIX-domain socket on which the server will accept requests.  Both address and port, or only address or only port can be specified.  An address may also be a hostname, for example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30438
#, no-wrap
msgid "'(\"127.0.0.1:8000\" \"127.0.0.1\" \"8000\" \"*:8000\" \"localhost:8000\")\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30440
#, no-wrap
msgid "@code{server-name} (default: @code{(list 'default)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30443
msgid "A list of server names this server represents. @code{'default} represents the default server for connections matching no other server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30444
#, no-wrap
msgid "@code{root} (default: @code{\"/srv/http\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30446
msgid "Root of the website nginx will serve."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30447
#, no-wrap
msgid "@code{locations} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30451
msgid "A list of @dfn{nginx-location-configuration} or @dfn{nginx-named-location-configuration} records to use within this server block."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30452
#, no-wrap
msgid "@code{index} (default: @code{(list \"index.html\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30455
msgid "Index files to look for when clients ask for a directory.  If it cannot be found, Nginx will send the list of files in the directory."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30456
#, no-wrap
msgid "@code{try-files} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30459
msgid "A list of files whose existence is checked in the specified order.  @code{nginx} will use the first file it finds to process the request."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30460
#, no-wrap
msgid "@code{ssl-certificate} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30463
msgid "Where to find the certificate for secure connections.  Set it to @code{#f} if you don't have a certificate or you don't want to use HTTPS."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30464
#, no-wrap
msgid "@code{ssl-certificate-key} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30467
msgid "Where to find the private key for secure connections.  Set it to @code{#f} if you don't have a key or you don't want to use HTTPS."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30468
#, no-wrap
msgid "@code{server-tokens?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30470
msgid "Whether the server should add its configuration to response."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30471
#, no-wrap
msgid "@code{raw-content} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30473
msgid "A list of raw lines added to the server block."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30477
#, no-wrap
msgid "{Data Type} nginx-upstream-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30480
msgid "Data type representing the configuration of an nginx @code{upstream} block.  This type has the following parameters:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30484
msgid "Name for this group of servers."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30485
#, no-wrap
msgid "servers"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30492
msgid "Specify the addresses of the servers in the group.  The address can be specified as a IP address (e.g.@: @samp{127.0.0.1}), domain name (e.g.@: @samp{backend1.example.com}) or a path to a UNIX socket using the prefix @samp{unix:}.  For addresses using an IP address or domain name, the default port is 80, and a different port can be specified explicitly."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30493
#, fuzzy, no-wrap
#| msgid "contents"
msgid "extra-content"
msgstr "conteúdo"

#. type: table
#: guix-git/doc/guix.texi:30495
msgid "A string or list of strings to add to the upstream block."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30499
#, no-wrap
msgid "{Data Type} nginx-location-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30502
msgid "Data type representing the configuration of an nginx @code{location} block.  This type has the following parameters:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30506
msgid "URI which this location block matches."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:30508
msgid "nginx-location-configuration body"
msgstr "nginx-location-configuration body"

#. type: code{#1}
#: guix-git/doc/guix.texi:30508 guix-git/doc/guix.texi:30529
#, no-wrap
msgid "body"
msgstr "corpo"

#. type: table
#: guix-git/doc/guix.texi:30515
msgid "Body of the location block, specified as a list of strings.  This can contain many configuration directives.  For example, to pass requests to a upstream server group defined using an @code{nginx-upstream-configuration} block, the following directive would be specified in the body @samp{(list \"proxy_pass http://upstream-name;\")}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30519
#, no-wrap
msgid "{Data Type} nginx-named-location-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30524
msgid "Data type representing the configuration of an nginx named location block.  Named location blocks are used for request redirection, and not used for regular request processing.  This type has the following parameters:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30528
msgid "Name to identify this location block."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30534
msgid "@xref{nginx-location-configuration body}, as the body for named location blocks can be used in a similar way to the @code{nginx-location-configuration body}.  One restriction is that the body of a named location block cannot contain location blocks."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:30538
#, no-wrap
msgid "Varnish Cache"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:30539
#, no-wrap
msgid "Varnish"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:30544
msgid "Varnish is a fast cache server that sits in between web applications and end users.  It proxies requests from clients and caches the accessed URLs such that multiple requests for the same resource only creates one request to the back-end."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:30545
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "varnish-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:30547
msgid "Service type for the Varnish daemon."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30549
#, no-wrap
msgid "{Data Type} varnish-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30552
msgid "Data type representing the @code{varnish} service configuration.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30554
#, no-wrap
msgid "@code{package} (default: @code{varnish})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30556
msgid "The Varnish package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30557
#, no-wrap
msgid "@code{name} (default: @code{\"default\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30562
msgid "A name for this Varnish instance.  Varnish will create a directory in @file{/var/varnish/} with this name and keep temporary files there.  If the name starts with a forward slash, it is interpreted as an absolute directory name."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30565
msgid "Pass the @code{-n} argument to other Varnish programs to connect to the named instance, e.g.@: @command{varnishncsa -n default}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30566
#, no-wrap
msgid "@code{backend} (default: @code{\"localhost:8080\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30568
msgid "The backend to use.  This option has no effect if @code{vcl} is set."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30569
#, no-wrap
msgid "@code{vcl} (default: #f)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30574
msgid "The @dfn{VCL} (Varnish Configuration Language) program to run.  If this is @code{#f}, Varnish will proxy @code{backend} using the default configuration.  Otherwise this must be a file-like object with valid VCL syntax."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30578
msgid "For example, to mirror @url{https://www.gnu.org,www.gnu.org} with VCL you can do something along these lines:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30584
#, no-wrap
msgid ""
"(define %gnu-mirror\n"
"  (plain-file \"gnu.vcl\"\n"
"              \"vcl 4.1;\n"
"backend gnu @{ .host = \\\"www.gnu.org\\\"; @}\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30592
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (services (cons (service varnish-service-type\n"
"                           (varnish-configuration\n"
"                            (listen '(\":80\"))\n"
"                            (vcl %gnu-mirror)))\n"
"                  %base-services)))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30596
msgid "The configuration of an already running Varnish instance can be inspected and changed using the @command{varnishadm} program."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30600
msgid "Consult the @url{https://varnish-cache.org/docs/,Varnish User Guide} and @url{https://book.varnish-software.com/4.0/,Varnish Book} for comprehensive documentation on Varnish and its configuration language."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30601
#, no-wrap
msgid "@code{listen} (default: @code{'(\"localhost:80\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30603
msgid "List of addresses Varnish will listen on."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30604
#, no-wrap
msgid "@code{storage} (default: @code{'(\"malloc,128m\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30606
msgid "List of storage backends that will be available in VCL."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30607
#, no-wrap
msgid "@code{parameters} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30609
msgid "List of run-time parameters in the form @code{'((\"parameter\" . \"value\"))}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30612
msgid "Additional arguments to pass to the @command{varnishd} process."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:30616 guix-git/doc/guix.texi:30617
#, no-wrap
msgid "Patchwork"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:30620
msgid "Patchwork is a patch tracking system.  It can collect patches sent to a mailing list, and display them in a web interface."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:30621
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "patchwork-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:30623
msgid "Service type for Patchwork."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:30627
msgid "The following example is an example of a minimal service for Patchwork, for the @code{patchwork.example.com} domain."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30647
#, no-wrap
msgid ""
"(service patchwork-service-type\n"
"         (patchwork-configuration\n"
"          (domain \"patchwork.example.com\")\n"
"          (settings-module\n"
"           (patchwork-settings-module\n"
"            (allowed-hosts (list domain))\n"
"            (default-from-email \"patchwork@@patchwork.example.com\")))\n"
"          (getmail-retriever-config\n"
"           (getmail-retriever-configuration\n"
"            (type \"SimpleIMAPSSLRetriever\")\n"
"            (server \"imap.example.com\")\n"
"            (port 993)\n"
"            (username \"patchwork\")\n"
"            (password-command\n"
"             (list (file-append coreutils \"/bin/cat\")\n"
"                   \"/etc/getmail-patchwork-imap-password\"))\n"
"            (extra-parameters\n"
"            '((mailboxes . (\"Patches\"))))))))\n"
"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:30653
msgid "There are three records for configuring the Patchwork service.  The @code{<patchwork-configuration>} relates to the configuration for Patchwork within the HTTPD service."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:30657
msgid "The @code{settings-module} field within the @code{<patchwork-configuration>} record can be populated with the @code{<patchwork-settings-module>} record, which describes a settings module that is generated within the Guix store."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:30661
msgid "For the @code{database-configuration} field within the @code{<patchwork-settings-module>}, the @code{<patchwork-database-configuration>} must be used."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30662
#, no-wrap
msgid "{Data Type} patchwork-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30665
msgid "Data type representing the Patchwork service configuration.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30667
#, no-wrap
msgid "@code{patchwork} (default: @code{patchwork})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30669
msgid "The Patchwork package to use."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30670
#, no-wrap
msgid "domain"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30673
msgid "The domain to use for Patchwork, this is used in the HTTPD service virtual host."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30674
#, no-wrap
msgid "settings-module"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30680
msgid "The settings module to use for Patchwork.  As a Django application, Patchwork is configured with a Python module containing the settings.  This can either be an instance of the @code{<patchwork-settings-module>} record, any other record that represents the settings in the store, or a directory outside of the store."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30681
#, no-wrap
msgid "@code{static-path}  (default: @code{\"/static/\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30683
msgid "The path under which the HTTPD service should serve the static files."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30684
#, no-wrap
msgid "getmail-retriever-config"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30688
msgid "The getmail-retriever-configuration record value to use with Patchwork.  Getmail will be configured with this value, the messages will be delivered to Patchwork."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30692
#, no-wrap
msgid "{Data Type} patchwork-settings-module"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30697
msgid "Data type representing a settings module for Patchwork.  Some of these settings relate directly to Patchwork, but others relate to Django, the web framework used by Patchwork, or the Django Rest Framework library.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30699
#, no-wrap
msgid "@code{database-configuration} (default: @code{(patchwork-database-configuration)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30702
msgid "The database connection settings used for Patchwork.  See the @code{<patchwork-database-configuration>} record type for more information."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30703
#, no-wrap
msgid "@code{secret-key-file} (default: @code{\"/etc/patchwork/django-secret-key\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30706
msgid "Patchwork, as a Django web application uses a secret key for cryptographically signing values.  This file should contain a unique unpredictable value."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30709
msgid "If this file does not exist, it will be created and populated with a random value by the patchwork-setup shepherd service."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30711
msgid "This setting relates to Django."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30712
#, no-wrap
msgid "allowed-hosts"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30715
msgid "A list of valid hosts for this Patchwork service.  This should at least include the domain specified in the @code{<patchwork-configuration>} record."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30717 guix-git/doc/guix.texi:30731
#: guix-git/doc/guix.texi:30737 guix-git/doc/guix.texi:30743
msgid "This is a Django setting."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30718
#, no-wrap
msgid "default-from-email"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30720
msgid "The email address from which Patchwork should send email by default."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30722 guix-git/doc/guix.texi:30748
#: guix-git/doc/guix.texi:30753 guix-git/doc/guix.texi:30758
msgid "This is a Patchwork setting."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30723
#, no-wrap
msgid "@code{static-url} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30726
msgid "The URL to use when serving static assets.  It can be part of a URL, or a full URL, but must end in a @code{/}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30729
msgid "If the default value is used, the @code{static-path} value from the @code{<patchwork-configuration>} record will be used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30732
#, no-wrap
msgid "@code{admins} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30735
msgid "Email addresses to send the details of errors that occur.  Each value should be a list containing two elements, the name and then the email address."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30741
msgid "Whether to run Patchwork in debug mode.  If set to @code{#t}, detailed error messages will be shown."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30744
#, no-wrap
msgid "@code{enable-rest-api?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30746
msgid "Whether to enable the Patchwork REST API."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30749
#, no-wrap
msgid "@code{enable-xmlrpc?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30751
msgid "Whether to enable the XML RPC API."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30754
#, no-wrap
msgid "@code{force-https-links?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30756
msgid "Whether to use HTTPS links on Patchwork pages."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30761
msgid "Extra code to place at the end of the Patchwork settings module."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30765
#, no-wrap
msgid "{Data Type} patchwork-database-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30767
msgid "Data type representing the database configuration for Patchwork."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30769
#, no-wrap
msgid "@code{engine} (default: @code{\"django.db.backends.postgresql_psycopg2\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30771
msgid "The database engine to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30772
#, no-wrap
msgid "@code{name} (default: @code{\"patchwork\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30774
msgid "The name of the database to use."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30777
msgid "The user to connect to the database as."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30778
#, no-wrap
msgid "@code{password} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30780
msgid "The password to use when connecting to the database."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30781
#, no-wrap
msgid "@code{host} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30783
msgid "The host to make the database connection to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30784
#, no-wrap
msgid "@code{port} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30786
msgid "The port on which to connect to the database."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:30790
#, no-wrap
msgid "Mumi"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:30792
#, no-wrap
msgid "Mumi, Debbugs Web interface"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:30793
#, no-wrap
msgid "Debbugs, Mumi Web interface"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:30798
msgid "@uref{https://git.elephly.net/gitweb.cgi?p=software/mumi.git, Mumi} is a Web interface to the Debbugs bug tracker, by default for @uref{https://bugs.gnu.org, the GNU instance}.  Mumi is a Web server, but it also fetches and indexes mail retrieved from Debbugs."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:30799
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "mumi-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:30801
msgid "This is the service type for Mumi."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30803
#, no-wrap
msgid "{Data Type} mumi-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30806
msgid "Data type representing the Mumi service configuration.  This type has the following fields:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30808
#, no-wrap
msgid "@code{mumi} (default: @code{mumi})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30810
msgid "The Mumi package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30811
#, no-wrap
msgid "@code{mailer?} (default: @code{#true})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30813
msgid "Whether to enable or disable the mailer component."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30814
#, no-wrap
msgid "mumi-configuration-sender"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30816
msgid "The email address used as the sender for comments."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30817
#, no-wrap
msgid "mumi-configuration-smtp"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30822
msgid "A URI to configure the SMTP settings for Mailutils.  This could be something like @code{sendmail:///path/to/bin/msmtp} or any other URI supported by Mailutils.  @xref{SMTP Mailboxes, SMTP Mailboxes,, mailutils, GNU@tie{}Mailutils}."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:30827
#, no-wrap
msgid "FastCGI"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:30828
#, no-wrap
msgid "fastcgi"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:30829
#, no-wrap
msgid "fcgiwrap"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:30836
msgid "FastCGI is an interface between the front-end and the back-end of a web service.  It is a somewhat legacy facility; new web services should generally just talk HTTP between the front-end and the back-end.  However there are a number of back-end services such as PHP or the optimized HTTP Git repository access that use FastCGI, so we have support for it in Guix."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:30843
msgid "To use FastCGI, you configure the front-end web server (e.g., nginx) to dispatch some subset of its requests to the fastcgi backend, which listens on a local TCP or UNIX socket.  There is an intermediary @code{fcgiwrap} program that sits between the actual backend process and the web server.  The front-end indicates which backend program to run, passing that information to the @code{fcgiwrap} process."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:30844
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "fcgiwrap-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:30846
msgid "A service type for the @code{fcgiwrap} FastCGI proxy."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30848
#, no-wrap
msgid "{Data Type} fcgiwrap-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30851
msgid "Data type representing the configuration of the @code{fcgiwrap} service.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30852
#, no-wrap
msgid "@code{package} (default: @code{fcgiwrap})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30854
msgid "The fcgiwrap package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30855
#, no-wrap
msgid "@code{socket} (default: @code{tcp:127.0.0.1:9000})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30861
msgid "The socket on which the @code{fcgiwrap} process should listen, as a string.  Valid @var{socket} values include @code{unix:@var{/path/to/unix/socket}}, @code{tcp:@var{dot.ted.qu.ad}:@var{port}} and @code{tcp6:[@var{ipv6_addr}]:port}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30862
#, no-wrap
msgid "@code{user} (default: @code{fcgiwrap})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:30863
#, no-wrap
msgid "@code{group} (default: @code{fcgiwrap})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30868
msgid "The user and group names, as strings, under which to run the @code{fcgiwrap} process.  The @code{fastcgi} service will ensure that if the user asks for the specific user or group names @code{fcgiwrap} that the corresponding user and/or group is present on the system."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30875
msgid "It is possible to configure a FastCGI-backed web service to pass HTTP authentication information from the front-end to the back-end, and to allow @code{fcgiwrap} to run the back-end process as a corresponding local user.  To enable this capability on the back-end, run @code{fcgiwrap} as the @code{root} user and group.  Note that this capability also has to be configured on the front-end as well."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:30879
#, no-wrap
msgid "PHP-FPM"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:30880
#, no-wrap
msgid "php-fpm"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:30883
msgid "PHP-FPM (FastCGI Process Manager) is an alternative PHP FastCGI implementation with some additional features useful for sites of any size."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:30885
msgid "These features include:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30886
#, no-wrap
msgid "Adaptive process spawning"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30887
#, no-wrap
msgid "Basic statistics (similar to Apache's mod_status)"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30888
#, no-wrap
msgid "Advanced process management with graceful stop/start"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30889
#, no-wrap
msgid "Ability to start workers with different uid/gid/chroot/environment"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:30891
msgid "and different php.ini (replaces safe_mode)"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30891
#, no-wrap
msgid "Stdout & stderr logging"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30892
#, no-wrap
msgid "Emergency restart in case of accidental opcode cache destruction"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30893
#, no-wrap
msgid "Accelerated upload support"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30894
#, no-wrap
msgid "Support for a \"slowlog\""
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30895
#, no-wrap
msgid "Enhancements to FastCGI, such as fastcgi_finish_request() -"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:30898
msgid "a special function to finish request & flush all data while continuing to do something time-consuming (video converting, stats processing, etc.)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:30900
msgid "...@: and much more."
msgstr "...@: e muito mais."

#. type: defvar
#: guix-git/doc/guix.texi:30901
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "php-fpm-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:30903
msgid "A Service type for @code{php-fpm}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30905
#, no-wrap
msgid "{Data Type} php-fpm-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30907
msgid "Data Type for php-fpm service configuration."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30908
#, no-wrap
msgid "@code{php} (default: @code{php})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30910
msgid "The php package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30910
#, no-wrap
msgid "@code{socket} (default: @code{(string-append \"/var/run/php\" (version-major (package-version php)) \"-fpm.sock\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30912
msgid "The address on which to accept FastCGI requests.  Valid syntaxes are:"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30913
#, no-wrap
msgid "\"ip.add.re.ss:port\""
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30915
msgid "Listen on a TCP socket to a specific address on a specific port."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30915
#, no-wrap
msgid "\"port\""
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30917
msgid "Listen on a TCP socket to all addresses on a specific port."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30917
#, no-wrap
msgid "\"/path/to/unix/socket\""
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30919
msgid "Listen on a unix socket."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30921
#, no-wrap
msgid "@code{user} (default: @code{php-fpm})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30923
msgid "User who will own the php worker processes."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30923
#, no-wrap
msgid "@code{group} (default: @code{php-fpm})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30925
msgid "Group of the worker processes."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30925
#, no-wrap
msgid "@code{socket-user} (default: @code{php-fpm})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30927
msgid "User who can speak to the php-fpm socket."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30927
#, no-wrap
msgid "@code{socket-group} (default: @code{nginx})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30929
msgid "Group that can speak to the php-fpm socket."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30929
#, no-wrap
msgid "@code{pid-file} (default: @code{(string-append \"/var/run/php\" (version-major (package-version php)) \"-fpm.pid\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30932
msgid "The process id of the php-fpm process is written to this file once the service has started."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30932
#, no-wrap
msgid "@code{log-file} (default: @code{(string-append \"/var/log/php\" (version-major (package-version php)) \"-fpm.log\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30934
msgid "Log for the php-fpm master process."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30934
#, no-wrap
msgid "@code{process-manager} (default: @code{(php-fpm-dynamic-process-manager-configuration)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30937
msgid "Detailed settings for the php-fpm process manager.  Must be one of:"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30938
#, no-wrap
msgid "<php-fpm-dynamic-process-manager-configuration>"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30939
#, no-wrap
msgid "<php-fpm-static-process-manager-configuration>"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:30940
#, no-wrap
msgid "<php-fpm-on-demand-process-manager-configuration>"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30942
#, no-wrap
msgid "@code{display-errors} (default @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30947
msgid "Determines whether php errors and warning should be sent to clients and displayed in their browsers.  This is useful for local php development, but a security risk for public sites, as error messages can reveal passwords and personal data."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30947
#, no-wrap
msgid "@code{timezone} (default @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30949
msgid "Specifies @code{php_admin_value[date.timezone]} parameter."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30949
#, no-wrap
msgid "@code{workers-logfile} (default @code{(string-append \"/var/log/php\" (version-major (package-version php)) \"-fpm.www.log\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30952
msgid "This file will log the @code{stderr} outputs of php worker processes.  Can be set to @code{#f} to disable logging."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30952
#, no-wrap
msgid "@code{file} (default @code{#f})"
msgstr "@code{file} (default @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:30955
msgid "An optional override of the whole configuration.  You can use the @code{mixed-text-file} function or an absolute filepath for it."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30955
#, no-wrap
msgid "@code{php-ini-file} (default @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30959
msgid "An optional override of the default php settings.  It may be any ``file-like'' object (@pxref{G-Expressions, file-like objects}).  You can use the @code{mixed-text-file} function or an absolute filepath for it."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30963
msgid "For local development it is useful to set a higher timeout and memory limit for spawned php processes.  This be accomplished with the following operating system configuration snippet:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30968
#, no-wrap
msgid ""
"(define %local-php-ini\n"
"  (plain-file \"php.ini\"\n"
"              \"memory_limit = 2G\n"
"max_execution_time = 1800\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:30975
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (services (cons (service php-fpm-service-type\n"
"                           (php-fpm-configuration\n"
"                            (php-ini-file %local-php-ini)))\n"
"                  %base-services)))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30980
msgid "Consult the @url{https://www.php.net/manual/en/ini.core.php,core php.ini directives} for comprehensive documentation on the acceptable @file{php.ini} directives."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30983
#, no-wrap
msgid "{Data type} php-fpm-dynamic-process-manager-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30987
msgid "Data Type for the @code{dynamic} php-fpm process manager.  With the @code{dynamic} process manager, spare worker processes are kept around based on its configured limits."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30988 guix-git/doc/guix.texi:31004
#: guix-git/doc/guix.texi:31014
#, no-wrap
msgid "@code{max-children} (default: @code{5})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30990 guix-git/doc/guix.texi:31006
#: guix-git/doc/guix.texi:31016
msgid "Maximum of worker processes."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30990
#, no-wrap
msgid "@code{start-servers} (default: @code{2})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30992
msgid "How many worker processes should be started on start-up."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30992
#, no-wrap
msgid "@code{min-spare-servers} (default: @code{1})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30994
msgid "How many spare worker processes should be kept around at minimum."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:30994
#, no-wrap
msgid "@code{max-spare-servers} (default: @code{3})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:30996
msgid "How many spare worker processes should be kept around at maximum."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:30999
#, no-wrap
msgid "{Data type} php-fpm-static-process-manager-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31003
msgid "Data Type for the @code{static} php-fpm process manager.  With the @code{static} process manager, an unchanging number of worker processes are created."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31009
#, no-wrap
msgid "{Data type} php-fpm-on-demand-process-manager-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31013
msgid "Data Type for the @code{on-demand} php-fpm process manager.  With the @code{on-demand} process manager, worker processes are only created as requests arrive."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31016
#, no-wrap
msgid "@code{process-idle-timeout} (default: @code{10})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31018
msgid "The time in seconds after which a process with no requests is killed."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:31022
#, no-wrap
msgid "nginx-php-location [#:nginx-package nginx] @"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:31026
msgid "[socket (string-append \"/var/run/php\" @ (version-major (package-version php)) \"-fpm.sock\")] A helper function to quickly add php to an @code{nginx-server-configuration}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:31029
msgid "A simple services setup for nginx with php can look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:31042
#, no-wrap
msgid ""
"(services (cons* (service dhcp-client-service-type)\n"
"                 (service php-fpm-service-type)\n"
"                 (service nginx-service-type\n"
"                          (nginx-server-configuration\n"
"                           (server-name '(\"example.com\"))\n"
"                           (root \"/srv/http/\")\n"
"                           (locations\n"
"                            (list (nginx-php-location)))\n"
"                           (listen '(\"80\"))\n"
"                           (ssl-certificate #f)\n"
"                           (ssl-certificate-key #f)))\n"
"                 %base-services))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:31044
#, no-wrap
msgid "cat-avatar-generator"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:31048
msgid "The cat avatar generator is a simple service to demonstrate the use of php-fpm in @code{Nginx}.  It is used to generate cat avatar from a seed, for instance the hash of a user's email address."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:31049
#, no-wrap
msgid "cat-avatar-generator-service @"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:31057
msgid "[#:cache-dir \"/var/cache/cat-avatar-generator\"] @ [#:package cat-avatar-generator] @ [#:configuration (nginx-server-configuration)] Returns an nginx-server-configuration that inherits @code{configuration}.  It extends the nginx configuration to add a server block that serves @code{package}, a version of cat-avatar-generator.  During execution, cat-avatar-generator will be able to use @code{cache-dir} as its cache directory."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:31060
msgid "A simple setup for cat-avatar-generator can look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:31067
#, no-wrap
msgid ""
"(services (cons* (cat-avatar-generator-service\n"
"                  #:configuration\n"
"                  (nginx-server-configuration\n"
"                    (server-name '(\"example.com\"))))\n"
"                 ...\n"
"                 %base-services))\n"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:31069
#, no-wrap
msgid "Hpcguix-web"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:31071
#, no-wrap
msgid "hpcguix-web"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:31076
msgid "The @uref{https://github.com/UMCUGenetics/hpcguix-web/, hpcguix-web} program is a customizable web interface to browse Guix packages, initially designed for users of high-performance computing (HPC)  clusters."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:31077
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "hpcguix-web-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:31079
msgid "The service type for @code{hpcguix-web}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31081
#, no-wrap
msgid "{Data Type} hpcguix-web-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31083
msgid "Data type for the hpcguix-web service configuration."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31085
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{specs} (default: @code{#f})"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31089
msgid "Either @code{#f} or a gexp (@pxref{G-Expressions}) specifying the hpcguix-web service configuration as an @code{hpcguix-web-configuration} record.  The main fields of that record type are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31091
#, no-wrap
msgid "@code{title-prefix} (default: @code{\"hpcguix | \"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31093
msgid "The page title prefix."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31094
#, no-wrap
msgid "@code{guix-command} (default: @code{\"guix\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31096
msgid "The @command{guix} command to use in examples that appear on HTML pages."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31097
#, no-wrap
msgid "@code{package-filter-proc} (default: @code{(const #t)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31099
msgid "A procedure specifying how to filter packages that are displayed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31100
#, no-wrap
msgid "@code{package-page-extension-proc} (default: @code{(const '())})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31102
msgid "Extension package for @code{hpcguix-web}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31103
#, no-wrap
msgid "@code{menu} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31105
msgid "Additional entry in page @code{menu}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31106
#, no-wrap
msgid "@code{channels} (default: @code{%default-channels})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31108
msgid "List of channels from which the package list is built (@pxref{Channels})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31109
#, no-wrap
msgid "@code{package-list-expiration} (default: @code{(* 12 3600)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31112
msgid "The expiration time, in seconds, after which the package list is rebuilt from the latest instances of the given channels."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31117
msgid "See the hpcguix-web repository for a @uref{https://github.com/UMCUGenetics/hpcguix-web/blob/master/hpcweb-configuration.scm, complete example}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31118
#, no-wrap
msgid "@code{package} (default: @code{hpcguix-web})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31120
msgid "The hpcguix-web package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31121
#, fuzzy, no-wrap
msgid "@code{address} (default: @code{\"127.0.0.1\"})"
msgstr "@code{porta} (default: @code{15000})"

#. type: table
#: guix-git/doc/guix.texi:31123
msgid "The IP address to listen to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31124
#, fuzzy, no-wrap
#| msgid "@code{port} (default: @code{15000})"
msgid "@code{port} (default: @code{5000})"
msgstr "@code{porta} (default: @code{15000})"

#. type: table
#: guix-git/doc/guix.texi:31126
msgid "The port number to listen to."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:31130
msgid "A typical hpcguix-web service declaration looks like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:31138
#, no-wrap
msgid ""
"(service hpcguix-web-service-type\n"
"         (hpcguix-web-configuration\n"
"          (specs\n"
"           #~(hpcweb-configuration\n"
"              (title-prefix \"Guix-HPC - \")\n"
"              (menu '((\"/about\" \"ABOUT\")))))))\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:31145
msgid "The hpcguix-web service periodically updates the package list it publishes by pulling channels from Git.  To that end, it needs to access X.509 certificates so that it can authenticate Git servers when communicating over HTTPS, and it assumes that @file{/etc/ssl/certs} contains those certificates."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:31149
msgid "Thus, make sure to add @code{nss-certs} or another certificate package to the @code{packages} field of your configuration.  @ref{X.509 Certificates}, for more information on X.509 certificates."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:31151 guix-git/doc/guix.texi:31153
#, no-wrap
msgid "gmnisrv"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:31156
msgid "The @uref{https://git.sr.ht/~sircmpwn/gmnisrv, gmnisrv} program is a simple @uref{https://gemini.circumlunar.space/, Gemini} protocol server."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:31157
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "gmnisrv-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:31160
msgid "This is the type of the gmnisrv service, whose value should be a @code{gmnisrv-configuration} object, as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:31165
#, no-wrap
msgid ""
"(service gmnisrv-service-type\n"
"         (gmnisrv-configuration\n"
"           (config-file (local-file \"./my-gmnisrv.ini\"))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31168
#, no-wrap
msgid "{Data Type} gmnisrv-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31170
msgid "Data type representing the configuration of gmnisrv."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31172
#, no-wrap
msgid "@code{package} (default: @var{gmnisrv})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31174
msgid "Package object of the gmnisrv server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31175
#, no-wrap
msgid "@code{config-file} (default: @code{%default-gmnisrv-config-file})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31181
msgid "File-like object of the gmnisrv configuration file to use.  The default configuration listens on port 1965 and serves files from @file{/srv/gemini}.  Certificates are stored in @file{/var/lib/gemini/certs}.  For more information, run @command{man gmnisrv} and @command{man gmnisrv.ini}."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:31185
#, no-wrap
msgid "Agate"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:31187
#, no-wrap
msgid "agate"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:31192
msgid "The @uref{gemini://qwertqwefsday.eu/agate.gmi, Agate} (@uref{https://github.com/mbrubeck/agate, GitHub page over HTTPS})  program is a simple @uref{https://gemini.circumlunar.space/, Gemini} protocol server written in Rust."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:31193
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "agate-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:31196
msgid "This is the type of the agate service, whose value should be an @code{agate-service-type} object, as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:31203
#, no-wrap
msgid ""
"(service agate-service-type\n"
"\t (agate-configuration\n"
"\t   (content \"/srv/gemini\")\n"
"\t   (cert \"/srv/cert.pem\")\n"
"\t   (key \"/srv/key.rsa\")))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:31208
msgid "The example above represents the minimal tweaking necessary to get Agate up and running.  Specifying the path to the certificate and key is always necessary, as the Gemini protocol requires TLS by default."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:31211
msgid "To obtain a certificate and a key, you could, for example, use OpenSSL, running a command similar to the following example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:31215
#, no-wrap
msgid ""
"openssl req -x509 -newkey rsa:4096 -keyout key.rsa -out cert.pem \\\n"
"    -days 3650 -nodes -subj \"/CN=example.com\"\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:31220
msgid "Of course, you'll have to replace @i{example.com} with your own domain name, and then point the Agate configuration towards the path of the generated key and certificate."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31223
#, no-wrap
msgid "{Data Type} agate-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31225
msgid "Data type representing the configuration of Agate."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31227
#, no-wrap
msgid "@code{package} (default: @code{agate})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31229
msgid "The package object of the Agate server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31230
#, no-wrap
msgid "@code{content} (default: @file{\"/srv/gemini\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31232
msgid "The directory from which Agate will serve files."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31233
#, no-wrap
msgid "@code{cert} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31236
msgid "The path to the TLS certificate PEM file to be used for encrypted connections.  Must be filled in with a value from the user."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31237 guix-git/doc/guix.texi:31673
#, no-wrap
msgid "@code{key} (default: @code{#f})"
msgstr "@code{key} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31240
msgid "The path to the PKCS8 private key file to be used for encrypted connections.  Must be filled in with a value from the user."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31241
#, no-wrap
msgid "@code{addr} (default: @code{'(\"0.0.0.0:1965\" \"[::]:1965\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31243
msgid "A list of the addresses to listen on."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31246
msgid "The domain name of this Gemini server.  Optional."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31247
#, no-wrap
msgid "@code{lang} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31249
msgid "RFC 4646 language code(s) for text/gemini documents.  Optional."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31250
#, no-wrap
msgid "@code{silent?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31252
msgid "Set to @code{#t} to disable logging output."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31253
#, no-wrap
msgid "@code{serve-secret?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31256
msgid "Set to @code{#t} to serve secret files (files/directories starting with a dot)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31257
#, no-wrap
msgid "@code{log-ip?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31259
msgid "Whether or not to output IP addresses when logging."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31260
#, no-wrap
msgid "@code{user} (default: @code{\"agate\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31262
msgid "Owner of the @code{agate} process."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31263
#, no-wrap
msgid "@code{group} (default: @code{\"agate\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31265
msgid "Owner's group of the @code{agate} process."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31266
#, no-wrap
msgid "@code{log-file} (default: @file{\"/var/log/agate.log\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31268
msgid "The file which should store the logging output of Agate."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:31275
#, no-wrap
msgid "Web"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:31276
#, no-wrap
msgid "HTTP, HTTPS"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:31277
#, no-wrap
msgid "Let's Encrypt"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:31278
#, no-wrap
msgid "TLS certificates"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:31285
msgid "The @code{(gnu services certbot)} module provides a service to automatically obtain a valid TLS certificate from the Let's Encrypt certificate authority.  These certificates can then be used to serve content securely over HTTPS or other TLS-based protocols, with the knowledge that the client will be able to verify the server's authenticity."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:31297
msgid "@url{https://letsencrypt.org/, Let's Encrypt} provides the @code{certbot} tool to automate the certification process.  This tool first securely generates a key on the server.  It then makes a request to the Let's Encrypt certificate authority (CA) to sign the key.  The CA checks that the request originates from the host in question by using a challenge-response protocol, requiring the server to provide its response over HTTP@.  If that protocol completes successfully, the CA signs the key, resulting in a certificate.  That certificate is valid for a limited period of time, and therefore to continue to provide TLS services, the server needs to periodically ask the CA to renew its signature."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:31304
msgid "The certbot service automates this process: the initial key generation, the initial certification request to the Let's Encrypt service, the web server challenge/response integration, writing the certificate to disk, the automated periodic renewals, and the deployment tasks associated with the renewal (e.g.@: reloading services, copying keys with different permissions)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:31310
msgid "Certbot is run twice a day, at a random minute within the hour.  It won't do anything until your certificates are due for renewal or revoked, but running it regularly would give your service a chance of staying online in case a Let's Encrypt-initiated revocation happened for some reason."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:31314
msgid "By using this service, you agree to the ACME Subscriber Agreement, which can be found there: @url{https://acme-v01.api.letsencrypt.org/directory}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:31315
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "certbot-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:31318
msgid "A service type for the @code{certbot} Let's Encrypt client.  Its value must be a @code{certbot-configuration} record as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:31325
#, no-wrap
msgid ""
"(define %nginx-deploy-hook\n"
"  (program-file\n"
"   \"nginx-deploy-hook\"\n"
"   #~(let ((pid (call-with-input-file \"/var/run/nginx/pid\" read)))\n"
"       (kill pid SIGHUP))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:31336
#, no-wrap
msgid ""
"(service certbot-service-type\n"
"         (certbot-configuration\n"
"          (email \"foo@@example.net\")\n"
"          (certificates\n"
"           (list\n"
"            (certificate-configuration\n"
"             (domains '(\"example.net\" \"www.example.net\"))\n"
"             (deploy-hook %nginx-deploy-hook))\n"
"            (certificate-configuration\n"
"             (domains '(\"bar.example.net\")))))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:31339
msgid "See below for details about @code{certbot-configuration}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31341
#, no-wrap
msgid "{Data Type} certbot-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31344
msgid "Data type representing the configuration of the @code{certbot} service.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31346
#, no-wrap
msgid "@code{package} (default: @code{certbot})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31348
msgid "The certbot package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31349
#, no-wrap
msgid "@code{webroot} (default: @code{/var/www})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31352
msgid "The directory from which to serve the Let's Encrypt challenge/response files."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31353
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{certificates} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:31357
msgid "A list of @code{certificates-configuration}s for which to generate certificates and request signatures.  Each certificate has a @code{name} and several @code{domains}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31358
#, no-wrap
msgid "@code{email} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31362
msgid "Optional email address used for registration and recovery contact.  Setting this is encouraged as it allows you to receive important notifications about the account and issued certificates."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31363 guix-git/doc/guix.texi:33276
#, no-wrap
msgid "@code{server} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31366
msgid "Optional URL of ACME server.  Setting this overrides certbot's default, which is the Let's Encrypt server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31367
#, no-wrap
msgid "@code{rsa-key-size} (default: @code{2048})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31369
msgid "Size of the RSA key."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31370
#, no-wrap
msgid "@code{default-location} (default: @i{see below})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31379
msgid "The default @code{nginx-location-configuration}.  Because @code{certbot} needs to be able to serve challenges and responses, it needs to be able to run a web server.  It does so by extending the @code{nginx} web service with an @code{nginx-server-configuration} listening on the @var{domains} on port 80, and which has a @code{nginx-location-configuration} for the @code{/.well-known/} URI path subspace used by Let's Encrypt.  @xref{Web Services}, for more on these nginx configuration data types."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31383
msgid "Requests to other URL paths will be matched by the @code{default-location}, which if present is added to all @code{nginx-server-configuration}s."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31387
msgid "By default, the @code{default-location} will issue a redirect from @code{http://@var{domain}/...} to @code{https://@var{domain}/...}, leaving you to define what to serve on your site via @code{https}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31389
msgid "Pass @code{#f} to not issue a default location."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31392
#, no-wrap
msgid "{Data Type} certificate-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31395
msgid "Data type representing the configuration of a certificate.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31397
#, no-wrap
msgid "@code{name} (default: @i{see below})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31401
msgid "This name is used by Certbot for housekeeping and in file paths; it doesn't affect the content of the certificate itself.  To see certificate names, run @code{certbot certificates}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31403
msgid "Its default is the first provided domain."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31404
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{domains} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:31407
msgid "The first domain provided will be the subject CN of the certificate, and all domains will be Subject Alternative Names on the certificate."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31408
#, no-wrap
msgid "@code{challenge} (default: @code{#f})"
msgstr "@code{challenge} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31415
msgid "The challenge type that has to be run by certbot.  If @code{#f} is specified, default to the HTTP challenge.  If a value is specified, defaults to the manual plugin (see @code{authentication-hook}, @code{cleanup-hook} and the documentation at @url{https://certbot.eff.org/docs/using.html#hooks}), and gives Let's Encrypt permission to log the public IP address of the requesting machine."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31416
#, fuzzy, no-wrap
#| msgid "@code{chdir} (default: @code{#f})"
msgid "@code{csr} (default: @code{#f})"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31423
msgid "File name of Certificate Signing Request (CSR) in DER or PEM format.  If @code{#f} is specified, this argument will not be passed to certbot.  If a value is specified, certbot will use it to obtain a certificate, instead of using a self-generated CSR.  The domain-name(s) mentioned in @code{domains}, must be consistent with the domain-name(s) mentioned in CSR file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31424
#, no-wrap
msgid "@code{authentication-hook} (default: @code{#f})"
msgstr "@code{authentication-hook} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31430
msgid "Command to be run in a shell once for each certificate challenge to be answered.  For this command, the shell variable @code{$CERTBOT_DOMAIN} will contain the domain being authenticated, @code{$CERTBOT_VALIDATION} contains the validation string and @code{$CERTBOT_TOKEN} contains the file name of the resource requested when performing an HTTP-01 challenge."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31431
#, no-wrap
msgid "@code{cleanup-hook} (default: @code{#f})"
msgstr "@code{cleanup-hook} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31437
msgid "Command to be run in a shell once for each certificate challenge that have been answered by the @code{auth-hook}.  For this command, the shell variables available in the @code{auth-hook} script are still available, and additionally @code{$CERTBOT_AUTH_OUTPUT} will contain the standard output of the @code{auth-hook} script."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31438
#, no-wrap
msgid "@code{deploy-hook} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31446
msgid "Command to be run in a shell once for each successfully issued certificate.  For this command, the shell variable @code{$RENEWED_LINEAGE} will point to the config live subdirectory (for example, @samp{\"/etc/letsencrypt/live/example.com\"}) containing the new certificates and keys; the shell variable @code{$RENEWED_DOMAINS} will contain a space-delimited list of renewed certificate domains (for example, @samp{\"example.com www.example.com\"}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:31453
msgid "For each @code{certificate-configuration}, the certificate is saved to @code{/etc/letsencrypt/live/@var{name}/fullchain.pem} and the key is saved to @code{/etc/letsencrypt/live/@var{name}/privkey.pem}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:31455
#, no-wrap
msgid "DNS (domain name system)"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:31456
#, no-wrap
msgid "domain name system (DNS)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:31464
msgid "The @code{(gnu services dns)} module provides services related to the @dfn{domain name system} (DNS).  It provides a server service for hosting an @emph{authoritative} DNS server for multiple zones, slave or master.  This service uses @uref{https://www.knot-dns.cz/, Knot DNS}.  And also a caching and forwarding DNS server for the LAN, which uses @uref{http://www.thekelleys.org.uk/dnsmasq/doc.html, dnsmasq}."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:31465
#, no-wrap
msgid "Knot Service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:31469
msgid "An example configuration of an authoritative server for two zones, one master and one slave, is:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:31476
#, no-wrap
msgid ""
"(define-zone-entries example.org.zone\n"
";; Name TTL Class Type Data\n"
"  (\"@@\"  \"\"  \"IN\"  \"A\"  \"127.0.0.1\")\n"
"  (\"@@\"  \"\"  \"IN\"  \"NS\" \"ns\")\n"
"  (\"ns\" \"\"  \"IN\"  \"A\"  \"127.0.0.1\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:31483
#, no-wrap
msgid ""
"(define master-zone\n"
"  (knot-zone-configuration\n"
"    (domain \"example.org\")\n"
"    (zone (zone-file\n"
"            (origin \"example.org\")\n"
"            (entries example.org.zone)))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:31489
#, no-wrap
msgid ""
"(define slave-zone\n"
"  (knot-zone-configuration\n"
"    (domain \"plop.org\")\n"
"    (dnssec-policy \"default\")\n"
"    (master (list \"plop-master\"))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:31494
#, no-wrap
msgid ""
"(define plop-master\n"
"  (knot-remote-configuration\n"
"    (id \"plop-master\")\n"
"    (address (list \"208.76.58.171\"))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:31503
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; ...\n"
"  (services (cons* (service knot-service-type\n"
"                     (knot-configuration\n"
"                       (remotes (list plop-master))\n"
"                       (zones (list master-zone slave-zone))))\n"
"                   ;; ...\n"
"                   %base-services)))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:31505
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "knot-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:31507
msgid "This is the type for the Knot DNS server."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:31515
msgid "Knot DNS is an authoritative DNS server, meaning that it can serve multiple zones, that is to say domain names you would buy from a registrar.  This server is not a resolver, meaning that it can only resolve names for which it is authoritative.  This server can be configured to serve zones as a master server or a slave server as a per-zone basis.  Slave zones will get their data from masters, and will serve it as an authoritative server.  From the point of view of a resolver, there is no difference between master and slave."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:31517
msgid "The following data types are used to configure the Knot DNS server:"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31519
#, no-wrap
msgid "{Data Type} knot-key-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31522
msgid "Data type representing a key.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31524 guix-git/doc/guix.texi:31544
#: guix-git/doc/guix.texi:31659 guix-git/doc/guix.texi:31685
#: guix-git/doc/guix.texi:31720
#, no-wrap
msgid "@code{id} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31527 guix-git/doc/guix.texi:31547
msgid "An identifier for other configuration fields to refer to this key.  IDs must be unique and must not be empty."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31528
#, no-wrap
msgid "@code{algorithm} (default: @code{#f})"
msgstr "@code{algorithm} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31532
msgid "The algorithm to use.  Choose between @code{#f}, @code{'hmac-md5}, @code{'hmac-sha1}, @code{'hmac-sha224}, @code{'hmac-sha256}, @code{'hmac-sha384} and @code{'hmac-sha512}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31533
#, no-wrap
msgid "@code{secret} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31535
msgid "The secret key itself."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31539
#, no-wrap
msgid "{Data Type} knot-acl-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31542
msgid "Data type representing an Access Control List (ACL) configuration.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31548 guix-git/doc/guix.texi:31663
#, no-wrap
msgid "@code{address} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31552
msgid "An ordered list of IP addresses, network subnets, or network ranges represented with strings.  The query must match one of them.  Empty value means that address match is not required."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31553
#, no-wrap
msgid "@code{key} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31557
msgid "An ordered list of references to keys represented with strings.  The string must match a key ID defined in a @code{knot-key-configuration}.  No key means that a key is not require to match that ACL."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31558
#, no-wrap
msgid "@code{action} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31562
msgid "An ordered list of actions that are permitted or forbidden by this ACL@.  Possible values are lists of zero or more elements from @code{'transfer}, @code{'notify} and @code{'update}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31563
#, no-wrap
msgid "@code{deny?} (default: @code{#f})"
msgstr "@code{deny?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31566
msgid "When true, the ACL defines restrictions.  Listed actions are forbidden.  When false, listed actions are allowed."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31570
#, no-wrap
msgid "{Data Type} zone-entry"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31573
msgid "Data type representing a record entry in a zone file.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31575
#, no-wrap
msgid "@code{name} (default: @code{\"@@\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31581
msgid "The name of the record.  @code{\"@@\"} refers to the origin of the zone.  Names are relative to the origin of the zone.  For example, in the @code{example.org} zone, @code{\"ns.example.org\"} actually refers to @code{ns.example.org.example.org}.  Names ending with a dot are absolute, which means that @code{\"ns.example.org.\"} refers to @code{ns.example.org}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31582
#, no-wrap
msgid "@code{ttl} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31584
msgid "The Time-To-Live (TTL) of this record.  If not set, the default TTL is used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31585
#, no-wrap
msgid "@code{class} (default: @code{\"IN\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31588
msgid "The class of the record.  Knot currently supports only @code{\"IN\"} and partially @code{\"CH\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31589
#, no-wrap
msgid "@code{type} (default: @code{\"A\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31593
msgid "The type of the record.  Common types include A (IPv4 address), AAAA (IPv6 address), NS (Name Server) and MX (Mail eXchange).  Many other types are defined."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31594
#, no-wrap
msgid "@code{data} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31598
msgid "The data contained in the record.  For instance an IP address associated with an A record, or a domain name associated with an NS record.  Remember that domain names are relative to the origin unless they end with a dot."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31602
#, no-wrap
msgid "{Data Type} zone-file"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31605
msgid "Data type representing the content of a zone file.  This type has the following parameters:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31614
msgid "The list of entries.  The SOA record is taken care of, so you don't need to put it in the list of entries.  This list should probably contain an entry for your primary authoritative DNS server.  Other than using a list of entries directly, you can use @code{define-zone-entries} to define a object containing the list of entries more easily, that you can later pass to the @code{entries} field of the @code{zone-file}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31615
#, no-wrap
msgid "@code{origin} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31617
msgid "The name of your zone.  This parameter cannot be empty."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31618
#, no-wrap
msgid "@code{ns} (default: @code{\"ns\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31623
msgid "The domain of your primary authoritative DNS server.  The name is relative to the origin, unless it ends with a dot.  It is mandatory that this primary DNS server corresponds to an NS record in the zone and that it is associated to an IP address in the list of entries."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31624
#, no-wrap
msgid "@code{mail} (default: @code{\"hostmaster\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31627
msgid "An email address people can contact you at, as the owner of the zone.  This is translated as @code{<mail>@@<origin>}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31628
#, no-wrap
msgid "@code{serial} (default: @code{1})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31632
msgid "The serial number of the zone.  As this is used to keep track of changes by both slaves and resolvers, it is mandatory that it @emph{never} decreases.  Always increment it when you make a change in your zone."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31633
#, no-wrap
msgid "@code{refresh} (default: @code{(* 2 24 3600)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31637
msgid "The frequency at which slaves will do a zone transfer.  This value is a number of seconds.  It can be computed by multiplications or with @code{(string->duration)}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31638
#, no-wrap
msgid "@code{retry} (default: @code{(* 15 60)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31641
msgid "The period after which a slave will retry to contact its master when it fails to do so a first time."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31642
#, no-wrap
msgid "@code{expiry} (default: @code{(* 14 24 3600)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31646
msgid "Default TTL of records.  Existing records are considered correct for at most this amount of time.  After this period, resolvers will invalidate their cache and check again that it still exists."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31647
#, no-wrap
msgid "@code{nx} (default: @code{3600})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31650
msgid "Default TTL of inexistent records.  This delay is usually short because you want your new domains to reach everyone quickly."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31654
#, no-wrap
msgid "{Data Type} knot-remote-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31657
msgid "Data type representing a remote configuration.  This type has the following parameters:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31662
msgid "An identifier for other configuration fields to refer to this remote.  IDs must be unique and must not be empty."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31667
msgid "An ordered list of destination IP addresses.  Addresses are tried in sequence.  An optional port can be given with the @@ separator.  For instance: @code{(list \"1.2.3.4\" \"2.3.4.5@@53\")}.  Default port is 53."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31668
#, no-wrap
msgid "@code{via} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31672
msgid "An ordered list of source IP addresses.  An empty list will have Knot choose an appropriate source IP@.  An optional port can be given with the @@ separator.  The default is to choose at random."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31676
msgid "A reference to a key, that is a string containing the identifier of a key defined in a @code{knot-key-configuration} field."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31680
#, no-wrap
msgid "{Data Type} knot-keystore-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31683
msgid "Data type representing a keystore to hold dnssec keys.  This type has the following parameters:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31687
msgid "The id of the keystore.  It must not be empty."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31688
#, no-wrap
msgid "@code{backend} (default: @code{'pem})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31690
msgid "The backend to store the keys in.  Can be @code{'pem} or @code{'pkcs11}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31691
#, no-wrap
msgid "@code{config} (default: @code{\"/var/lib/knot/keys/keys\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31695
msgid "The configuration string of the backend.  An example for the PKCS#11 is: @code{\"pkcs11:token=knot;pin-value=1234 /gnu/store/.../lib/pkcs11/libsofthsm2.so\"}.  For the pem backend, the string represents a path in the file system."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31699
#, no-wrap
msgid "{Data Type} knot-policy-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31703
msgid "Data type representing a dnssec policy.  Knot DNS is able to automatically sign your zones.  It can either generate and manage your keys automatically or use keys that you generate."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31710
msgid "Dnssec is usually implemented using two keys: a Key Signing Key (KSK) that is used to sign the second, and a Zone Signing Key (ZSK) that is used to sign the zone.  In order to be trusted, the KSK needs to be present in the parent zone (usually a top-level domain).  If your registrar supports dnssec, you will have to send them your KSK's hash so they can add a DS record in their zone.  This is not automated and need to be done each time you change your KSK."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31716
msgid "The policy also defines the lifetime of keys.  Usually, ZSK can be changed easily and use weaker cryptographic functions (they use lower parameters) in order to sign records quickly, so they are changed often.  The KSK however requires manual interaction with the registrar, so they are changed less often and use stronger parameters because they sign only one record."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31718
msgid "This type has the following parameters:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31722
msgid "The id of the policy.  It must not be empty."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31723
#, no-wrap
msgid "@code{keystore} (default: @code{\"default\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31728
msgid "A reference to a keystore, that is a string containing the identifier of a keystore defined in a @code{knot-keystore-configuration} field.  The @code{\"default\"} identifier means the default keystore (a kasp database that was setup by this service)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31729
#, no-wrap
msgid "@code{manual?} (default: @code{#f})"
msgstr "@code{manual?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31731
msgid "Whether the key management is manual or automatic."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31732
#, no-wrap
msgid "@code{single-type-signing?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31734
msgid "When @code{#t}, use the Single-Type Signing Scheme."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31735
#, no-wrap
msgid "@code{algorithm} (default: @code{\"ecdsap256sha256\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31737
msgid "An algorithm of signing keys and issued signatures."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31738
#, no-wrap
msgid "@code{ksk-size} (default: @code{256})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31741
msgid "The length of the KSK@.  Note that this value is correct for the default algorithm, but would be unsecure for other algorithms."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31742
#, no-wrap
msgid "@code{zsk-size} (default: @code{256})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31745
msgid "The length of the ZSK@.  Note that this value is correct for the default algorithm, but would be unsecure for other algorithms."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31746
#, no-wrap
msgid "@code{dnskey-ttl} (default: @code{'default})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31749
msgid "The TTL value for DNSKEY records added into zone apex.  The special @code{'default} value means same as the zone SOA TTL."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31750
#, no-wrap
msgid "@code{zsk-lifetime} (default: @code{(* 30 24 3600)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31752
msgid "The period between ZSK publication and the next rollover initiation."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31753
#, no-wrap
msgid "@code{propagation-delay} (default: @code{(* 24 3600)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31756
msgid "An extra delay added for each key rollover step.  This value should be high enough to cover propagation of data from the master server to all slaves."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31757
#, no-wrap
msgid "@code{rrsig-lifetime} (default: @code{(* 14 24 3600)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31759
msgid "A validity period of newly issued signatures."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31760
#, no-wrap
msgid "@code{rrsig-refresh} (default: @code{(* 7 24 3600)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31762
msgid "A period how long before a signature expiration the signature will be refreshed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31763
#, no-wrap
msgid "@code{nsec3?} (default: @code{#f})"
msgstr "@code{nsec3?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31765
msgid "When @code{#t}, NSEC3 will be used instead of NSEC."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31766
#, no-wrap
msgid "@code{nsec3-iterations} (default: @code{5})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31768
msgid "The number of additional times the hashing is performed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31769
#, no-wrap
msgid "@code{nsec3-salt-length} (default: @code{8})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31772
msgid "The length of a salt field in octets, which is appended to the original owner name before hashing."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31773
#, no-wrap
msgid "@code{nsec3-salt-lifetime} (default: @code{(* 30 24 3600)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31775
msgid "The validity period of newly issued salt field."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31779
#, no-wrap
msgid "{Data Type} knot-zone-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31782
msgid "Data type representing a zone served by Knot.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31784
#, no-wrap
msgid "@code{domain} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31786
msgid "The domain served by this configuration.  It must not be empty."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31787
#, no-wrap
msgid "@code{file} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31790
msgid "The file where this zone is saved.  This parameter is ignored by master zones.  Empty means default location that depends on the domain name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31791
#, no-wrap
msgid "@code{zone} (default: @code{(zone-file)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31794
msgid "The content of the zone file.  This parameter is ignored by slave zones.  It must contain a zone-file record."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31795
#, no-wrap
msgid "@code{master} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31798
msgid "A list of master remotes.  When empty, this zone is a master.  When set, this zone is a slave.  This is a list of remotes identifiers."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31799
#, no-wrap
msgid "@code{ddns-master} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31802
msgid "The main master.  When empty, it defaults to the first master in the list of masters."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31803
#, no-wrap
msgid "@code{notify} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31805
msgid "A list of slave remote identifiers."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31806
#, no-wrap
msgid "@code{acl} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31808
msgid "A list of acl identifiers."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31809
#, no-wrap
msgid "@code{semantic-checks?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31811
msgid "When set, this adds more semantic checks to the zone."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31812
#, no-wrap
msgid "@code{zonefile-sync} (default: @code{0})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31815
msgid "The delay between a modification in memory and on disk.  0 means immediate synchronization."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31816
#, no-wrap
msgid "@code{zonefile-load} (default: @code{#f})"
msgstr "@code{zonefile-load} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31819
msgid "The way the zone file contents are applied during zone load.  Possible values are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31821
#, no-wrap
msgid "@code{#f} for using the default value from Knot,"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31822
#, no-wrap
msgid "@code{'none} for not using the zone file at all,"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31823
#, no-wrap
msgid "@code{'difference} for computing the difference between already available"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:31825
msgid "contents and zone contents and applying it to the current zone contents,"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31825
#, no-wrap
msgid "@code{'difference-no-serial} for the same as @code{'difference}, but"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:31828
msgid "ignoring the SOA serial in the zone file, while the server takes care of it automatically."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31828
#, no-wrap
msgid "@code{'whole} for loading zone contents from the zone file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31831
#, no-wrap
msgid "@code{journal-content} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31836
msgid "The way the journal is used to store zone and its changes.  Possible values are @code{'none} to not use it at all, @code{'changes} to store changes and @code{'all} to store contents.  @code{#f} does not set this option, so the default value from Knot is used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31837
#, no-wrap
msgid "@code{max-journal-usage} (default: @code{#f})"
msgstr "@code{max-journal-usage} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31840
msgid "The maximum size for the journal on disk.  @code{#f} does not set this option, so the default value from Knot is used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31841
#, no-wrap
msgid "@code{max-journal-depth} (default: @code{#f})"
msgstr "@code{max-journal-depth} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31844
msgid "The maximum size of the history.  @code{#f} does not set this option, so the default value from Knot is used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31845
#, no-wrap
msgid "@code{max-zone-size} (default: @code{#f})"
msgstr "@code{max-zone-size} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31849
msgid "The maximum size of the zone file.  This limit is enforced for incoming transfer and updates.  @code{#f} does not set this option, so the default value from Knot is used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31850
#, no-wrap
msgid "@code{dnssec-policy} (default: @code{#f})"
msgstr "@code{dnssec-policy} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31854
msgid "A reference to a @code{knot-policy-configuration} record, or the special name @code{\"default\"}.  If the value is @code{#f}, there is no dnssec signing on this zone."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31855
#, no-wrap
msgid "@code{serial-policy} (default: @code{'increment})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31857
msgid "A policy between @code{'increment} and @code{'unixtime}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31861
#, no-wrap
msgid "{Data Type} knot-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31864
msgid "Data type representing the Knot configuration.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31866
#, no-wrap
msgid "@code{knot} (default: @code{knot})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31868
msgid "The Knot package."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31869
#, no-wrap
msgid "@code{run-directory} (default: @code{\"/var/run/knot\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31871
msgid "The run directory.  This directory will be used for pid file and sockets."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31872
#, no-wrap
msgid "@code{includes} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31875
msgid "A list of strings or file-like objects denoting other files that must be included at the top of the configuration file."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:31876
#, no-wrap
msgid "secrets, Knot service"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31882
msgid "This can be used to manage secrets out-of-band.  For example, secret keys may be stored in an out-of-band file not managed by Guix, and thus not visible in @file{/gnu/store}---e.g., you could store secret key configuration in @file{/etc/knot/secrets.conf} and add this file to the @code{includes} list."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31887
msgid "One can generate a secret tsig key (for nsupdate and zone transfers with the keymgr command from the knot package.  Note that the package is not automatically installed by the service.  The following example shows how to generate a new tsig key:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:31891
#, no-wrap
msgid ""
"keymgr -t mysecret > /etc/knot/secrets.conf\n"
"chmod 600 /etc/knot/secrets.conf\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31897
msgid "Also note that the generated key will be named @var{mysecret}, so it is the name that needs to be used in the @var{key} field of the @code{knot-acl-configuration} record and in other places that need to refer to that key."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31899
msgid "It can also be used to add configuration not supported by this interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31900
#, no-wrap
msgid "@code{listen-v4} (default: @code{\"0.0.0.0\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31902 guix-git/doc/guix.texi:31905
msgid "An ip address on which to listen."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31903
#, no-wrap
msgid "@code{listen-v6} (default: @code{\"::\"})"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31906
#, no-wrap
msgid "@code{listen-port} (default: @code{53})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31908
msgid "A port on which to listen."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31909
#, no-wrap
msgid "@code{keys} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31911
msgid "The list of knot-key-configuration used by this configuration."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31912
#, no-wrap
msgid "@code{acls} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31914
msgid "The list of knot-acl-configuration used by this configuration."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31915
#, no-wrap
msgid "@code{remotes} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31917
msgid "The list of knot-remote-configuration used by this configuration."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31918
#, no-wrap
msgid "@code{zones} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31920
msgid "The list of knot-zone-configuration used by this configuration."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:31924
#, no-wrap
msgid "Knot Resolver Service"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:31926
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "knot-resolver-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:31929
msgid "This is the type of the knot resolver service, whose value should be a @code{knot-resolver-configuration} object as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:31939
#, no-wrap
msgid ""
"(service knot-resolver-service-type\n"
"         (knot-resolver-configuration\n"
"           (kresd-config-file (plain-file \"kresd.conf\" \"\n"
"net.listen('192.168.0.1', 5353)\n"
"user('knot-resolver', 'knot-resolver')\n"
"modules = @{ 'hints > iterate', 'stats', 'predict' @}\n"
"cache.size = 100 * MB\n"
"\"))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:31942
msgid "For more information, refer its @url{https://knot-resolver.readthedocs.io/en/stable/config-overview.html, manual}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31944
#, no-wrap
msgid "{Data Type} knot-resolver-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31946
msgid "Data type representing the configuration of knot-resolver."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31948
#, no-wrap
msgid "@code{package} (default: @var{knot-resolver})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31950
msgid "Package object of the knot DNS resolver."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31951
#, no-wrap
msgid "@code{kresd-config-file} (default: %kresd.conf)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31954
msgid "File-like object of the kresd configuration file to use, by default it will listen on @code{127.0.0.1} and @code{::1}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31955
#, no-wrap
msgid "@code{garbage-collection-interval} (default: 1000)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31957
msgid "Number of milliseconds for @code{kres-cache-gc} to periodically trim the cache."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:31962
#, no-wrap
msgid "Dnsmasq Service"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:31964
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "dnsmasq-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:31967
msgid "This is the type of the dnsmasq service, whose value should be a @code{dnsmasq-configuration} object as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:31973
#, no-wrap
msgid ""
"(service dnsmasq-service-type\n"
"         (dnsmasq-configuration\n"
"           (no-resolv? #t)\n"
"           (servers '(\"192.168.1.1\"))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31976
#, no-wrap
msgid "{Data Type} dnsmasq-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:31978
msgid "Data type representing the configuration of dnsmasq."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31980
#, no-wrap
msgid "@code{package} (default: @var{dnsmasq})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31982
msgid "Package object of the dnsmasq server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31983
#, no-wrap
msgid "@code{no-hosts?} (default: @code{#f})"
msgstr "@code{no-hosts?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:31985
msgid "When true, don't read the hostnames in /etc/hosts."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31986
#, no-wrap
msgid "@code{port} (default: @code{53})"
msgstr "@code{porta} (default: @code{53})"

#. type: table
#: guix-git/doc/guix.texi:31989
msgid "The port to listen on.  Setting this to zero completely disables DNS responses, leaving only DHCP and/or TFTP functions."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31990
#, no-wrap
msgid "@code{local-service?} (default: @code{#t})"
msgstr "@code{local-service?} (default: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:31993
msgid "Accept DNS queries only from hosts whose address is on a local subnet, ie a subnet for which an interface exists on the server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31994
#, no-wrap
msgid "@code{listen-addresses} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31996
msgid "Listen on the given IP addresses."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:31997
#, no-wrap
msgid "@code{resolv-file} (default: @code{\"/etc/resolv.conf\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:31999
msgid "The file to read the IP address of the upstream nameservers from."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32000
#, no-wrap
msgid "@code{no-resolv?} (default: @code{#f})"
msgstr "@code{no-resolv?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32002
msgid "When true, don't read @var{resolv-file}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32003
#, fuzzy, no-wrap
#| msgid "@code{poll-batteries?} (default: @code{#t})"
msgid "@code{forward-private-reverse-lookup?} (default: @code{#t})"
msgstr "@code{poll-batteries?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:32006
msgid "When false, all reverse lookups for private IP ranges are answered with \"no such domain\" rather than being forwarded upstream."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32007
#, fuzzy, no-wrap
#| msgid "@code{remote?} (default: @code{#f})"
msgid "@code{query-servers-in-order?} (default: @code{#f})"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32010
msgid "When true, dnsmasq queries the servers in the same order as they appear in @var{servers}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32011
#, no-wrap
msgid "@code{servers} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32013
msgid "Specify IP address of upstream servers directly."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32014
#, fuzzy, no-wrap
#| msgid "@code{file} (default: @code{#f})"
msgid "@code{servers-file} (default: @code{#f})"
msgstr "@code{file} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32017
msgid "Specify file containing upstream servers. This file is re-read when dnsmasq receives SIGHUP.  Could be either a string or a file-like object."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32018
#, no-wrap
msgid "@code{addresses} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32022
msgid "For each entry, specify an IP address to return for any host in the given domains.  Queries in the domains are never forwarded and always replied to with the specified IP address."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32024
msgid "This is useful for redirecting hosts locally, for example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:32033
#, no-wrap
msgid ""
"(service dnsmasq-service-type\n"
"         (dnsmasq-configuration\n"
"           (addresses\n"
"             '(; Redirect to a local web-server.\n"
"               \"/example.org/127.0.0.1\"\n"
"               ; Redirect subdomain to a specific IP.\n"
"               \"/subdomain.example.org/192.168.1.42\"))))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32036
msgid "Note that rules in @file{/etc/hosts} take precedence over this."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32037
#, no-wrap
msgid "@code{cache-size} (default: @code{150})"
msgstr "@code{cache-size} (default: @code{150})"

#. type: table
#: guix-git/doc/guix.texi:32040
msgid "Set the size of dnsmasq's cache.  Setting the cache size to zero disables caching."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32041
#, no-wrap
msgid "@code{negative-cache?} (default: @code{#t})"
msgstr "@code{negative-cache?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:32043
msgid "When false, disable negative caching."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32044
#, fuzzy, no-wrap
#| msgid "@code{id} (default: @code{#f})"
msgid "@code{cpe-id} (default: @code{#f})"
msgstr "@code{id} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32047
msgid "If set, add a CPE (Customer-Premises Equipment) identifier to DNS queries which are forwarded upstream."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32048
#, no-wrap
msgid "@code{tftp-enable?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32050
msgid "Whether to enable the built-in TFTP server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32051
#, no-wrap
msgid "@code{tftp-no-fail?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32053
msgid "If true, does not fail dnsmasq if the TFTP server could not start up."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32054
#, no-wrap
msgid "@code{tftp-single-port?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32056
msgid "Whether to use only one single port for TFTP."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32057
#, no-wrap
msgid "@code{tftp-secure?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32059
msgid "If true, only files owned by the user running the dnsmasq process are accessible."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32063
msgid "If dnsmasq is being run as root, different rules apply: @code{tftp-secure?} has no effect, but only files which have the world-readable bit set are accessible."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32064
#, no-wrap
msgid "@code{tftp-max} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32066
msgid "If set, sets the maximal number of concurrent connections allowed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32067
#, no-wrap
msgid "@code{tftp-mtu} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32069
msgid "If set, sets the MTU for TFTP packets to that value."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32070
#, no-wrap
msgid "@code{tftp-no-blocksize?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32072
msgid "If true, stops the TFTP server from negotiating the blocksize with a client."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32073
#, no-wrap
msgid "@code{tftp-lowercase?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32075
msgid "Whether to convert all filenames in TFTP requests to lowercase."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32076
#, no-wrap
msgid "@code{tftp-port-range} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32079
msgid "If set, fixes the dynamical ports (one per client) to the given range (@code{\"<start>,<end>\"})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32080
#, no-wrap
msgid "@code{tftp-root} (default: @code{/var/empty,lo})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32087
msgid "Look for files to transfer using TFTP relative to the given directory.  When this is set, TFTP paths which include @samp{..} are rejected, to stop clients getting outside the specified root.  Absolute paths (starting with @samp{/}) are allowed, but they must be within the TFTP-root.  If the optional interface argument is given, the directory is only used for TFTP requests via that interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32088
#, no-wrap
msgid "@code{tftp-unique-root} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32093
msgid "If set, add the IP or hardware address of the TFTP client as a path component on the end of the TFTP-root.  Only valid if a TFTP root is set and the directory exists.  Defaults to adding IP address (in standard dotted-quad format)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32102
msgid "For instance, if @option{--tftp-root} is @samp{/tftp} and client @samp{1.2.3.4} requests file @file{myfile} then the effective path will be @file{/tftp/1.2.3.4/myfile} if @file{/tftp/1.2.3.4} exists or @file{/tftp/myfile} otherwise.  When @samp{=mac} is specified it will append the MAC address instead, using lowercase zero padded digits separated by dashes, e.g.: @samp{01-02-03-04-aa-bb}.  Note that resolving MAC addresses is only possible if the client is in the local network or obtained a DHCP lease from dnsmasq."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:32106
#, no-wrap
msgid "ddclient Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32108
#, no-wrap
msgid "ddclient"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32112
msgid "The ddclient service described below runs the ddclient daemon, which takes care of automatically updating DNS entries for service providers such as @uref{https://dyn.com/dns/, Dyn}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32115
msgid "The following example show instantiates the service with its default configuration:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:32118
#, no-wrap
msgid "(service ddclient-service-type)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32127
msgid "Note that ddclient needs to access credentials that are stored in a @dfn{secret file}, by default @file{/etc/ddclient/secrets} (see @code{secret-file} below).  You are expected to create this file manually, in an ``out-of-band'' fashion (you @emph{could} make this file part of the service configuration, for instance by using @code{plain-file}, but it will be world-readable @i{via} @file{/gnu/store}).  See the examples in the @file{share/ddclient} directory of the @code{ddclient} package."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32131
msgid "Available @code{ddclient-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32132
#, no-wrap
msgid "{@code{ddclient-configuration} parameter} package ddclient"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32134
msgid "The ddclient package."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32137
#, no-wrap
msgid "{@code{ddclient-configuration} parameter} integer daemon"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32139
msgid "The period after which ddclient will retry to check IP and domain name."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32141
msgid "Defaults to @samp{300}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32144
#, no-wrap
msgid "{@code{ddclient-configuration} parameter} boolean syslog"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32146
msgid "Use syslog for the output."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32151
#, no-wrap
msgid "{@code{ddclient-configuration} parameter} string mail"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32153
msgid "Mail to user."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32155 guix-git/doc/guix.texi:32162
#: guix-git/doc/guix.texi:34394
msgid "Defaults to @samp{\"root\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32158
#, no-wrap
msgid "{@code{ddclient-configuration} parameter} string mail-failure"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32160
msgid "Mail failed update to user."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32165
#, no-wrap
msgid "{@code{ddclient-configuration} parameter} string pid"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32167
msgid "The ddclient PID file."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32169
msgid "Defaults to @samp{\"/var/run/ddclient/ddclient.pid\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32172
#, no-wrap
msgid "{@code{ddclient-configuration} parameter} boolean ssl"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32174
msgid "Enable SSL support."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32179
#, no-wrap
msgid "{@code{ddclient-configuration} parameter} string user"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32182
msgid "Specifies the user name or ID that is used when running ddclient program."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32184 guix-git/doc/guix.texi:32191
msgid "Defaults to @samp{\"ddclient\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32187
#, no-wrap
msgid "{@code{ddclient-configuration} parameter} string group"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32189
msgid "Group of the user who will run the ddclient program."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32194
#, no-wrap
msgid "{@code{ddclient-configuration} parameter} string secret-file"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32198
msgid "Secret file which will be appended to @file{ddclient.conf} file.  This file contains credentials for use by ddclient.  You are expected to create it manually."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32200
msgid "Defaults to @samp{\"/etc/ddclient/secrets.conf\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32203
#, no-wrap
msgid "{@code{ddclient-configuration} parameter} list extra-options"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:32205
msgid "Extra options will be appended to @file{ddclient.conf} file."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32215
#, no-wrap
msgid "VNC (virtual network computing)"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32216
#, no-wrap
msgid "XDMCP (x display manager control protocol)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32225
msgid "The @code{(gnu services vnc)} module provides services related to @dfn{Virtual Network Computing} (VNC), which makes it possible to locally use graphical Xorg applications running on a remote machine.  Combined with a graphical manager that supports the @dfn{X Display Manager Control Protocol}, such as GDM (@pxref{gdm}) or LightDM (@pxref{lightdm}), it is possible to remote an entire desktop for a multi-user environment."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:32226
#, no-wrap
msgid "Xvnc"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32231
msgid "Xvnc is a VNC server that spawns its own X window server; which means it can run on headless servers.  The Xvnc implementations provided by the @code{tigervnc-server} and @code{turbovnc} aim to be fast and efficient."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:32232
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "xvnc-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:32238
msgid "The @code{xvnc-server-type} service can be configured via the @code{xvnc-configuration} record, documented below.  A second virtual display could be made available on a remote machine via the following configuration:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:32243
#, no-wrap
msgid ""
"(service xvnc-service-type\n"
"         (xvnc-configuration (display-number 10)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32248
msgid "As a demonstration, the @command{xclock} command could then be started on the remote machine on display number 10, and it could be displayed locally via the @command{vncviewer} command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:32254
#, no-wrap
msgid ""
"# Start xclock on the remote machine.\n"
"ssh -L5910:localhost:5910 @var{your-host} -- guix shell xclock \\\n"
"    -- env DISPLAY=:10 xclock\n"
"# Access it via VNC.\n"
"guix shell tigervnc-client -- vncviewer localhost:5910\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32259
msgid "The following configuration combines XDMCP and Inetd to allow multiple users to concurrently use the remote system and login graphically via the GDM display manager:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:32275
#, no-wrap
msgid ""
"(operating-system\n"
"  [...]\n"
"  (services (cons*\n"
"             [...]\n"
"             (service xvnc-service-type (xvnc-configuration\n"
"                                         (display-number 5)\n"
"                                         (localhost? #f)\n"
"                                         (xdmcp? #t)\n"
"                                         (inetd? #t)))\n"
"             (modify-services %desktop-services\n"
"               (gdm-service-type config => (gdm-configuration\n"
"                                            (inherit config)\n"
"                                            (auto-suspend? #f)\n"
"                                            (xdmcp? #t)))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32280
msgid "A remote user could then connect to it by using the @command{vncviewer} command or a compatible VNC client and start a desktop session of their choosing:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:32282
#, no-wrap
msgid "vncviewer remote-host:5905\n"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:32292
msgid "Unless your machine is in a controlled environment, for security reasons, the @code{localhost?} configuration of the @code{xvnc-configuration} record should be left to its default @code{#t} value and exposed via a secure means such as an SSH port forward.  The XDMCP port, UDP 177 should also be blocked from the outside by a firewall, as it is not a secure protocol and can expose login credentials in clear."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32297
#, fuzzy, no-wrap
msgid "{Data Type} xvnc-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:32299
msgid "Available @code{xvnc-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32301
#, fuzzy, no-wrap
msgid "@code{xvnc} (default: @code{tigervnc-server}) (type: file-like)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32303
msgid "The package that provides the Xvnc binary."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32304
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{display-number} (default: @code{0}) (type: number)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32307
msgid "The display number used by Xvnc.  You should set this to a number not already used a Xorg server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32308
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{geometry} (default: @code{\"1024x768\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:32310
#, fuzzy
#| msgid "The host name of the remote machine."
msgid "The size of the desktop to be created."
msgstr "O nome de host da máquina remota."

#. type: item
#: guix-git/doc/guix.texi:32311
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{depth} (default: @code{24}) (type: color-depth)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32314
msgid "The pixel depth in bits of the desktop to be created.  Accepted values are 16, 24 or 32."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32315
#, fuzzy, no-wrap
msgid "@code{port} (type: maybe-port)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32318
msgid "The port on which to listen for connections from viewers.  When left unspecified, it defaults to 5900 plus the display number."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32319
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{ipv4?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32321
msgid "Use IPv4 for incoming and outgoing connections."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32322
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{ipv6?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32324
msgid "Use IPv6 for incoming and outgoing connections."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32325
#, fuzzy, no-wrap
msgid "@code{password-file} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32328
msgid "The password file to use, if any.  Refer to vncpasswd(1) to learn how to generate such a file."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32335
msgid "Query the XDMCP server for a session.  This enables users to log in a desktop session from the login manager screen.  For a multiple users scenario, you'll want to enable the @code{inetd?} option as well, so that each connection to the VNC server is handled separately rather than shared."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32336
#, fuzzy, no-wrap
#| msgid "@code{wait?} (default: @code{#t})"
msgid "@code{inetd?} (default: @code{#f}) (type: boolean)"
msgstr "@code{wait?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:32338
msgid "Use an Inetd-style service, which runs the Xvnc server on demand."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32339
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{frame-rate} (default: @code{60}) (type: number)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32341
msgid "The maximum number of updates per second sent to each client."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32342
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{security-types} (default: @code{'(\"None\")}) (type: security-types)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:32348
msgid "The allowed security schemes to use for incoming connections.  The default is \"None\", which is safe given that Xvnc is configured to authenticate the user via the display manager, and only for local connections.  Accepted values are any of the following: (\"None\" \"VncAuth\" \"Plain\" \"TLSNone\" \"TLSVnc\" \"TLSPlain\" \"X509None\" \"X509Vnc\")"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32349
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{localhost?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32353
msgid "Only allow connections from the same machine.  It is set to #true by default for security, which means SSH or another secure means should be used to expose the remote port."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32354
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{log-level} (default: @code{30}) (type: log-level)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32357
msgid "The log level, a number between 0 and 100, 100 meaning most verbose output.  The log messages are output to syslog."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32358
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{extra-options} (default: @code{'()}) (type: strings)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:32361
msgid "This can be used to provide extra Xvnc options not exposed via this <xvnc-configuration> record."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32369
#, no-wrap
msgid "VPN (virtual private network)"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32370
#, no-wrap
msgid "virtual private network (VPN)"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32374
msgid "The @code{(gnu services vpn)} module provides services related to @dfn{virtual private networks} (VPNs)."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:32375
#, no-wrap
msgid "Bitmask"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:32377
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "bitmask-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:32382
msgid "A service type for the @uref{https://bitmask.net, Bitmask} VPN client.  It makes the client available in the system and loads its polkit policy.  Please note that the client expects an active polkit-agent, which is either run by your desktop-environment or should be run manually."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:32384
#, no-wrap
msgid "OpenVPN"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32390
msgid "It provides a @emph{client} service for your machine to connect to a VPN, and a @emph{server} service for your machine to host a VPN@.  Both @code{openvpn-client-service-type} and @code{openvpn-server-service-type} can be run simultaneously."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:32391
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "openvpn-client-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:32393
msgid "Type of the service that runs @command{openvpn}, a VPN daemon, as a client."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:32396
msgid "The value for this service is a @code{<openvpn-client-configuration>} object."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:32398
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "openvpn-server-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:32400
msgid "Type of the service that runs @command{openvpn}, a VPN daemon, as a server."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:32403
msgid "The value for this service is a @code{<openvpn-server-configuration>} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32407
#, fuzzy, no-wrap
msgid "{Data Type} openvpn-client-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:32409
msgid "Available @code{openvpn-client-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32411 guix-git/doc/guix.texi:32499
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{openvpn} (default: @code{openvpn}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:32413 guix-git/doc/guix.texi:32501
msgid "The OpenVPN package."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32414 guix-git/doc/guix.texi:32502
#, fuzzy, no-wrap
msgid "@code{pid-file} (default: @code{\"/var/run/openvpn/openvpn.pid\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32416 guix-git/doc/guix.texi:32504
msgid "The OpenVPN pid file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32417 guix-git/doc/guix.texi:32505
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{proto} (default: @code{udp}) (type: proto)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32420 guix-git/doc/guix.texi:32508
msgid "The protocol (UDP or TCP) used to open a channel between clients and servers."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32421 guix-git/doc/guix.texi:32509
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{dev} (default: @code{tun}) (type: dev)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32423 guix-git/doc/guix.texi:32511
msgid "The device type used to represent the VPN connection."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32424 guix-git/doc/guix.texi:32512
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{ca} (default: @code{\"/etc/openvpn/ca.crt\"}) (type: maybe-string)"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32426 guix-git/doc/guix.texi:32514
msgid "The certificate authority to check connections against."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32427 guix-git/doc/guix.texi:32515
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{cert} (default: @code{\"/etc/openvpn/client.crt\"}) (type: maybe-string)"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32430 guix-git/doc/guix.texi:32518
msgid "The certificate of the machine the daemon is running on.  It should be signed by the authority given in @code{ca}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32431 guix-git/doc/guix.texi:32519
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{key} (default: @code{\"/etc/openvpn/client.key\"}) (type: maybe-string)"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32434 guix-git/doc/guix.texi:32522
msgid "The key of the machine the daemon is running on.  It must be the key whose certificate is @code{cert}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32435 guix-git/doc/guix.texi:32523
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{comp-lzo?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32437 guix-git/doc/guix.texi:32525
msgid "Whether to use the lzo compression algorithm."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32438 guix-git/doc/guix.texi:32526
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{persist-key?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32440 guix-git/doc/guix.texi:32528
msgid "Don't re-read key files across SIGUSR1 or --ping-restart."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32441 guix-git/doc/guix.texi:32529
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{persist-tun?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32444 guix-git/doc/guix.texi:32532
msgid "Don't close and reopen TUN/TAP device or run up/down scripts across SIGUSR1 or --ping-restart restarts."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32445 guix-git/doc/guix.texi:32533
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{fast-io?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32448 guix-git/doc/guix.texi:32536
msgid "(Experimental) Optimize TUN/TAP/UDP I/O writes by avoiding a call to poll/epoll/select prior to the write operation."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32449 guix-git/doc/guix.texi:32537
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{verbosity} (default: @code{3}) (type: number)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32451 guix-git/doc/guix.texi:32539
msgid "Verbosity level."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32452
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{tls-auth} (default: @code{#f}) (type: tls-auth-client)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:32455 guix-git/doc/guix.texi:32543
msgid "Add an additional layer of HMAC authentication on top of the TLS control channel to protect against DoS attacks."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32456
#, fuzzy, no-wrap
msgid "@code{auth-user-pass} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32460
msgid "Authenticate with server using username/password.  The option is a file containing username/password on 2 lines.  Do not use a file-like object as it would be added to the store and readable by any user."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32461
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{verify-key-usage?} (default: @code{#t}) (type: key-usage)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:32463
msgid "Whether to check the server certificate has server usage extension."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32464
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{bind?} (default: @code{#f}) (type: bind)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32466
msgid "Bind to a specific local port number."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32467
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{resolv-retry?} (default: @code{#t}) (type: resolv-retry)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32469
msgid "Retry resolving server address."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32470
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{remote} (default: @code{'()}) (type: openvpn-remote-list)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32472
msgid "A list of remote servers to connect to."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32473
#, fuzzy, no-wrap
msgid "{Data Type} openvpn-remote-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:32475
msgid "Available @code{openvpn-remote-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32477
#, fuzzy, no-wrap
msgid "@code{name} (default: @code{\"my-server\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32479
msgid "Server name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32480 guix-git/doc/guix.texi:32544
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{port} (default: @code{1194}) (type: number)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32482
msgid "Port number the server listens to."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32495
#, fuzzy, no-wrap
msgid "{Data Type} openvpn-server-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:32497
msgid "Available @code{openvpn-server-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32540
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{tls-auth} (default: @code{#f}) (type: tls-auth-server)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:32546
msgid "Specifies the port number on which the server listens."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32547
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{server} (default: @code{\"10.8.0.0 255.255.255.0\"}) (type: ip-mask)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32549
msgid "An ip and mask specifying the subnet inside the virtual network."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32550
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{server-ipv6} (default: @code{#f}) (type: cidr6)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:32552
msgid "A CIDR notation specifying the IPv6 subnet inside the virtual network."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32553
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{dh} (default: @code{\"/etc/openvpn/dh2048.pem\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:32555
msgid "The Diffie-Hellman parameters file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32556
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{ifconfig-pool-persist} (default: @code{\"/etc/openvpn/ipp.txt\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:32558
msgid "The file that records client IPs."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32559
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{redirect-gateway?} (default: @code{#f}) (type: gateway)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32561
msgid "When true, the server will act as a gateway for its clients."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32562
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{client-to-client?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32564
msgid "When true, clients are allowed to talk to each other inside the VPN."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32565
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{keepalive} (default: @code{(10 120)}) (type: keepalive)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32571
msgid "Causes ping-like messages to be sent back and forth over the link so that each side knows when the other side has gone down.  @code{keepalive} requires a pair.  The first element is the period of the ping sending, and the second element is the timeout before considering the other side down."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32572
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{max-clients} (default: @code{100}) (type: number)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32574
msgid "The maximum number of clients."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32575
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{status} (default: @code{\"/var/run/openvpn/status\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:32578
msgid "The status file.  This file shows a small report on current connection.  It is truncated and rewritten every minute."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32579
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{client-config-dir} (default: @code{'()}) (type: openvpn-ccd-list)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32581
msgid "The list of configuration for some clients."
msgstr ""

#. type: subheading
#: guix-git/doc/guix.texi:32588
#, no-wrap
msgid "strongSwan"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32592
msgid "Currently, the strongSwan service only provides legacy-style configuration with @file{ipsec.conf} and @file{ipsec.secrets} files."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:32593
#, fuzzy, no-wrap
msgid "strongswan-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:32597
msgid "A service type for configuring strongSwan for IPsec @acronym{VPN, Virtual Private Networking}.  Its value must be a @code{strongswan-configuration} record as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:32603
#, no-wrap
msgid ""
"(service strongswan-service-type\n"
"         (strongswan-configuration\n"
"          (ipsec-conf \"/etc/ipsec.conf\")\n"
"          (ipsec-secrets \"/etc/ipsec.secrets\")))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32607
#, fuzzy, no-wrap
msgid "{Data Type} strongswan-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:32609
#, fuzzy
msgid "Data type representing the configuration of the StrongSwan service."
msgstr "Gerencie a configuração do sistema operacional."

#. type: code{#1}
#: guix-git/doc/guix.texi:32611
#, no-wrap
msgid "strongswan"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32613
msgid "The strongSwan package to use for this service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32614
#, fuzzy, no-wrap
#| msgid "@code{nsec3?} (default: @code{#f})"
msgid "@code{ipsec-conf} (default: @code{#f})"
msgstr "@code{nsec3?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32617
msgid "The file name of your @file{ipsec.conf}.  If not @code{#f}, then this and @code{ipsec-secrets} must both be strings."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32618
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{ipsec-secrets} (default @code{#f})"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32621
msgid "The file name of your @file{ipsec.secrets}.  If not @code{#f}, then this and @code{ipsec-conf} must both be strings."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:32625
#, no-wrap
msgid "Wireguard"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:32627
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "wireguard-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:32630
msgid "A service type for a Wireguard tunnel interface.  Its value must be a @code{wireguard-configuration} record as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:32641
#, no-wrap
msgid ""
"(service wireguard-service-type\n"
"         (wireguard-configuration\n"
"          (peers\n"
"           (list\n"
"            (wireguard-peer\n"
"             (name \"my-peer\")\n"
"             (endpoint \"my.wireguard.com:51820\")\n"
"             (public-key \"hzpKg9X1yqu1axN6iJp0mWf6BZGo8m1wteKwtTmDGF4=\")\n"
"             (allowed-ips '(\"10.0.0.2/32\")))))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32645
#, no-wrap
msgid "{Data Type} wireguard-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32647
msgid "Data type representing the configuration of the Wireguard service."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:32649
#, no-wrap
msgid "wireguard"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32651
msgid "The wireguard package to use for this service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32652
#, no-wrap
msgid "@code{interface} (default: @code{\"wg0\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32654
msgid "The interface name for the VPN."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32655
#, no-wrap
msgid "@code{addresses} (default: @code{'(\"10.0.0.1/32\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32657
msgid "The IP addresses to be assigned to the above interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32658
#, fuzzy, no-wrap
#| msgid "@code{port} (default: @code{8081})"
msgid "@code{port} (default: @code{51820})"
msgstr "@code{porta} (default: @code{8081})"

#. type: table
#: guix-git/doc/guix.texi:32660
msgid "The port on which to listen for incoming connections."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32661
#, fuzzy, no-wrap
#| msgid "@code{id} (default: @code{#f})"
msgid "@code{dns} (default: @code{#f})"
msgstr "@code{id} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32663
msgid "The DNS server(s) to announce to VPN clients via DHCP."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32664
#, no-wrap
msgid "@code{private-key} (default: @code{\"/etc/wireguard/private.key\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32667
msgid "The private key file for the interface.  It is automatically generated if the file does not exist."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32668
#, no-wrap
msgid "@code{peers} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32671
msgid "The authorized peers on this interface.  This is a list of @var{wireguard-peer} records."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32672
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{pre-up} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:32674
msgid "The script commands to be run before setting up the interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32675
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{post-up} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:32677
msgid "The script commands to be run after setting up the interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32678
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{pre-down} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:32680
msgid "The script commands to be run before tearing down the interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32681
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{post-down} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:32683
msgid "The script commands to be run after tearing down the interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32684
#, fuzzy, no-wrap
#| msgid "@code{cache} (default: @code{#f})"
msgid "@code{table} (default: @code{\"auto\"})"
msgstr "@code{cache} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32689
msgid "The routing table to which routes are added, as a string.  There are two special values: @code{\"off\"} that disables the creation of routes altogether, and @code{\"auto\"} (the default) that adds routes to the default table and enables special handling of default routes."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32693
#, no-wrap
msgid "{Data Type} wireguard-peer"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32695
msgid "Data type representing a Wireguard peer attached to a given interface."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32699
msgid "The peer name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32700
#, no-wrap
msgid "@code{endpoint} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32703
msgid "The optional endpoint for the peer, such as @code{\"demo.wireguard.com:51820\"}."
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:32704 guix-git/doc/guix.texi:33255
#: guix-git/doc/guix.texi:33292 guix-git/doc/guix.texi:39261
#, no-wrap
msgid "public-key"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32706
msgid "The peer public-key represented as a base64 string."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32707
#, fuzzy, no-wrap
#| msgid "@code{shared?} (default: @code{#t})"
msgid "@code{preshared-key} (default: @code{#f})"
msgstr "@code{shared?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:32710
msgid "An optional pre-shared key file for this peer.  The given file will not be autogenerated."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:32711
#, no-wrap
msgid "allowed-ips"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32714
msgid "A list of IP addresses from which incoming traffic for this peer is allowed and to which incoming traffic for this peer is directed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32715
#, fuzzy, no-wrap
#| msgid "@code{key} (default: @code{#f})"
msgid "@code{keep-alive} (default: @code{#f})"
msgstr "@code{key} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32720
msgid "An optional time interval in seconds.  A packet will be sent to the server endpoint once per time interval.  This helps receiving incoming connections from this peer when you are behind a NAT or a firewall."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32726
#, no-wrap
msgid "NFS"
msgstr "NFS"

#. type: Plain text
#: guix-git/doc/guix.texi:32731
msgid "The @code{(gnu services nfs)} module provides the following services, which are most commonly used in relation to mounting or exporting directory trees as @dfn{network file systems} (NFS)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32735
msgid "While it is possible to use the individual components that together make up a Network File System service, we recommended to configure an NFS server with the @code{nfs-service-type}."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:32736
#, no-wrap
msgid "NFS Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32737
#, no-wrap
msgid "NFS, server"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32742
msgid "The NFS service takes care of setting up all NFS component services, kernel configuration file systems, and installs configuration files in the locations that NFS expects."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:32743
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "nfs-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:32745
msgid "A service type for a complete NFS server."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32747
#, no-wrap
msgid "{Data Type} nfs-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32750
msgid "This data type represents the configuration of the NFS service and all of its subsystems."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32752
msgid "It has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32753 guix-git/doc/guix.texi:32878
#: guix-git/doc/guix.texi:32903
#, no-wrap
msgid "@code{nfs-utils} (default: @code{nfs-utils})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32755
msgid "The nfs-utils package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32756
#, no-wrap
msgid "@code{nfs-versions} (default: @code{'(\"4.2\" \"4.1\" \"4.0\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32759
msgid "If a list of string values is provided, the @command{rpc.nfsd} daemon will be limited to supporting the given versions of the NFS protocol."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32760
#, no-wrap
msgid "@code{exports} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32765
msgid "This is a list of directories the NFS server should export.  Each entry is a list consisting of two elements: a directory name and a string containing all options.  This is an example in which the directory @file{/export} is served to all NFS clients as a read-only share:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:32771
#, no-wrap
msgid ""
"(nfs-configuration\n"
" (exports\n"
"  '((\"/export\"\n"
"     \"*(ro,insecure,no_subtree_check,crossmnt,fsid=0)\"))))\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32773
#, no-wrap
msgid "@code{rpcmountd-port} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32775
msgid "The network port that the @command{rpc.mountd} daemon should use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32776
#, no-wrap
msgid "@code{rpcstatd-port} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32778
msgid "The network port that the @command{rpc.statd} daemon should use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32779 guix-git/doc/guix.texi:32827
#, no-wrap
msgid "@code{rpcbind} (default: @code{rpcbind})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32781 guix-git/doc/guix.texi:32829
msgid "The rpcbind package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32782
#, no-wrap
msgid "@code{idmap-domain} (default: @code{\"localdomain\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32784
msgid "The local NFSv4 domain name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32785
#, no-wrap
msgid "@code{nfsd-port} (default: @code{2049})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32787
msgid "The network port that the @command{nfsd} daemon should use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32788
#, no-wrap
msgid "@code{nfsd-threads} (default: @code{8})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32790
msgid "The number of threads used by the @command{nfsd} daemon."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32791
#, no-wrap
msgid "@code{nfsd-tcp?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32793
msgid "Whether the @command{nfsd} daemon should listen on a TCP socket."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32794
#, no-wrap
msgid "@code{nfsd-udp?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32796
msgid "Whether the @command{nfsd} daemon should listen on a UDP socket."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32797 guix-git/doc/guix.texi:32881
#: guix-git/doc/guix.texi:32906
#, no-wrap
msgid "@code{pipefs-directory} (default: @code{\"/var/lib/nfs/rpc_pipefs\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32799 guix-git/doc/guix.texi:32883
#: guix-git/doc/guix.texi:32908
msgid "The directory where the pipefs file system is mounted."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32800
#, no-wrap
msgid "@code{debug} (default: @code{'()\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32804
msgid "A list of subsystems for which debugging output should be enabled.  This is a list of symbols.  Any of these symbols are valid: @code{nfsd}, @code{nfs}, @code{rpc}, @code{idmap}, @code{statd}, or @code{mountd}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32809
msgid "If you don't need a complete NFS service or prefer to build it yourself you can use the individual component services that are documented below."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:32810
#, no-wrap
msgid "RPC Bind Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32811
#, no-wrap
msgid "rpcbind"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32817
msgid "The RPC Bind service provides a facility to map program numbers into universal addresses.  Many NFS related services use this facility.  Hence it is automatically started when a dependent service starts."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:32818
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "rpcbind-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:32820
msgid "A service type for the RPC portmapper daemon."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32823
#, no-wrap
msgid "{Data Type} rpcbind-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32826
msgid "Data type representing the configuration of the RPC Bind Service.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32830
#, no-wrap
msgid "@code{warm-start?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32834
msgid "If this parameter is @code{#t}, then the daemon will read a state file on startup thus reloading state information saved by a previous instance."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:32838
#, no-wrap
msgid "Pipefs Pseudo File System"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32839
#, no-wrap
msgid "pipefs"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32840
#, no-wrap
msgid "rpc_pipefs"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32844
msgid "The pipefs file system is used to transfer NFS related data between the kernel and user space programs."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:32845
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "pipefs-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:32847
msgid "A service type for the pipefs pseudo file system."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32849
#, no-wrap
msgid "{Data Type} pipefs-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32852
msgid "Data type representing the configuration of the pipefs pseudo file system service.  This type has the following parameters:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32853
#, no-wrap
msgid "@code{mount-point} (default: @code{\"/var/lib/nfs/rpc_pipefs\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32855
msgid "The directory to which the file system is to be attached."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:32859
#, no-wrap
msgid "GSS Daemon Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32860
#, no-wrap
msgid "GSSD"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32861
#, no-wrap
msgid "GSS"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32862
#, no-wrap
msgid "global security system"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32869
msgid "The @dfn{global security system} (GSS) daemon provides strong security for RPC based protocols.  Before exchanging RPC requests an RPC client must establish a security context.  Typically this is done using the Kerberos command @command{kinit} or automatically at login time using PAM services (@pxref{Kerberos Services})."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:32870
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "gss-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:32872
msgid "A service type for the Global Security System (GSS) daemon."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32874
#, no-wrap
msgid "{Data Type} gss-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32877
msgid "Data type representing the configuration of the GSS daemon service.  This type has the following parameters:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32880
msgid "The package in which the @command{rpc.gssd} command is to be found."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:32888
#, no-wrap
msgid "IDMAP Daemon Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32889
#, no-wrap
msgid "idmapd"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32890
#, no-wrap
msgid "name mapper"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32894
msgid "The idmap daemon service provides mapping between user IDs and user names.  Typically it is required in order to access file systems mounted via NFSv4."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:32895
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "idmap-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:32897
msgid "A service type for the Identity Mapper (IDMAP) daemon."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32899
#, no-wrap
msgid "{Data Type} idmap-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32902
msgid "Data type representing the configuration of the IDMAP daemon service.  This type has the following parameters:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32905
msgid "The package in which the @command{rpc.idmapd} command is to be found."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32909 guix-git/doc/guix.texi:33052
#, no-wrap
msgid "@code{domain} (default: @code{#f})"
msgstr "@code{domain} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32913
msgid "The local NFSv4 domain name.  This must be a string or @code{#f}.  If it is @code{#f} then the daemon will use the host's fully qualified domain name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32914
#, no-wrap
msgid "@code{verbosity} (default: @code{0})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:32916
msgid "The verbosity level of the daemon."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:32923 guix-git/doc/guix.texi:32929
#, no-wrap
msgid "Samba"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:32924
#, no-wrap
msgid "SMB"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32928
msgid "The @code{(gnu services samba)} module provides service definitions for Samba as well as additional helper services.  Currently it provides the following services."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:32936
msgid "@uref{https://www.samba.org, Samba} provides network shares for folders and printers using the SMB/CIFS protocol commonly used on Windows.  It can also act as an Active Directory Domain Controller (AD DC) for other hosts in an heterougenious network with different types of Computer systems."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:32937
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "samba-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:32942
msgid "The service type to enable the samba services @code{samba}, @code{nmbd}, @code{smbd} and @code{winbindd}.  By default this service type does not run any of the Samba daemons; they must be enabled individually."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:32946
msgid "Below is a basic example that configures a simple, anonymous (unauthenticated) Samba file share exposing the @file{/public} directory."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:32951
msgid "The @file{/public} directory and its contents must be world readable/writable, so you'll want to run @samp{chmod -R 777 /public} on it."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:32953
#, fuzzy, no-wrap
#| msgid "isolation"
msgid "Caution"
msgstr "isolação"

#. type: quotation
#: guix-git/doc/guix.texi:32957
msgid "Such a Samba configuration should only be used in controlled environments, and you should not share any private files using it, as anyone connecting to your network would be able to access them."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:32966
#, no-wrap
msgid ""
"(service samba-service-type (samba-configuration\n"
"                             (enable-smbd? #t)\n"
"                             (config-file (plain-file \"smb.conf\" \"\\\n"
"[global]\n"
"map to guest = Bad User\n"
"logging = syslog@@1\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:32973
#, no-wrap
msgid ""
"[public]\n"
"browsable = yes\n"
"path = /public\n"
"read only = no\n"
"guest ok = yes\n"
"guest only = yes\\n\"))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:32977
#, fuzzy, no-wrap
msgid "{Data Type} samba-service-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:32979
#, fuzzy
msgid "Configuration record for the Samba suite."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:32981
#, fuzzy, no-wrap
msgid "@code{package} (default: @code{samba})"
msgstr "@code{cache} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32983
#, fuzzy
msgid "The samba package to use."
msgstr "O pacote GPM a ser usado."

#. type: table
#: guix-git/doc/guix.texi:32987
msgid "The config file to use.  To learn about its syntax, run @samp{man smb.conf}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32988
#, fuzzy, no-wrap
#| msgid "@code{manual?} (default: @code{#f})"
msgid "@code{enable-samba?} (default: @code{#f})"
msgstr "@code{manual?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32990
msgid "Enable the @code{samba} daemon."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32991
#, fuzzy, no-wrap
#| msgid "@code{manual?} (default: @code{#f})"
msgid "@code{enable-smbd?} (default: @code{#f})"
msgstr "@code{manual?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32993
msgid "Enable the @code{smbd} daemon."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32994
#, fuzzy, no-wrap
#| msgid "@code{manual?} (default: @code{#f})"
msgid "@code{enable-nmbd?} (default: @code{#f})"
msgstr "@code{manual?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32996
msgid "Enable the @code{nmbd} daemon."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:32997
#, fuzzy, no-wrap
#| msgid "@code{manual?} (default: @code{#f})"
msgid "@code{enable-winbindd?} (default: @code{#f})"
msgstr "@code{manual?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:32999
msgid "Enable the @code{winbindd} daemon."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:33003
#, fuzzy, no-wrap
#| msgid "Web Services"
msgid "wsdd, Web service discovery daemon"
msgstr "Serviços Web"

#. type: subsubheading
#: guix-git/doc/guix.texi:33004
#, no-wrap
msgid "Web Service Discovery Daemon"
msgstr "Daemon de Descoberta de Serviço da Web"

#. type: Plain text
#: guix-git/doc/guix.texi:33012
msgid "The @acronym{WSDD, Web Service Discovery daemon} implements the @uref{http://docs.oasis-open.org/ws-dd/discovery/1.1/os/wsdd-discovery-1.1-spec-os.html, Web Services Dynamic Discovery} protocol that enables host discovery over Multicast DNS, similar to what Avahi does.  It is a drop-in replacement for SMB hosts that have had SMBv1 disabled for security reasons."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:33013
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "wsdd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:33017
msgid "Service type for the WSD host daemon.  The value for this service type is a @code{wsdd-configuration} record.  The details for the @code{wsdd-configuration} record type are given below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:33019
#, fuzzy, no-wrap
msgid "{Data Type} wsdd-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:33021
#, fuzzy
msgid "This data type represents the configuration for the wsdd service."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:33024
#, fuzzy, no-wrap
msgid "@code{package} (default: @code{wsdd})"
msgstr "@code{cache} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33026
#, fuzzy
#| msgid "The GPM package to use."
msgid "The wsdd package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:33027
#, fuzzy, no-wrap
#| msgid "@code{ipv4?} (default: @code{#t})"
msgid "@code{ipv4only?} (default: @code{#f})"
msgstr "@code{ipv4?} (default: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:33029
msgid "Only listen to IPv4 addresses."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33030
#, fuzzy, no-wrap
#| msgid "@code{ipv6?} (default: @code{#t})"
msgid "@code{ipv6only} (default: @code{#f})"
msgstr "@code{ipv6?} (default: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:33033
msgid "Only listen to IPv6 addresses.  Please note: Activating both options is not possible, since there would be no IP versions to listen to."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33038
msgid "Chroot into a separate directory to prevent access to other directories.  This is to increase security in case there is a vulnerability in @command{wsdd}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33039
#, fuzzy, no-wrap
#| msgid "@code{host} (default: @code{#f})"
msgid "@code{hop-limit} (default: @code{1})"
msgstr "@code{host} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33042
msgid "Limit to the level of hops for multicast packets.  The default is @var{1} which should prevent packets from leaving the local network."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33043
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{interface} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:33047
msgid "Limit to the given list of interfaces to listen to.  By default wsdd will listen to all interfaces.  Except the loopback interface is never used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33048
#, fuzzy, no-wrap
#| msgid "@code{device} (default: @code{#f})"
msgid "@code{uuid-device} (default: @code{#f})"
msgstr "@code{device} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33051
msgid "The WSD protocol requires a device to have a UUID.  Set this to manually assign the service a UUID."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33054
msgid "Notify this host is a member of an Active Directory."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33059
msgid "Manually set the hostname rather than letting @command{wsdd} inherit this host's hostname.  Only the host name part of a possible FQDN will be used in the default case."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33060
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{preserve-case?} (default: @code{#f})"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33064
msgid "By default @command{wsdd} will convert the hostname in workgroup to all uppercase.  The opposite is true for hostnames in domains.  Setting this parameter will preserve case."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33065
#, fuzzy, no-wrap
#| msgid "@code{group} (default: @var{git})"
msgid "@code{workgroup} (default: @var{\"WORKGROUP\"})"
msgstr "@code{group} (default: @var{git})"

#. type: table
#: guix-git/doc/guix.texi:33068
msgid "Change the name of the workgroup.  By default @command{wsdd} reports this host being member of a workgroup."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33079
msgid "@uref{https://guix.gnu.org/cuirass/, Cuirass} is a continuous integration tool for Guix.  It can be used both for development and for providing substitutes to others (@pxref{Substitutes})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33081
msgid "The @code{(gnu services cuirass)} module provides the following service."
msgstr ""

#. type: defvr
#: guix-git/doc/guix.texi:33082
#, no-wrap
msgid "{Scheme Procedure} cuirass-service-type"
msgstr ""

#. type: defvr
#: guix-git/doc/guix.texi:33085
msgid "The type of the Cuirass service.  Its value must be a @code{cuirass-configuration} object, as described below."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33090
msgid "To add build jobs, you have to set the @code{specifications} field of the configuration.  For instance, the following example will build all the packages provided by the @code{my-channel} channel."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:33101
#, no-wrap
msgid ""
"(define %cuirass-specs\n"
"  #~(list (specification\n"
"           (name \"my-channel\")\n"
"           (build '(channels my-channel))\n"
"           (channels\n"
"            (cons (channel\n"
"                   (name 'my-channel)\n"
"                   (url \"https://my-channel.git\"))\n"
"                  %default-channels)))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:33105 guix-git/doc/guix.texi:33119
#, no-wrap
msgid ""
"(service cuirass-service-type\n"
"         (cuirass-configuration\n"
"          (specifications %cuirass-specs)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33109
msgid "To build the @code{linux-libre} package defined by the default Guix channel, one can use the following configuration."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:33115
#, no-wrap
msgid ""
"(define %cuirass-specs\n"
"  #~(list (specification\n"
"           (name \"my-linux\")\n"
"           (build '(packages \"linux-libre\")))))\n"
"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33124
msgid "The other configuration possibilities, as well as the specification record itself are described in the Cuirass manual (@pxref{Specifications,,, cuirass, Cuirass})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33128
msgid "While information related to build jobs is located directly in the specifications, global settings for the @command{cuirass} process are accessible in other @code{cuirass-configuration} fields."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:33129
#, no-wrap
msgid "{Data Type} cuirass-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:33131
msgid "Data type representing the configuration of Cuirass."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33133 guix-git/doc/guix.texi:33270
#, no-wrap
msgid "@code{cuirass} (default: @code{cuirass})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33135 guix-git/doc/guix.texi:33272
msgid "The Cuirass package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33136
#, no-wrap
msgid "@code{log-file} (default: @code{\"/var/log/cuirass.log\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33138 guix-git/doc/guix.texi:33242
#: guix-git/doc/guix.texi:33285
msgid "Location of the log file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33139
#, no-wrap
msgid "@code{web-log-file} (default: @code{\"/var/log/cuirass-web.log\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33141
msgid "Location of the log file used by the web interface."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33142
#, no-wrap
msgid "@code{cache-directory} (default: @code{\"/var/cache/cuirass\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33144
msgid "Location of the repository cache."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33145
#, no-wrap
msgid "@code{user} (default: @code{\"cuirass\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33147
msgid "Owner of the @code{cuirass} process."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33148
#, no-wrap
msgid "@code{group} (default: @code{\"cuirass\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33150
msgid "Owner's group of the @code{cuirass} process."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33151
#, no-wrap
msgid "@code{interval} (default: @code{60})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33154
msgid "Number of seconds between the poll of the repositories followed by the Cuirass jobs."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33155
#, fuzzy, no-wrap
msgid "@code{parameters} (default: @code{#f})"
msgstr "@code{term} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33158
msgid "Read parameters from the given @var{parameters} file.  The supported parameters are described here (@pxref{Parameters,,, cuirass, Cuirass})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33159
#, fuzzy, no-wrap
msgid "@code{remote-server} (default: @code{#f})"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33162
msgid "A @code{cuirass-remote-server-configuration} record to use the build remote mechanism or @code{#f} to use the default build mechanism."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33163
#, no-wrap
msgid "@code{database} (default: @code{\"dbname=cuirass host=/var/run/postgresql\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33168
msgid "Use @var{database} as the database containing the jobs and the past build results. Since Cuirass uses PostgreSQL as a database engine, @var{database} must be a string such as @code{\"dbname=cuirass host=localhost\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33169
#, no-wrap
msgid "@code{port} (default: @code{8081})"
msgstr "@code{porta} (default: @code{8081})"

#. type: table
#: guix-git/doc/guix.texi:33171
msgid "Port number used by the HTTP server."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33175
msgid "Listen on the network interface for @var{host}.  The default is to accept connections from localhost."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33176
#, no-wrap
msgid "@code{specifications} (default: @code{#~'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33180
msgid "A gexp (@pxref{G-Expressions}) that evaluates to a list of specifications records.  The specification record is described in the Cuirass manual (@pxref{Specifications,,, cuirass, Cuirass})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33181
#, no-wrap
msgid "@code{use-substitutes?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33184
msgid "This allows using substitutes to avoid building every dependencies of a job from source."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33185 guix-git/doc/guix.texi:41460
#, no-wrap
msgid "@code{one-shot?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33187
msgid "Only evaluate specifications and build derivations once."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33188
#, no-wrap
msgid "@code{fallback?} (default: @code{#f})"
msgstr "@code{fallback?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33191
msgid "When substituting a pre-built binary fails, fall back to building packages locally."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33194
msgid "Extra options to pass when running the Cuirass processes."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:33198
#, fuzzy, no-wrap
msgid "remote build"
msgstr "compilações reproduzíveis"

#. type: subsubheading
#: guix-git/doc/guix.texi:33199
#, no-wrap
msgid "Cuirass remote building"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33202
msgid "Cuirass supports two mechanisms to build derivations."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33204
#, fuzzy, no-wrap
msgid "Using the local Guix daemon."
msgstr "Executando o daemon de compilação."

#. type: itemize
#: guix-git/doc/guix.texi:33208
msgid "This is the default build mechanism.  Once the build jobs are evaluated, they are sent to the local Guix daemon.  Cuirass then listens to the Guix daemon output to detect the various build events."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33209
#, fuzzy, no-wrap
msgid "Using the remote build mechanism."
msgstr "Preparando o ambiente de compilação isolado."

#. type: itemize
#: guix-git/doc/guix.texi:33213
msgid "The build jobs are not submitted to the local Guix daemon.  Instead, a remote server dispatches build requests to the connect remote workers, according to the build priorities."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33220
msgid "To enable this build mode a @code{cuirass-remote-server-configuration} record must be passed as @code{remote-server} argument of the @code{cuirass-configuration} record.  The @code{cuirass-remote-server-configuration} record is described below."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33225
msgid "This build mode scales way better than the default build mode.  This is the build mode that is used on the GNU Guix build farm at @url{https://ci.guix.gnu.org}.  It should be preferred when using Cuirass to build large amount of packages."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:33226
#, no-wrap
msgid "{Data Type} cuirass-remote-server-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:33228
msgid "Data type representing the configuration of the Cuirass remote-server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33230
#, fuzzy, no-wrap
msgid "@code{backend-port} (default: @code{5555})"
msgstr "@code{porta} (default: @code{53})"

#. type: table
#: guix-git/doc/guix.texi:33233
msgid "The TCP port for communicating with @code{remote-worker} processes using ZMQ.  It defaults to @code{5555}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33234
#, fuzzy, no-wrap
msgid "@code{log-port} (default: @code{5556})"
msgstr "@code{porta} (default: @code{53})"

#. type: table
#: guix-git/doc/guix.texi:33236
msgid "The TCP port of the log server.  It defaults to @code{5556}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33237
#, fuzzy, no-wrap
msgid "@code{publish-port} (default: @code{5557})"
msgstr "@code{publish?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:33239
msgid "The TCP port of the publish server.  It defaults to @code{5557}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33240
#, fuzzy, no-wrap
msgid "@code{log-file} (default: @code{\"/var/log/cuirass-remote-server.log\"})"
msgstr "@code{daemon-socket} (padrão: @code{\"/var/guix/daemon-socket/socket\"})"

#. type: item
#: guix-git/doc/guix.texi:33243
#, fuzzy, no-wrap
msgid "@code{cache} (default: @code{\"/var/cache/cuirass/remote\"})"
msgstr "@code{daemon-socket} (padrão: @code{\"/var/guix/daemon-socket/socket\"})"

#. type: table
#: guix-git/doc/guix.texi:33245
msgid "Use @var{cache} directory to cache build log files."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33246
#, fuzzy, no-wrap
msgid "@code{trigger-url} (default: @code{#f})"
msgstr "@code{term} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33249
msgid "Once a substitute is successfully fetched, trigger substitute baking at @var{trigger-url}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33254
msgid "If set to false, do not start a publish server and ignore the @code{publish-port} argument.  This can be useful if there is already a standalone publish server standing next to the remote server."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:33256 guix-git/doc/guix.texi:33293
#, no-wrap
msgid "private-key"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33265
msgid "At least one remote worker must also be started on any machine of the local network to actually perform the builds and report their status."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:33266
#, no-wrap
msgid "{Data Type} cuirass-remote-worker-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:33268
msgid "Data type representing the configuration of the Cuirass remote-worker."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33273
#, fuzzy, no-wrap
msgid "@code{workers} (default: @code{1})"
msgstr "@code{workers} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33275
msgid "Start @var{workers} parallel workers."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33279
msgid "Do not use Avahi discovery and connect to the given @code{server} IP address instead."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33280
#, no-wrap
msgid "@code{systems} (default: @code{(list (%current-system))})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33282
msgid "Only request builds for the given @var{systems}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33283
#, fuzzy, no-wrap
msgid "@code{log-file} (default: @code{\"/var/log/cuirass-remote-worker.log\"})"
msgstr "@code{daemon-socket} (padrão: @code{\"/var/guix/daemon-socket/socket\"})"

#. type: item
#: guix-git/doc/guix.texi:33286
#, fuzzy, no-wrap
msgid "@code{publish-port} (default: @code{5558})"
msgstr "@code{publish?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:33288
msgid "The TCP port of the publish server.  It defaults to @code{5558}."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:33300
#, no-wrap
msgid "Laminar"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33305
msgid "@uref{https://laminar.ohwg.net/, Laminar} is a lightweight and modular Continuous Integration service.  It doesn't have a configuration web UI instead uses version-controllable configuration files and scripts."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33308
msgid "Laminar encourages the use of existing tools such as bash and cron instead of reinventing them."
msgstr ""

#. type: defvr
#: guix-git/doc/guix.texi:33309
#, no-wrap
msgid "{Scheme Procedure} laminar-service-type"
msgstr ""

#. type: defvr
#: guix-git/doc/guix.texi:33312
msgid "The type of the Laminar service.  Its value must be a @code{laminar-configuration} object, as described below."
msgstr ""

#. type: defvr
#: guix-git/doc/guix.texi:33316
msgid "All configuration values have defaults, a minimal configuration to get Laminar running is shown below. By default, the web interface is available on port 8080."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:33319
#, no-wrap
msgid "(service laminar-service-type)\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:33322
#, fuzzy, no-wrap
msgid "{Data Type} laminar-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:33324
#, fuzzy
msgid "Data type representing the configuration of Laminar."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:33326
#, fuzzy, no-wrap
msgid "@code{laminar} (default: @code{laminar})"
msgstr "@code{tmpdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33328
#, fuzzy
msgid "The Laminar package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:33329
#, fuzzy, no-wrap
msgid "@code{home-directory} (default: @code{\"/var/lib/laminar\"})"
msgstr "@code{daemon-socket} (padrão: @code{\"/var/guix/daemon-socket/socket\"})"

#. type: table
#: guix-git/doc/guix.texi:33331
msgid "The directory for job configurations and run directories."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33332
#, fuzzy, no-wrap
msgid "@code{bind-http} (default: @code{\"*:8080\"})"
msgstr "@code{porta} (default: @code{\"6600\"})"

#. type: table
#: guix-git/doc/guix.texi:33335
msgid "The interface/port or unix socket on which laminard should listen for incoming connections to the web frontend."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33336
#, fuzzy, no-wrap
msgid "@code{bind-rpc} (default: @code{\"unix-abstract:laminar\"})"
msgstr "@code{tor} (default: @code{tor})"

#. type: table
#: guix-git/doc/guix.texi:33339
msgid "The interface/port or unix socket on which laminard should listen for incoming commands such as build triggers."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33340
#, fuzzy, no-wrap
msgid "@code{title} (default: @code{\"Laminar\"})"
msgstr "@code{ttl} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33342
msgid "The page title to show in the web frontend."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33343
#, fuzzy, no-wrap
msgid "@code{keep-rundirs} (default: @code{0})"
msgstr "@code{workers} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33347
msgid "Set to an integer defining how many rundirs to keep per job.  The lowest-numbered ones will be deleted.  The default is 0, meaning all run dirs will be immediately deleted."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33348
#, fuzzy, no-wrap
msgid "@code{archive-url} (default: @code{#f})"
msgstr "@code{term} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33351
msgid "The web frontend served by laminard will use this URL to form links to artefacts archived jobs."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33352
#, fuzzy, no-wrap
msgid "@code{base-url} (default: @code{#f})"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33354
msgid "Base URL to use for links to laminar itself."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:33361
#, no-wrap
msgid "tlp"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:33362
#, no-wrap
msgid "power management with TLP"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:33363
#, no-wrap
msgid "TLP daemon"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33367
msgid "The @code{(gnu services pm)} module provides a Guix service definition for the Linux power management tool TLP."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33373
msgid "TLP enables various powersaving modes in userspace and kernel.  Contrary to @code{upower-service}, it is not a passive, monitoring tool, as it will apply custom settings each time a new power source is detected.  More information can be found at @uref{https://linrunner.de/en/tlp/tlp.html, TLP home page}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:33374
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "tlp-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:33378
msgid "The service type for the TLP tool.  The default settings are optimised for battery life on most systems, but you can tweak them to your heart's content by adding a valid @code{tlp-configuration}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:33383
#, no-wrap
msgid ""
"(service tlp-service-type\n"
"         (tlp-configuration\n"
"          (cpu-scaling-governor-on-ac (list \"performance\"))\n"
"          (sched-powersave-on-bat? #t)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33391
msgid "Each parameter definition is preceded by its type; for example, @samp{boolean foo} indicates that the @code{foo} parameter should be specified as a boolean.  Types starting with @code{maybe-} denote parameters that won't show up in TLP config file when their value is left unset, or is explicitly set to the @code{%unset-value} value."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33401
msgid "Available @code{tlp-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33402
#, no-wrap
msgid "{@code{tlp-configuration} parameter} package tlp"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33404
msgid "The TLP package."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33407
#, no-wrap
msgid "{@code{tlp-configuration} parameter} boolean tlp-enable?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33409
msgid "Set to true if you wish to enable TLP."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33414
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string tlp-default-mode"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33417
msgid "Default mode when no power supply can be detected.  Alternatives are AC and BAT."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33419
msgid "Defaults to @samp{\"AC\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33422
#, no-wrap
msgid "{@code{tlp-configuration} parameter} non-negative-integer disk-idle-secs-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33425
msgid "Number of seconds Linux kernel has to wait after the disk goes idle, before syncing on AC."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33430
#, no-wrap
msgid "{@code{tlp-configuration} parameter} non-negative-integer disk-idle-secs-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33432
msgid "Same as @code{disk-idle-ac} but on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33434
msgid "Defaults to @samp{2}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33437
#, no-wrap
msgid "{@code{tlp-configuration} parameter} non-negative-integer max-lost-work-secs-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33439
msgid "Dirty pages flushing periodicity, expressed in seconds."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33441 guix-git/doc/guix.texi:33664
#: guix-git/doc/guix.texi:36235 guix-git/doc/guix.texi:36243
msgid "Defaults to @samp{15}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33444
#, no-wrap
msgid "{@code{tlp-configuration} parameter} non-negative-integer max-lost-work-secs-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33446
msgid "Same as @code{max-lost-work-secs-on-ac} but on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33448
msgid "Defaults to @samp{60}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33451
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-space-separated-string-list cpu-scaling-governor-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33455
msgid "CPU frequency scaling governor on AC mode.  With intel_pstate driver, alternatives are powersave and performance.  With acpi-cpufreq driver, alternatives are ondemand, powersave, performance and conservative."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33460
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-space-separated-string-list cpu-scaling-governor-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33462
msgid "Same as @code{cpu-scaling-governor-on-ac} but on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33467
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-non-negative-integer cpu-scaling-min-freq-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33469
msgid "Set the min available frequency for the scaling governor on AC."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33474
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-non-negative-integer cpu-scaling-max-freq-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33476
msgid "Set the max available frequency for the scaling governor on AC."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33481
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-non-negative-integer cpu-scaling-min-freq-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33483
msgid "Set the min available frequency for the scaling governor on BAT."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33488
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-non-negative-integer cpu-scaling-max-freq-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33490
msgid "Set the max available frequency for the scaling governor on BAT."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33495
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-non-negative-integer cpu-min-perf-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33498
msgid "Limit the min P-state to control the power dissipation of the CPU, in AC mode.  Values are stated as a percentage of the available performance."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33503
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-non-negative-integer cpu-max-perf-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33506
msgid "Limit the max P-state to control the power dissipation of the CPU, in AC mode.  Values are stated as a percentage of the available performance."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33511
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-non-negative-integer cpu-min-perf-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33513
msgid "Same as @code{cpu-min-perf-on-ac} on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33518
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-non-negative-integer cpu-max-perf-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33520
msgid "Same as @code{cpu-max-perf-on-ac} on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33525
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-boolean cpu-boost-on-ac?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33527
msgid "Enable CPU turbo boost feature on AC mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33532
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-boolean cpu-boost-on-bat?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33534
msgid "Same as @code{cpu-boost-on-ac?} on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33539
#, no-wrap
msgid "{@code{tlp-configuration} parameter} boolean sched-powersave-on-ac?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33542
msgid "Allow Linux kernel to minimize the number of CPU cores/hyper-threads used under light load conditions."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33547
#, no-wrap
msgid "{@code{tlp-configuration} parameter} boolean sched-powersave-on-bat?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33549
msgid "Same as @code{sched-powersave-on-ac?} but on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33554
#, no-wrap
msgid "{@code{tlp-configuration} parameter} boolean nmi-watchdog?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33556
msgid "Enable Linux kernel NMI watchdog."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33561
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-string phc-controls"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33564
msgid "For Linux kernels with PHC patch applied, change CPU voltages.  An example value would be @samp{\"F:V F:V F:V F:V\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33569
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string energy-perf-policy-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33572
msgid "Set CPU performance versus energy saving policy on AC@.  Alternatives are performance, normal, powersave."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33574 guix-git/doc/guix.texi:33672
#: guix-git/doc/guix.texi:33730
msgid "Defaults to @samp{\"performance\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33577
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string energy-perf-policy-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33579
msgid "Same as @code{energy-perf-policy-ac} but on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33581 guix-git/doc/guix.texi:33679
msgid "Defaults to @samp{\"powersave\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33584
#, no-wrap
msgid "{@code{tlp-configuration} parameter} space-separated-string-list disks-devices"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33586
msgid "Hard disk devices."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33589
#, no-wrap
msgid "{@code{tlp-configuration} parameter} space-separated-string-list disk-apm-level-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33591
msgid "Hard disk advanced power management level."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33594
#, no-wrap
msgid "{@code{tlp-configuration} parameter} space-separated-string-list disk-apm-level-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33596
msgid "Same as @code{disk-apm-bat} but on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33599
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-space-separated-string-list disk-spindown-timeout-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33602
msgid "Hard disk spin down timeout.  One value has to be specified for each declared hard disk."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33607
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-space-separated-string-list disk-spindown-timeout-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33609
msgid "Same as @code{disk-spindown-timeout-on-ac} but on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33614
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-space-separated-string-list disk-iosched"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33618
msgid "Select IO scheduler for disk devices.  One value has to be specified for each declared hard disk.  Example alternatives are cfq, deadline and noop."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33623
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string sata-linkpwr-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33626
msgid "SATA aggressive link power management (ALPM) level.  Alternatives are min_power, medium_power, max_performance."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33628
msgid "Defaults to @samp{\"max_performance\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33631
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string sata-linkpwr-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33633
msgid "Same as @code{sata-linkpwr-ac} but on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33635
msgid "Defaults to @samp{\"min_power\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33638
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-string sata-linkpwr-blacklist"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33640
msgid "Exclude specified SATA host devices for link power management."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33645
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-on-off-boolean ahci-runtime-pm-on-ac?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33648
msgid "Enable Runtime Power Management for AHCI controller and disks on AC mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33653
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-on-off-boolean ahci-runtime-pm-on-bat?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33655
msgid "Same as @code{ahci-runtime-pm-on-ac} on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33660
#, no-wrap
msgid "{@code{tlp-configuration} parameter} non-negative-integer ahci-runtime-pm-timeout"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33662
msgid "Seconds of inactivity before disk is suspended."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33667
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string pcie-aspm-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33670
msgid "PCI Express Active State Power Management level.  Alternatives are default, performance, powersave."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33675
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string pcie-aspm-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33677
msgid "Same as @code{pcie-aspm-ac} but on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33682
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-non-negative-integer start-charge-thresh-bat0"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33684
msgid "Percentage when battery 0 should begin charging.  Only supported on some laptops."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33689
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-non-negative-integer stop-charge-thresh-bat0"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33691
msgid "Percentage when battery 0 should stop charging.  Only supported on some laptops."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33696
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-non-negative-integer start-charge-thresh-bat1"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33698
msgid "Percentage when battery 1 should begin charging.  Only supported on some laptops."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33703
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-non-negative-integer stop-charge-thresh-bat1"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33705
msgid "Percentage when battery 1 should stop charging.  Only supported on some laptops."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33710
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string radeon-power-profile-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33713
msgid "Radeon graphics clock speed level.  Alternatives are low, mid, high, auto, default."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33715
msgid "Defaults to @samp{\"high\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33718
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string radeon-power-profile-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33720
msgid "Same as @code{radeon-power-ac} but on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33722
msgid "Defaults to @samp{\"low\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33725
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string radeon-dpm-state-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33728
msgid "Radeon dynamic power management method (DPM).  Alternatives are battery, performance."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33733
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string radeon-dpm-state-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33735
msgid "Same as @code{radeon-dpm-state-ac} but on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33737
msgid "Defaults to @samp{\"battery\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33740
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string radeon-dpm-perf-level-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33742
msgid "Radeon DPM performance level.  Alternatives are auto, low, high."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33744 guix-git/doc/guix.texi:33751
#: guix-git/doc/guix.texi:33825
msgid "Defaults to @samp{\"auto\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33747
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string radeon-dpm-perf-level-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33749
msgid "Same as @code{radeon-dpm-perf-ac} but on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33754
#, no-wrap
msgid "{@code{tlp-configuration} parameter} on-off-boolean wifi-pwr-on-ac?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33756
msgid "Wifi power saving mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33761
#, no-wrap
msgid "{@code{tlp-configuration} parameter} on-off-boolean wifi-pwr-on-bat?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33763
msgid "Same as @code{wifi-power-ac?} but on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33768
#, no-wrap
msgid "{@code{tlp-configuration} parameter} y-n-boolean wol-disable?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33770
msgid "Disable wake on LAN."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33775
#, no-wrap
msgid "{@code{tlp-configuration} parameter} non-negative-integer sound-power-save-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33778
msgid "Timeout duration in seconds before activating audio power saving on Intel HDA and AC97 devices.  A value of 0 disables power saving."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33783
#, no-wrap
msgid "{@code{tlp-configuration} parameter} non-negative-integer sound-power-save-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33785
msgid "Same as @code{sound-powersave-ac} but on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33790
#, no-wrap
msgid "{@code{tlp-configuration} parameter} y-n-boolean sound-power-save-controller?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33792
msgid "Disable controller in powersaving mode on Intel HDA devices."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33797
#, no-wrap
msgid "{@code{tlp-configuration} parameter} boolean bay-poweroff-on-bat?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33801
msgid "Enable optical drive in UltraBay/MediaBay on BAT mode.  Drive can be powered on again by releasing (and reinserting) the eject lever or by pressing the disc eject button on newer models."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33806
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string bay-device"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33808
msgid "Name of the optical drive device to power off."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33810
msgid "Defaults to @samp{\"sr0\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33813
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string runtime-pm-on-ac"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33816
msgid "Runtime Power Management for PCI(e) bus devices.  Alternatives are on and auto."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33818
msgid "Defaults to @samp{\"on\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33821
#, no-wrap
msgid "{@code{tlp-configuration} parameter} string runtime-pm-on-bat"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33823
msgid "Same as @code{runtime-pm-ac} but on BAT mode."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33828
#, no-wrap
msgid "{@code{tlp-configuration} parameter} boolean runtime-pm-all?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33831
msgid "Runtime Power Management for all PCI(e) bus devices, except blacklisted ones."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33836
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-space-separated-string-list runtime-pm-blacklist"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33838
msgid "Exclude specified PCI(e) device addresses from Runtime Power Management."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33843
#, no-wrap
msgid "{@code{tlp-configuration} parameter} space-separated-string-list runtime-pm-driver-blacklist"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33846
msgid "Exclude PCI(e) devices assigned to the specified drivers from Runtime Power Management."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33849
#, no-wrap
msgid "{@code{tlp-configuration} parameter} boolean usb-autosuspend?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33851
msgid "Enable USB autosuspend feature."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33856
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-string usb-blacklist"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33858
msgid "Exclude specified devices from USB autosuspend."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33863
#, no-wrap
msgid "{@code{tlp-configuration} parameter} boolean usb-blacklist-wwan?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33865
msgid "Exclude WWAN devices from USB autosuspend."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33870
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-string usb-whitelist"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33873
msgid "Include specified devices into USB autosuspend, even if they are already excluded by the driver or via @code{usb-blacklist-wwan?}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33878
#, no-wrap
msgid "{@code{tlp-configuration} parameter} maybe-boolean usb-autosuspend-disable-on-shutdown?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33880
msgid "Enable USB autosuspend before shutdown."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33885
#, no-wrap
msgid "{@code{tlp-configuration} parameter} boolean restore-device-state-on-startup?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:33888
msgid "Restore radio device state (bluetooth, wifi, wwan) from previous shutdown on system startup."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:33893
#, no-wrap
msgid "thermald"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:33894
#, no-wrap
msgid "CPU frequency scaling with thermald"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:33895
#, no-wrap
msgid "Thermald daemon"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33899
msgid "The @code{(gnu services pm)} module provides an interface to thermald, a CPU frequency scaling service which helps prevent overheating."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:33900
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "thermald-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:33905
msgid "This is the service type for @uref{https://01.org/linux-thermal-daemon/, thermald}, the Linux Thermal Daemon, which is responsible for controlling the thermal state of processors and preventing overheating."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:33907
#, no-wrap
msgid "{Data Type} thermald-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:33909
msgid "Data type representing the configuration of @code{thermald-service-type}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33911
#, fuzzy, no-wrap
#| msgid "@code{deny?} (default: @code{#f})"
msgid "@code{adaptive?} (default: @code{#f})"
msgstr "@code{deny?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33914
msgid "Use @acronym{DPTF, Dynamic Power and Thermal Framework} adaptive tables when present."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33915
#, no-wrap
msgid "@code{ignore-cpuid-check?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33917
msgid "Ignore cpuid check for supported CPU models."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33918
#, no-wrap
msgid "@code{thermald} (default: @var{thermald})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33920
msgid "Package object of thermald."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33929
msgid "The @code{(gnu services audio)} module provides a service to start MPD (the Music Player Daemon)."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:33930
#, no-wrap
msgid "mpd"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:33931
#, no-wrap
msgid "Music Player Daemon"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33936
msgid "The Music Player Daemon (MPD) is a service that can play music while being controlled from the local machine or over the network by a variety of clients."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:33939
msgid "The following example shows how one might run @code{mpd} as user @code{\"bob\"} on port @code{6666}.  It uses pulseaudio for output."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:33945
#, no-wrap
msgid ""
"(service mpd-service-type\n"
"         (mpd-configuration\n"
"          (user \"bob\")\n"
"          (port \"6666\")))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:33947
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "mpd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:33949
msgid "The service type for @command{mpd}"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:33951
#, no-wrap
msgid "{Data Type} mpd-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:33953
msgid "Data type representing the configuration of @command{mpd}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33955
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{package} (default: @code{mpd}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:33957
#, fuzzy
#| msgid "The GPM package to use."
msgid "The MPD package."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:33958
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{user} (default: @code{%mpd-user}) (type: user-account)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:33960
msgid "The user to run mpd as."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33963
msgid "The default @code{%mpd-user} is a system user with the name ``mpd'', who is a part of the group @var{group} (see below)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33963
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{group} (default: @code{%mpd-group}) (type: user-group)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:33965
msgid "The group to run mpd as."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:33967
msgid "The default @code{%mpd-group} is a system group with name ``mpd''."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33967 guix-git/doc/guix.texi:34198
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{shepherd-requirement} (default: @code{'()}) (type: list-of-symbol)"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:33970
msgid "A list of symbols naming Shepherd services that this service will depend on."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33971
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{environment-variables} (default: @code{'(\"PULSE_CLIENTCONFIG=/etc/pulse/client.conf\" \"PULSE_CONFIG=/etc/pulse/daemon.conf\")}) (type: list-of-strings)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33973
#, fuzzy
#| msgid "Preparing the isolated build environment."
msgid "A list of strings specifying environment variables."
msgstr "Declarando o Ambiente Doméstico"

#. type: item
#: guix-git/doc/guix.texi:33974
#, fuzzy, no-wrap
msgid "@code{log-file} (default: @code{\"/var/log/mpd/log\"}) (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33978
msgid "The location of the log file.  Set to @code{syslog} to use the local syslog daemon or @code{%unset-value} to omit this directive from the configuration file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33979
#, fuzzy, no-wrap
msgid "@code{log-level} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33983
msgid "Supress any messages below this threshold.  Available values: @code{notice}, @code{info}, @code{verbose}, @code{warning} and @code{error}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33984
#, fuzzy, no-wrap
msgid "@code{music-directory} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33986
msgid "The directory to scan for music files."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33987
#, fuzzy, no-wrap
msgid "@code{playlist-directory} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33989
msgid "The directory to store playlists."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33990
#, fuzzy, no-wrap
msgid "@code{db-file} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33992
msgid "The location of the music database."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33993
#, fuzzy, no-wrap
msgid "@code{state-file} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33995
msgid "The location of the file that stores current MPD's state."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33996
#, fuzzy, no-wrap
msgid "@code{sticker-file} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:33998
msgid "The location of the sticker database."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:33999
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{default-port} (default: @code{6600}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34001
msgid "The default port to run mpd on."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34002
#, fuzzy, no-wrap
msgid "@code{endpoints} (type: maybe-list-of-strings)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34008
msgid "The addresses that mpd will bind to.  A port different from @var{default-port} may be specified, e.g. @code{localhost:6602} and IPv6 addresses must be enclosed in square brackets when a different port is used.  To use a Unix domain socket, an absolute path or a path starting with @code{~} can be specified here."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34009
#, fuzzy, no-wrap
msgid "@code{database} (type: maybe-mpd-plugin)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34011
#, fuzzy
msgid "MPD database plugin configuration."
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:34012
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{partitions} (default: @code{'()}) (type: list-of-mpd-partition)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34014
#, fuzzy
#| msgid "Derivations"
msgid "List of MPD \"partitions\"."
msgstr "Derivações"

#. type: item
#: guix-git/doc/guix.texi:34015
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{neighbors} (default: @code{'()}) (type: list-of-mpd-plugin)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34017
msgid "List of MPD neighbor plugin configurations."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34018
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{inputs} (default: @code{'()}) (type: list-of-mpd-plugin)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34020
msgid "List of MPD input plugin configurations."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34021
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{archive-plugins} (default: @code{'()}) (type: list-of-mpd-plugin)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34023
msgid "List of MPD archive plugin configurations."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34024
#, fuzzy, no-wrap
msgid "@code{input-cache-size} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34026
msgid "MPD input cache size."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34027
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{decoders} (default: @code{'()}) (type: list-of-mpd-plugin)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:34029
msgid "List of MPD decoder plugin configurations."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34030
#, fuzzy, no-wrap
msgid "@code{resampler} (type: maybe-mpd-plugin)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34032
#, fuzzy
#| msgid "git configuration"
msgid "MPD resampler plugin configuration."
msgstr "Configuração do git"

#. type: item
#: guix-git/doc/guix.texi:34033
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{filters} (default: @code{'()}) (type: list-of-mpd-plugin)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:34035
msgid "List of MPD filter plugin configurations."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34036
#, fuzzy, no-wrap
msgid "@code{outputs} (type: list-of-mpd-plugin-or-output)"
msgstr "build-machine {Data Type}"

#. type: table
#: guix-git/doc/guix.texi:34039
msgid "The audio outputs that MPD can use.  By default this is a single output using pulseaudio."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34040
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{playlist-plugins} (default: @code{'()}) (type: list-of-mpd-plugin)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34042
msgid "List of MPD playlist plugin configurations."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34043 guix-git/doc/guix.texi:34063
#: guix-git/doc/guix.texi:34079 guix-git/doc/guix.texi:34133
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{extra-options} (default: @code{'()}) (type: alist)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:34046
msgid "An association list of option symbols/strings to string values to be appended to the configuration."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:34050
#, fuzzy, no-wrap
msgid "{Data Type} mpd-plugin"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:34052
#, fuzzy
msgid "Data type representing a @command{mpd} plugin."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:34054
#, fuzzy, no-wrap
msgid "@code{plugin} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34056
msgid "Plugin name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34057
#, fuzzy, no-wrap
msgid "@code{name} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34059
msgid "Name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34060
#, fuzzy, no-wrap
msgid "@code{enabled?} (type: maybe-boolean)"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34062
msgid "Whether the plugin is enabled/disabled."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:34068
msgid "An association list of option symbols/strings to string values to be appended to the plugin configuration.  See @uref{https://mpd.readthedocs.io/en/latest/plugins.html,MPD plugin reference} for available options."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:34072
#, fuzzy, no-wrap
msgid "{Data Type} mpd-partition"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:34074
#, fuzzy
msgid "Data type representing a @command{mpd} partition."
msgstr "Gerencie a configuração do sistema operacional."

#. type: table
#: guix-git/doc/guix.texi:34078
#, fuzzy
#| msgid "Derivations"
msgid "Partition name."
msgstr "Derivações"

#. type: table
#: guix-git/doc/guix.texi:34084
msgid "An association list of option symbols/strings to string values to be appended to the partition configuration.  See @uref{https://mpd.readthedocs.io/en/latest/user.html#configuring-partitions,Configuring Partitions} for available options."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:34088
#, no-wrap
msgid "{Data Type} mpd-output"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:34090
#, fuzzy
msgid "Data type representing a @command{mpd} audio output."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:34092
#, fuzzy, no-wrap
msgid "@code{name} (default: @code{\"MPD\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34094
msgid "The name of the audio output."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34095
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{type} (default: @code{\"pulse\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:34097
msgid "The type of audio output."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34098 guix-git/doc/guix.texi:38901
#, fuzzy, no-wrap
#| msgid "@code{wait?} (default: @code{#t})"
msgid "@code{enabled?} (default: @code{#t}) (type: boolean)"
msgstr "@code{wait?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:34103
msgid "Specifies whether this audio output is enabled when MPD is started.  By default, all audio outputs are enabled.  This is just the default setting when there is no state file; with a state file, the previous state is restored."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34104
#, fuzzy, no-wrap
msgid "@code{format} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34108
msgid "Force a specific audio format on output.  See @uref{https://mpd.readthedocs.io/en/latest/user.html#audio-output-format,Global Audio Format} for a more detailed description."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34109
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{tags?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34113
msgid "If set to @code{#f}, then MPD will not send tags to this output.  This is only useful for output plugins that can receive tags, for example the @code{httpd} output plugin."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34114
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{always-on?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34118
msgid "If set to @code{#t}, then MPD attempts to keep this audio output always open.  This may be useful for streaming servers, when you don?t want to disconnect all listeners even when playback is accidentally stopped."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34119
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{mixer-type} (default: @code{\"none\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:34125
msgid "This field accepts a string that specifies which mixer should be used for this audio output: the @code{hardware} mixer, the @code{software} mixer, the @code{null} mixer (allows setting the volume, but with no effect; this can be used as a trick to implement an external mixer External Mixer) or no mixer (@code{none})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34126
#, fuzzy, no-wrap
msgid "@code{replay-gain-handler} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34132
msgid "This field accepts a string that specifies how @uref{https://mpd.readthedocs.io/en/latest/user.html#replay-gain,Replay Gain} is to be applied.  @code{software} uses an internal software volume control, @code{mixer} uses the configured (hardware) mixer control and @code{none} disables replay gain on this audio output."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:34136
msgid "An association list of option symbols/strings to string values to be appended to the audio output configuration."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:34142
msgid "The following example shows a configuration of @command{mpd} that configures some of its plugins and provides a HTTP audio streaming output."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:34166
#, no-wrap
msgid ""
"(service mpd-service-type\n"
"         (mpd-configuration\n"
"           (outputs\n"
"             (list (mpd-output\n"
"                     (name \"streaming\")\n"
"                     (type \"httpd\")\n"
"                     (mixer-type 'null)\n"
"                     (extra-options\n"
"                      `((encoder . \"vorbis\")\n"
"                        (port    . \"8080\"))))))\n"
"           (decoders\n"
"             (list (mpd-plugin\n"
"                     (plugin \"mikmod\")\n"
"                     (enabled? #f))\n"
"                   (mpd-plugin\n"
"                     (plugin \"openmpt\")\n"
"                     (enabled? #t)\n"
"                     (extra-options `((repeat-count . -1)\n"
"                                      (interpolation-filter . 1))))))\n"
"           (resampler (mpd-plugin\n"
"                        (plugin \"libsamplerate\")\n"
"                        (extra-options `((type . 0)))))))\n"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:34168
#, no-wrap
msgid "myMPD"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:34170
#, fuzzy, no-wrap
#| msgid "user interfaces"
msgid "MPD, web interface"
msgstr "interfaces de usuário"

#. type: cindex
#: guix-git/doc/guix.texi:34171
#, fuzzy, no-wrap
#| msgid "Mail Services"
msgid "myMPD service"
msgstr "Serviços de correio"

#. type: Plain text
#: guix-git/doc/guix.texi:34175
msgid "@uref{https://jcorporation.github.io/myMPD/, myMPD} is a web server frontend for MPD that provides a mobile friendly web client for MPD."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:34178
msgid "The following example shows a myMPD instance listening on port 80, with album cover caching disabled."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:34184
#, no-wrap
msgid ""
"(service mympd-service-type\n"
"         (mympd-configuration\n"
"          (port 80)\n"
"          (covercache-ttl 0)))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:34186
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "mympd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:34188
msgid "The service type for @command{mympd}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:34191
#, fuzzy, no-wrap
msgid "{Data Type} mympd-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:34193
#, fuzzy
msgid "Available @code{mympd-configuration} fields are:"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:34195
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{package} (default: @code{mympd}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:34197
msgid "The package object of the myMPD server."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:34201
msgid "This is a list of symbols naming Shepherd services that this service will depend on."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34202
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{user} (default: @code{%mympd-user}) (type: user-account)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:34204
msgid "Owner of the @command{mympd} process."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:34207
msgid "The default @code{%mympd-user} is a system user with the name ``mympd'', who is a part of the group @var{group} (see below)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34207
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{group} (default: @code{%mympd-group}) (type: user-group)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:34209
msgid "Owner group of the @command{mympd} process."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:34211
msgid "The default @code{%mympd-group} is a system group with name ``mympd''."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34211
#, fuzzy, no-wrap
msgid "@code{work-directory} (default: @code{\"/var/lib/mympd\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34213
msgid "Where myMPD will store its data."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34214
#, fuzzy, no-wrap
msgid "@code{cache-directory} (default: @code{\"/var/cache/mympd\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34216
msgid "Where myMPD will store its cache."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34217
#, fuzzy, no-wrap
msgid "@code{acl} (type: maybe-mympd-ip-acl)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34219
msgid "ACL to access the myMPD webserver."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34220
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{covercache-ttl} (default: @code{31}) (type: maybe-integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34222
msgid "How long to keep cached covers, @code{0} disables cover caching."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34223
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{http?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34225
msgid "HTTP support."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34226
#, fuzzy, no-wrap
msgid "@code{host} (default: @code{\"[::]\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34228
msgid "Host name to listen on."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34229
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{port} (default: @code{80}) (type: maybe-port)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34231
msgid "HTTP port to listen on."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34232
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{log-level} (default: @code{5}) (type: integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34235
msgid "How much detail to include in logs, possible values: @code{0} to @code{7}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34236
#, fuzzy, no-wrap
msgid "@code{log-to} (default: @code{\"/var/log/mympd/log\"}) (type: string-or-symbol)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34241
msgid "Where to send logs.  By default, the service logs to @file{/var/log/mympd.log}.  The alternative is @code{'syslog}, which sends output to the running syslog service under the @samp{daemon} facility."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34242
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{lualibs} (default: @code{\"all\"}) (type: maybe-string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:34245
msgid "See @uref{https://jcorporation.github.io/myMPD/scripting/#lua-standard-libraries}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34246
#, fuzzy, no-wrap
msgid "@code{uri} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34249
msgid "Override URI to myMPD.  See @uref{https://github.com/jcorporation/myMPD/issues/950}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34250
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{script-acl} (default: @code{(mympd-ip-acl (allow '(\"127.0.0.1\")))}) (type: maybe-mympd-ip-acl)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34252
msgid "ACL to access the myMPD script backend."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34253
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{ssl?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34255
msgid "SSL/TLS support."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34256
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{ssl-port} (default: @code{443}) (type: maybe-port)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34258
msgid "Port to listen for HTTPS."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34259
#, fuzzy, no-wrap
msgid "@code{ssl-cert} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34261
msgid "Path to PEM encoded X.509 SSL/TLS certificate (public key)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34262
#, fuzzy, no-wrap
msgid "@code{ssl-key} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34264
msgid "Path to PEM encoded SSL/TLS private key."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34265
#, fuzzy, no-wrap
msgid "@code{pin-hash} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34268
msgid "SHA-256 hashed pin used by myMPD to control settings access by prompting a pin from the user."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34269
#, fuzzy, no-wrap
msgid "@code{save-caches?} (type: maybe-boolean)"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34271
msgid "Whether to preserve caches between service restarts."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:34277
#, fuzzy, no-wrap
msgid "{Data Type} mympd-ip-acl"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:34279
#, fuzzy
msgid "Available @code{mympd-ip-acl} fields are:"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:34281
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{allow} (default: @code{'()}) (type: list-of-strings)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:34283
msgid "Allowed IP addresses."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34284
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{deny} (default: @code{'()}) (type: list-of-strings)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:34286
msgid "Disallowed IP addresses."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:34297
msgid "The @code{(gnu services virtualization)} module provides services for the libvirt and virtlog daemons, as well as other virtualization-related services."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:34298
#, no-wrap
msgid "Libvirt daemon"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:34303
msgid "@code{libvirtd} is the server side daemon component of the libvirt virtualization management system.  This daemon runs on host servers and performs required management tasks for virtualized guests."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:34304
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "libvirt-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:34307
msgid "This is the type of the @uref{https://libvirt.org, libvirt daemon}.  Its value must be a @code{libvirt-configuration}."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:34313
#, no-wrap
msgid ""
"(service libvirt-service-type\n"
"         (libvirt-configuration\n"
"          (unix-sock-group \"libvirt\")\n"
"          (tls-port \"16555\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:34318
msgid "Available @code{libvirt-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34319
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} package libvirt"
msgstr ""

#. type: deftypevar
#: guix-git/doc/guix.texi:34321 guix-git/doc/guix.texi:34884
msgid "Libvirt package."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34324
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} boolean listen-tls?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34327
msgid "Flag listening for secure TLS connections on the public TCP/IP port.  You must set @code{listen} for this to have any effect."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34330
msgid "It is necessary to setup a CA and issue server certificates before using this capability."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34335
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} boolean listen-tcp?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34338
msgid "Listen for unencrypted TCP connections on the public TCP/IP port.  You must set @code{listen} for this to have any effect."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34342
msgid "Using the TCP socket requires SASL authentication by default.  Only SASL mechanisms which support data encryption are allowed.  This is DIGEST_MD5 and GSSAPI (Kerberos5)."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34347
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string tls-port"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34350
msgid "Port for accepting secure TLS connections.  This can be a port number, or service name."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34352
msgid "Defaults to @samp{\"16514\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34355
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string tcp-port"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34358
msgid "Port for accepting insecure TCP connections.  This can be a port number, or service name."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34360
msgid "Defaults to @samp{\"16509\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34363
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string listen-addr"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34365
msgid "IP address or hostname used for client connections."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34370
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} boolean mdns-adv?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34372
msgid "Flag toggling mDNS advertisement of the libvirt service."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34375
msgid "Alternatively can disable for all services on a host by stopping the Avahi daemon."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34380
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string mdns-name"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34383
msgid "Default mDNS advertisement name.  This must be unique on the immediate broadcast network."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34385
msgid "Defaults to @samp{\"Virtualization Host <hostname>\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34388
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string unix-sock-group"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34392
msgid "UNIX domain socket group ownership.  This can be used to allow a 'trusted' set of users access to management capabilities without becoming root."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34397
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string unix-sock-ro-perms"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34400
msgid "UNIX socket permissions for the R/O socket.  This is used for monitoring VM status only."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34402 guix-git/doc/guix.texi:34420
msgid "Defaults to @samp{\"0777\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34405
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string unix-sock-rw-perms"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34409
msgid "UNIX socket permissions for the R/W socket.  Default allows only root.  If PolicyKit is enabled on the socket, the default will change to allow everyone (eg, 0777)"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34411
msgid "Defaults to @samp{\"0770\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34414
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string unix-sock-admin-perms"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34418
msgid "UNIX socket permissions for the admin socket.  Default allows only owner (root), do not change it unless you are sure to whom you are exposing the access to."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34423
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string unix-sock-dir"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34425
msgid "The directory in which sockets will be found/created."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34427
msgid "Defaults to @samp{\"/var/run/libvirt\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34430
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string auth-unix-ro"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34433
msgid "Authentication scheme for UNIX read-only sockets.  By default socket permissions allow anyone to connect"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34435 guix-git/doc/guix.texi:34444
msgid "Defaults to @samp{\"polkit\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34438
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string auth-unix-rw"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34442
msgid "Authentication scheme for UNIX read-write sockets.  By default socket permissions only allow root.  If PolicyKit support was compiled into libvirt, the default will be to use 'polkit' auth."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34447
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string auth-tcp"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34451
msgid "Authentication scheme for TCP sockets.  If you don't enable SASL, then all TCP traffic is cleartext.  Don't do this outside of a dev/test scenario."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34453
msgid "Defaults to @samp{\"sasl\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34456
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string auth-tls"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34460
msgid "Authentication scheme for TLS sockets.  TLS sockets already have encryption provided by the TLS layer, and limited authentication is done by certificates."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34463
msgid "It is possible to make use of any SASL authentication mechanism as well, by using 'sasl' for this option"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34465
msgid "Defaults to @samp{\"none\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34468
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} optional-list access-drivers"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34470
msgid "API access control scheme."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34473
msgid "By default an authenticated user is allowed access to all APIs.  Access drivers can place restrictions on this."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34478
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string key-file"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34481
msgid "Server key file path.  If set to an empty string, then no private key is loaded."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34486
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string cert-file"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34489
msgid "Server key file path.  If set to an empty string, then no certificate is loaded."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34494
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string ca-file"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34497
msgid "Server key file path.  If set to an empty string, then no CA certificate is loaded."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34502
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string crl-file"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34505
msgid "Certificate revocation list path.  If set to an empty string, then no CRL is loaded."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34510
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} boolean tls-no-sanity-cert"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34512
msgid "Disable verification of our own server certificates."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34515
msgid "When libvirtd starts it performs some sanity checks against its own certificates."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34520
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} boolean tls-no-verify-cert"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34522
msgid "Disable verification of client certificates."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34526
msgid "Client certificate verification is the primary authentication mechanism.  Any client which does not present a certificate signed by the CA will be rejected."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34531
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} optional-list tls-allowed-dn-list"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34533
msgid "Whitelist of allowed x509 Distinguished Name."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34538
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} optional-list sasl-allowed-usernames"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34541
msgid "Whitelist of allowed SASL usernames.  The format for username depends on the SASL authentication mechanism."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34546
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string tls-priority"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34550
msgid "Override the compile time default TLS priority string.  The default is usually @samp{\"NORMAL\"} unless overridden at build time.  Only set this is it is desired for libvirt to deviate from the global default settings."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34552
msgid "Defaults to @samp{\"NORMAL\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34555
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer max-clients"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34558 guix-git/doc/guix.texi:34986
msgid "Maximum number of concurrent client connections to allow over all sockets combined."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34560
msgid "Defaults to @samp{5000}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34563
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer max-queued-clients"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34567
msgid "Maximum length of queue of connections waiting to be accepted by the daemon.  Note, that some protocols supporting retransmission may obey this so that a later reattempt at connection succeeds."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34572
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer max-anonymous-clients"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34575
msgid "Maximum length of queue of accepted but not yet authenticated clients.  Set this to zero to turn this feature off"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34577 guix-git/doc/guix.texi:34595
#: guix-git/doc/guix.texi:34611
msgid "Defaults to @samp{20}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34580
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer min-workers"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34582
msgid "Number of workers to start up initially."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34587
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer max-workers"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34589
msgid "Maximum number of worker threads."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34593
msgid "If the number of active clients exceeds @code{min-workers}, then more threads are spawned, up to max_workers limit.  Typically you'd want max_workers to equal maximum number of clients allowed."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34598
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer prio-workers"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34602
msgid "Number of priority workers.  If all workers from above pool are stuck, some calls marked as high priority (notably domainDestroy) can be executed in this pool."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34607
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer max-requests"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34609
msgid "Total global limit on concurrent RPC calls."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34614
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer max-client-requests"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34618
msgid "Limit on concurrent requests from a single client connection.  To avoid one client monopolizing the server this should be a small fraction of the global max_requests and max_workers parameter."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34623
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer admin-min-workers"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34625
msgid "Same as @code{min-workers} but for the admin interface."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34630
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer admin-max-workers"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34632
msgid "Same as @code{max-workers} but for the admin interface."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34637
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer admin-max-clients"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34639
msgid "Same as @code{max-clients} but for the admin interface."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34644
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer admin-max-queued-clients"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34646
msgid "Same as @code{max-queued-clients} but for the admin interface."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34651
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer admin-max-client-requests"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34653
msgid "Same as @code{max-client-requests} but for the admin interface."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34658
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer log-level"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34660 guix-git/doc/guix.texi:34888
msgid "Logging level.  4 errors, 3 warnings, 2 information, 1 debug."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34662 guix-git/doc/guix.texi:34890
msgid "Defaults to @samp{3}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34665
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string log-filters"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34667 guix-git/doc/guix.texi:34895
msgid "Logging filters."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34670
msgid "A filter allows to select a different logging level for a given category of logs.  The format for a filter is one of:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:34674 guix-git/doc/guix.texi:34902
msgid "x:name"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:34677 guix-git/doc/guix.texi:34905
msgid "x:+name"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34688
msgid "where @code{name} is a string which is matched against the category given in the @code{VIR_LOG_INIT()} at the top of each libvirt source file, e.g., @samp{\"remote\"}, @samp{\"qemu\"}, or @samp{\"util.json\"} (the name in the filter can be a substring of the full category name, in order to match multiple similar categories), the optional @samp{\"+\"} prefix tells libvirt to log stack trace for each message matching name, and @code{x} is the minimal level where matching messages should be logged:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:34692 guix-git/doc/guix.texi:34737
#: guix-git/doc/guix.texi:34919 guix-git/doc/guix.texi:34964
msgid "1: DEBUG"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:34695 guix-git/doc/guix.texi:34740
#: guix-git/doc/guix.texi:34922 guix-git/doc/guix.texi:34967
msgid "2: INFO"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:34698 guix-git/doc/guix.texi:34743
#: guix-git/doc/guix.texi:34925 guix-git/doc/guix.texi:34970
msgid "3: WARNING"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:34701 guix-git/doc/guix.texi:34746
#: guix-git/doc/guix.texi:34928 guix-git/doc/guix.texi:34973
msgid "4: ERROR"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34706 guix-git/doc/guix.texi:34933
msgid "Multiple filters can be defined in a single filters statement, they just need to be separated by spaces."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34708 guix-git/doc/guix.texi:34935
msgid "Defaults to @samp{\"3:remote 4:event\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34711
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string log-outputs"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34713 guix-git/doc/guix.texi:34940
msgid "Logging outputs."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34716
msgid "An output is one of the places to save logging information.  The format for an output can be:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34718 guix-git/doc/guix.texi:34945
#, no-wrap
msgid "x:stderr"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:34720 guix-git/doc/guix.texi:34947
msgid "output goes to stderr"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34721 guix-git/doc/guix.texi:34948
#, no-wrap
msgid "x:syslog:name"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:34723 guix-git/doc/guix.texi:34950
msgid "use syslog for the output and use the given name as the ident"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:34724 guix-git/doc/guix.texi:34951
#, no-wrap
msgid "x:file:file_path"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:34726 guix-git/doc/guix.texi:34953
msgid "output to a file, with the given filepath"
msgstr "saída para um arquivo, com o caminho de arquivo dado"

#. type: item
#: guix-git/doc/guix.texi:34727 guix-git/doc/guix.texi:34954
#, no-wrap
msgid "x:journald"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:34729 guix-git/doc/guix.texi:34956
msgid "output to journald logging system"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34733 guix-git/doc/guix.texi:34960
msgid "In all case the x prefix is the minimal level, acting as a filter"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34751 guix-git/doc/guix.texi:34978
msgid "Multiple outputs can be defined, they just need to be separated by spaces."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34753 guix-git/doc/guix.texi:34980
msgid "Defaults to @samp{\"3:stderr\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34756
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer audit-level"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34758
msgid "Allows usage of the auditing subsystem to be altered"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:34762
msgid "0: disable all auditing"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:34765
msgid "1: enable auditing, only if enabled on host"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:34768
msgid "2: enable auditing, and exit if disabled on host."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34775
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} boolean audit-logging"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34777
msgid "Send audit messages via libvirt logging infrastructure."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34782
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} optional-string host-uuid"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34784
msgid "Host UUID@.  UUID must not have all digits be the same."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34789
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} string host-uuid-source"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34791
msgid "Source to read host UUID."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:34795
msgid "@code{smbios}: fetch the UUID from @code{dmidecode -s system-uuid}"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:34798
msgid "@code{machine-id}: fetch the UUID from @code{/etc/machine-id}"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34803
msgid "If @code{dmidecode} does not provide a valid UUID a temporary UUID will be generated."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34805
msgid "Defaults to @samp{\"smbios\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34808
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer keepalive-interval"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34813
msgid "A keepalive message is sent to a client after @code{keepalive_interval} seconds of inactivity to check if the client is still responding.  If set to -1, libvirtd will never send keepalive requests; however clients can still send them and the daemon will send responses."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34818
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer keepalive-count"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34822
msgid "Maximum number of keepalive messages that are allowed to be sent to the client without getting any response before the connection is considered broken."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34829
msgid "In other words, the connection is automatically closed approximately after @code{keepalive_interval * (keepalive_count + 1)} seconds since the last message received from the client.  When @code{keepalive-count} is set to 0, connections will be automatically closed after @code{keepalive-interval} seconds of inactivity without sending any keepalive messages."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34834
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer admin-keepalive-interval"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34836 guix-git/doc/guix.texi:34843
msgid "Same as above but for admin interface."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34841
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer admin-keepalive-count"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34848
#, no-wrap
msgid "{@code{libvirt-configuration} parameter} integer ovs-timeout"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34850
msgid "Timeout for Open vSwitch calls."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34854
msgid "The @code{ovs-vsctl} utility is used for the configuration and its timeout option is set by default to 5 seconds to avoid potential infinite waits blocking libvirt."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:34861
#, no-wrap
msgid "Virtlog daemon"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:34864
msgid "The virtlogd service is a server side daemon component of libvirt that is used to manage logs from virtual machine consoles."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:34870
msgid "This daemon is not used directly by libvirt client applications, rather it is called on their behalf by @code{libvirtd}.  By maintaining the logs in a standalone daemon, the main @code{libvirtd} daemon can be restarted without risk of losing logs.  The @code{virtlogd} daemon has the ability to re-exec()  itself upon receiving @code{SIGUSR1}, to allow live upgrades without downtime."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:34871
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "virtlog-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:34874
msgid "This is the type of the virtlog daemon.  Its value must be a @code{virtlog-configuration}."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:34879
#, no-wrap
msgid ""
"(service virtlog-service-type\n"
"         (virtlog-configuration\n"
"          (max-clients 1000)))\n"
msgstr ""

#. type: deftypevar
#: guix-git/doc/guix.texi:34882
#, no-wrap
msgid "{@code{libvirt} parameter} package libvirt"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34886
#, no-wrap
msgid "{@code{virtlog-configuration} parameter} integer log-level"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34893
#, no-wrap
msgid "{@code{virtlog-configuration} parameter} string log-filters"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34898
msgid "A filter allows to select a different logging level for a given category of logs The format for a filter is one of:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34915
msgid "where @code{name} is a string which is matched against the category given in the @code{VIR_LOG_INIT()} at the top of each libvirt source file, e.g., \"remote\", \"qemu\", or \"util.json\" (the name in the filter can be a substring of the full category name, in order to match multiple similar categories), the optional \"+\" prefix tells libvirt to log stack trace for each message matching name, and @code{x} is the minimal level where matching messages should be logged:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34938
#, no-wrap
msgid "{@code{virtlog-configuration} parameter} string log-outputs"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34943
msgid "An output is one of the places to save logging information The format for an output can be:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34983
#, no-wrap
msgid "{@code{virtlog-configuration} parameter} integer max-clients"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34988
msgid "Defaults to @samp{1024}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34991
#, no-wrap
msgid "{@code{virtlog-configuration} parameter} integer max-size"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34993
msgid "Maximum file size before rolling over."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34995
msgid "Defaults to @samp{2MB}"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:34998
#, no-wrap
msgid "{@code{virtlog-configuration} parameter} integer max-backups"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:35000
msgid "Maximum number of backup files to keep."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:35002
msgid "Defaults to @samp{3}"
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:35006
msgid "transparent-emulation-qemu"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:35006
#, no-wrap
msgid "Transparent Emulation with QEMU"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:35008 guix-git/doc/guix.texi:35088
#, no-wrap
msgid "emulation"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:35009
#, no-wrap
msgid "binfmt_misc"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35017
msgid "@code{qemu-binfmt-service-type} provides support for transparent emulation of program binaries built for different architectures---e.g., it allows you to transparently execute an ARMv7 program on an x86_64 machine.  It achieves this by combining the @uref{https://www.qemu.org, QEMU} emulator and the @code{binfmt_misc} feature of the kernel Linux.  This feature only allows you to emulate GNU/Linux on a different architecture, but see below for GNU/Hurd support."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35018
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "qemu-binfmt-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:35023
msgid "This is the type of the QEMU/binfmt service for transparent emulation.  Its value must be a @code{qemu-binfmt-configuration} object, which specifies the QEMU package to use as well as the architecture we want to emulated:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35028
#, no-wrap
msgid ""
"(service qemu-binfmt-service-type\n"
"         (qemu-binfmt-configuration\n"
"           (platforms (lookup-qemu-platforms \"arm\" \"aarch64\"))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35034
msgid "In this example, we enable transparent emulation for the ARM and aarch64 platforms.  Running @code{herd stop qemu-binfmt} turns it off, and running @code{herd start qemu-binfmt} turns it back on (@pxref{Invoking herd, the @command{herd} command,, shepherd, The GNU Shepherd Manual})."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35036
#, no-wrap
msgid "{Data Type} qemu-binfmt-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35038
msgid "This is the configuration for the @code{qemu-binfmt} service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35040
#, no-wrap
msgid "@code{platforms} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35043
msgid "The list of emulated QEMU platforms.  Each item must be a @dfn{platform object} as returned by @code{lookup-qemu-platforms} (see below)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35046
msgid "For example, let's suppose you're on an x86_64 machine and you have this service:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35051
#, no-wrap
msgid ""
"(service qemu-binfmt-service-type\n"
"         (qemu-binfmt-configuration\n"
"           (platforms (lookup-qemu-platforms \"arm\"))))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35054
msgid "You can run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:35057
#, no-wrap
msgid "guix build -s armhf-linux inkscape\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35064
msgid "and it will build Inkscape for ARMv7 @emph{as if it were a native build}, transparently using QEMU to emulate the ARMv7 CPU@.  Pretty handy if you'd like to test a package build for an architecture you don't have access to!"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35065
#, no-wrap
msgid "@code{qemu} (default: @code{qemu})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35067 guix-git/doc/guix.texi:35125
#: guix-git/doc/guix.texi:35207
msgid "The QEMU package to use."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:35070
#, no-wrap
msgid "lookup-qemu-platforms platforms@dots{}"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:35075
msgid "Return the list of QEMU platform objects corresponding to @var{platforms}@dots{}.  @var{platforms} must be a list of strings corresponding to platform names, such as @code{\"arm\"}, @code{\"sparc\"}, @code{\"mips64el\"}, and so on."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:35077
#, no-wrap
msgid "qemu-platform? obj"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:35079
msgid "Return true if @var{obj} is a platform object."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:35081
#, no-wrap
msgid "qemu-platform-name platform"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:35083
msgid "Return the name of @var{platform}---a string such as @code{\"arm\"}."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:35086
#, no-wrap
msgid "QEMU Guest Agent"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35094
msgid "The QEMU guest agent provides control over the emulated system to the host.  The @code{qemu-guest-agent} service runs the agent on Guix guests.  To control the agent from the host, open a socket by invoking QEMU with the following arguments:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:35101
#, no-wrap
msgid ""
"qemu-system-x86_64 \\\n"
"\t-chardev socket,path=/tmp/qga.sock,server=on,wait=off,id=qga0 \\\n"
"\t-device virtio-serial \\\n"
"\t-device virtserialport,chardev=qga0,name=org.qemu.guest_agent.0 \\\n"
"\t...\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35105
msgid "This creates a socket at @file{/tmp/qga.sock} on the host.  Once the guest agent is running, you can issue commands with @code{socat}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:35110
#, no-wrap
msgid ""
"$ guix shell socat -- socat unix-connect:/tmp/qga.sock stdio\n"
"@{\"execute\": \"guest-get-host-name\"@}\n"
"@{\"return\": @{\"host-name\": \"guix\"@}@}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35114
msgid "See @url{https://wiki.qemu.org/Features/GuestAgent,QEMU guest agent documentation} for more options and commands."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35115
#, fuzzy, no-wrap
msgid "qemu-guest-agent-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:35117
msgid "Service type for the QEMU guest agent service."
msgstr "Tipo de serviço para o serviço de agente convidado QEMU."

#. type: deftp
#: guix-git/doc/guix.texi:35119
#, fuzzy, no-wrap
msgid "{Data Type} qemu-guest-agent-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:35121
#, fuzzy
msgid "Configuration for the @code{qemu-guest-agent} service."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:35123 guix-git/doc/guix.texi:35205
#, no-wrap
msgid "@code{qemu} (default: @code{qemu-minimal})"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35126
#, fuzzy, no-wrap
#| msgid "@code{device} (default: @code{#f})"
msgid "@code{device} (default: @code{\"\"})"
msgstr "@code{device} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:35129
msgid "File name of the device or socket the agent uses to communicate with the host.  If empty, QEMU uses a default file name."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:35133
#, no-wrap
msgid "The Hurd in a Virtual Machine"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:35136
#, no-wrap
msgid "the Hurd"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:35137
#, no-wrap
msgid "childhurd"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35145
msgid "Service @code{hurd-vm} provides support for running GNU/Hurd in a virtual machine (VM), a so-called @dfn{childhurd}.  This service is meant to be used on GNU/Linux and the given GNU/Hurd operating system configuration is cross-compiled.  The virtual machine is a Shepherd service that can be referred to by the names @code{hurd-vm} and @code{childhurd} and be controlled with commands such as:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:35149
#, no-wrap
msgid ""
"herd start hurd-vm\n"
"herd stop childhurd\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35153
msgid "When the service is running, you can view its console by connecting to it with a VNC client, for example with:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:35156
#, no-wrap
msgid "guix shell tigervnc-client -- vncviewer localhost:5900\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35162
msgid "The default configuration (see @code{hurd-vm-configuration} below)  spawns a secure shell (SSH) server in your GNU/Hurd system, which QEMU (the virtual machine emulator) redirects to port 10222 on the host.  Thus, you can connect over SSH to the childhurd with:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:35165
#, no-wrap
msgid "ssh root@@localhost -p 10022\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35174
msgid "The childhurd is volatile and stateless: it starts with a fresh root file system every time you restart it.  By default though, all the files under @file{/etc/childhurd} on the host are copied as is to the root file system of the childhurd when it boots.  This allows you to initialize ``secrets'' inside the VM: SSH host keys, authorized substitute keys, and so on---see the explanation of @code{secret-root} below."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35175
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "hurd-vm-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:35181
msgid "This is the type of the Hurd in a Virtual Machine service.  Its value must be a @code{hurd-vm-configuration} object, which specifies the operating system (@pxref{operating-system Reference}) and the disk size for the Hurd Virtual Machine, the QEMU package to use as well as the options for running it."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35189
#, no-wrap
msgid ""
"(service hurd-vm-service-type\n"
"         (hurd-vm-configuration\n"
"          (disk-size (* 5000 (expt 2 20))) ;5G\n"
"          (memory-size 1024)))             ;1024MiB\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35193
msgid "would create a disk image big enough to build GNU@tie{}Hello, with some extra memory."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35195
#, no-wrap
msgid "{Data Type} hurd-vm-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35198
msgid "The data type representing the configuration for @code{hurd-vm-service-type}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35200
#, no-wrap
msgid "@code{os} (default: @var{%hurd-vm-operating-system})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35204
msgid "The operating system to instantiate.  This default is bare-bones with a permissive OpenSSH secure shell daemon listening on port 2222 (@pxref{Networking Services, @code{openssh-service-type}})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35208
#, no-wrap
msgid "@code{image} (default: @var{hurd-vm-disk-image})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35211
msgid "The procedure used to build the disk-image built from this configuration."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35212
#, no-wrap
msgid "@code{disk-size} (default: @code{'guess})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35214
msgid "The size of the disk image."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35215
#, no-wrap
msgid "@code{memory-size} (default: @code{512})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35217
msgid "The memory size of the Virtual Machine in mebibytes."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35218
#, no-wrap
msgid "@code{options} (default: @code{'(\"--snapshot\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35220
msgid "The extra options for running QEMU."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35225
msgid "If set, a non-zero positive integer used to parameterize Childhurd instances.  It is appended to the service's name, e.g. @code{childhurd1}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35226
#, no-wrap
msgid "@code{net-options} (default: @var{hurd-vm-net-options})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35228
msgid "The procedure used to produce the list of QEMU networking options."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35230
msgid "By default, it produces"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35238
#, no-wrap
msgid ""
"'(\"--device\" \"rtl8139,netdev=net0\"\n"
"  \"--netdev\" (string-append\n"
"              \"user,id=net0,\"\n"
"              \"hostfwd=tcp:127.0.0.1:@var{secrets-port}-:1004,\"\n"
"              \"hostfwd=tcp:127.0.0.1:@var{ssh-port}-:2222,\"\n"
"              \"hostfwd=tcp:127.0.0.1:@var{vnc-port}-:5900\"))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35241
msgid "with forwarded ports:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:35246
#, no-wrap
msgid ""
"@var{secrets-port}: @code{(+ 11004 (* 1000 @var{ID}))}\n"
"@var{ssh-port}: @code{(+ 10022 (* 1000 @var{ID}))}\n"
"@var{vnc-port}: @code{(+ 15900 (* 1000 @var{ID}))}\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35248
#, no-wrap
msgid "@code{secret-root} (default: @file{/etc/childhurd})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35253
msgid "The root directory with out-of-band secrets to be installed into the childhurd once it runs.  Childhurds are volatile which means that on every startup, secrets such as the SSH host keys and Guix signing key are recreated."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35257
msgid "If the @file{/etc/childhurd} directory does not exist, the @code{secret-service} running in the Childhurd will be sent an empty list of secrets."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35260
msgid "By default, the service automatically populates @file{/etc/childhurd} with the following non-volatile secrets, unless they already exist:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:35269
#, no-wrap
msgid ""
"/etc/childhurd/etc/guix/acl\n"
"/etc/childhurd/etc/guix/signing-key.pub\n"
"/etc/childhurd/etc/guix/signing-key.sec\n"
"/etc/childhurd/etc/ssh/ssh_host_ed25519_key\n"
"/etc/childhurd/etc/ssh/ssh_host_ecdsa_key\n"
"/etc/childhurd/etc/ssh/ssh_host_ed25519_key.pub\n"
"/etc/childhurd/etc/ssh/ssh_host_ecdsa_key.pub\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35273
msgid "These files are automatically sent to the guest Hurd VM when it boots, including permissions."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:35274
#, no-wrap
msgid "childhurd, offloading"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:35275
#, no-wrap
msgid "Hurd, offloading"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35279
msgid "Having these files in place means that only a couple of things are missing to allow the host to offload @code{i586-gnu} builds to the childhurd:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:35284
msgid "Authorizing the childhurd's key on the host so that the host accepts build results coming from the childhurd, which can be done like so:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:35288
#, no-wrap
msgid ""
"guix archive --authorize < \\\n"
"  /etc/childhurd/etc/guix/signing-key.pub\n"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:35293
msgid "Adding the childhurd to @file{/etc/guix/machines.scm} (@pxref{Daemon Offload Setup})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35297
msgid "We're working towards making that happen automatically---get in touch with us at @email{guix-devel@@gnu.org} to discuss it!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35304
msgid "Note that by default the VM image is volatile, i.e., once stopped the contents are lost.  If you want a stateful image instead, override the configuration's @code{image} and @code{options} without the @code{--snapshot} flag using something along these lines:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35310
#, no-wrap
msgid ""
"(service hurd-vm-service-type\n"
"         (hurd-vm-configuration\n"
"          (image   (const \"/out/of/store/writable/hurd.img\"))\n"
"          (options '())))\n"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:35312
#, no-wrap
msgid "Ganeti"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:35314
#, no-wrap
msgid "ganeti"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:35321
msgid "This service is considered experimental.  Configuration options may be changed in a backwards-incompatible manner, and not all features have been thorougly tested.  Users of this service are encouraged to share their experience at @email{guix-devel@@gnu.org}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35331
msgid "Ganeti is a virtual machine management system.  It is designed to keep virtual machines running on a cluster of servers even in the event of hardware failures, and to make maintenance and recovery tasks easy.  It consists of multiple services which are described later in this section.  In addition to the Ganeti service, you will need the OpenSSH service (@pxref{Networking Services, @code{openssh-service-type}}), and update the @file{/etc/hosts} file (@pxref{Service Reference, @code{hosts-service-type}}) with the cluster name and address (or use a DNS server)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35336
msgid "All nodes participating in a Ganeti cluster should have the same Ganeti and @file{/etc/hosts} configuration.  Here is an example configuration for a Ganeti cluster node that supports multiple storage backends, and installs the @code{debootstrap} and @code{guix} @dfn{OS providers}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35343
#, no-wrap
msgid ""
"(use-package-modules virtualization)\n"
"(use-service-modules base ganeti networking ssh)\n"
"(operating-system\n"
"  ;; @dots{}\n"
"  (host-name \"node1\")\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35364
#, no-wrap
msgid ""
"  ;; Install QEMU so we can use KVM-based instances, and LVM, DRBD and Ceph\n"
"  ;; in order to use the \"plain\", \"drbd\" and \"rbd\" storage backends.\n"
"  (packages (append (map specification->package\n"
"                         '(\"qemu\" \"lvm2\" \"drbd-utils\" \"ceph\"\n"
"                           ;; Add the debootstrap and guix OS providers.\n"
"                           \"ganeti-instance-guix\" \"ganeti-instance-debootstrap\"))\n"
"                    %base-packages))\n"
"  (services\n"
"   (append (list (service static-networking-service-type\n"
"                          (list (static-networking\n"
"                                 (addresses\n"
"                                  (list (network-address\n"
"                                         (device \"eth0\")\n"
"                                         (value \"192.168.1.201/24\"))))\n"
"                                 (routes\n"
"                                  (list (network-route\n"
"                                         (destination \"default\")\n"
"                                         (gateway \"192.168.1.254\"))))\n"
"                                 (name-servers '(\"192.168.1.252\"\n"
"                                                 \"192.168.1.253\")))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35369
#, no-wrap
msgid ""
"                 ;; Ganeti uses SSH to communicate between nodes.\n"
"                 (service openssh-service-type\n"
"                          (openssh-configuration\n"
"                           (permit-root-login 'prohibit-password)))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35377
#, no-wrap
msgid ""
"                 (simple-service 'ganeti-hosts-entries hosts-service-type\n"
"                                 (list\n"
"                                   (host \"192.168.1.200\" \"ganeti.example.com\")\n"
"                                   (host \"192.168.1.201\" \"node1.example.com\"\n"
"                                         '(\"node1\"))\n"
"                                   (host \"192.168.1.202\" \"node2.example.com\"\n"
"                                         '(\"node2\"))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35387
#, no-wrap
msgid ""
"                 (service ganeti-service-type\n"
"                          (ganeti-configuration\n"
"                           ;; This list specifies allowed file system paths\n"
"                           ;; for storing virtual machine images.\n"
"                           (file-storage-paths '(\"/srv/ganeti/file-storage\"))\n"
"                           ;; This variable configures a single \"variant\" for\n"
"                           ;; both Debootstrap and Guix that works with KVM.\n"
"                           (os %default-ganeti-os))))\n"
"           %base-services)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35395
msgid "Users are advised to read the @url{https://docs.ganeti.org/docs/ganeti/3.0/html/admin.html,Ganeti administrators guide} to learn about the various cluster options and day-to-day operations.  There is also a @url{https://guix.gnu.org/blog/2020/running-a-ganeti-cluster-on-guix/,blog post} describing how to configure and initialize a small cluster."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35396
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "ganeti-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:35399
msgid "This is a service type that includes all the various services that Ganeti nodes should run."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35404
msgid "Its value is a @code{ganeti-configuration} object that defines the package to use for CLI operations, as well as configuration for the various daemons.  Allowed file storage paths and available guest operating systems are also configured through this data type."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35406
#, no-wrap
msgid "{Data Type} ganeti-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35408
msgid "The @code{ganeti} service takes the following configuration options:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35410 guix-git/doc/guix.texi:35660
#: guix-git/doc/guix.texi:35710 guix-git/doc/guix.texi:35740
#: guix-git/doc/guix.texi:35767 guix-git/doc/guix.texi:35799
#: guix-git/doc/guix.texi:35852 guix-git/doc/guix.texi:35872
#: guix-git/doc/guix.texi:35898 guix-git/doc/guix.texi:35931
#: guix-git/doc/guix.texi:35971
#, no-wrap
msgid "@code{ganeti} (default: @code{ganeti})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35415
msgid "The @code{ganeti} package to use.  It will be installed to the system profile and make @command{gnt-cluster}, @command{gnt-instance}, etc available.  Note that the value specified here does not affect the other services as each refer to a specific @code{ganeti} package (see below)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35416
#, no-wrap
msgid "@code{noded-configuration} (default: @code{(ganeti-noded-configuration)})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:35417
#, no-wrap
msgid "@code{confd-configuration} (default: @code{(ganeti-confd-configuration)})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:35418
#, no-wrap
msgid "@code{wconfd-configuration} (default: @code{(ganeti-wconfd-configuration)})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:35419
#, no-wrap
msgid "@code{luxid-configuration} (default: @code{(ganeti-luxid-configuration)})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:35420
#, no-wrap
msgid "@code{rapi-configuration} (default: @code{(ganeti-rapi-configuration)})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:35421
#, no-wrap
msgid "@code{kvmd-configuration} (default: @code{(ganeti-kvmd-configuration)})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:35422
#, no-wrap
msgid "@code{mond-configuration} (default: @code{(ganeti-mond-configuration)})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:35423
#, no-wrap
msgid "@code{metad-configuration} (default: @code{(ganeti-metad-configuration)})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:35424
#, no-wrap
msgid "@code{watcher-configuration} (default: @code{(ganeti-watcher-configuration)})"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:35425
#, no-wrap
msgid "@code{cleaner-configuration} (default: @code{(ganeti-cleaner-configuration)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35430
msgid "These options control the various daemons and cron jobs that are distributed with Ganeti.  The possible values for these are described in detail below.  To override a setting, you must use the configuration type for that service:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35440
#, no-wrap
msgid ""
"(service ganeti-service-type\n"
"         (ganeti-configuration\n"
"          (rapi-configuration\n"
"           (ganeti-rapi-configuration\n"
"            (interface \"eth1\"))))\n"
"          (watcher-configuration\n"
"           (ganeti-watcher-configuration\n"
"            (rapi-ip \"10.0.0.1\"))))\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35442
#, no-wrap
msgid "@code{file-storage-paths} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35444
msgid "List of allowed directories for file storage backend."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35445
#, fuzzy, no-wrap
#| msgid "@code{host} (default: @code{#f})"
msgid "@code{hooks} (default: @code{#f})"
msgstr "@code{host} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:35448
msgid "When set, this should be a file-like object containing a directory with @url{https://docs.ganeti.org/docs/ganeti/3.0/html/hooks.html,cluster execution hooks}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35449
#, no-wrap
msgid "@code{os} (default: @code{%default-ganeti-os})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35451
msgid "List of @code{<ganeti-os>} records."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35455
msgid "In essence @code{ganeti-service-type} is shorthand for declaring each service individually:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35466
#, no-wrap
msgid ""
"(service ganeti-noded-service-type)\n"
"(service ganeti-confd-service-type)\n"
"(service ganeti-wconfd-service-type)\n"
"(service ganeti-luxid-service-type)\n"
"(service ganeti-kvmd-service-type)\n"
"(service ganeti-mond-service-type)\n"
"(service ganeti-metad-service-type)\n"
"(service ganeti-watcher-service-type)\n"
"(service ganeti-cleaner-service-type)\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35470
msgid "Plus a service extension for @code{etc-service-type} that configures the file storage backend and OS variants."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35473
#, no-wrap
msgid "{Data Type} ganeti-os"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35476
msgid "This data type is suitable for passing to the @code{os} parameter of @code{ganeti-configuration}.  It takes the following parameters:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35482
msgid "The name for this OS provider.  It is only used to specify where the configuration ends up.  Setting it to ``debootstrap'' will create @file{/etc/ganeti/instance-debootstrap}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35483
#, fuzzy, no-wrap
#| msgid "@code{extend} (default: @code{#f})"
msgid "@code{extension} (default: @code{#f})"
msgstr "@code{extend} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:35486
msgid "The file extension for variants of this OS type.  For example @file{.conf} or @file{.scm}.  It will be appended to the variant file name if set."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35487
#, no-wrap
msgid "@code{variants} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35491
msgid "This must be either a list of @code{ganeti-os-variant} objects for this OS, or a ``file-like'' object (@pxref{G-Expressions, file-like objects})  representing the variants directory."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35495
msgid "To use the Guix OS provider with variant definitions residing in a local directory instead of declaring individual variants (see @var{guix-variants} below), you can do:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35501
#, no-wrap
msgid ""
"(ganeti-os\n"
" (name \"guix\")\n"
" (variants (local-file \"ganeti-guix-variants\"\n"
"                       #:recursive? #true)))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35507
msgid "Note that you will need to maintain the @file{variants.list} file (see @code{@url{https://docs.ganeti.org/docs/ganeti/3.0/man/ganeti-os-interface.html, ganeti-os-interface(7)}})  manually in this case."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35511
#, no-wrap
msgid "{Data Type} ganeti-os-variant"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35514
msgid "This is the data type for a Ganeti OS variant.  It takes the following parameters:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35518
msgid "The name of this variant."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:35519
#, no-wrap
msgid "configuration"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35521
msgid "A configuration file for this variant."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35524
#, no-wrap
msgid "%default-debootstrap-hooks"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35526
msgid "This variable contains hooks to configure networking and the GRUB bootloader."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35528
#, no-wrap
msgid "%default-debootstrap-extra-pkgs"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35530
msgid "This variable contains a list of packages suitable for a fully-virtualized guest."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35532
#, no-wrap
msgid "{Data Type} debootstrap-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35535
msgid "This data type creates configuration files suitable for the debootstrap OS provider."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35537
#, no-wrap
msgid "@code{hooks} (default: @code{%default-debootstrap-hooks})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35541
msgid "When not @code{#f}, this must be a G-expression that specifies a directory with scripts that will run when the OS is installed.  It can also be a list of @code{(name . file-like)} pairs.  For example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35544
#, no-wrap
msgid "`((99-hello-world . ,(plain-file \"#!/bin/sh\\necho Hello, World\")))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35549
msgid "That will create a directory with one executable named @code{99-hello-world} and run it every time this variant is installed.  If set to @code{#f}, hooks in @file{/etc/ganeti/instance-debootstrap/hooks} will be used, if any."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35549
#, no-wrap
msgid "@code{proxy} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35551
msgid "Optional HTTP proxy to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35551 guix-git/doc/guix.texi:37803
#, no-wrap
msgid "@code{mirror} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35554
msgid "The Debian mirror.  Typically something like @code{http://ftp.no.debian.org/debian}.  The default varies depending on the distribution."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35554
#, no-wrap
msgid "@code{arch} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35557
msgid "The dpkg architecture.  Set to @code{armhf} to debootstrap an ARMv7 instance on an AArch64 host.  Default is to use the current system architecture."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35557
#, no-wrap
msgid "@code{suite} (default: @code{\"stable\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35560
msgid "When set, this must be a Debian distribution ``suite'' such as @code{buster} or @code{focal}.  If set to @code{#f}, the default for the OS provider is used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35560
#, no-wrap
msgid "@code{extra-pkgs} (default: @code{%default-debootstrap-extra-pkgs})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35563
msgid "List of extra packages that will get installed by dpkg in addition to the minimal system."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35563
#, no-wrap
msgid "@code{components} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35566
msgid "When set, must be a list of Debian repository ``components''.  For example @code{'(\"main\" \"contrib\")}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35566
#, no-wrap
msgid "@code{generate-cache?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35568
msgid "Whether to automatically cache the generated debootstrap archive."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35568
#, no-wrap
msgid "@code{clean-cache} (default: @code{14})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35571
msgid "Discard the cache after this amount of days.  Use @code{#f} to never clear the cache."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35571
#, no-wrap
msgid "@code{partition-style} (default: @code{'msdos})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35574
msgid "The type of partition to create.  When set, it must be one of @code{'msdos}, @code{'none} or a string."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35574
#, no-wrap
msgid "@code{partition-alignment} (default: @code{2048})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35576
msgid "Alignment of the partition in sectors."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:35579
#, fuzzy, no-wrap
#| msgid "Instantiating a system configuration."
msgid "debootstrap-variant name configuration"
msgstr "Inicializando uma configuração de sistema."

#. type: defun
#: guix-git/doc/guix.texi:35582
msgid "This is a helper procedure that creates a @code{ganeti-os-variant} record.  It takes two parameters: a name and a @code{debootstrap-configuration} object."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:35584
#, no-wrap
msgid "debootstrap-os variants@dots{}"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:35587
msgid "This is a helper procedure that creates a @code{ganeti-os} record.  It takes a list of variants created with @code{debootstrap-variant}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:35589
#, fuzzy, no-wrap
#| msgid "git configuration"
msgid "guix-variant name configuration"
msgstr "Configuração do git"

#. type: defun
#: guix-git/doc/guix.texi:35594
msgid "This is a helper procedure that creates a @code{ganeti-os-variant} record for use with the Guix OS provider.  It takes a name and a G-expression that returns a ``file-like'' (@pxref{G-Expressions, file-like objects}) object containing a Guix System configuration."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:35596
#, no-wrap
msgid "guix-os variants@dots{}"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:35599
msgid "This is a helper procedure that creates a @code{ganeti-os} record.  It takes a list of variants produced by @code{guix-variant}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35601
#, no-wrap
msgid "%default-debootstrap-variants"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35605
msgid "This is a convenience variable to make the debootstrap provider work ``out of the box'' without users having to declare variants manually.  It contains a single debootstrap variant with the default configuration:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35610
#, no-wrap
msgid ""
"(list (debootstrap-variant\n"
"       \"default\"\n"
"       (debootstrap-configuration)))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35613
#, no-wrap
msgid "%default-guix-variants"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35617
msgid "This is a convenience variable to make the Guix OS provider work without additional configuration.  It creates a virtual machine that has an SSH server, a serial console, and authorizes the Ganeti hosts SSH keys."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35623
#, no-wrap
msgid ""
"(list (guix-variant\n"
"       \"default\"\n"
"       (file-append ganeti-instance-guix\n"
"                    \"/share/doc/ganeti-instance-guix/examples/dynamic.scm\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35629
msgid "Users can implement support for OS providers unbeknownst to Guix by extending the @code{ganeti-os} and @code{ganeti-os-variant} records appropriately.  For example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:35638
#, no-wrap
msgid ""
"(ganeti-os\n"
" (name \"custom\")\n"
" (extension \".conf\")\n"
" (variants\n"
"  (list (ganeti-os-variant\n"
"         (name \"foo\")\n"
"         (configuration (plain-file \"bar\" \"this is fine\"))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35643
msgid "That creates @file{/etc/ganeti/instance-custom/variants/foo.conf} which points to a file in the store with contents @code{this is fine}.  It also creates @file{/etc/ganeti/instance-custom/variants/variants.list} with contents @code{foo}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35646
msgid "Obviously this may not work for all OS providers out there.  If you find the interface limiting, please reach out to @email{guix-devel@@gnu.org}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35649
msgid "The rest of this section documents the various services that are included by @code{ganeti-service-type}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35650
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "ganeti-noded-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:35654
msgid "@command{ganeti-noded} is the daemon responsible for node-specific functions within the Ganeti system.  The value of this service must be a @code{ganeti-noded-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35656
#, no-wrap
msgid "{Data Type} ganeti-noded-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35658
msgid "This is the configuration for the @code{ganeti-noded} service."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35662 guix-git/doc/guix.texi:35712
#: guix-git/doc/guix.texi:35742 guix-git/doc/guix.texi:35769
#: guix-git/doc/guix.texi:35801 guix-git/doc/guix.texi:35854
#: guix-git/doc/guix.texi:35874 guix-git/doc/guix.texi:35900
#: guix-git/doc/guix.texi:35933
msgid "The @code{ganeti} package to use for this service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35663
#, no-wrap
msgid "@code{port} (default: @code{1811})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35665
msgid "The TCP port on which the node daemon listens for network requests."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35666 guix-git/doc/guix.texi:35716
#: guix-git/doc/guix.texi:35808 guix-git/doc/guix.texi:35878
#, no-wrap
msgid "@code{address} (default: @code{\"0.0.0.0\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35669
msgid "The network address that the daemon will bind to.  The default address means bind to all available addresses."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35673
msgid "When this is set, it must be a specific network interface (e.g.@: @code{eth0})  that the daemon will bind to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35674 guix-git/doc/guix.texi:35816
#, no-wrap
msgid "@code{max-clients} (default: @code{20})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35678
msgid "This sets a limit on the maximum number of simultaneous client connections that the daemon will handle.  Connections above this count are accepted, but no responses will be sent until enough connections have closed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35679 guix-git/doc/guix.texi:35821
#, no-wrap
msgid "@code{ssl?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35683
msgid "Whether to use SSL/TLS to encrypt network communications.  The certificate is automatically provisioned by the cluster and can be rotated with @command{gnt-cluster renew-crypto}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35684 guix-git/doc/guix.texi:35824
#, no-wrap
msgid "@code{ssl-key} (default: @file{\"/var/lib/ganeti/server.pem\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35686 guix-git/doc/guix.texi:35826
msgid "This can be used to provide a specific encryption key for TLS communications."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35687 guix-git/doc/guix.texi:35827
#, no-wrap
msgid "@code{ssl-cert} (default: @file{\"/var/lib/ganeti/server.pem\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35689 guix-git/doc/guix.texi:35829
msgid "This can be used to provide a specific certificate for TLS communications."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35693 guix-git/doc/guix.texi:35833
msgid "When true, the daemon performs additional logging for debugging purposes.  Note that this will leak encryption details to the log files, use with caution."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35697
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "ganeti-confd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:35703
msgid "@command{ganeti-confd} answers queries related to the configuration of a Ganeti cluster.  The purpose of this daemon is to have a highly available and fast way to query cluster configuration values.  It is automatically active on all @dfn{master candidates}.  The value of this service must be a @code{ganeti-confd-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35706
#, no-wrap
msgid "{Data Type} ganeti-confd-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35708
msgid "This is the configuration for the @code{ganeti-confd} service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35713
#, no-wrap
msgid "@code{port} (default: @code{1814})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35715
msgid "The UDP port on which to listen for network requests."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35718
msgid "Network address that the daemon will bind to."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35721 guix-git/doc/guix.texi:35750
#: guix-git/doc/guix.texi:35777 guix-git/doc/guix.texi:35857
#: guix-git/doc/guix.texi:35884 guix-git/doc/guix.texi:35910
msgid "When true, the daemon performs additional logging for debugging purposes."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35725
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "ganeti-wconfd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:35731
msgid "@command{ganeti-wconfd} is the daemon that has authoritative knowledge about the cluster configuration and is the only entity that can accept changes to it.  All jobs that need to modify the configuration will do so by sending appropriate requests to this daemon.  It only runs on the @dfn{master node} and will automatically disable itself on other nodes."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35734
msgid "The value of this service must be a @code{ganeti-wconfd-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35736
#, no-wrap
msgid "{Data Type} ganeti-wconfd-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35738
msgid "This is the configuration for the @code{ganeti-wconfd} service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35743 guix-git/doc/guix.texi:35770
#, no-wrap
msgid "@code{no-voting?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35747
msgid "The daemon will refuse to start if the majority of cluster nodes does not agree that it is running on the master node.  Set to @code{#t} to start even if a quorum can not be reached (dangerous, use with caution)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35754
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "ganeti-luxid-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:35759
msgid "@command{ganeti-luxid} is a daemon used to answer queries related to the configuration and the current live state of a Ganeti cluster.  Additionally, it is the authoritative daemon for the Ganeti job queue.  Jobs can be submitted via this daemon and it schedules and starts them."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35761
msgid "It takes a @code{ganeti-luxid-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35763
#, no-wrap
msgid "{Data Type} ganeti-luxid-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35765
#, fuzzy
msgid "This is the configuration for the @code{ganeti-luxid} service."
msgstr "Gerencie a configuração do sistema operacional."

#. type: table
#: guix-git/doc/guix.texi:35774
msgid "The daemon will refuse to start if it cannot verify that the majority of cluster nodes believes that it is running on the master node.  Set to @code{#t} to ignore such checks and start anyway (this can be dangerous)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35781
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "ganeti-rapi-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:35785
msgid "@command{ganeti-rapi} provides a remote API for Ganeti clusters.  It runs on the master node and can be used to perform cluster actions programmatically via a JSON-based RPC protocol."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35791
msgid "Most query operations are allowed without authentication (unless @var{require-authentication?} is set), whereas write operations require explicit authorization via the @file{/var/lib/ganeti/rapi/users} file.  See the @url{https://docs.ganeti.org/docs/ganeti/3.0/html/rapi.html, Ganeti Remote API documentation} for more information."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35793
msgid "The value of this service must be a @code{ganeti-rapi-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35795
#, no-wrap
msgid "{Data Type} ganeti-rapi-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35797
msgid "This is the configuration for the @code{ganeti-rapi} service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35802
#, no-wrap
msgid "@code{require-authentication?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35804
msgid "Whether to require authentication even for read-only operations."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35805
#, no-wrap
msgid "@code{port} (default: @code{5080})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35807
msgid "The TCP port on which to listen to API requests."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35811
msgid "The network address that the service will bind to.  By default it listens on all configured addresses."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35815
msgid "When set, it must specify a specific network interface such as @code{eth0} that the daemon will bind to."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35820
msgid "The maximum number of simultaneous client requests to handle.  Further connections are allowed, but no responses are sent until enough connections have closed."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35823
msgid "Whether to use SSL/TLS encryption on the RAPI port."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35837
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "ganeti-kvmd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:35845
msgid "@command{ganeti-kvmd} is responsible for determining whether a given KVM instance was shut down by an administrator or a user.  Normally Ganeti will restart an instance that was not stopped through Ganeti itself.  If the cluster option @code{user_shutdown} is true, this daemon monitors the @code{QMP} socket provided by QEMU and listens for shutdown events, and marks the instance as @dfn{USER_down} instead of @dfn{ERROR_down} when it shuts down gracefully by itself."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35847
msgid "It takes a @code{ganeti-kvmd-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35849
#, no-wrap
msgid "{Data Type} ganeti-kvmd-configuration"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35861
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "ganeti-mond-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:35865
msgid "@command{ganeti-mond} is an optional daemon that provides Ganeti monitoring functionality.  It is responsible for running data collectors and publish the collected information through a HTTP interface."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35867
msgid "It takes a @code{ganeti-mond-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35869
#, no-wrap
msgid "{Data Type} ganeti-mond-configuration"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35875
#, no-wrap
msgid "@code{port} (default: @code{1815})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35877 guix-git/doc/guix.texi:35903
msgid "The port on which the daemon will listen."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35881
msgid "The network address that the daemon will bind to.  By default it binds to all available interfaces."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35888
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "ganeti-metad-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:35891
msgid "@command{ganeti-metad} is an optional daemon that can be used to provide information about the cluster to instances or OS install scripts."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35893
msgid "It takes a @code{ganeti-metad-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35895
#, no-wrap
msgid "{Data Type} ganeti-metad-configuration"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35907
msgid "If set, the daemon will bind to this address only.  If left unset, the behavior depends on the cluster configuration."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35914
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "ganeti-watcher-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:35922
msgid "@command{ganeti-watcher} is a script designed to run periodically and ensure the health of a cluster.  It will automatically restart instances that have stopped without Ganeti's consent, and repairs DRBD links in case a node has rebooted.  It also archives old cluster jobs and restarts Ganeti daemons that are not running.  If the cluster parameter @code{ensure_node_health} is set, the watcher will also shutdown instances and DRBD devices if the node it is running on is declared offline by known master candidates."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35924
msgid "It can be paused on all nodes with @command{gnt-cluster watcher pause}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35926
msgid "The service takes a @code{ganeti-watcher-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35928
#, no-wrap
msgid "{Data Type} ganeti-watcher-configuration"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35934
#, no-wrap
msgid "@code{schedule} (default: @code{'(next-second-from (next-minute (range 0 60 5)))})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35936
msgid "How often to run the script.  The default is every five minutes."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35937
#, no-wrap
msgid "@code{rapi-ip} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35940
msgid "This option needs to be specified only if the RAPI daemon is configured to use a particular interface or address.  By default the cluster address is used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35941
#, no-wrap
msgid "@code{job-age} (default: @code{(* 6 3600)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35944
msgid "Archive cluster jobs older than this age, specified in seconds.  The default is 6 hours.  This keeps @command{gnt-job list} manageable."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35945
#, no-wrap
msgid "@code{verify-disks?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35949
msgid "If this is @code{#f}, the watcher will not try to repair broken DRBD links automatically.  Administrators will need to use @command{gnt-cluster verify-disks} manually instead."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35952
msgid "When @code{#t}, the script performs additional logging for debugging purposes."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35956
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "ganeti-cleaner-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:35964
msgid "@command{ganeti-cleaner} is a script designed to run periodically and remove old files from the cluster.  This service type controls two @dfn{cron jobs}: one intended for the master node that permanently purges old cluster jobs, and one intended for every node that removes expired X509 certificates, keys, and outdated @command{ganeti-watcher} information.  Like all Ganeti services, it is safe to include even on non-master nodes as it will disable itself as necessary."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35966
msgid "It takes a @code{ganeti-cleaner-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:35968
#, no-wrap
msgid "{Data Type} ganeti-cleaner-configuration"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35973
msgid "The @code{ganeti} package to use for the @command{gnt-cleaner} command."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35974
#, no-wrap
msgid "@code{master-schedule} (default: @code{\"45 1 * * *\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35977
msgid "How often to run the master cleaning job.  The default is once per day, at 01:45:00."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:35978
#, no-wrap
msgid "@code{node-schedule} (default: @code{\"45 2 * * *\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:35981
msgid "How often to run the node cleaning job.  The default is once per day, at 02:45:00."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:35995
msgid "The @code{(gnu services version-control)} module provides a service to allow remote access to local Git repositories.  There are three options: the @code{git-daemon-service-type}, which provides access to repositories via the @code{git://} unsecured TCP-based protocol, extending the @code{nginx} web server to proxy some requests to @code{git-http-backend}, or providing a web interface with @code{cgit-service-type}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:35996
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "git-daemon-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:35999
msgid "Type for a service that runs @command{git daemon}, a simple TCP server to expose repositories over the Git protocol for anonymous access."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:36004
msgid "The value for this service type is a @code{<git-daemon-configuration>} record, by default it allows read-only access to exported@footnote{By creating the magic file @file{git-daemon-export-ok} in the repository directory.} repositories under @file{/srv/git}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:36006
#, no-wrap
msgid "{Data Type} git-daemon-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:36008
#, fuzzy
msgid "Data type representing the configuration for @code{git-daemon-service-type}."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:36010
#, no-wrap
msgid "@code{package} (default: @code{git})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:36012 guix-git/doc/guix.texi:36072
msgid "Package object of the Git distributed version control system."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:36013 guix-git/doc/guix.texi:36076
#, no-wrap
msgid "@code{export-all?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:36016
msgid "Whether to allow access for all Git repositories, even if they do not have the @file{git-daemon-export-ok} file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:36017
#, no-wrap
msgid "@code{base-path} (default: @file{/srv/git})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:36023
msgid "Whether to remap all the path requests as relative to the given path.  If you run @command{git daemon} with @code{(base-path \"/srv/git\")} on @samp{example.com}, then if you later try to pull @indicateurl{git://example.com/hello.git}, git daemon will interpret the path as @file{/srv/git/hello.git}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:36024
#, no-wrap
msgid "@code{user-path} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:36032
msgid "Whether to allow @code{~user} notation to be used in requests.  When specified with empty string, requests to @indicateurl{git://host/~alice/foo} is taken as a request to access @code{foo} repository in the home directory of user @code{alice}.  If @code{(user-path \"@var{path}\")} is specified, the same request is taken as a request to access @file{@var{path}/foo} repository in the home directory of user @code{alice}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:36033
#, no-wrap
msgid "@code{listen} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:36036
msgid "Whether to listen on specific IP addresses or hostnames, defaults to all."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:36037
#, no-wrap
msgid "@code{port} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:36039
msgid "Whether to listen on an alternative port, which defaults to 9418."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:36040
#, no-wrap
msgid "@code{whitelist} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:36042
msgid "If not empty, only allow access to this list of directories."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:36046
msgid "Extra options that will be passed to @command{git daemon}.@footnote{Run @command{man git-daemon} for more information.}"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:36060
msgid "The @code{git://} protocol lacks authentication.  When you pull from a repository fetched via @code{git://}, you don't know whether the data you receive was modified or is even coming from the specified host, and your connection is subject to eavesdropping.  It's better to use an authenticated and encrypted transport, such as @code{https}.  Although Git allows you to serve repositories using unsophisticated file-based web servers, there is a faster protocol implemented by the @code{git-http-backend} program.  This program is the back-end of a proper Git web service.  It is designed to sit behind a FastCGI proxy.  @xref{Web Services}, for more on running the necessary @code{fcgiwrap} daemon."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:36063
msgid "Guix has a separate configuration data type for serving Git repositories over HTTP."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:36064
#, no-wrap
msgid "{Data Type} git-http-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:36068
msgid "Data type representing the configuration for a future @code{git-http-service-type}; can currently be used to configure Nginx through @code{git-http-nginx-location-configuration}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:36070
#, no-wrap
msgid "@code{package} (default: @var{git})"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:36073
#, no-wrap
msgid "@code{git-root} (default: @file{/srv/git})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:36075
msgid "Directory containing the Git repositories to expose to the world."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:36079
msgid "Whether to expose access for all Git repositories in @var{git-root}, even if they do not have the @file{git-daemon-export-ok} file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:36080
#, no-wrap
msgid "@code{uri-path} (default: @samp{/git/})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:36085
msgid "Path prefix for Git access.  With the default @samp{/git/} prefix, this will map @indicateurl{http://@var{server}/git/@var{repo}.git} to @file{/srv/git/@var{repo}.git}.  Requests whose URI paths do not begin with this prefix are not passed on to this Git instance."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:36086
#, no-wrap
msgid "@code{fcgiwrap-socket} (default: @code{127.0.0.1:9000})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:36089
msgid "The socket on which the @code{fcgiwrap} daemon is listening.  @xref{Web Services}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:36096
msgid "There is no @code{git-http-service-type}, currently; instead you can create an @code{nginx-location-configuration} from a @code{git-http-configuration} and then add that location to a web server."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:36097
#, fuzzy, no-wrap
#| msgid "nginx-location-configuration body"
msgid "git-http-nginx-location-configuration @"
msgstr "nginx-location-configuration body"

#. type: defun
#: guix-git/doc/guix.texi:36102
msgid "[config=(git-http-configuration)] Compute an @code{nginx-location-configuration} that corresponds to the given Git http configuration.  An example nginx service definition to serve the default @file{/srv/git} over HTTPS might be:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:36119
#, no-wrap
msgid ""
"(service nginx-service-type\n"
"         (nginx-configuration\n"
"          (server-blocks\n"
"           (list\n"
"            (nginx-server-configuration\n"
"             (listen '(\"443 ssl\"))\n"
"             (server-name \"git.my-host.org\")\n"
"             (ssl-certificate\n"
"              \"/etc/letsencrypt/live/git.my-host.org/fullchain.pem\")\n"
"             (ssl-certificate-key\n"
"              \"/etc/letsencrypt/live/git.my-host.org/privkey.pem\")\n"
"             (locations\n"
"              (list\n"
"               (git-http-nginx-location-configuration\n"
"                (git-http-configuration (uri-path \"/\"))))))))))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:36126
msgid "This example assumes that you are using Let's Encrypt to get your TLS certificate.  @xref{Certificate Services}.  The default @code{certbot} service will redirect all HTTP traffic on @code{git.my-host.org} to HTTPS@.  You will also need to add an @code{fcgiwrap} proxy to your system services.  @xref{Web Services}."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:36128
#, no-wrap
msgid "Cgit Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:36130
#, no-wrap
msgid "Cgit service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:36131
#, no-wrap
msgid "Git, web interface"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:36134
msgid "@uref{https://git.zx2c4.com/cgit/, Cgit} is a web frontend for Git repositories written in C."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:36137
msgid "The following example will configure the service with default values.  By default, Cgit can be accessed on port 80 (@code{http://localhost:80})."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:36140
#, no-wrap
msgid "(service cgit-service-type)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:36144
msgid "The @code{file-object} type designates either a file-like object (@pxref{G-Expressions, file-like objects}) or a string."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:36148
msgid "Available @code{cgit-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36149
#, no-wrap
msgid "{@code{cgit-configuration} parameter} package package"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36151
msgid "The CGIT package."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36154
#, no-wrap
msgid "{@code{cgit-configuration} parameter} nginx-server-configuration-list nginx"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36156
msgid "NGINX configuration."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36159
#, no-wrap
msgid "{@code{cgit-configuration} parameter} file-object about-filter"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36162
msgid "Specifies a command which will be invoked to format the content of about pages (both top-level and for each repository)."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36167
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string agefile"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36170
msgid "Specifies a path, relative to each repository path, which can be used to specify the date and time of the youngest commit in the repository."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36175
#, no-wrap
msgid "{@code{cgit-configuration} parameter} file-object auth-filter"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36178
msgid "Specifies a command that will be invoked for authenticating repository access."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36183
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string branch-sort"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36186
msgid "Flag which, when set to @samp{age}, enables date ordering in the branch ref list, and when set @samp{name} enables ordering by branch name."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36188
msgid "Defaults to @samp{\"name\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36191
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string cache-root"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36193
msgid "Path used to store the cgit cache entries."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36195
msgid "Defaults to @samp{\"/var/cache/cgit\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36198
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer cache-static-ttl"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36201
msgid "Number which specifies the time-to-live, in minutes, for the cached version of repository pages accessed with a fixed SHA1."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36203 guix-git/doc/guix.texi:36646
msgid "Defaults to @samp{-1}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36206
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer cache-dynamic-ttl"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36209
msgid "Number which specifies the time-to-live, in minutes, for the cached version of repository pages accessed without a fixed SHA1."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36214
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer cache-repo-ttl"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36217
msgid "Number which specifies the time-to-live, in minutes, for the cached version of the repository summary page."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36222
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer cache-root-ttl"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36225
msgid "Number which specifies the time-to-live, in minutes, for the cached version of the repository index page."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36230
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer cache-scanrc-ttl"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36233
msgid "Number which specifies the time-to-live, in minutes, for the result of scanning a path for Git repositories."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36238
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer cache-about-ttl"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36241
msgid "Number which specifies the time-to-live, in minutes, for the cached version of the repository about page."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36246
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer cache-snapshot-ttl"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36249
msgid "Number which specifies the time-to-live, in minutes, for the cached version of snapshots."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36254
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer cache-size"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36257
msgid "The maximum number of entries in the cgit cache.  When set to @samp{0}, caching is disabled."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36262
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean case-sensitive-sort?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36264
msgid "Sort items in the repo list case sensitively."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36269
#, no-wrap
msgid "{@code{cgit-configuration} parameter} list clone-prefix"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36272
msgid "List of common prefixes which, when combined with a repository URL, generates valid clone URLs for the repository."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36277
#, no-wrap
msgid "{@code{cgit-configuration} parameter} list clone-url"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36279
msgid "List of @code{clone-url} templates."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36284
#, no-wrap
msgid "{@code{cgit-configuration} parameter} file-object commit-filter"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36286
msgid "Command which will be invoked to format commit messages."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36291
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string commit-sort"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36295 guix-git/doc/guix.texi:36853
msgid "Flag which, when set to @samp{date}, enables strict date ordering in the commit log, and when set to @samp{topo} enables strict topological ordering."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36297
msgid "Defaults to @samp{\"git log\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36300
#, no-wrap
msgid "{@code{cgit-configuration} parameter} file-object css"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36302
msgid "URL which specifies the css document to include in all cgit pages."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36304
msgid "Defaults to @samp{\"/share/cgit/cgit.css\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36307
#, no-wrap
msgid "{@code{cgit-configuration} parameter} file-object email-filter"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36311
msgid "Specifies a command which will be invoked to format names and email address of committers, authors, and taggers, as represented in various places throughout the cgit interface."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36316
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean embedded?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36319
msgid "Flag which, when set to @samp{#t}, will make cgit generate a HTML fragment suitable for embedding in other HTML pages."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36324
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean enable-commit-graph?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36328
msgid "Flag which, when set to @samp{#t}, will make cgit print an ASCII-art commit history graph to the left of the commit messages in the repository log page."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36333
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean enable-filter-overrides?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36336
msgid "Flag which, when set to @samp{#t}, allows all filter settings to be overridden in repository-specific cgitrc files."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36341
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean enable-follow-links?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36344
msgid "Flag which, when set to @samp{#t}, allows users to follow a file in the log view."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36349
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean enable-http-clone?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36352
msgid "If set to @samp{#t}, cgit will act as an dumb HTTP endpoint for Git clones."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36357
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean enable-index-links?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36360
msgid "Flag which, when set to @samp{#t}, will make cgit generate extra links \"summary\", \"commit\", \"tree\" for each repo in the repository index."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36365
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean enable-index-owner?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36368
msgid "Flag which, when set to @samp{#t}, will make cgit display the owner of each repo in the repository index."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36373
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean enable-log-filecount?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36376
msgid "Flag which, when set to @samp{#t}, will make cgit print the number of modified files for each commit on the repository log page."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36381
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean enable-log-linecount?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36384
msgid "Flag which, when set to @samp{#t}, will make cgit print the number of added and removed lines for each commit on the repository log page."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36389
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean enable-remote-branches?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36392 guix-git/doc/guix.texi:36916
msgid "Flag which, when set to @code{#t}, will make cgit display remote branches in the summary and refs views."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36397
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean enable-subject-links?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36401
msgid "Flag which, when set to @code{1}, will make cgit use the subject of the parent commit as link text when generating links to parent commits in commit view."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36406
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean enable-html-serving?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36410
msgid "Flag which, when set to @samp{#t}, will make cgit use the subject of the parent commit as link text when generating links to parent commits in commit view."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36415
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean enable-tree-linenumbers?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36418
msgid "Flag which, when set to @samp{#t}, will make cgit generate linenumber links for plaintext blobs printed in the tree view."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36423
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean enable-git-config?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36426
msgid "Flag which, when set to @samp{#f}, will allow cgit to use Git config to set any repo specific settings."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36431
#, no-wrap
msgid "{@code{cgit-configuration} parameter} file-object favicon"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36433
msgid "URL used as link to a shortcut icon for cgit."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36435
msgid "Defaults to @samp{\"/favicon.ico\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36438
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string footer"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36442
msgid "The content of the file specified with this option will be included verbatim at the bottom of all pages (i.e.@: it replaces the standard \"generated by...\"@: message)."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36447
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string head-include"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36450
msgid "The content of the file specified with this option will be included verbatim in the HTML HEAD section on all pages."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36455
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string header"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36458
msgid "The content of the file specified with this option will be included verbatim at the top of all pages."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36463
#, no-wrap
msgid "{@code{cgit-configuration} parameter} file-object include"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36466
msgid "Name of a configfile to include before the rest of the current config- file is parsed."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36471
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string index-header"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36474
msgid "The content of the file specified with this option will be included verbatim above the repository index."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36479
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string index-info"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36482
msgid "The content of the file specified with this option will be included verbatim below the heading on the repository index page."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36487
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean local-time?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36490
msgid "Flag which, if set to @samp{#t}, makes cgit print commit and tag times in the servers timezone."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36495
#, no-wrap
msgid "{@code{cgit-configuration} parameter} file-object logo"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36498
msgid "URL which specifies the source of an image which will be used as a logo on all cgit pages."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36500
msgid "Defaults to @samp{\"/share/cgit/cgit.png\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36503
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string logo-link"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36505 guix-git/doc/guix.texi:36962
msgid "URL loaded when clicking on the cgit logo image."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36510
#, no-wrap
msgid "{@code{cgit-configuration} parameter} file-object owner-filter"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36513
msgid "Command which will be invoked to format the Owner column of the main page."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36518
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer max-atom-items"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36520
msgid "Number of items to display in atom feeds view."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36525
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer max-commit-count"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36527
msgid "Number of entries to list per page in \"log\" view."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36532
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer max-message-length"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36534
msgid "Number of commit message characters to display in \"log\" view."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36536 guix-git/doc/guix.texi:36552
msgid "Defaults to @samp{80}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36539
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer max-repo-count"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36542
msgid "Specifies the number of entries to list per page on the repository index page."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36547
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer max-repodesc-length"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36550
msgid "Specifies the maximum number of repo description characters to display on the repository index page."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36555
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer max-blob-size"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36557
msgid "Specifies the maximum size of a blob to display HTML for in KBytes."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36562
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string max-stats"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36565
msgid "Maximum statistics period.  Valid values are @samp{week},@samp{month}, @samp{quarter} and @samp{year}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36570
#, no-wrap
msgid "{@code{cgit-configuration} parameter} mimetype-alist mimetype"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36572
msgid "Mimetype for the specified filename extension."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36576
msgid "Defaults to @samp{'((gif \"image/gif\") (html \"text/html\") (jpg \"image/jpeg\") (jpeg \"image/jpeg\") (pdf \"application/pdf\") (png \"image/png\") (svg \"image/svg+xml\"))}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36579
#, no-wrap
msgid "{@code{cgit-configuration} parameter} file-object mimetype-file"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36581
msgid "Specifies the file to use for automatic mimetype lookup."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36586
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string module-link"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36589
msgid "Text which will be used as the formatstring for a hyperlink when a submodule is printed in a directory listing."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36594
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean nocache?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36596
msgid "If set to the value @samp{#t} caching will be disabled."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36601
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean noplainemail?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36604
msgid "If set to @samp{#t} showing full author email addresses will be disabled."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36609
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean noheader?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36612
msgid "Flag which, when set to @samp{#t}, will make cgit omit the standard header on all pages."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36617
#, no-wrap
msgid "{@code{cgit-configuration} parameter} project-list project-list"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36621
msgid "A list of subdirectories inside of @code{repository-directory}, relative to it, that should loaded as Git repositories.  An empty list means that all subdirectories will be loaded."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36626
#, no-wrap
msgid "{@code{cgit-configuration} parameter} file-object readme"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36628
msgid "Text which will be used as default value for @code{cgit-repo-readme}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36633
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean remove-suffix?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36637
msgid "If set to @code{#t} and @code{repository-directory} is enabled, if any repositories are found with a suffix of @code{.git}, this suffix will be removed for the URL and name."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36642
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer renamelimit"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36644
msgid "Maximum number of files to consider when detecting renames."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36649
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string repository-sort"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36651
msgid "The way in which repositories in each section are sorted."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36656
#, no-wrap
msgid "{@code{cgit-configuration} parameter} robots-list robots"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36658
msgid "Text used as content for the @code{robots} meta-tag."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36660
msgid "Defaults to @samp{'(\"noindex\" \"nofollow\")}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36663
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string root-desc"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36665
msgid "Text printed below the heading on the repository index page."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36667
msgid "Defaults to @samp{\"a fast webinterface for the git dscm\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36670
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string root-readme"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36673
msgid "The content of the file specified with this option will be included verbatim below the ``about'' link on the repository index page."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36678
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string root-title"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36680
msgid "Text printed as heading on the repository index page."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36685
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean scan-hidden-path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36691
msgid "If set to @samp{#t} and repository-directory is enabled, repository-directory will recurse into directories whose name starts with a period.  Otherwise, repository-directory will stay away from such directories, considered as ``hidden''.  Note that this does not apply to the @file{.git} directory in non-bare repos."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36696
#, no-wrap
msgid "{@code{cgit-configuration} parameter} list snapshots"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36699
msgid "Text which specifies the default set of snapshot formats that cgit generates links for."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36704
#, no-wrap
msgid "{@code{cgit-configuration} parameter} repository-directory repository-directory"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36707
msgid "Name of the directory to scan for repositories (represents @code{scan-path})."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36709
msgid "Defaults to @samp{\"/srv/git\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36712
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string section"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36715 guix-git/doc/guix.texi:37031
msgid "The name of the current repository section - all repositories defined after this option will inherit the current section name."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36720
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string section-sort"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36723
msgid "Flag which, when set to @samp{1}, will sort the sections on the repository listing by name."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36728
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer section-from-path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36731
msgid "A number which, if defined prior to repository-directory, specifies how many path elements from each repo path to use as a default section name."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36736
#, no-wrap
msgid "{@code{cgit-configuration} parameter} boolean side-by-side-diffs?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36739
msgid "If set to @samp{#t} shows side-by-side diffs instead of unidiffs per default."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36744
#, no-wrap
msgid "{@code{cgit-configuration} parameter} file-object source-filter"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36747
msgid "Specifies a command which will be invoked to format plaintext blobs in the tree view."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36752
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer summary-branches"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36755
msgid "Specifies the number of branches to display in the repository ``summary'' view."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36760
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer summary-log"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36763
msgid "Specifies the number of log entries to display in the repository ``summary'' view."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36768
#, no-wrap
msgid "{@code{cgit-configuration} parameter} integer summary-tags"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36771
msgid "Specifies the number of tags to display in the repository ``summary'' view."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36776
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string strict-export"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36779
msgid "Filename which, if specified, needs to be present within the repository for cgit to allow access to that repository."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36784
#, no-wrap
msgid "{@code{cgit-configuration} parameter} string virtual-root"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36786
msgid "URL which, if specified, will be used as root for all cgit links."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36788
msgid "Defaults to @samp{\"/\"}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36791
#, no-wrap
msgid "{@code{cgit-configuration} parameter} repository-cgit-configuration-list repositories"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36793
msgid "A list of @dfn{cgit-repo} records to use with config."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36797
msgid "Available @code{repository-cgit-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36798
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-list snapshots"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36801
msgid "A mask of snapshot formats for this repo that cgit generates links for, restricted by the global @code{snapshots} setting."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36806
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-file-object source-filter"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36808
msgid "Override the default @code{source-filter}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36813
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-string url"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36815
msgid "The relative URL used to access the repository."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36820
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-file-object about-filter"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36822
msgid "Override the default @code{about-filter}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36827
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-string branch-sort"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36830
msgid "Flag which, when set to @samp{age}, enables date ordering in the branch ref list, and when set to @samp{name} enables ordering by branch name."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36835
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-list clone-url"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36837
msgid "A list of URLs which can be used to clone repo."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36842
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-file-object commit-filter"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36844
msgid "Override the default @code{commit-filter}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36849
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-string commit-sort"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36858
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-string defbranch"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36863
msgid "The name of the default branch for this repository.  If no such branch exists in the repository, the first branch name (when sorted) is used as default instead.  By default branch pointed to by HEAD, or ``master'' if there is no suitable HEAD."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36868
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-string desc"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36870
msgid "The value to show as repository description."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36875
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-string homepage"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36877
msgid "The value to show as repository homepage."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36882
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-file-object email-filter"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36884
msgid "Override the default @code{email-filter}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36889
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} maybe-repo-boolean enable-commit-graph?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36892
msgid "A flag which can be used to disable the global setting @code{enable-commit-graph?}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36897
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} maybe-repo-boolean enable-log-filecount?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36900
msgid "A flag which can be used to disable the global setting @code{enable-log-filecount?}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36905
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} maybe-repo-boolean enable-log-linecount?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36908
msgid "A flag which can be used to disable the global setting @code{enable-log-linecount?}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36913
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} maybe-repo-boolean enable-remote-branches?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36921
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} maybe-repo-boolean enable-subject-links?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36924
msgid "A flag which can be used to override the global setting @code{enable-subject-links?}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36929
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} maybe-repo-boolean enable-html-serving?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36932
msgid "A flag which can be used to override the global setting @code{enable-html-serving?}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36937
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-boolean hide?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36940
msgid "Flag which, when set to @code{#t}, hides the repository from the repository index."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36945
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-boolean ignore?"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36947
msgid "Flag which, when set to @samp{#t}, ignores the repository."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36952
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-file-object logo"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36955
msgid "URL which specifies the source of an image which will be used as a logo on this repo’s pages."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36960
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-string logo-link"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36967
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-file-object owner-filter"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36969
msgid "Override the default @code{owner-filter}."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36974
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-string module-link"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36978
msgid "Text which will be used as the formatstring for a hyperlink when a submodule is printed in a directory listing.  The arguments for the formatstring are the path and SHA1 of the submodule commit."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36983
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} module-link-path module-link-path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36987
msgid "Text which will be used as the formatstring for a hyperlink when a submodule with the specified subdirectory path is printed in a directory listing."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36992
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-string max-stats"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36994
msgid "Override the default maximum statistics period."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:36999
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-string name"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:37001
msgid "The value to show as repository name."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:37006
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-string owner"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:37008
msgid "A value used to identify the owner of the repository."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:37013
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-string path"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:37015
msgid "An absolute path to the repository directory."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:37020
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-string readme"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:37023
msgid "A path (relative to repo) which specifies a file to include verbatim as the ``About'' page for this repo."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:37028
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-string section"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:37036
#, no-wrap
msgid "{@code{repository-cgit-configuration} parameter} repo-list extra-options"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:37038 guix-git/doc/guix.texi:37047
msgid "Extra options will be appended to cgitrc file."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:37045
#, no-wrap
msgid "{@code{cgit-configuration} parameter} list extra-options"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37059
msgid "However, it could be that you just want to get a @code{cgitrc} up and running.  In that case, you can pass an @code{opaque-cgit-configuration} as a record to @code{cgit-service-type}.  As its name indicates, an opaque configuration does not have easy reflective capabilities."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37061
msgid "Available @code{opaque-cgit-configuration} fields are:"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:37062
#, no-wrap
msgid "{@code{opaque-cgit-configuration} parameter} package cgit"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:37064
msgid "The cgit package."
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:37066
#, no-wrap
msgid "{@code{opaque-cgit-configuration} parameter} string string"
msgstr ""

#. type: deftypevr
#: guix-git/doc/guix.texi:37068
msgid "The contents of the @code{cgitrc}, as a string."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37072
msgid "For example, if your @code{cgitrc} is just the empty string, you could instantiate a cgit service like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:37077
#, no-wrap
msgid ""
"(service cgit-service-type\n"
"         (opaque-cgit-configuration\n"
"          (cgitrc \"\")))\n"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:37079
#, no-wrap
msgid "Gitolite Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:37081
#, no-wrap
msgid "Gitolite service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:37082
#, no-wrap
msgid "Git, hosting"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37085
msgid "@uref{https://gitolite.com/gitolite/, Gitolite} is a tool for hosting Git repositories on a central server."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37088
msgid "Gitolite can handle multiple repositories and users, and supports flexible configuration of the permissions for the users on the repositories."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37091
msgid "The following example will configure Gitolite using the default @code{git} user, and the provided SSH public key."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:37098
#, no-wrap
msgid ""
"(service gitolite-service-type\n"
"         (gitolite-configuration\n"
"           (admin-pubkey (plain-file\n"
"                           \"yourname.pub\"\n"
"                           \"ssh-rsa AAAA... guix@@example.com\"))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37103
msgid "Gitolite is configured through a special admin repository which you can clone, for example, if you setup Gitolite on @code{example.com}, you would run the following command to clone the admin repository."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:37106
#, no-wrap
msgid "git clone git@@example.com:gitolite-admin\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37112
msgid "When the Gitolite service is activated, the provided @code{admin-pubkey} will be inserted in to the @file{keydir} directory in the gitolite-admin repository.  If this results in a change in the repository, it will be committed using the message ``gitolite setup by GNU Guix''."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37113
#, no-wrap
msgid "{Data Type} gitolite-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37115
msgid "Data type representing the configuration for @code{gitolite-service-type}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37117
#, no-wrap
msgid "@code{package} (default: @var{gitolite})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37123
msgid "Gitolite package to use.  There are optional Gitolite dependencies that are not included in the default package, such as Redis and git-annex.  These features can be made available by using the @code{make-gitolite} procedure in the @code{(gnu packages version-control}) module to produce a variant of Gitolite with the desired additional dependencies."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37126
msgid "The following code returns a package in which the Redis and git-annex programs can be invoked by Gitolite's scripts:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:37132
#, no-wrap
msgid ""
"(use-modules (gnu packages databases)\n"
"             (gnu packages haskell-apps)\n"
"             (gnu packages version-control))\n"
"(make-gitolite (list redis git-annex))\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37134
#, no-wrap
msgid "@code{user} (default: @var{git})"
msgstr "@code{user} (default: @var{git})"

#. type: table
#: guix-git/doc/guix.texi:37137
msgid "User to use for Gitolite.  This will be user that you use when accessing Gitolite over SSH."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37138
#, no-wrap
msgid "@code{group} (default: @var{git})"
msgstr "@code{group} (default: @var{git})"

#. type: table
#: guix-git/doc/guix.texi:37140
msgid "Group to use for Gitolite."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37141
#, no-wrap
msgid "@code{home-directory} (default: @var{\"/var/lib/gitolite\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37143
msgid "Directory in which to store the Gitolite configuration and repositories."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37144
#, no-wrap
msgid "@code{rc-file} (default: @var{(gitolite-rc-file)})"
msgstr "@code{rc-file} (padrão: @var{(gitolite-rc-file)})"

#. type: table
#: guix-git/doc/guix.texi:37147
msgid "A ``file-like'' object (@pxref{G-Expressions, file-like objects}), representing the configuration for Gitolite."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37148
#, no-wrap
msgid "@code{admin-pubkey} (default: @var{#f})"
msgstr "@code{admin-pubkey} (default: @var{#f})"

#. type: table
#: guix-git/doc/guix.texi:37152
msgid "A ``file-like'' object (@pxref{G-Expressions, file-like objects}) used to setup Gitolite.  This will be inserted in to the @file{keydir} directory within the gitolite-admin repository."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37154
msgid "To specify the SSH key as a string, use the @code{plain-file} function."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:37157
#, no-wrap
msgid "(plain-file \"yourname.pub\" \"ssh-rsa AAAA... guix@@example.com\")\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37162
#, no-wrap
msgid "{Data Type} gitolite-rc-file"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37164
msgid "Data type representing the Gitolite RC file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37166
#, no-wrap
msgid "@code{umask} (default: @code{#o0077})"
msgstr "@code{umask} (default: @code{#o0077})"

#. type: table
#: guix-git/doc/guix.texi:37169
msgid "This controls the permissions Gitolite sets on the repositories and their contents."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37173
msgid "A value like @code{#o0027} will give read access to the group used by Gitolite (by default: @code{git}).  This is necessary when using Gitolite with software like cgit or gitweb."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37174
#, fuzzy, no-wrap
#| msgid "@code{hangup?} (default: @code{#f})"
msgid "@code{local-code} (default: @code{\"$rc@{GL_ADMIN_BASE@}/local\"})"
msgstr "@code{hangup?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:37177
msgid "Allows you to add your own non-core programs, or even override the shipped ones with your own."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37182
msgid "Please supply the FULL path to this variable. By default, directory called \"local\" in your gitolite clone is used, providing the benefits of versioning them as well as making changes to them without having to log on to the server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37183
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{unsafe-pattern} (default: @code{#f})"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:37188
msgid "An optional Perl regular expression for catching unsafe configurations in the configuration file.  See @uref{https://gitolite.com/gitolite/git-config.html#compensating-for-unsafe_patt, Gitolite's documentation} for more information."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37195
msgid "When the value is not @code{#f}, it should be a string containing a Perl regular expression, such as @samp{\"[`~#\\$\\&()|;<>]\"}, which is the default value used by gitolite.  It rejects any special character in configuration that might be interpreted by a shell, which is useful when sharing the administration burden with other people that do not otherwise have shell access on the server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37196
#, no-wrap
msgid "@code{git-config-keys} (default: @code{\"\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37199
msgid "Gitolite allows you to set git config values using the @samp{config} keyword.  This setting allows control over the config keys to accept."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37200
#, no-wrap
msgid "@code{roles} (default: @code{'((\"READERS\" . 1) (\"WRITERS\" . ))})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37202
msgid "Set the role names allowed to be used by users running the perms command."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37203
#, no-wrap
msgid "@code{enable} (default: @code{'(\"help\" \"desc\" \"info\" \"perms\" \"writable\" \"ssh-authkeys\" \"git-config\" \"daemon\" \"gitweb\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37205
msgid "This setting controls the commands and features to enable within Gitolite."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:37210
#, fuzzy, no-wrap
#| msgid "Game Services"
msgid "Gitile Service"
msgstr "Serviços de jogos"

#. type: cindex
#: guix-git/doc/guix.texi:37212
#, no-wrap
msgid "Gitile service"
msgstr "Serviço Gitile"

#. type: cindex
#: guix-git/doc/guix.texi:37213
#, no-wrap
msgid "Git, forge"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37216
msgid "@uref{https://git.lepiller.eu/gitile, Gitile} is a Git forge for viewing public git repository contents from a web browser."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37222
msgid "Gitile works best in collaboration with Gitolite, and will serve the public repositories from Gitolite by default.  The service should listen only on a local port, and a webserver should be configured to serve static resources.  The gitile service provides an easy way to extend the Nginx service for that purpose (@pxref{NGINX})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37226
msgid "The following example will configure Gitile to serve repositories from a custom location, with some default messages for the home page and the footers."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:37249
#, no-wrap
msgid ""
"(service gitile-service-type\n"
"         (gitile-configuration\n"
"           (repositories \"/srv/git\")\n"
"           (base-git-url \"https://myweb.site/git\")\n"
"           (index-title \"My git repositories\")\n"
"           (intro '((p \"This is all my public work!\")))\n"
"           (footer '((p \"This is the end\")))\n"
"           (nginx-server-block\n"
"             (nginx-server-configuration\n"
"               (ssl-certificate\n"
"                 \"/etc/letsencrypt/live/myweb.site/fullchain.pem\")\n"
"               (ssl-certificate-key\n"
"                 \"/etc/letsencrypt/live/myweb.site/privkey.pem\")\n"
"               (listen '(\"443 ssl http2\" \"[::]:443 ssl http2\"))\n"
"               (locations\n"
"                 (list\n"
"                   ;; Allow for https anonymous fetch on /git/ urls.\n"
"                   (git-http-nginx-location-configuration\n"
"                     (git-http-configuration\n"
"                       (uri-path \"/git/\")\n"
"                       (git-root \"/var/lib/gitolite/repositories\")))))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37258
msgid "In addition to the configuration record, you should configure your git repositories to contain some optional information.  First, your public repositories need to contain the @file{git-daemon-export-ok} magic file that allows Git to export the repository.  Gitile uses the presence of this file to detect public repositories it should make accessible.  To do so with Gitolite for instance, modify your @file{conf/gitolite.conf} to include this in the repositories you want to make public:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:37262
#, no-wrap
msgid ""
"repo foo\n"
"    R = daemon\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37268
msgid "In addition, Gitile can read the repository configuration to display more information on the repository.  Gitile uses the gitweb namespace for its configuration.  As an example, you can use the following in your @file{conf/gitolite.conf}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:37275
#, no-wrap
msgid ""
"repo foo\n"
"    R = daemon\n"
"    desc = A long description, optionally with <i>HTML</i>, shown on the index page\n"
"    config gitweb.name = The Foo Project\n"
"    config gitweb.synopsis = A short description, shown on the main page of the project\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37281
msgid "Do not forget to commit and push these changes once you are satisfied.  You may need to change your gitolite configuration to allow the previous configuration options to be set.  One way to do that is to add the following service definition:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:37293
#, no-wrap
msgid ""
"(service gitolite-service-type\n"
"          (gitolite-configuration\n"
"            (admin-pubkey (local-file \"key.pub\"))\n"
"            (rc-file\n"
"              (gitolite-rc-file\n"
"                (umask #o0027)\n"
"                ;; Allow to set any configuration key\n"
"                (git-config-keys \".*\")\n"
"                ;; Allow any text as a valid configuration value\n"
"                (unsafe-patt \"^$\")))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37295
#, fuzzy, no-wrap
msgid "{Data Type} gitile-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:37297
#, fuzzy
msgid "Data type representing the configuration for @code{gitile-service-type}."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:37299
#, fuzzy, no-wrap
#| msgid "@code{user} (default: @var{git})"
msgid "@code{package} (default: @var{gitile})"
msgstr "@code{user} (default: @var{git})"

#. type: table
#: guix-git/doc/guix.texi:37301
#, fuzzy
#| msgid "The GPM package to use."
msgid "Gitile package to use."
msgstr "O pacote GPM a ser usado."

#. type: table
#: guix-git/doc/guix.texi:37304
msgid "The host on which gitile is listening."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37305
#, fuzzy, no-wrap
#| msgid "@code{port} (default: @code{8081})"
msgid "@code{port} (default: @code{8080})"
msgstr "@code{porta} (default: @code{8081})"

#. type: table
#: guix-git/doc/guix.texi:37307
msgid "The port on which gitile is listening."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37308
#, fuzzy, no-wrap
msgid "@code{database} (default: @code{\"/var/lib/gitile/gitile-db.sql\"})"
msgstr "@code{daemon-socket} (padrão: @code{\"/var/guix/daemon-socket/socket\"})"

#. type: table
#: guix-git/doc/guix.texi:37310
#, fuzzy
#| msgid "The license of this manual."
msgid "The location of the database."
msgstr "A licença deste manual."

#. type: item
#: guix-git/doc/guix.texi:37311
#, fuzzy, no-wrap
msgid "@code{repositories} (default: @code{\"/var/lib/gitolite/repositories\"})"
msgstr "@code{daemon-socket} (padrão: @code{\"/var/guix/daemon-socket/socket\"})"

#. type: table
#: guix-git/doc/guix.texi:37315
msgid "The location of the repositories.  Note that only public repositories will be shown by Gitile.  To make a repository public, add an empty @file{git-daemon-export-ok} file at the root of that repository."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:37316
#, no-wrap
msgid "base-git-url"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37318
msgid "The base git url that will be used to show clone commands."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37319
#, fuzzy, no-wrap
msgid "@code{index-title} (default: @code{\"Index\"})"
msgstr "@code{ttl} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:37321
msgid "The page title for the index page that lists all the available repositories."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37322
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{intro} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:37325
msgid "The intro content, as a list of sxml expressions.  This is shown above the list of repositories, on the index page."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37326
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{footer} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:37329
msgid "The footer content, as a list of sxml expressions.  This is shown on every page served by Gitile."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:37330
#, no-wrap
msgid "nginx-server-block"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37333
msgid "An nginx server block that will be extended and used as a reverse proxy by Gitile to serve its pages, and as a normal web server to serve its assets."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37337
msgid "You can use this block to add more custom URLs to your domain, such as a @code{/git/} URL for anonymous clones, or serving any other files you would like to serve."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:37344
#, fuzzy, no-wrap
#| msgid "Sound Services"
msgid "Joycond service"
msgstr "Serviços de som"

#. type: cindex
#: guix-git/doc/guix.texi:37345
#, no-wrap
msgid "joycond"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37349
msgid "The joycond service allows the pairing of Nintendo joycon game controllers over Bluetooth. (@pxref{Desktop Services} for setting up Bluetooth.)"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37350
#, fuzzy, no-wrap
msgid "{Data Type} joycond-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:37352
#, fuzzy
msgid "Data type representing the configuration of @command{joycond}."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:37354
#, fuzzy, no-wrap
msgid "@code{package} (default: @code{joycond})"
msgstr "@code{cache} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:37356
#, fuzzy
#| msgid "The GPM package to use."
msgid "The joycond package to use."
msgstr "O pacote GPM a ser usado."

#. type: defvar
#: guix-git/doc/guix.texi:37359
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "joycond-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:37361
#, fuzzy
#| msgid "Service type for the QEMU guest agent service."
msgid "Service type for the joycond service."
msgstr "Tipo de serviço para o serviço de agente convidado QEMU."

#. type: subsubheading
#: guix-git/doc/guix.texi:37363
#, no-wrap
msgid "The Battle for Wesnoth Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:37364
#, no-wrap
msgid "wesnothd"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37368
msgid "@uref{https://wesnoth.org, The Battle for Wesnoth} is a fantasy, turn based tactical strategy game, with several single player campaigns, and multiplayer games (both networked and local)."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:37369
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "wesnothd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:37373
msgid "Service type for the wesnothd service.  Its value must be a @code{wesnothd-configuration} object.  To run wesnothd in the default configuration, instantiate it as:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:37376
#, no-wrap
msgid "(service wesnothd-service-type)\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37379
#, no-wrap
msgid "{Data Type} wesnothd-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37381
msgid "Data type representing the configuration of @command{wesnothd}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37383
#, no-wrap
msgid "@code{package} (default: @code{wesnoth-server})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37385
msgid "The wesnoth server package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37386
#, no-wrap
msgid "@code{port} (default: @code{15000})"
msgstr "@code{porta} (default: @code{15000})"

#. type: table
#: guix-git/doc/guix.texi:37388 guix-git/doc/guix.texi:37799
msgid "The port to bind the server to."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:37394
#, no-wrap
msgid "pam-mount"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37399
msgid "The @code{(gnu services pam-mount)} module provides a service allowing users to mount volumes when they log in.  It should be able to mount any volume format supported by the system."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:37400
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "pam-mount-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:37402
msgid "Service type for PAM Mount support."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37404
#, no-wrap
msgid "{Data Type} pam-mount-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37406
msgid "Data type representing the configuration of PAM Mount."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:37410
#, no-wrap
msgid "rules"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37413
msgid "The configuration rules that will be used to generate @file{/etc/security/pam_mount.conf.xml}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37417
msgid "The configuration rules are SXML elements (@pxref{SXML,,, guile, GNU Guile Reference Manual}), and the default ones don't mount anything for anyone at login:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:37432
#, no-wrap
msgid ""
"`((debug (@@ (enable \"0\")))\n"
"  (mntoptions (@@ (allow ,(string-join\n"
"                          '(\"nosuid\" \"nodev\" \"loop\"\n"
"                            \"encryption\" \"fsck\" \"nonempty\"\n"
"                            \"allow_root\" \"allow_other\")\n"
"                          \",\"))))\n"
"  (mntoptions (@@ (require \"nosuid,nodev\")))\n"
"  (logout (@@ (wait \"0\")\n"
"             (hup \"0\")\n"
"             (term \"no\")\n"
"             (kill \"no\")))\n"
"  (mkmountpoint (@@ (enable \"1\")\n"
"                   (remove \"true\"))))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37438
msgid "Some @code{volume} elements must be added to automatically mount volumes at login.  Here's an example allowing the user @code{alice} to mount her encrypted @env{HOME} directory and allowing the user @code{bob} to mount the partition where he stores his data:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:37463
#, no-wrap
msgid ""
"(define pam-mount-rules\n"
"`((debug (@@ (enable \"0\")))\n"
"            (volume (@@ (user \"alice\")\n"
"                       (fstype \"crypt\")\n"
"                       (path \"/dev/sda2\")\n"
"                       (mountpoint \"/home/alice\")))\n"
"            (volume (@@ (user \"bob\")\n"
"                       (fstype \"auto\")\n"
"                       (path \"/dev/sdb3\")\n"
"                       (mountpoint \"/home/bob/data\")\n"
"                       (options \"defaults,autodefrag,compress\")))\n"
"            (mntoptions (@@ (allow ,(string-join\n"
"                                    '(\"nosuid\" \"nodev\" \"loop\"\n"
"                                      \"encryption\" \"fsck\" \"nonempty\"\n"
"                                      \"allow_root\" \"allow_other\")\n"
"                                    \",\"))))\n"
"            (mntoptions (@@ (require \"nosuid,nodev\")))\n"
"            (logout (@@ (wait \"0\")\n"
"                       (hup \"0\")\n"
"                       (term \"no\")\n"
"                       (kill \"no\")))\n"
"            (mkmountpoint (@@ (enable \"1\")\n"
"                             (remove \"true\")))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:37467
#, no-wrap
msgid ""
"(service pam-mount-service-type\n"
"         (pam-mount-configuration\n"
"           (rules pam-mount-rules)))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37471
msgid "The complete list of possible options can be found in the man page for @uref{http://pam-mount.sourceforge.net/pam_mount.conf.5.html, pam_mount.conf}."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:37478
#, no-wrap
msgid "Guix Build Coordinator"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37484
msgid "The @uref{https://git.cbaines.net/guix/build-coordinator/,Guix Build Coordinator} aids in distributing derivation builds among machines running an @dfn{agent}.  The build daemon is still used to build the derivations, but the Guix Build Coordinator manages allocating builds and working with the results."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37490
msgid "The Guix Build Coordinator consists of one @dfn{coordinator}, and one or more connected @dfn{agent} processes.  The coordinator process handles clients submitting builds, and allocating builds to agents.  The agent processes talk to a build daemon to actually perform the builds, then send the results back to the coordinator."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37494
msgid "There is a script to run the coordinator component of the Guix Build Coordinator, but the Guix service uses a custom Guile script instead, to provide better integration with G-expressions used in the configuration."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:37495
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "guix-build-coordinator-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:37498
msgid "Service type for the Guix Build Coordinator.  Its value must be a @code{guix-build-coordinator-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37500
#, no-wrap
msgid "{Data Type} guix-build-coordinator-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37502
msgid "Data type representing the configuration of the Guix Build Coordinator."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37504 guix-git/doc/guix.texi:37688
#, no-wrap
msgid "@code{package} (default: @code{guix-build-coordinator})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37506 guix-git/doc/guix.texi:37558
#: guix-git/doc/guix.texi:37690
msgid "The Guix Build Coordinator package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37507
#, no-wrap
msgid "@code{user} (default: @code{\"guix-build-coordinator\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37509 guix-git/doc/guix.texi:37561
#: guix-git/doc/guix.texi:37693 guix-git/doc/guix.texi:37745
#: guix-git/doc/guix.texi:37793
msgid "The system user to run the service as."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37510
#, no-wrap
msgid "@code{group} (default: @code{\"guix-build-coordinator\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37512 guix-git/doc/guix.texi:37748
#: guix-git/doc/guix.texi:37796
msgid "The system group to run the service as."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37513
#, no-wrap
msgid "@code{database-uri-string} (default: @code{\"sqlite:///var/lib/guix-build-coordinator/guix_build_coordinator.db\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37515
msgid "The URI to use for the database."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37516
#, no-wrap
msgid "@code{agent-communication-uri} (default: @code{\"http://0.0.0.0:8745\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37518
msgid "The URI describing how to listen to requests from agent processes."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37519
#, no-wrap
msgid "@code{client-communication-uri} (default: @code{\"http://127.0.0.1:8746\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37523
msgid "The URI describing how to listen to requests from clients.  The client API allows submitting builds and currently isn't authenticated, so take care when configuring this value."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37524
#, no-wrap
msgid "@code{allocation-strategy} (default: @code{#~basic-build-allocation-strategy})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37528
msgid "A G-expression for the allocation strategy to be used.  This is a procedure that takes the datastore as an argument and populates the allocation plan in the database."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37529
#, no-wrap
msgid "@code{hooks} (default: @var{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37532
msgid "An association list of hooks.  These provide a way to execute arbitrary code upon certain events, like a build result being processed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37533
#, fuzzy, no-wrap
#| msgid "@code{parallel-builds} (default: @code{1})"
msgid "@code{parallel-hooks} (default: @var{'()})"
msgstr "@code{parallel-builds} (padrão: @code{1})"

#. type: table
#: guix-git/doc/guix.texi:37537
msgid "Hooks can be configured to run in parallel.  This parameter is an association list of hooks to do in parallel, where the key is the symbol for the hook and the value is the number of threads to run."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37538
#, no-wrap
msgid "@code{guile} (default: @code{guile-3.0-latest})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37540
msgid "The Guile package with which to run the Guix Build Coordinator."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37541
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{extra-environment-variables} (default: @var{'()})"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:37543 guix-git/doc/guix.texi:37878
msgid "Extra environment variables to set via the shepherd service."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:37547
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "guix-build-coordinator-agent-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:37550
msgid "Service type for a Guix Build Coordinator agent.  Its value must be a @code{guix-build-coordinator-agent-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37552
#, no-wrap
msgid "{Data Type} guix-build-coordinator-agent-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37554
msgid "Data type representing the configuration a Guix Build Coordinator agent."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37556
#, fuzzy, no-wrap
msgid "@code{package} (default: @code{guix-build-coordinator/agent-only})"
msgstr "@code{cache} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:37559
#, no-wrap
msgid "@code{user} (default: @code{\"guix-build-coordinator-agent\"})"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37562
#, no-wrap
msgid "@code{coordinator} (default: @code{\"http://localhost:8745\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37564 guix-git/doc/guix.texi:37696
msgid "The URI to use when connecting to the coordinator."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:37565
#, no-wrap
msgid "authentication"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37568
msgid "Record describing how this agent should authenticate with the coordinator.  Possible record types are described below."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37569 guix-git/doc/guix.texi:37697
#, no-wrap
msgid "@code{systems} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37572
msgid "The systems for which this agent should fetch builds.  The agent process will use the current system it's running on as the default."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37573
#, no-wrap
msgid "@code{max-parallel-builds} (default: @code{1})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37575
msgid "The number of builds to perform in parallel."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37576
#, fuzzy, no-wrap
#| msgid "@code{parallel-builds} (default: @code{1})"
msgid "@code{max-parallel-uploads} (default: @code{1})"
msgstr "@code{parallel-builds} (padrão: @code{1})"

#. type: table
#: guix-git/doc/guix.texi:37578
#, fuzzy
#| msgid "The number of builds that may run in parallel on the machine."
msgid "The number of uploads to perform in parallel."
msgstr "O número de compilações que podem ser executadas paralelamente na máquina."

#. type: item
#: guix-git/doc/guix.texi:37579
#, fuzzy, no-wrap
#| msgid "@code{parallel-builds} (default: @code{1})"
msgid "@code{max-allocated-builds} (default: @code{#f})"
msgstr "@code{parallel-builds} (padrão: @code{1})"

#. type: table
#: guix-git/doc/guix.texi:37581
#, fuzzy
#| msgid "The number of builds that may run in parallel on the machine."
msgid "The maximum number of builds this agent can be allocated."
msgstr "O número de compilações que podem ser executadas paralelamente na máquina."

#. type: item
#: guix-git/doc/guix.texi:37582
#, fuzzy, no-wrap
#| msgid "@code{max-journal-usage} (default: @code{#f})"
msgid "@code{max-1min-load-average} (default: @code{#f})"
msgstr "@code{max-journal-usage} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:37586
msgid "Load average value to look at when considering starting new builds, if the 1 minute load average exceeds this value, the agent will wait before starting new builds."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37590
msgid "This will be unspecified if the value is @code{#f}, and the agent will use the number of cores reported by the system as the max 1 minute load average."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37591
#, no-wrap
msgid "@code{derivation-substitute-urls} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37594
msgid "URLs from which to attempt to fetch substitutes for derivations, if the derivations aren't already available."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37595
#, no-wrap
msgid "@code{non-derivation-substitute-urls} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37598
msgid "URLs from which to attempt to fetch substitutes for build inputs, if the input store items aren't already available."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37602
#, no-wrap
msgid "{Data Type} guix-build-coordinator-agent-password-auth"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37605
msgid "Data type representing an agent authenticating with a coordinator via a UUID and password."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37611 guix-git/doc/guix.texi:37627
msgid "The UUID of the agent.  This should be generated by the coordinator process, stored in the coordinator database, and used by the intended agent."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37614
msgid "The password to use when connecting to the coordinator."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37618
#, no-wrap
msgid "{Data Type} guix-build-coordinator-agent-password-file-auth"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37621
msgid "Data type representing an agent authenticating with a coordinator via a UUID and password read from a file."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:37628
#, no-wrap
msgid "password-file"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37631
msgid "A file containing the password to use when connecting to the coordinator."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37635
#, no-wrap
msgid "{Data Type} guix-build-coordinator-agent-dynamic-auth"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37638
msgid "Data type representing an agent authenticating with a coordinator via a dynamic auth token and agent name."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:37640 guix-git/doc/guix.texi:37657
#, no-wrap
msgid "agent-name"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37644 guix-git/doc/guix.texi:37661
msgid "Name of an agent, this is used to match up to an existing entry in the database if there is one.  When no existing entry is found, a new entry is automatically added."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:37645
#, no-wrap
msgid "token"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37648
msgid "Dynamic auth token, this is created and stored in the coordinator database, and is used by the agent to authenticate."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37652
#, no-wrap
msgid "{Data Type} guix-build-coordinator-agent-dynamic-auth-with-file"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37655
msgid "Data type representing an agent authenticating with a coordinator via a dynamic auth token read from a file and agent name."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:37662
#, no-wrap
msgid "token-file"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37665
msgid "File containing the dynamic auth token, this is created and stored in the coordinator database, and is used by the agent to authenticate."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37675
msgid "The Guix Build Coordinator package contains a script to query an instance of the Guix Data Service for derivations to build, and then submit builds for those derivations to the coordinator.  The service type below assists in running this script.  This is an additional tool that may be useful when building derivations contained within an instance of the Guix Data Service."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:37676
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "guix-build-coordinator-queue-builds-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:37681
msgid "Service type for the guix-build-coordinator-queue-builds-from-guix-data-service script.  Its value must be a @code{guix-build-coordinator-queue-builds-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37683
#, no-wrap
msgid "{Data Type} guix-build-coordinator-queue-builds-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37686
msgid "Data type representing the options to the queue builds from guix data service script."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37691
#, no-wrap
msgid "@code{user} (default: @code{\"guix-build-coordinator-queue-builds\"})"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37694
#, fuzzy, no-wrap
#| msgid "@code{tor} (default: @code{tor})"
msgid "@code{coordinator} (default: @code{\"http://localhost:8746\"})"
msgstr "@code{tor} (default: @code{tor})"

#. type: table
#: guix-git/doc/guix.texi:37699
msgid "The systems for which to fetch derivations to build."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37700
#, no-wrap
msgid "@code{systems-and-targets} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37703
msgid "An association list of system and target pairs for which to fetch derivations to build."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37704
#, no-wrap
msgid "@code{guix-data-service} (default: @code{\"https://data.guix.gnu.org\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37707
msgid "The Guix Data Service instance from which to query to find out about derivations to build."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37708
#, fuzzy, no-wrap
#| msgid "@code{device} (default: @code{#f})"
msgid "@code{guix-data-service-build-server-id} (default: @code{#f})"
msgstr "@code{device} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:37713
msgid "The Guix Data Service build server ID corresponding to the builds being submitted.  Providing this speeds up the submitting of builds as derivations that have already been submitted can be skipped before asking the coordinator to build them."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37714
#, no-wrap
msgid "@code{processed-commits-file} (default: @code{\"/var/cache/guix-build-coordinator-queue-builds/processed-commits\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37717
msgid "A file to record which commits have been processed, to avoid needlessly processing them again if the service is restarted."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:37721
#, no-wrap
msgid "Guix Data Service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37725
msgid "The @uref{http://data.guix.gnu.org,Guix Data Service} processes, stores and provides data about GNU Guix.  This includes information about packages, derivations and lint warnings."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37728
msgid "The data is stored in a PostgreSQL database, and available through a web interface."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:37729
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "guix-data-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:37734
msgid "Service type for the Guix Data Service.  Its value must be a @code{guix-data-service-configuration} object.  The service optionally extends the getmail service, as the guix-commits mailing list is used to find out about changes in the Guix git repository."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37736
#, no-wrap
msgid "{Data Type} guix-data-service-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37738 guix-git/doc/guix.texi:37786
msgid "Data type representing the configuration of the Guix Data Service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37740
#, no-wrap
msgid "@code{package} (default: @code{guix-data-service})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37742
msgid "The Guix Data Service package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37743
#, no-wrap
msgid "@code{user} (default: @code{\"guix-data-service\"})"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37746
#, no-wrap
msgid "@code{group} (default: @code{\"guix-data-service\"})"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37749
#, no-wrap
msgid "@code{port} (default: @code{8765})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37751
msgid "The port to bind the web service to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37752 guix-git/doc/guix.texi:37800
#, no-wrap
msgid "@code{host} (default: @code{\"127.0.0.1\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37754
msgid "The host to bind the web service to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37755
#, no-wrap
msgid "@code{getmail-idle-mailboxes} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37758
msgid "If set, this is the list of mailboxes that the getmail service will be configured to listen to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37759
#, no-wrap
msgid "@code{commits-getmail-retriever-configuration} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37763
msgid "If set, this is the @code{getmail-retriever-configuration} object with which to configure getmail to fetch mail from the guix-commits mailing list."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37764
#, no-wrap
msgid "@code{extra-options} (default: @var{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37766
msgid "Extra command line options for @code{guix-data-service}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37767
#, no-wrap
msgid "@code{extra-process-jobs-options} (default: @var{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37769
msgid "Extra command line options for @code{guix-data-service-process-jobs}."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:37773
#, no-wrap
msgid "Nar Herder"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37776
msgid "The @uref{https://git.cbaines.net/guix/nar-herder/about/,Nar Herder} is a utility for managing a collection of nars."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:37777
#, fuzzy, no-wrap
msgid "nar-herder-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:37782
msgid "Service type for the Guix Data Service.  Its value must be a @code{nar-herder-configuration} object.  The service optionally extends the getmail service, as the guix-commits mailing list is used to find out about changes in the Guix git repository."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37784
#, fuzzy, no-wrap
msgid "{Data Type} nar-herder-configuration"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:37788
#, fuzzy, no-wrap
msgid "@code{package} (default: @code{nar-herder})"
msgstr "@code{cache} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:37790
#, fuzzy
msgid "The Nar Herder package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:37791
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{user} (default: @code{\"nar-herder\"})"
msgstr "@code{users} (default: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:37794
#, fuzzy, no-wrap
#| msgid "@code{hangup?} (default: @code{#f})"
msgid "@code{group} (default: @code{\"nar-herder\"})"
msgstr "@code{hangup?} (padrão: @code{#f})"

#. type: item
#: guix-git/doc/guix.texi:37797
#, fuzzy, no-wrap
#| msgid "@code{port} (default: @code{53})"
msgid "@code{port} (default: @code{8734})"
msgstr "@code{porta} (default: @code{53})"

#. type: table
#: guix-git/doc/guix.texi:37802
msgid "The host to bind the server to."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37807
msgid "Optional URL of the other Nar Herder instance which should be mirrored.  This means that this Nar Herder instance will download it's database, and keep it up to date."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37808
#, fuzzy, no-wrap
msgid "@code{database} (default: @code{\"/var/lib/nar-herder/nar_herder.db\"})"
msgstr "@code{daemon-socket} (padrão: @code{\"/var/guix/daemon-socket/socket\"})"

#. type: table
#: guix-git/doc/guix.texi:37813
msgid "Location for the database.  If this Nar Herder instance is mirroring another, the database will be downloaded if it doesn't exist.  If this Nar Herder instance isn't mirroring another, an empty database will be created."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37814
#, fuzzy, no-wrap
msgid "@code{database-dump} (default: @code{\"/var/lib/nar-herder/nar_herder_dump.db\"})"
msgstr "@code{daemon-socket} (padrão: @code{\"/var/guix/daemon-socket/socket\"})"

#. type: table
#: guix-git/doc/guix.texi:37818
msgid "Location of the database dump.  This is created and regularly updated by taking a copy of the database.  This is the version of the database that is available to download."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37819
#, fuzzy, no-wrap
#| msgid "@code{chdir} (default: @code{#f})"
msgid "@code{storage} (default: @code{#f})"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:37821
msgid "Optional location in which to store nars."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37822
#, fuzzy, no-wrap
#| msgid "@code{tor} (default: @code{tor})"
msgid "@code{storage-limit} (default: @code{\"none\"})"
msgstr "@code{tor} (default: @code{tor})"

#. type: table
#: guix-git/doc/guix.texi:37825
msgid "Limit in bytes for the nars stored in the storage location.  This can also be set to ``none'' so that there is no limit."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37828
msgid "When the storage location exceeds this size, nars are removed according to the nar removal criteria."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37829
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{storage-nar-removal-criteria} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:37832
msgid "Criteria used to remove nars from the storage location.  These are used in conjunction with the storage limit."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37837
msgid "When the storage location exceeds the storage limit size, nars will be checked against the nar removal criteria and if any of the criteria match, they will be removed.  This will continue until the storage location is below the storage limit size."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37841
msgid "Each criteria is specified by a string, then an equals sign, then another string. Currently, only one criteria is supported, checking if a nar is stored on another Nar Herder instance."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37849
msgid "This allows the user's Guix to keep substitute information in cache for @var{ttl}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37856
#, fuzzy, no-wrap
#| msgid "@code{log-level} (default: @code{'info})"
msgid "@code{log-level} (default: @code{'DEBUG})"
msgstr "@code{log-level} (default: @code{'info})"

#. type: table
#: guix-git/doc/guix.texi:37859
msgid "Log level to use, specify a log level like @code{'INFO} to stop logging individual requests."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37860
#, fuzzy, no-wrap
#| msgid "@code{compression-level} (default: @code{3})"
msgid "@code{cached-compressions} (default: @code{'()})"
msgstr "@code{compression-level} (padrão: @code{3})"

#. type: table
#: guix-git/doc/guix.texi:37864
msgid "Activate generating cached nars with different compression details from the stored nars.  This is a list of nar-herder-cached-compression-configuration records."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37865
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{min-uses} (default: @code{3})"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:37868
msgid "When cached-compressions are enabled, generate cached nars when at least this number of requests are made for a nar."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37869
#, fuzzy, no-wrap
msgid "@code{workers} (default: @code{2})"
msgstr "@code{workers} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:37871
msgid "Number of cached nars to generate at a time."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37872
#, fuzzy, no-wrap
#| msgid "@code{chdir} (default: @code{#f})"
msgid "@code{nar-source} (default: @code{#f})"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:37875
msgid "Location to fetch nars from when computing cached compressions.  By default, the storage location will be used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37876
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{extra-environment-variables} (default: @code{'()})"
msgstr "@code{replacement} (default: @code{#f})"

#. type: deftp
#: guix-git/doc/guix.texi:37882
#, fuzzy, no-wrap
msgid "{Data Type} nar-herder-cached-compression-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:37884
#, fuzzy
msgid "Data type representing the cached compression configuration."
msgstr "Gerencie a configuração do sistema operacional."

#. type: table
#: guix-git/doc/guix.texi:37888
msgid "Type of compression to use, e.g. @code{'zstd}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37891
#, fuzzy
#| msgid "The host name of the remote machine."
msgid "Level of the compression to use."
msgstr "O nome de host da máquina remota."

#. type: item
#: guix-git/doc/guix.texi:37892
#, fuzzy, no-wrap
#| msgid "@code{remote?} (default: @code{#f})"
msgid "@code{directory} (default: @code{#f})"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:37895
msgid "Location to store the cached nars.  If unspecified, they will be stored in /var/cache/nar-herder/nar/TYPE."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37896
#, fuzzy, no-wrap
#| msgid "@code{max-zone-size} (default: @code{#f})"
msgid "@code{directory-max-size} (default: @code{#f})"
msgstr "@code{max-zone-size} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:37898
msgid "Maximum size in bytes of the directory."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:37905
#, no-wrap
msgid "oom"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:37906
#, no-wrap
msgid "out of memory killer"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:37907
#, no-wrap
msgid "earlyoom"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:37908
#, no-wrap
msgid "early out of memory daemon"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:37909
#, no-wrap
msgid "Early OOM Service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37916
msgid "@uref{https://github.com/rfjakob/earlyoom,Early OOM}, also known as Earlyoom, is a minimalist out of memory (OOM) daemon that runs in user space and provides a more responsive and configurable alternative to the in-kernel OOM killer.  It is useful to prevent the system from becoming unresponsive when it runs out of memory."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:37917
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "earlyoom-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:37922
msgid "The service type for running @command{earlyoom}, the Early OOM daemon.  Its value must be a @code{earlyoom-configuration} object, described below.  The service can be instantiated in its default configuration with:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:37925
#, no-wrap
msgid "(service earlyoom-service-type)\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37928
#, no-wrap
msgid "{Data Type} earlyoom-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:37930
msgid "This is the configuration record for the @code{earlyoom-service-type}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37932
#, no-wrap
msgid "@code{earlyoom} (default: @var{earlyoom})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37934
msgid "The Earlyoom package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37935
#, no-wrap
msgid "@code{minimum-available-memory} (default: @code{10})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37937
msgid "The threshold for the minimum @emph{available} memory, in percentages."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37938
#, no-wrap
msgid "@code{minimum-free-swap} (default: @code{10})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37940
msgid "The threshold for the minimum free swap memory, in percentages."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37941
#, no-wrap
msgid "@code{prefer-regexp} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37944
msgid "A regular expression (as a string) to match the names of the processes that should be preferably killed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37945
#, no-wrap
msgid "@code{avoid-regexp} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37948
msgid "A regular expression (as a string) to match the names of the processes that should @emph{not} be killed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37949
#, no-wrap
msgid "@code{memory-report-interval} (default: @code{0})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37952
msgid "The interval in seconds at which a memory report is printed.  It is disabled by default."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37953
#, no-wrap
msgid "@code{ignore-positive-oom-score-adj?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37956
msgid "A boolean indicating whether the positive adjustments set in @file{/proc/*/oom_score_adj} should be ignored."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37957
#, no-wrap
msgid "@code{show-debug-messages?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37960
msgid "A boolean indicating whether debug messages should be printed.  The logs are saved at @file{/var/log/earlyoom.log}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:37961
#, no-wrap
msgid "@code{send-notification-command} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:37964
msgid "This can be used to provide a custom command used for sending notifications."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:37967
#, fuzzy, no-wrap
#| msgid "Game Services"
msgid "fstrim Service"
msgstr "Serviços de jogos"

#. type: cindex
#: guix-git/doc/guix.texi:37968
#, fuzzy, no-wrap
#| msgid "Gitile service"
msgid "fstrim service"
msgstr "Serviço Gitile"

#. type: cindex
#: guix-git/doc/guix.texi:37969
#, no-wrap
msgid "solid state drives, periodic trim"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:37970
#, no-wrap
msgid "solid state drives, trim"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:37974
msgid "The command @command{fstrim} can be used to discard (or @dfn{trim})  unused blocks on a mounted file system."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:37983
msgid "Running @command{fstrim} frequently, or even using @command{mount -o discard}, might negatively affect the lifetime of poor-quality SSD devices.  For most desktop and server systems a sufficient trimming frequency is once a week.  Note that not all devices support a queued trim, so each trim command incurs a performance penalty on whatever else might be trying to use the disk at the time."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:37985
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "fstrim-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:37989
msgid "Type for a service that periodically runs @command{fstrim}, whose value must be an @code{<fstrim-configuration>} object.  The service can be instantiated in its default configuration with:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:37992
#, fuzzy, no-wrap
msgid "(service fstrim-service-type)\n"
msgstr "guix-publish-service-type"

#. type: deftp
#: guix-git/doc/guix.texi:37996
#, fuzzy, no-wrap
msgid "{Data Type} fstrim-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:37998
#, fuzzy
msgid "Available @code{fstrim-configuration} fields are:"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:38000
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{package} (default: @code{util-linux}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:38002
#, fuzzy
#| msgid "Package management commands."
msgid "The package providing the @command{fstrim} command."
msgstr "Comandos de gerenciamento de pacote."

#. type: item
#: guix-git/doc/guix.texi:38003
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{schedule} (default: @code{\"0 0 * * 0\"}) (type: mcron-time)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:38008
msgid "Schedule for launching @command{fstrim}.  This can be a procedure, a list or a string.  For additional information, see @ref{Guile Syntax,,Job specification,mcron,the mcron manual}.  By default this is set to run weekly on Sunday at 00:00."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38009
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{listed-in} (default: @code{'(\"/etc/fstab\" \"/proc/self/mountinfo\")}) (type: maybe-list-of-strings)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38014
msgid "List of files in fstab or kernel mountinfo format.  All missing or empty files are silently ignored.  The evaluation of the list @emph{stops} after the first non-empty file.  File systems with @code{X-fstrim.notrim} mount option in fstab are skipped."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38015
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{verbose?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38017
msgid "Verbose execution."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38018
#, fuzzy, no-wrap
#| msgid "@code{wait?} (default: @code{#t})"
msgid "@code{quiet-unsupported?} (default: @code{#t}) (type: boolean)"
msgstr "@code{wait?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:38020
msgid "Suppress error messages if trim operation (ioctl) is unsupported."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38021
#, fuzzy, no-wrap
msgid "@code{extra-arguments} (type: maybe-list-of-strings)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38024
msgid "Extra options to append to @command{fstrim} (run @samp{man fstrim} for more information)."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38029
#, no-wrap
msgid "modprobe"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38030
#, no-wrap
msgid "kernel module loader"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:38031
#, no-wrap
msgid "Kernel Module Loader Service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38037
msgid "The kernel module loader service allows one to load loadable kernel modules at boot.  This is especially useful for modules that don't autoload and need to be manually loaded, as is the case with @code{ddcci}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38038
#, fuzzy, no-wrap
msgid "kernel-module-loader-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38044
msgid "The service type for loading loadable kernel modules at boot with @command{modprobe}.  Its value must be a list of strings representing module names.  For example loading the drivers provided by @code{ddcci-driver-linux}, in debugging mode by passing some module parameters, can be done as follow:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38049
#, no-wrap
msgid ""
"(use-modules (gnu) (gnu services))\n"
"(use-package-modules linux)\n"
"(use-service-modules linux)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38053
#, no-wrap
msgid ""
"(define ddcci-config\n"
"  (plain-file \"ddcci.conf\"\n"
"              \"options ddcci dyndbg delay=120\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38063
#, no-wrap
msgid ""
"(operating-system\n"
"  ...\n"
"  (services (cons* (service kernel-module-loader-service-type\n"
"                            '(\"ddcci\" \"ddcci_backlight\"))\n"
"                   (simple-service 'ddcci-config etc-service-type\n"
"                                   (list `(\"modprobe.d/ddcci.conf\"\n"
"                                           ,ddcci-config)))\n"
"                   %base-services))\n"
"  (kernel-loadable-modules (list ddcci-driver-linux)))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38066
#, fuzzy, no-wrap
#| msgid "daemon"
msgid "rasdaemon"
msgstr "daemon"

#. type: cindex
#: guix-git/doc/guix.texi:38067
#, no-wrap
msgid "Platform Reliability, Availability and Serviceability daemon"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:38068
#, fuzzy, no-wrap
#| msgid "Base Services"
msgid "Rasdaemon Service"
msgstr "Serviços base"

#. type: Plain text
#: guix-git/doc/guix.texi:38073
msgid "The Rasdaemon service provides a daemon which monitors platform @acronym{RAS, Reliability@comma{} Availability@comma{} and Serviceability} reports from Linux kernel trace events, logging them to syslogd."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38076
msgid "Reliability, Availability and Serviceability is a concept used on servers meant to measure their robustness."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38079
msgid "@strong{Relability} is the probability that a system will produce correct outputs:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38081
#, no-wrap
msgid "Generally measured as Mean Time Between Failures (MTBF), and"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38082
#, no-wrap
msgid "Enhanced by features that help to avoid, detect and repair hardware"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:38084
msgid "faults"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38088
msgid "@strong{Availability} is the probability that a system is operational at a given time:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38090
#, no-wrap
msgid "Generally measured as a percentage of downtime per a period of time, and"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38091
#, no-wrap
msgid "Often uses mechanisms to detect and correct hardware faults in runtime."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38096
msgid "@strong{Serviceability} is the simplicity and speed with which a system can be repaired or maintained:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38098
#, no-wrap
msgid "Generally measured on Mean Time Between Repair (MTBR)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38103
msgid "Among the monitoring measures, the most usual ones include:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38105
#, no-wrap
msgid "CPU – detect errors at instruction execution and at L1/L2/L3 caches;"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38106
#, no-wrap
msgid "Memory – add error correction logic (ECC) to detect and correct errors;"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38107
#, no-wrap
msgid "I/O – add CRC checksums for transferred data;"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38108
#, no-wrap
msgid "Storage – RAID, journal file systems, checksums, Self-Monitoring,"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:38110
msgid "Analysis and Reporting Technology (SMART)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38116
msgid "By monitoring the number of occurrences of error detections, it is possible to identify if the probability of hardware errors is increasing, and, on such case, do a preventive maintenance to replace a degraded component while those errors are correctable."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38120
msgid "For detailed information about the types of error events gathered and how to make sense of them, see the kernel administrator's guide at @url{https://www.kernel.org/doc/html/latest/admin-guide/ras.html}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38121
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "rasdaemon-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38124
msgid "Service type for the @command{rasdaemon} service.  It accepts a @code{rasdaemon-configuration} object.  Instantiating like"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38127
#, no-wrap
msgid "(service rasdaemon-service-type)\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38131
msgid "will load with a default configuration, which monitors all events and logs to syslogd."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38133
#, fuzzy, no-wrap
msgid "{Data Type} rasdaemon-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:38135
#, fuzzy
msgid "The data type representing the configuration of @command{rasdaemon}."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:38137
#, fuzzy, no-wrap
#| msgid "@code{remote?} (default: @code{#f})"
msgid "@code{record?} (default: @code{#f})"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38142
msgid "A boolean indicating whether to record the events in an SQLite database.  This provides a more structured access to the information contained in the log file.  The database location is hard-coded to @file{/var/lib/rasdaemon/ras-mc_event.db}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38146
#, no-wrap
msgid "zram"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38147
#, no-wrap
msgid "compressed swap"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38148
#, no-wrap
msgid "Compressed RAM-based block devices"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:38149
#, no-wrap
msgid "Zram Device Service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38155
msgid "The Zram device service provides a compressed swap device in system memory.  The Linux Kernel documentation has more information about @uref{https://www.kernel.org/doc/html/latest/admin-guide/blockdev/zram.html,zram} devices."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38156
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "zram-device-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38160
msgid "This service creates the zram block device, formats it as swap and enables it as a swap device.  The service's value is a @code{zram-device-configuration} record."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38161
#, no-wrap
msgid "{Data Type} zram-device-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38164
msgid "This is the data type representing the configuration for the zram-device service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38166
#, no-wrap
msgid "@code{size} (default @code{\"1G\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38170
msgid "This is the amount of space you wish to provide for the zram device.  It accepts a string and can be a number of bytes or use a suffix, eg.: @code{\"512M\"} or @code{1024000}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38170
#, no-wrap
msgid "@code{compression-algorithm} (default @code{'lzo})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38174
msgid "This is the compression algorithm you wish to use.  It is difficult to list all the possible compression options, but common ones supported by Guix's Linux Libre Kernel include @code{'lzo}, @code{'lz4} and @code{'zstd}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38174
#, no-wrap
msgid "@code{memory-limit} (default @code{0})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38181
msgid "This is the maximum amount of memory which the zram device can use.  Setting it to '0' disables the limit.  While it is generally expected that compression will be 2:1, it is possible that uncompressable data can be written to swap and this is a method to limit how much memory can be used.  It accepts a string and can be a number of bytes or use a suffix, eg.: @code{\"2G\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38181
#, fuzzy, no-wrap
#| msgid "@code{chroot} (default: @code{#f})"
msgid "@code{priority} (default @code{#f})"
msgstr "@code{chroot} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38186
msgid "This is the priority of the swap device created from the zram device.  @xref{Swap Space} for a description of swap priorities.  You might want to set a specific priority for the zram device, otherwise it could end up not being used much for the reasons described there."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38194
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "hurd-console-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38196
msgid "This service starts the fancy @code{VGA} console client on the Hurd."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38198
msgid "The service's value is a @code{hurd-console-configuration} record."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38200
#, no-wrap
msgid "{Data Type} hurd-console-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38203
msgid "This is the data type representing the configuration for the hurd-console-service."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38205 guix-git/doc/guix.texi:38221
#, no-wrap
msgid "@code{hurd} (default: @var{hurd})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38207 guix-git/doc/guix.texi:38223
msgid "The Hurd package to use."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38210
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "hurd-getty-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38212
msgid "This service starts a tty using the Hurd @code{getty} program."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38214
msgid "The service's value is a @code{hurd-getty-configuration} record."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38216
#, no-wrap
msgid "{Data Type} hurd-getty-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38219
msgid "This is the data type representing the configuration for the hurd-getty-service."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38226
msgid "The name of the console this Getty runs on---e.g., @code{\"tty1\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38227
#, no-wrap
msgid "@code{baud-rate} (default: @code{38400})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38229
msgid "An integer specifying the baud rate of the tty."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38236
#, no-wrap
msgid "fingerprint"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:38237
#, no-wrap
msgid "Fingerprint Service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38241
msgid "The @code{(gnu services authentication)} module provides a DBus service to read and identify fingerprints via a fingerprint sensor."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38242
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "fprintd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38245
msgid "The service type for @command{fprintd}, which provides the fingerprint reading capability."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38248
#, no-wrap
msgid "(service fprintd-service-type)\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38251
#, no-wrap
msgid "sysctl"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:38252
#, no-wrap
msgid "System Control Service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38256
msgid "The @code{(gnu services sysctl)} provides a service to configure kernel parameters at boot."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38257
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "sysctl-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38261
msgid "The service type for @command{sysctl}, which modifies kernel parameters under @file{/proc/sys/}.  To enable IPv4 forwarding, it can be instantiated as:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38266
#, no-wrap
msgid ""
"(service sysctl-service-type\n"
"         (sysctl-configuration\n"
"           (settings '((\"net.ipv4.ip_forward\" . \"1\")))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38273
msgid "Since @code{sysctl-service-type} is used in the default lists of services, @code{%base-services} and @code{%desktop-services}, you can use @code{modify-services} to change its configuration and add the kernel parameters that you want (@pxref{Service Reference, @code{modify-services}})."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38280
#, no-wrap
msgid ""
"(modify-services %base-services\n"
"  (sysctl-service-type config =>\n"
"                       (sysctl-configuration\n"
"                         (settings (append '((\"net.ipv4.ip_forward\" . \"1\"))\n"
"                                           %default-sysctl-settings)))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38284
#, no-wrap
msgid "{Data Type} sysctl-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38286
msgid "The data type representing the configuration of @command{sysctl}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38288
#, no-wrap
msgid "@code{sysctl} (default: @code{(file-append procps \"/sbin/sysctl\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38290
msgid "The @command{sysctl} executable to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38291
#, fuzzy, no-wrap
msgid "@code{settings} (default: @code{%default-sysctl-settings})"
msgstr "@code{options} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38293
msgid "An association list specifies kernel parameters and their values."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38296
#, no-wrap
msgid "%default-sysctl-settings"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38299
msgid "An association list specifying the default @command{sysctl} parameters on Guix System."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38301
#, no-wrap
msgid "pcscd"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:38302
#, no-wrap
msgid "PC/SC Smart Card Daemon Service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38309
msgid "The @code{(gnu services security-token)} module provides the following service to run @command{pcscd}, the PC/SC Smart Card Daemon.  @command{pcscd} is the daemon program for pcsc-lite and the MuscleCard framework.  It is a resource manager that coordinates communications with smart card readers, smart cards and cryptographic tokens that are connected to the system."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38310
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "pcscd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38314
msgid "Service type for the @command{pcscd} service.  Its value must be a @code{pcscd-configuration} object.  To run pcscd in the default configuration, instantiate it as:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38317
#, no-wrap
msgid "(service pcscd-service-type)\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38320
#, no-wrap
msgid "{Data Type} pcscd-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38322
msgid "The data type representing the configuration of @command{pcscd}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38324
#, no-wrap
msgid "@code{pcsc-lite} (default: @code{pcsc-lite})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38326
msgid "The pcsc-lite package that provides pcscd."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38326
#, no-wrap
msgid "@code{usb-drivers} (default: @code{(list ccid)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38329
msgid "List of packages that provide USB drivers to pcscd.  Drivers are expected to be under @file{pcsc/drivers} in the store directory of the package."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38332
#, no-wrap
msgid "LIRC"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:38333
#, fuzzy, no-wrap
#| msgid "VPN Services"
msgid "LIRC Service"
msgstr "Serviços VPN"

#. type: Plain text
#: guix-git/doc/guix.texi:38336
msgid "The @code{(gnu services lirc)} module provides the following service."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38337
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "lirc-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38340
msgid "Type for a service that runs @url{http://www.lirc.org, LIRC}, a daemon that decodes infrared signals from remote controls."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38342
msgid "The value for this service is a @code{<lirc-configuration>} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38344
#, fuzzy, no-wrap
msgid "{Data Type} lirc-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:38346
#, fuzzy
msgid "Data type representing the configuration of @command{lircd}."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:38348
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{lirc} (default: @code{lirc}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:38350
#, fuzzy
#| msgid "Package management commands."
msgid "Package object for @command{lirc}."
msgstr "Comandos de gerenciamento de pacote."

#. type: item
#: guix-git/doc/guix.texi:38351
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{device} (default: @code{#f}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: itemx
#: guix-git/doc/guix.texi:38352
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{driver} (default: @code{#f}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: itemx
#: guix-git/doc/guix.texi:38353
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{config-file} (default: @code{#f}) (type: string-or-file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:38355
msgid "TODO.  See @command{lircd} manual for details."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38356
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{extra-options} (default: @code{'()}) (type: list-of-string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:38358
msgid "Additional command-line options to pass to @command{lircd}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38365
#, no-wrap
msgid "SPICE"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:38366
#, fuzzy, no-wrap
#| msgid "DNS Services"
msgid "SPICE Service"
msgstr "Serviços DNS"

#. type: Plain text
#: guix-git/doc/guix.texi:38369
msgid "The @code{(gnu services spice)} module provides the following service."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38370
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "spice-vdagent-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38374
msgid "Type of the service that runs @url{https://www.spice-space.org, VDAGENT}, a daemon that enables sharing the clipboard with a vm and setting the guest display resolution when the graphical console window resizes."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38376
#, fuzzy, no-wrap
msgid "{Data Type} spice-vdagent-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:38379
#, fuzzy
msgid "Data type representing the configuration of @code{spice-vdagent-service-type}."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:38381
#, fuzzy, no-wrap
msgid "@code{spice-vdagent} (default: @code{spice-vdagent}) (type: file-like)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38383
msgid "Package object for VDAGENT."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38387
#, no-wrap
msgid "inputattach"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:38388
#, no-wrap
msgid "inputattach Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38390
#, no-wrap
msgid "tablet input, for Xorg"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38391
#, no-wrap
msgid "touchscreen input, for Xorg"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38395
msgid "The @uref{https://linuxwacom.github.io/, inputattach} service allows you to use input devices such as Wacom tablets, touchscreens, or joysticks with the Xorg display server."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38396
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "inputattach-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38399
msgid "Type of a service that runs @command{inputattach} on a device and dispatches events from it."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38401
#, no-wrap
msgid "{Data Type} inputattach-configuration"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38403
#, no-wrap
msgid "@code{device-type} (default: @code{\"wacom\"})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38406
msgid "The type of device to connect to.  Run @command{inputattach --help}, from the @code{inputattach} package, to see the list of supported device types."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38407
#, no-wrap
msgid "@code{device} (default: @code{\"/dev/ttyS0\"})"
msgstr "@code{device} (padrão: @code{\"/dev/ttyS0\"})"

#. type: table
#: guix-git/doc/guix.texi:38409
msgid "The device file to connect to the device."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38413
msgid "Baud rate to use for the serial connection.  Should be a number or @code{#f}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38414
#, no-wrap
msgid "@code{log-file} (default: @code{#f})"
msgstr "@code{log-file} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38416
msgid "If true, this must be the name of a file to log messages to."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:38419
#, no-wrap
msgid "Dictionary Service"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38420
#, no-wrap
msgid "dictionary"
msgstr "dicionário"

#. type: Plain text
#: guix-git/doc/guix.texi:38423
msgid "The @code{(gnu services dict)} module provides the following service:"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38424
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "dicod-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38427
msgid "This is the type of the service that runs the @command{dicod} daemon, an implementation of DICT server (@pxref{Dicod,,, dico, GNU Dico Manual})."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38431
msgid "You can add @command{open localhost} to your @file{~/.dico} file to make @code{localhost} the default server for @command{dico} client (@pxref{Initialization File,,, dico, GNU Dico Manual})."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38433
#, no-wrap
msgid "{Data Type} dicod-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38435
msgid "Data type representing the configuration of dicod."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38437
#, no-wrap
msgid "@code{dico} (default: @var{dico})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38439
msgid "Package object of the GNU Dico dictionary server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38440
#, no-wrap
msgid "@code{interfaces} (default: @var{'(\"localhost\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38444
msgid "This is the list of IP addresses and ports and possibly socket file names to listen to (@pxref{Server Settings, @code{listen} directive,, dico, GNU Dico Manual})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38445
#, no-wrap
msgid "@code{handlers} (default: @var{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38447
msgid "List of @code{<dicod-handler>} objects denoting handlers (module instances)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38448
#, no-wrap
msgid "@code{databases} (default: @var{(list %dicod-database:gcide)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38450
msgid "List of @code{<dicod-database>} objects denoting dictionaries to be served."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38453
#, no-wrap
msgid "{Data Type} dicod-handler"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38455
msgid "Data type representing a dictionary handler (module instance)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38459
msgid "Name of the handler (module instance)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38460
#, no-wrap
msgid "@code{module} (default: @var{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38464
msgid "Name of the dicod module of the handler (instance).  If it is @code{#f}, the module has the same name as the handler.  (@pxref{Modules,,, dico, GNU Dico Manual})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38467
msgid "List of strings or gexps representing the arguments for the module handler"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38470
#, no-wrap
msgid "{Data Type} dicod-database"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38472
msgid "Data type representing a dictionary database."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38476
msgid "Name of the database, will be used in DICT commands."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:38477
#, no-wrap
msgid "handler"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38480
msgid "Name of the dicod handler (module instance) used by this database (@pxref{Handlers,,, dico, GNU Dico Manual})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38481
#, no-wrap
msgid "@code{complex?} (default: @var{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38484
msgid "Whether the database configuration complex.  The complex configuration will need a corresponding @code{<dicod-handler>} object, otherwise not."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38488
msgid "List of strings or gexps representing the arguments for the database (@pxref{Databases,,, dico, GNU Dico Manual})."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38491
#, no-wrap
msgid "%dicod-database:gcide"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38494
msgid "A @code{<dicod-database>} object serving the GNU Collaborative International Dictionary of English using the @code{gcide} package."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38497
msgid "The following is an example @code{dicod-service-type} configuration."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38513
#, no-wrap
msgid ""
"(service dicod-service-type\n"
"         (dicod-configuration\n"
"          (handlers (list\n"
"                     (dicod-handler\n"
"                      (name \"wordnet\")\n"
"                      (module \"wordnet\")\n"
"                      (options\n"
"                       (list #~(string-append \"wnhome=\" #$wordnet))))))\n"
"          (databases (list\n"
"                      (dicod-database\n"
"                       (name \"wordnet\")\n"
"                       (complex? #t)\n"
"                       (handler \"wordnet\"))\n"
"                      %dicod-database:gcide))))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38515
#, no-wrap
msgid "Docker"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:38516
#, no-wrap
msgid "Docker Service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38519
msgid "The @code{(gnu services docker)} module provides the following services."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38520
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "docker-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38525
msgid "This is the type of the service that runs @url{https://www.docker.com,Docker}, a daemon that can execute application bundles (sometimes referred to as ``containers'') in isolated environments."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38528
#, no-wrap
msgid "{Data Type} docker-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38530
msgid "This is the data type representing the configuration of Docker and Containerd."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38533
#, fuzzy, no-wrap
#| msgid "@code{tor} (default: @code{tor})"
msgid "@code{docker} (default: @code{docker})"
msgstr "@code{tor} (default: @code{tor})"

#. type: table
#: guix-git/doc/guix.texi:38535
msgid "The Docker daemon package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38536
#, fuzzy, no-wrap
#| msgid "@code{tor} (default: @code{tor})"
msgid "@code{docker-cli} (default: @code{docker-cli})"
msgstr "@code{tor} (default: @code{tor})"

#. type: table
#: guix-git/doc/guix.texi:38538
msgid "The Docker client package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38539
#, no-wrap
msgid "@code{containerd} (default: @var{containerd})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38541
msgid "The Containerd package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38542
#, no-wrap
msgid "@code{proxy} (default @var{docker-libnetwork-cmd-proxy})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38544
msgid "The Docker user-land networking proxy package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38545
#, no-wrap
msgid "@code{enable-proxy?} (default @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38547
msgid "Enable or disable the use of the Docker user-land networking proxy."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38548
#, no-wrap
msgid "@code{debug?} (default @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38550
msgid "Enable or disable debug output."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38551
#, no-wrap
msgid "@code{enable-iptables?} (default @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38553
msgid "Enable or disable the addition of iptables rules."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38554
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{environment-variables} (default: @code{'()})"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38556
msgid "List of environment variables to set for @command{dockerd}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38559
msgid "This must be a list of strings where each string has the form @samp{@var{key}=@var{value}} as in this example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38563
#, no-wrap
msgid ""
"(list \"LANGUAGE=eo:ca:eu\"\n"
"      \"TMPDIR=/tmp/dockerd\")\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38568
#, no-wrap
msgid "Singularity, container service"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38569
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "singularity-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38574
msgid "This is the type of the service that allows you to run @url{https://www.sylabs.io/singularity/, Singularity}, a Docker-style tool to create and run application bundles (aka. ``containers'').  The value for this service is the Singularity package to use."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38578
msgid "The service does not install a daemon; instead, it installs helper programs as setuid-root (@pxref{Setuid Programs}) such that unprivileged users can invoke @command{singularity run} and similar commands."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38580
#, no-wrap
msgid "Audit"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:38581
#, no-wrap
msgid "Auditd Service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38584
msgid "The @code{(gnu services auditd)} module provides the following service."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38585
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "auditd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38590
msgid "This is the type of the service that runs @url{https://people.redhat.com/sgrubb/audit/,auditd}, a daemon that tracks security-relevant information on your system."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38592
msgid "Examples of things that can be tracked:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:38596
msgid "File accesses"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:38598
msgid "System calls"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:38600
msgid "Invoked commands"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:38602
msgid "Failed login attempts"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:38604
msgid "Firewall filtering"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:38606
msgid "Network access"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38617
msgid "@command{auditctl} from the @code{audit} package can be used in order to add or remove events to be tracked (until the next reboot).  In order to permanently track events, put the command line arguments of auditctl into a file called @code{audit.rules} in the configuration directory (see below).  @command{aureport} from the @code{audit} package can be used in order to view a report of all recorded events.  The audit daemon by default logs into the file @file{/var/log/audit.log}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38620
#, no-wrap
msgid "{Data Type} auditd-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38622
msgid "This is the data type representing the configuration of auditd."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38625
#, no-wrap
msgid "@code{audit} (default: @code{audit})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38627
msgid "The audit package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38628
#, no-wrap
msgid "@code{configuration-directory} (default: @code{%default-auditd-configuration-directory})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38632
msgid "The directory containing the configuration file for the audit package, which must be named @code{auditd.conf}, and optionally some audit rules to instantiate on startup."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38636
#, no-wrap
msgid "rshiny"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:38637
#, no-wrap
msgid "R-Shiny service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38640
msgid "The @code{(gnu services science)} module provides the following service."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38641
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "rshiny-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38646
msgid "This is a type of service which is used to run a webapp created with @code{r-shiny}.  This service sets the @env{R_LIBS_USER} environment variable and runs the provided script to call @code{runApp}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38647
#, no-wrap
msgid "{Data Type} rshiny-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38649
msgid "This is the data type representing the configuration of rshiny."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38652
#, no-wrap
msgid "@code{package} (default: @code{r-shiny})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38654
msgid "The package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38655
#, fuzzy, no-wrap
#| msgid "@code{uid} (default: @code{#f})"
msgid "@code{binary} (default @code{\"rshiny\"})"
msgstr "@code{uid} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38658
msgid "The name of the binary or shell script located at @code{package/bin/} to run when the service is run."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38660
msgid "The common way to create this file is as follows:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38677
#, no-wrap
msgid ""
"@dots{}\n"
"(let* ((out       (assoc-ref %outputs \"out\"))\n"
"       (targetdir (string-append out \"/share/\" ,name))\n"
"       (app       (string-append out \"/bin/\" ,name))\n"
"       (Rbin      (search-input-file %build-inputs \"/bin/Rscript\")))\n"
"  ;; @dots{}\n"
"  (mkdir-p (string-append out \"/bin\"))\n"
"  (call-with-output-file app\n"
"    (lambda (port)\n"
"      (format port\n"
"\"#!~a\n"
"library(shiny)\n"
"setwd(\\\"~a\\\")\n"
"runApp(launch.browser=0, port=4202)~%\\n\"\n"
"      Rbin targetdir))))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38683
#, no-wrap
msgid "Nix"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:38684
#, no-wrap
msgid "Nix service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38687
msgid "The @code{(gnu services nix)} module provides the following service."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38688
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "nix-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38693
msgid "This is the type of the service that runs build daemon of the @url{https://nixos.org/nix/, Nix} package manager.  Here is an example showing how to use it:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38698
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules nix)\n"
"(use-package-modules package-management)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38703
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (packages (append (list nix)\n"
"                    %base-packages))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38706
#, no-wrap
msgid ""
"  (services (append (list (service nix-service-type))\n"
"                    %base-services)))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38709
msgid "After @command{guix system reconfigure} configure Nix for your user:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38711
#, no-wrap
msgid "Add a Nix channel and update it.  See"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:38713
msgid "@url{https://nixos.org/nix/manual/, Nix Package Manager Guide}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38714
#, no-wrap
msgid "Create a symlink to your profile and activate Nix profile:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:38720
#, no-wrap
msgid ""
"$ ln -s \"/nix/var/nix/profiles/per-user/$USER/profile\" ~/.nix-profile\n"
"$ source /run/current-system/profile/etc/profile.d/nix.sh\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38724
#, no-wrap
msgid "{Data Type} nix-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38726
msgid "This data type represents the configuration of the Nix daemon."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38728
#, no-wrap
msgid "@code{nix} (default: @code{nix})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38730
msgid "The Nix package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38731
#, no-wrap
msgid "@code{sandbox} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38733
msgid "Specifies whether builds are sandboxed by default."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38734
#, fuzzy, no-wrap
#| msgid "@code{device} (default: @code{#f})"
msgid "@code{build-directory} (default: @code{\"/tmp\"})"
msgstr "@code{device} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38738
msgid "The directory where build directory are stored during builds.  This is useful to change if, for example, the default location does not have enough space to hold build trees for big packages."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38742
msgid "This is similar to setting the @env{TMPDIR} environment variable for @command{guix-daemon}.  @ref{Build Environment Setup, @env{TMPDIR}}, for more info."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38743
#, no-wrap
msgid "@code{build-sandbox-items} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38746
msgid "This is a list of strings or objects appended to the @code{build-sandbox-items} field of the configuration file."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38754
msgid "Extra command line options for @code{nix-service-type}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:38757
#, no-wrap
msgid "Fail2Ban"
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:38758
#, fuzzy, no-wrap
#| msgid "Mail Services"
msgid "Fail2Ban service"
msgstr "Serviços de correio"

#. type: Plain text
#: guix-git/doc/guix.texi:38764
msgid "@uref{http://www.fail2ban.org/, @code{fail2ban}} scans log files (e.g. @code{/var/log/apache/error_log}) and bans IP addresses that show malicious signs -- repeated password failures, attempts to make use of exploits, etc."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38767
msgid "@code{fail2ban-service-type} service type is provided by the @code{(gnu services security)} module."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38770
msgid "This service type runs the @code{fail2ban} daemon.  It can be configured in various ways, which are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38772
#, fuzzy, no-wrap
#| msgid "git configuration"
msgid "Basic configuration"
msgstr "Configuração do git"

#. type: table
#: guix-git/doc/guix.texi:38775
msgid "The basic parameters of the Fail2Ban service can be configured via its @code{fail2ban} configuration, which is documented below."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38776
#, no-wrap
msgid "User-specified jail extensions"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38779
msgid "The @code{fail2ban-jail-service} function can be used to add new Fail2Ban jails."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38780
#, no-wrap
msgid "Shepherd extension mechanism"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38783
msgid "Service developers can extend the @code{fail2ban-service-type} service type itself via the usual service extension mechanism."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:38785
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "fail2ban-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:38789
msgid "This is the type of the service that runs @code{fail2ban} daemon.  Below is an example of a basic, explicit configuration:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38804
#, no-wrap
msgid ""
"(append\n"
" (list\n"
"  (service fail2ban-service-type\n"
"           (fail2ban-configuration\n"
"            (extra-jails\n"
"             (list\n"
"              (fail2ban-jail-configuration\n"
"               (name \"sshd\")\n"
"               (enabled? #t))))))\n"
"  ;; There is no implicit dependency on an actual SSH\n"
"  ;; service, so you need to provide one.\n"
"  (service openssh-service-type))\n"
" %base-services)\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:38807
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "fail2ban-jail-service svc-type jail"
msgstr "guix-publish-service-type"

#. type: defun
#: guix-git/doc/guix.texi:38810
msgid "Extend @var{svc-type}, a @code{<service-type>} object with @var{jail}, a @code{fail2ban-jail-configuration} object."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:38826
#, no-wrap
msgid ""
"(append\n"
" (list\n"
"  (service\n"
"   ;; The 'fail2ban-jail-service' procedure can extend any service type\n"
"   ;; with a fail2ban jail.  This removes the requirement to explicitly\n"
"   ;; extend services with fail2ban-service-type.\n"
"   (fail2ban-jail-service\n"
"    openssh-service-type\n"
"    (fail2ban-jail-configuration\n"
"     (name \"sshd\")\n"
"     (enabled? #t)))\n"
"   (openssh-configuration ...))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:38831
msgid "Below is the reference for the different @code{jail-service-type} configuration records."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38836
#, fuzzy, no-wrap
msgid "{Data Type} fail2ban-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:38838
msgid "Available @code{fail2ban-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38840
#, fuzzy, no-wrap
msgid "@code{fail2ban} (default: @code{fail2ban}) (type: package)"
msgstr "@code{tmpdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38844
msgid "The @code{fail2ban} package to use.  It is used for both binaries and as base default configuration that is to be extended with @code{<fail2ban-jail-configuration>} objects."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38845
#, fuzzy, no-wrap
msgid "@code{run-directory} (default: @code{\"/var/run/fail2ban\"}) (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38847
msgid "The state directory for the @code{fail2ban} daemon."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38848
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{jails} (default: @code{'()}) (type: list-of-fail2ban-jail-configurations)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:38851
msgid "Instances of @code{<fail2ban-jail-configuration>} collected from extensions."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38852
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{extra-jails} (default: @code{'()}) (type: list-of-fail2ban-jail-configurations)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:38854
msgid "Instances of @code{<fail2ban-jail-configuration>} explicitly provided."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38855 guix-git/doc/guix.texi:38984
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{extra-content} (default: @code{'()}) (type: text-config)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38858
msgid "Extra raw content to add to the end of the @file{jail.local} file, provided as a list of file-like objects."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38863
#, fuzzy, no-wrap
msgid "{Data Type} fail2ban-ignore-cache-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:38865
msgid "Available @code{fail2ban-ignore-cache-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38867
#, fuzzy, no-wrap
msgid "@code{key} (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38869
msgid "Cache key."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38870
#, fuzzy, no-wrap
msgid "@code{max-count} (type: integer)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38872
msgid "Cache size."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38873
#, fuzzy, no-wrap
msgid "@code{max-time} (type: integer)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38875
msgid "Cache time."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38880
#, fuzzy, no-wrap
msgid "{Data Type} fail2ban-jail-action-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:38882
msgid "Available @code{fail2ban-jail-action-configuration} fields are:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38886
msgid "Action name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38887
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{arguments} (default: @code{'()}) (type: list-of-arguments)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38889
msgid "Action arguments."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:38894
#, fuzzy, no-wrap
msgid "{Data Type} fail2ban-jail-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:38896
msgid "Available @code{fail2ban-jail-configuration} fields are:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38900
msgid "Required name of this jail configuration."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38903
msgid "Whether this jail is enabled."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38904
#, fuzzy, no-wrap
msgid "@code{backend} (type: maybe-symbol)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38908
msgid "Backend to use to detect changes in the @code{log-path}.  The default is 'auto.  To consult the defaults of the jail configuration, refer to the @file{/etc/fail2ban/jail.conf} file of the @code{fail2ban} package."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38909
#, fuzzy, no-wrap
msgid "@code{max-retry} (type: maybe-integer)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38912
msgid "The number of failures before a host get banned (e.g.  @code{(max-retry 5)})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38913
#, fuzzy, no-wrap
msgid "@code{max-matches} (type: maybe-integer)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38916
msgid "The number of matches stored in ticket (resolvable via tag @code{<matches>}) in action."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38917
#, fuzzy, no-wrap
msgid "@code{find-time} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38924
msgid "The time window during which the maximum retry count must be reached for an IP address to be banned.  A host is banned if it has generated @code{max-retry} during the last @code{find-time} seconds (e.g.  @code{(find-time \"10m\")}).  It can be provided in seconds or using Fail2Ban's \"time abbreviation format\", as described in @command{man 5 jail.conf}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38925
#, fuzzy, no-wrap
msgid "@code{ban-time} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38928
msgid "The duration, in seconds or time abbreviated format, that a ban should last.  (e.g.  @code{(ban-time \"10m\")})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38929
#, fuzzy, no-wrap
#| msgid "@code{no-hints?} (default: @code{#f})"
msgid "@code{ban-time-increment?} (type: maybe-boolean)"
msgstr "@code{no-hints?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38932
msgid "Whether to consider past bans to compute increases to the default ban time of a specific IP address."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38933
#, fuzzy, no-wrap
msgid "@code{ban-time-factor} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38935
msgid "The coefficient to use to compute an exponentially growing ban time."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38936
#, fuzzy, no-wrap
msgid "@code{ban-time-formula} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38938
msgid "This is the formula used to calculate the next value of a ban time."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38939
#, fuzzy, no-wrap
msgid "@code{ban-time-multipliers} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38941
msgid "Used to calculate next value of ban time instead of formula."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38942
#, fuzzy, no-wrap
msgid "@code{ban-time-max-time} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38944
msgid "The maximum number of seconds a ban should last."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38945
#, fuzzy, no-wrap
msgid "@code{ban-time-rnd-time} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38949
msgid "The maximum number of seconds a randomized ban time should last.  This can be useful to stop ``clever'' botnets calculating the exact time an IP address can be unbanned again."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38950
#, fuzzy, no-wrap
msgid "@code{ban-time-overall-jails?} (type: maybe-boolean)"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38954
msgid "When true, it specifies the search of an IP address in the database should be made across all jails.  Otherwise, only the current jail of the ban IP address is considered."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38955
#, fuzzy, no-wrap
msgid "@code{ignore-self?} (type: maybe-boolean)"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38957
msgid "Never ban the local machine's own IP address."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38958
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{ignore-ip} (default: @code{'()}) (type: list-of-strings)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38962
msgid "A list of IP addresses, CIDR masks or DNS hosts to ignore.  @code{fail2ban} will not ban a host which matches an address in this list."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38963
#, no-wrap
msgid "@code{ignore-cache} (type: maybe-fail2ban-ignore-cache-configuration)"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38965
msgid "Provide cache parameters for the ignore failure check."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38966
#, fuzzy, no-wrap
msgid "@code{filter} (type: maybe-fail2ban-jail-filter-configuration)"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38970
msgid "The filter to use by the jail, specified via a @code{<fail2ban-jail-filter-configuration>} object.  By default, jails have names matching their filter name."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38971
#, fuzzy, no-wrap
msgid "@code{log-time-zone} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38973
msgid "The default time zone for log lines that do not have one."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38974
#, fuzzy, no-wrap
#| msgid "@code{no-hints?} (default: @code{#f})"
msgid "@code{log-encoding} (type: maybe-symbol)"
msgstr "@code{no-hints?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38977
msgid "The encoding of the log files handled by the jail.  Possible values are: @code{'ascii}, @code{'utf-8} and @code{'auto}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:38978
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{log-path} (default: @code{'()}) (type: list-of-strings)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:38980
#, fuzzy
#| msgid "The host name of the remote machine."
msgid "The file names of the log files to be monitored."
msgstr "O nome de host da máquina remota."

#. type: item
#: guix-git/doc/guix.texi:38981
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{action} (default: @code{'()}) (type: list-of-fail2ban-jail-actions)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:38983
msgid "A list of @code{<fail2ban-jail-action-configuration>}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38987
#, fuzzy
#| msgid "Instantiating a system configuration."
msgid "Extra content for the jail configuration, provided as a list of file-like objects."
msgstr "Inicializando uma configuração de sistema."

#. type: deftp
#: guix-git/doc/guix.texi:38992
#, fuzzy, no-wrap
msgid "{Data Type} fail2ban-jail-filter-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:38994
msgid "Available @code{fail2ban-jail-filter-configuration} fields are:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:38998
#, fuzzy
#| msgid "user interfaces"
msgid "Filter to use."
msgstr "interfaces de usuário"

#. type: item
#: guix-git/doc/guix.texi:38999
#, fuzzy, no-wrap
msgid "@code{mode} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:39001
msgid "Mode for filter."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39011
#, no-wrap
msgid "setuid programs"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39012
#, fuzzy, no-wrap
#| msgid "Setuid Programs"
msgid "setgid programs"
msgstr "Programas setuid"

#. type: Plain text
#: guix-git/doc/guix.texi:39022
msgid "Some programs need to run with elevated privileges, even when they are launched by unprivileged users.  A notorious example is the @command{passwd} program, which users can run to change their password, and which needs to access the @file{/etc/passwd} and @file{/etc/shadow} files---something normally restricted to root, for obvious security reasons.  To address that, @command{passwd} should be @dfn{setuid-root}, meaning that it always runs with root privileges (@pxref{How Change Persona,,, libc, The GNU C Library Reference Manual}, for more info about the setuid mechanism)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39029
msgid "The store itself @emph{cannot} contain setuid programs: that would be a security issue since any user on the system can write derivations that populate the store (@pxref{The Store}).  Thus, a different mechanism is used: instead of changing the setuid or setgid bits directly on files that are in the store, we let the system administrator @emph{declare} which programs should be entrusted with these additional privileges."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39036
msgid "The @code{setuid-programs} field of an @code{operating-system} declaration contains a list of @code{<setuid-program>} denoting the names of programs to have a setuid or setgid bit set (@pxref{Using the Configuration System}).  For instance, the @command{mount.nfs} program, which is part of the nfs-utils package, with a setuid root can be designated like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39040
#, no-wrap
msgid ""
"(setuid-program\n"
"  (program (file-append nfs-utils \"/sbin/mount.nfs\")))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39045
msgid "And then, to make @command{mount.nfs} setuid on your system, add the previous example to your operating system declaration by appending it to @code{%setuid-programs} like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39053
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; Some fields omitted...\n"
"  (setuid-programs\n"
"    (append (list (setuid-program\n"
"                    (program (file-append nfs-utils \"/sbin/mount.nfs\"))))\n"
"            %setuid-programs)))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:39055
#, fuzzy, no-wrap
#| msgid "{Data Type} build-machine"
msgid "{Data Type} setuid-program"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:39057
msgid "This data type represents a program with a setuid or setgid bit set."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:39059
#, no-wrap
msgid "program"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39061
msgid "A file-like object having its setuid and/or setgid bit set."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39062
#, fuzzy, no-wrap
#| msgid "@code{shared?} (default: @code{#t})"
msgid "@code{setuid?} (default: @code{#t})"
msgstr "@code{shared?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:39064
msgid "Whether to set user setuid bit."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39065
#, fuzzy, no-wrap
#| msgid "@code{id} (default: @code{#f})"
msgid "@code{setgid?} (default: @code{#f})"
msgstr "@code{id} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:39067
msgid "Whether to set group setgid bit."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39068
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{user} (default: @code{0})"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:39071
msgid "UID (integer) or user name (string) for the user owner of the program, defaults to root."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39072
#, fuzzy, no-wrap
#| msgid "@code{hangup?} (default: @code{#f})"
msgid "@code{group} (default: @code{0})"
msgstr "@code{hangup?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:39075
msgid "GID (integer) goup name (string) for the group owner of the program, defaults to root."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39081
msgid "A default set of setuid programs is defined by the @code{%setuid-programs} variable of the @code{(gnu system)} module."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:39082
#, fuzzy, no-wrap
#| msgid "Setuid Programs"
msgid "%setuid-programs"
msgstr "Programas setuid"

#. type: defvar
#: guix-git/doc/guix.texi:39085
msgid "A list of @code{<setuid-program>} denoting common programs that are setuid-root."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:39088
msgid "The list includes commands such as @command{passwd}, @command{ping}, @command{su}, and @command{sudo}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39094
msgid "Under the hood, the actual setuid programs are created in the @file{/run/setuid-programs} directory at system activation time.  The files in this directory refer to the ``real'' binaries, which are in the store."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39098
#, no-wrap
msgid "HTTPS, certificates"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39099
#, no-wrap
msgid "X.509 certificates"
msgstr "Certificados X.509"

#. type: cindex
#: guix-git/doc/guix.texi:39100
#, no-wrap
msgid "TLS"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39107
msgid "Web servers available over HTTPS (that is, HTTP over the transport-layer security mechanism, TLS) send client programs an @dfn{X.509 certificate} that the client can then use to @emph{authenticate} the server.  To do that, clients verify that the server's certificate is signed by a so-called @dfn{certificate authority} (CA).  But to verify the CA's signature, clients must have first acquired the CA's certificate."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39111
msgid "Web browsers such as GNU@tie{}IceCat include their own set of CA certificates, such that they are able to verify CA signatures out-of-the-box."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39115
msgid "However, most other programs that can talk HTTPS---@command{wget}, @command{git}, @command{w3m}, etc.---need to be told where CA certificates can be found."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39123
msgid "For users of Guix System, this is done by adding a package that provides certificates to the @code{packages} field of the @code{operating-system} declaration (@pxref{operating-system Reference}).  Guix includes one such package, @code{nss-certs}, which is a set of CA certificates provided as part of Mozilla's Network Security Services."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39128
msgid "Note that it is @emph{not} part of @code{%base-packages}, so you need to explicitly add it.  The @file{/etc/ssl/certs} directory, which is where most applications and libraries look for certificates by default, points to the certificates installed globally."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39138
msgid "Unprivileged users, including users of Guix on a foreign distro, can also install their own certificate package in their profile.  A number of environment variables need to be defined so that applications and libraries know where to find them.  Namely, the OpenSSL library honors the @env{SSL_CERT_DIR} and @env{SSL_CERT_FILE} variables.  Some applications add their own environment variables; for instance, the Git version control system honors the certificate bundle pointed to by the @env{GIT_SSL_CAINFO} environment variable.  Thus, you would typically run something like:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:39144
#, no-wrap
msgid ""
"guix install nss-certs\n"
"export SSL_CERT_DIR=\"$HOME/.guix-profile/etc/ssl/certs\"\n"
"export SSL_CERT_FILE=\"$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt\"\n"
"export GIT_SSL_CAINFO=\"$SSL_CERT_FILE\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39149
msgid "As another example, R requires the @env{CURL_CA_BUNDLE} environment variable to point to a certificate bundle, so you would have to run something like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:39153
#, no-wrap
msgid ""
"guix install nss-certs\n"
"export CURL_CA_BUNDLE=\"$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39157
msgid "For other applications you may want to look up the required environment variable in the relevant documentation."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39162
#, no-wrap
msgid "name service switch"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39163
#, no-wrap
msgid "NSS"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39172
msgid "The @code{(gnu system nss)} module provides bindings to the configuration file of the libc @dfn{name service switch} or @dfn{NSS} (@pxref{NSS Configuration File,,, libc, The GNU C Library Reference Manual}).  In a nutshell, the NSS is a mechanism that allows libc to be extended with new ``name'' lookup methods for system databases, which includes host names, service names, user accounts, and more (@pxref{Name Service Switch, System Databases and Name Service Switch,, libc, The GNU C Library Reference Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39179
msgid "The NSS configuration specifies, for each system database, which lookup method is to be used, and how the various methods are chained together---for instance, under which circumstances NSS should try the next method in the list.  The NSS configuration is given in the @code{name-service-switch} field of @code{operating-system} declarations (@pxref{operating-system Reference, @code{name-service-switch}})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39180
#, no-wrap
msgid "nss-mdns"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39181
#, no-wrap
msgid ".local, host name lookup"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39186
msgid "As an example, the declaration below configures the NSS to use the @uref{https://0pointer.de/lennart/projects/nss-mdns/, @code{nss-mdns} back-end}, which supports host name lookups over multicast DNS (mDNS)  for host names ending in @code{.local}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39190
#, no-wrap
msgid ""
"(name-service-switch\n"
"   (hosts (list %files    ;first, check /etc/hosts\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39195
#, no-wrap
msgid ""
"                ;; If the above did not succeed, try\n"
"                ;; with 'mdns_minimal'.\n"
"                (name-service\n"
"                  (name \"mdns_minimal\")\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39201
#, no-wrap
msgid ""
"                  ;; 'mdns_minimal' is authoritative for\n"
"                  ;; '.local'.  When it returns \"not found\",\n"
"                  ;; no need to try the next methods.\n"
"                  (reaction (lookup-specification\n"
"                             (not-found => return))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39205
#, no-wrap
msgid ""
"                ;; Then fall back to DNS.\n"
"                (name-service\n"
"                  (name \"dns\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39209
#, no-wrap
msgid ""
"                ;; Finally, try with the \"full\" 'mdns'.\n"
"                (name-service\n"
"                  (name \"mdns\")))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39214
msgid "Do not worry: the @code{%mdns-host-lookup-nss} variable (see below)  contains this configuration, so you will not have to type it if all you want is to have @code{.local} host lookup working."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39222
msgid "Note that, in this case, in addition to setting the @code{name-service-switch} of the @code{operating-system} declaration, you also need to use @code{avahi-service-type} (@pxref{Networking Services, @code{avahi-service-type}}), or @code{%desktop-services}, which includes it (@pxref{Desktop Services}).  Doing this makes @code{nss-mdns} accessible to the name service cache daemon (@pxref{Base Services, @code{nscd-service}})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39225
msgid "For convenience, the following variables provide typical NSS configurations."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:39226
#, no-wrap
msgid "%default-nss"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:39229
msgid "This is the default name service switch configuration, a @code{name-service-switch} object."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:39231
#, no-wrap
msgid "%mdns-host-lookup-nss"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:39234
msgid "This is the name service switch configuration with support for host name lookup over multicast DNS (mDNS) for host names ending in @code{.local}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39244
msgid "The reference for name service switch configuration is given below.  It is a direct mapping of the configuration file format of the C library , so please refer to the C library manual for more information (@pxref{NSS Configuration File,,, libc, The GNU C Library Reference Manual}).  Compared to the configuration file format of libc NSS, it has the advantage not only of adding this warm parenthetic feel that we like, but also static checks: you will know about syntax errors and typos as soon as you run @command{guix system}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:39245
#, no-wrap
msgid "{Data Type} name-service-switch"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:39250
msgid "This is the data type representation the configuration of libc's name service switch (NSS).  Each field below represents one of the supported system databases."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39252
#, no-wrap
msgid "aliases"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:39253
#, no-wrap
msgid "ethers"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:39255
#, no-wrap
msgid "gshadow"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:39256
#, no-wrap
msgid "hosts"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:39257
#, no-wrap
msgid "initgroups"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:39258
#, no-wrap
msgid "netgroup"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:39259
#, no-wrap
msgid "networks"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:39262
#, no-wrap
msgid "rpc"
msgstr ""

#. type: itemx
#: guix-git/doc/guix.texi:39264
#, no-wrap
msgid "shadow"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39267
msgid "The system databases handled by the NSS@.  Each of these fields must be a list of @code{<name-service>} objects (see below)."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:39270
#, no-wrap
msgid "{Data Type} name-service"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:39274
msgid "This is the data type representing an actual name service and the associated lookup action."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39279
msgid "A string denoting the name service (@pxref{Services in the NSS configuration,,, libc, The GNU C Library Reference Manual})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39284
msgid "Note that name services listed here must be visible to nscd.  This is achieved by passing the @code{#:name-services} argument to @code{nscd-service} the list of packages providing the needed name services (@pxref{Base Services, @code{nscd-service}})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39285
#, no-wrap
msgid "reaction"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39289
msgid "An action specified using the @code{lookup-specification} macro (@pxref{Actions in the NSS configuration,,, libc, The GNU C Library Reference Manual}).  For example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39293
#, no-wrap
msgid ""
"(lookup-specification (unavailable => continue)\n"
"                      (success => return))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39307
msgid "For bootstrapping purposes, the Linux-Libre kernel is passed an @dfn{initial RAM disk}, or @dfn{initrd}.  An initrd contains a temporary root file system as well as an initialization script.  The latter is responsible for mounting the real root file system, and for loading any kernel modules that may be needed to achieve that."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39316
msgid "The @code{initrd-modules} field of an @code{operating-system} declaration allows you to specify Linux-libre kernel modules that must be available in the initrd.  In particular, this is where you would list modules needed to actually drive the hard disk where your root partition is---although the default value of @code{initrd-modules} should cover most use cases.  For example, assuming you need the @code{megaraid_sas} module in addition to the default modules to be able to access your root file system, you would write:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39321
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (initrd-modules (cons \"megaraid_sas\" %base-initrd-modules)))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:39323
#, no-wrap
msgid "%base-initrd-modules"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:39325
msgid "This is the list of kernel modules included in the initrd by default."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39333
msgid "Furthermore, if you need lower-level customization, the @code{initrd} field of an @code{operating-system} declaration allows you to specify which initrd you would like to use.  The @code{(gnu system linux-initrd)} module provides three ways to build an initrd: the high-level @code{base-initrd} procedure and the low-level @code{raw-initrd} and @code{expression->initrd} procedures."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39338
msgid "The @code{base-initrd} procedure is intended to cover most common uses.  For example, if you want to add a bunch of kernel modules to be loaded at boot time, you can define the @code{initrd} field of the operating system declaration like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39346
#, no-wrap
msgid ""
"(initrd (lambda (file-systems . rest)\n"
"          ;; Create a standard initrd but set up networking\n"
"          ;; with the parameters QEMU expects by default.\n"
"          (apply base-initrd file-systems\n"
"                 #:qemu-networking? #t\n"
"                 rest)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39351
msgid "The @code{base-initrd} procedure also handles common use cases that involves using the system as a QEMU guest, or as a ``live'' system with volatile root file system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39358
msgid "The @code{base-initrd} procedure is built from @code{raw-initrd} procedure.  Unlike @code{base-initrd}, @code{raw-initrd} doesn't do anything high-level, such as trying to guess which kernel modules and packages should be included to the initrd.  An example use of @code{raw-initrd} is when a user has a custom Linux kernel configuration and default kernel modules included by @code{base-initrd} are not available."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39363
msgid "The initial RAM disk produced by @code{base-initrd} or @code{raw-initrd} honors several options passed on the Linux kernel command line (that is, arguments passed @i{via} the @code{linux} command of GRUB, or the @code{-append} option of QEMU), notably:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39365
#, fuzzy, no-wrap
#| msgid "--load=@var{file}"
msgid "gnu.load=@var{boot}"
msgstr "--load=@var{arquivo}"

#. type: table
#: guix-git/doc/guix.texi:39368
msgid "Tell the initial RAM disk to load @var{boot}, a file containing a Scheme program, once it has mounted the root file system."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39372
msgid "Guix uses this option to yield control to a boot program that runs the service activation programs and then spawns the GNU@tie{}Shepherd, the initialization system."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39373
#, fuzzy, no-wrap
#| msgid "--root=@var{file}"
msgid "root=@var{root}"
msgstr "--root=@var{arquivo}"

#. type: table
#: guix-git/doc/guix.texi:39378
msgid "Mount @var{root} as the root file system.  @var{root} can be a device name like @code{/dev/sda1}, a file system label, or a file system UUID.  When unspecified, the device name from the root file system of the operating system declaration is used."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39379
#, fuzzy, no-wrap
#| msgid "-t @var{type}"
msgid "rootfstype=@var{type}"
msgstr "-t @var{tipo}"

#. type: table
#: guix-git/doc/guix.texi:39383
msgid "Set the type of the root file system.  It overrides the @code{type} field of the root file system specified via the @code{operating-system} declaration, if any."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39384
#, fuzzy, no-wrap
#| msgid "guix package @var{options}\n"
msgid "rootflags=@var{options}"
msgstr "guix package @var{opções}\n"

#. type: table
#: guix-git/doc/guix.texi:39388
msgid "Set the mount @emph{options} of the root file system.  It overrides the @code{options} field of the root file system specified via the @code{operating-system} declaration, if any."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39389
#, no-wrap
msgid "fsck.mode=@var{mode}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39395
msgid "Whether to check the @var{root} file system for errors before mounting it.  @var{mode} is one of @code{skip} (never check), @code{force} (always check), or @code{auto} to respect the root @code{<file-system>} object's @code{check?} setting (@pxref{File Systems}) and run a full scan only if the file system was not cleanly shut down."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39398
msgid "@code{auto} is the default if this option is not present or if @var{mode} is not one of the above."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39399
#, no-wrap
msgid "fsck.repair=@var{level}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39404
msgid "The level of repairs to perform automatically if errors are found in the @var{root} file system.  @var{level} is one of @code{no} (do not write to @var{root} at all if possible), @code{yes} (repair as much as possible), or @code{preen} to repair problems considered safe to repair automatically."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39407
msgid "@code{preen} is the default if this option is not present or if @var{level} is not one of the above."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39408
#, fuzzy, no-wrap
#| msgid "-s @var{system}"
msgid "gnu.system=@var{system}"
msgstr "-s @var{sistema}"

#. type: table
#: guix-git/doc/guix.texi:39411
msgid "Have @file{/run/booted-system} and @file{/run/current-system} point to @var{system}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39412
#, no-wrap
msgid "modprobe.blacklist=@var{modules}@dots{}"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39413
#, no-wrap
msgid "module, black-listing"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39414
#, no-wrap
msgid "black list, of kernel modules"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39419
msgid "Instruct the initial RAM disk as well as the @command{modprobe} command (from the kmod package) to refuse to load @var{modules}.  @var{modules} must be a comma-separated list of module names---e.g., @code{usbkbd,9pnet}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39420
#, no-wrap
msgid "gnu.repl"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39426
msgid "Start a read-eval-print loop (REPL) from the initial RAM disk before it tries to load kernel modules and to mount the root file system.  Our marketing team calls it @dfn{boot-to-Guile}.  The Schemer in you will love it.  @xref{Using Guile Interactively,,, guile, GNU Guile Reference Manual}, for more information on Guile's REPL."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39432
msgid "Now that you know all the features that initial RAM disks produced by @code{base-initrd} and @code{raw-initrd} provide, here is how to use it and customize it further."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:39435
#, fuzzy, no-wrap
#| msgid "--list-transitive"
msgid "raw-initrd file-systems @"
msgstr "--list-transitive"

#. type: defun
#: guix-git/doc/guix.texi:39451
msgid "[#:linux-modules '()] [#:pre-mount #t] [#:mapped-devices '()] @ [#:keyboard-layout #f] [#:helper-packages '()] @ [#:qemu-networking? #f] [#:volatile-root? #f] Return a derivation that builds a raw initrd.  @var{file-systems} is a list of file systems to be mounted by the initrd, possibly in addition to the root file system specified on the kernel command line via @option{root}.  @var{linux-modules} is a list of kernel modules to be loaded at boot time.  @var{mapped-devices} is a list of device mappings to realize before @var{file-systems} are mounted (@pxref{Mapped Devices}).  @var{pre-mount} is a G-expression to evaluate before realizing @var{mapped-devices}.  @var{helper-packages} is a list of packages to be copied in the initrd.  It may include @code{e2fsck/static} or other packages needed by the initrd to check the root file system."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:39457 guix-git/doc/guix.texi:39481
msgid "When true, @var{keyboard-layout} is a @code{<keyboard-layout>} record denoting the desired console keyboard layout.  This is done before @var{mapped-devices} are set up and before @var{file-systems} are mounted such that, should the user need to enter a passphrase or use the REPL, this happens using the intended keyboard layout."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:39461
msgid "When @var{qemu-networking?} is true, set up networking with the standard QEMU parameters.  When @var{virtio?} is true, load additional modules so that the initrd can be used as a QEMU guest with para-virtualized I/O drivers."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:39464
msgid "When @var{volatile-root?} is true, the root file system is writable but any changes to it are lost."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:39466
#, fuzzy, no-wrap
#| msgid "--list-transitive"
msgid "base-initrd file-systems @"
msgstr "--list-transitive"

#. type: defun
#: guix-git/doc/guix.texi:39475
msgid "[#:mapped-devices '()] [#:keyboard-layout #f] @ [#:qemu-networking? #f] [#:volatile-root? #f] @ [#:linux-modules '()] Return as a file-like object a generic initrd, with kernel modules taken from @var{linux}.  @var{file-systems} is a list of file-systems to be mounted by the initrd, possibly in addition to the root file system specified on the kernel command line via @option{root}.  @var{mapped-devices} is a list of device mappings to realize before @var{file-systems} are mounted."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:39483
msgid "@var{qemu-networking?} and @var{volatile-root?} behaves as in @code{raw-initrd}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:39488
msgid "The initrd is automatically populated with all the kernel modules necessary for @var{file-systems} and for the given options.  Additional kernel modules can be listed in @var{linux-modules}.  They will be added to the initrd, and loaded at boot time in the order in which they appear."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39495
msgid "Needless to say, the initrds we produce and use embed a statically-linked Guile, and the initialization program is a Guile program.  That gives a lot of flexibility.  The @code{expression->initrd} procedure builds such an initrd, given the program to run in that initrd."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:39496
#, no-wrap
msgid "expression->initrd exp @"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:39502
msgid "[#:guile %guile-static-stripped] [#:name \"guile-initrd\"] Return as a file-like object a Linux initrd (a gzipped cpio archive)  containing @var{guile} and that evaluates @var{exp}, a G-expression, upon booting.  All the derivations referenced by @var{exp} are automatically copied to the initrd."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39508
#, no-wrap
msgid "boot loader"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39515
msgid "The operating system supports multiple bootloaders.  The bootloader is configured using @code{bootloader-configuration} declaration.  All the fields of this structure are bootloader agnostic except for one field, @code{bootloader} that indicates the bootloader to be configured and installed."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39520
msgid "Some of the bootloaders do not honor every field of @code{bootloader-configuration}.  For instance, the extlinux bootloader does not support themes and thus ignores the @code{theme} field."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:39521
#, no-wrap
msgid "{Data Type} bootloader-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:39523
msgid "The type of a bootloader configuration declaration."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39527
#, no-wrap
msgid "EFI, bootloader"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39528
#, no-wrap
msgid "UEFI, bootloader"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39529
#, no-wrap
msgid "BIOS, bootloader"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39535
msgid "The bootloader to use, as a @code{bootloader} object.  For now @code{grub-bootloader}, @code{grub-efi-bootloader}, @code{grub-efi-removable-bootloader}, @code{grub-efi-netboot-bootloader}, @code{grub-efi-netboot-removable-bootloader}, @code{extlinux-bootloader} and @code{u-boot-bootloader} are supported."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39536
#, no-wrap
msgid "ARM, bootloaders"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39537
#, no-wrap
msgid "AArch64, bootloaders"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39542
msgid "Available bootloaders are described in @code{(gnu bootloader @dots{})} modules.  In particular, @code{(gnu bootloader u-boot)} contains definitions of bootloaders for a wide range of ARM and AArch64 systems, using the @uref{https://www.denx.de/wiki/U-Boot/, U-Boot bootloader}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39546
msgid "@code{grub-bootloader} allows you to boot in particular Intel-based machines in ``legacy'' BIOS mode."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39552
msgid "@code{grub-efi-bootloader} allows to boot on modern systems using the @dfn{Unified Extensible Firmware Interface} (UEFI).  This is what you should use if the installation image contains a @file{/sys/firmware/efi} directory when you boot it on your system."
msgstr ""

#. type: vindex
#: guix-git/doc/guix.texi:39553
#, no-wrap
msgid "grub-efi-removable-bootloader"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39560
msgid "@code{grub-efi-removable-bootloader} allows you to boot your system from removable media by writing the GRUB file to the UEFI-specification location of @file{/EFI/BOOT/BOOTX64.efi} of the boot directory, usually @file{/boot/efi}.  This is also useful for some UEFI firmwares that ``forget'' their configuration from their non-volatile storage. Like @code{grub-efi-bootloader}, this can only be used if the @file{/sys/firmware/efi} directory is available."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:39565 guix-git/doc/guix.texi:39639
msgid "This @emph{will} overwrite the GRUB file from any other operating systems that also place their GRUB file in the UEFI-specification location; making them unbootable."
msgstr ""

#. type: vindex
#: guix-git/doc/guix.texi:39567
#, no-wrap
msgid "grub-efi-netboot-bootloader"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39571
msgid "@code{grub-efi-netboot-bootloader} allows you to boot your system over network through TFTP@.  In combination with an NFS root file system this allows you to build a diskless Guix system."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39578
msgid "The installation of the @code{grub-efi-netboot-bootloader} generates the content of the TFTP root directory at @code{targets} (@pxref{Bootloader Configuration, @code{targets}}) below the sub-directory @file{efi/Guix}, to be served by a TFTP server.  You may want to mount your TFTP server directories onto the @code{targets} to move the required files to the TFTP server automatically during installation."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39587
msgid "If you plan to use an NFS root file system as well (actually if you mount the store from an NFS share), then the TFTP server needs to serve the file @file{/boot/grub/grub.cfg} and other files from the store (like GRUBs background image, the kernel (@pxref{operating-system Reference, @code{kernel}}) and the initrd (@pxref{operating-system Reference, @code{initrd}})), too.  All these files from the store will be accessed by GRUB through TFTP with their normal store path, for example as @file{tftp://tftp-server/gnu/store/…-initrd/initrd.cpio.gz}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39596
msgid "Two symlinks are created to make this possible.  For each target in the @code{targets} field, the first symlink is @samp{target}@file{/efi/Guix/boot/grub/grub.cfg} pointing to @file{../../../boot/grub/grub.cfg}, where @samp{target} may be @file{/boot}.  In this case the link is not leaving the served TFTP root directory, but otherwise it does.  The second link is @samp{target}@file{/gnu/store} and points to @file{../gnu/store}.  This link is leaving the served TFTP root directory."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39602
msgid "The assumption behind all this is that you have an NFS server exporting the root file system for your Guix system, and additionally a TFTP server exporting your @code{targets} directories—usually a single @file{/boot}—from that same root file system for your Guix system.  In this constellation the symlinks will work."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39607
msgid "For other constellations you will have to program your own bootloader installer, which then takes care to make necessary files from the store accessible through TFTP, for example by copying them into the TFTP root directory for your @code{targets}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39613
msgid "It is important to note that symlinks pointing outside the TFTP root directory may need to be allowed in the configuration of your TFTP server.  Further the store link exposes the whole store through TFTP@.  Both points need to be considered carefully for security aspects.  It is advised to disable any TFTP write access!"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39616
msgid "Please note, that this bootloader will not modify the ‘UEFI Boot Manager’ of the system."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39621
msgid "Beside the @code{grub-efi-netboot-bootloader}, the already mentioned TFTP and NFS servers, you also need a properly configured DHCP server to make the booting over netboot possible.  For all this we can currently only recommend you to look for instructions about @acronym{PXE, Preboot eXecution Environment}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39628
msgid "If a local EFI System Partition (ESP) or a similar partition with a FAT file system is mounted in @code{targets}, then symlinks cannot be created.  In this case everything will be prepared for booting from local storage, matching the behavior of @code{grub-efi-bootloader}, with the difference that all GRUB binaries are copied to @code{targets}, necessary for booting over the network."
msgstr ""

#. type: vindex
#: guix-git/doc/guix.texi:39629
#, no-wrap
msgid "grub-efi-netboot-removable-bootloader"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39634
msgid "@code{grub-efi-netboot-removable-bootloader} is identical to @code{grub-efi-netboot-bootloader} with the exception that the sub-directory @file{efi/boot} will be used instead of @file{efi/Guix} to comply with the UEFI specification for removable media."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39644
msgid "This is a list of strings denoting the targets onto which to install the bootloader."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39655
msgid "The interpretation of targets depends on the bootloader in question.  For @code{grub-bootloader}, for example, they should be device names understood by the bootloader @command{installer} command, such as @code{/dev/sda} or @code{(hd0)} (@pxref{Invoking grub-install,,, grub, GNU GRUB Manual}).  For @code{grub-efi-bootloader} and @code{grub-efi-removable-bootloader} they should be mount points of the EFI file system, usually @file{/boot/efi}.  For @code{grub-efi-netboot-bootloader}, @code{targets} should be the mount points corresponding to TFTP root directories served by your TFTP server."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39656
#, fuzzy, no-wrap
msgid "@code{menu-entries} (default: @code{'()})"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:39660
msgid "A possibly empty list of @code{menu-entry} objects (see below), denoting entries to appear in the bootloader menu, in addition to the current system entry and the entry pointing to previous system generations."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39661
#, no-wrap
msgid "@code{default-entry} (default: @code{0})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39664
msgid "The index of the default boot menu entry.  Index 0 is for the entry of the current system."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39665
#, no-wrap
msgid "@code{timeout} (default: @code{5})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39668
msgid "The number of seconds to wait for keyboard input before booting.  Set to 0 to boot immediately, and to -1 to wait indefinitely."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39669
#, no-wrap
msgid "keyboard layout, for the bootloader"
msgstr "disposição do teclado, para o gerenciador de boot"

#. type: table
#: guix-git/doc/guix.texi:39673
msgid "If this is @code{#f}, the bootloader's menu (if any) uses the default keyboard layout, usually US@tie{}English (``qwerty'')."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39676
msgid "Otherwise, this must be a @code{keyboard-layout} object (@pxref{Keyboard Layout})."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:39680
msgid "This option is currently ignored by bootloaders other than @code{grub} and @code{grub-efi}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39682
#, no-wrap
msgid "@code{theme} (default: @var{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39686
msgid "The bootloader theme object describing the theme to use.  If no theme is provided, some bootloaders might use a default theme, that's true for GRUB."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39687
#, no-wrap
msgid "@code{terminal-outputs} (default: @code{'(gfxterm)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39694
msgid "The output terminals used for the bootloader boot menu, as a list of symbols.  GRUB accepts the values: @code{console}, @code{serial}, @code{serial_@{0-3@}}, @code{gfxterm}, @code{vga_text}, @code{mda_text}, @code{morse}, and @code{pkmodem}.  This field corresponds to the GRUB variable @code{GRUB_TERMINAL_OUTPUT} (@pxref{Simple configuration,,, grub,GNU GRUB manual})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39695
#, no-wrap
msgid "@code{terminal-inputs} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39703
msgid "The input terminals used for the bootloader boot menu, as a list of symbols.  For GRUB, the default is the native platform terminal as determined at run-time.  GRUB accepts the values: @code{console}, @code{serial}, @code{serial_@{0-3@}}, @code{at_keyboard}, and @code{usb_keyboard}.  This field corresponds to the GRUB variable @code{GRUB_TERMINAL_INPUT} (@pxref{Simple configuration,,, grub,GNU GRUB manual})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39704
#, no-wrap
msgid "@code{serial-unit} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39708
msgid "The serial unit used by the bootloader, as an integer from 0 to 3.  For GRUB, it is chosen at run-time; currently GRUB chooses 0, which corresponds to COM1 (@pxref{Serial terminal,,, grub,GNU GRUB manual})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39709
#, no-wrap
msgid "@code{serial-speed} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39713
msgid "The speed of the serial interface, as an integer.  For GRUB, the default value is chosen at run-time; currently GRUB chooses 9600@tie{}bps (@pxref{Serial terminal,,, grub,GNU GRUB manual})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39714
#, fuzzy, no-wrap
#| msgid "@code{device} (default: @code{#f})"
msgid "@code{device-tree-support?} (default: @code{#t})"
msgstr "@code{device} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:39717
msgid "Whether to support Linux @uref{https://en.wikipedia.org/wiki/Devicetree, device tree} files loading."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39722
msgid "This option in enabled by default.  In some cases involving the @code{u-boot} bootloader, where the device tree has already been loaded in RAM, it can be handy to disable the option by setting it to @code{#f}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39726
#, no-wrap
msgid "dual boot"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39727
#, no-wrap
msgid "boot menu"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39733
msgid "Should you want to list additional boot menu entries @i{via} the @code{menu-entries} field above, you will need to create them with the @code{menu-entry} form.  For example, imagine you want to be able to boot another distro (hard to imagine!), you can define a menu entry along these lines:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39740
#, no-wrap
msgid ""
"(menu-entry\n"
"  (label \"The Other Distro\")\n"
"  (linux \"/boot/old/vmlinux-2.6.32\")\n"
"  (linux-arguments '(\"root=/dev/sda2\"))\n"
"  (initrd \"/boot/old/initrd\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39743
msgid "Details below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:39744
#, no-wrap
msgid "{Data Type} menu-entry"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:39746
msgid "The type of an entry in the bootloader menu."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39751
msgid "The label to show in the menu---e.g., @code{\"GNU\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39752
#, no-wrap
msgid "@code{linux} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39754
msgid "The Linux kernel image to boot, for example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39757
#, no-wrap
msgid "(file-append linux-libre \"/bzImage\")\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39762
msgid "For GRUB, it is also possible to specify a device explicitly in the file path using GRUB's device naming convention (@pxref{Naming convention,,, grub, GNU GRUB manual}), for example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:39765
#, no-wrap
msgid "\"(hd0,msdos1)/boot/vmlinuz\"\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39769
msgid "If the device is specified explicitly as above, then the @code{device} field is ignored entirely."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39770
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{linux-arguments} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:39773
msgid "The list of extra Linux kernel command-line arguments---e.g., @code{'(\"console=ttyS0\")}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39774
#, no-wrap
msgid "@code{initrd} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39777
msgid "A G-Expression or string denoting the file name of the initial RAM disk to use (@pxref{G-Expressions})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39781
msgid "The device where the kernel and initrd are to be found---i.e., for GRUB, @dfn{root} for this menu entry (@pxref{root,,, grub, GNU GRUB manual})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39787
msgid "This may be a file system label (a string), a file system UUID (a bytevector, @pxref{File Systems}), or @code{#f}, in which case the bootloader will search the device containing the file specified by the @code{linux} field (@pxref{search,,, grub, GNU GRUB manual}).  It must @emph{not} be an OS device name such as @file{/dev/sda1}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39788
#, no-wrap
msgid "@code{multiboot-kernel} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39792
msgid "The kernel to boot in Multiboot-mode (@pxref{multiboot,,, grub, GNU GRUB manual}).  When this field is set, a Multiboot menu-entry is generated.  For example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39795
#, no-wrap
msgid "(file-append mach \"/boot/gnumach\")\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39797
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{multiboot-arguments} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:39799
msgid "The list of extra command-line arguments for the multiboot-kernel."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39800
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{multiboot-modules} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:39802
msgid "The list of commands for loading Multiboot modules.  For example:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39808
#, no-wrap
msgid ""
"(list (list (file-append hurd \"/hurd/ext2fs.static\") \"ext2fs\"\n"
"             @dots{})\n"
"      (list (file-append libc \"/lib/ld.so.1\") \"exec\"\n"
"             @dots{}))\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39810
#, fuzzy, no-wrap
#| msgid "@code{node} (default: @code{#f})"
msgid "@code{chain-loader} (default: @code{#f})"
msgstr "@code{node} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:39815
msgid "A string that can be accepted by @code{grub}'s @code{chainloader} directive. This has no effect if either @code{linux} or @code{multiboot-kernel} fields are specified. The following is an example of chainloading a different GNU/Linux system."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39826
#, no-wrap
msgid ""
"(bootloader\n"
" (bootloader-configuration\n"
"  ;; @dots{}\n"
"  (menu-entries\n"
"   (list\n"
"    (menu-entry\n"
"     (label \"GNU/Linux\")\n"
"     (device (uuid \"1C31-A17C\" 'fat))\n"
"     (chain-loader \"/EFI/GNULinux/grubx64.efi\"))))))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39831 guix-git/doc/guix.texi:39891
#, no-wrap
msgid "HDPI"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39832 guix-git/doc/guix.texi:39892
#, no-wrap
msgid "HiDPI"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39833 guix-git/doc/guix.texi:39893
#, no-wrap
msgid "resolution"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39837
msgid "For now only GRUB has theme support.  GRUB themes are created using the @code{grub-theme} form, which is not fully documented yet."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:39838
#, no-wrap
msgid "{Data Type} grub-theme"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:39840
msgid "Data type representing the configuration of the GRUB theme."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39842
#, no-wrap
msgid "@code{gfxmode} (default: @code{'(\"auto\")})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39845
msgid "The GRUB @code{gfxmode} to set (a list of screen resolution strings, @pxref{gfxmode,,, grub, GNU GRUB manual})."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:39848
#, no-wrap
msgid "grub-theme"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:39852
msgid "Return the default GRUB theme used by the operating system if no @code{theme} field is specified in @code{bootloader-configuration} record."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:39855
msgid "It comes with a fancy background image displaying the GNU and Guix logos."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39859
msgid "For example, to override the default resolution, you may use something like"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:39867
#, no-wrap
msgid ""
"(bootloader\n"
" (bootloader-configuration\n"
" ;; @dots{}\n"
" (theme (grub-theme\n"
"         (inherit (grub-theme))\n"
"         (gfxmode '(\"1024x786x32\" \"auto\"))))))\n"
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:39870
#, fuzzy, no-wrap
#| msgid "Invoking @command{guix size}"
msgid "Invoking @command{guix system}"
msgstr "Invocando @command{guix size}"

#. type: command{#1}
#: guix-git/doc/guix.texi:39872
#, fuzzy, no-wrap
#| msgid "guix system vm"
msgid "guix system"
msgstr "guix system vm"

#. type: Plain text
#: guix-git/doc/guix.texi:39876
msgid "Once you have written an operating system declaration as seen in the previous section, it can be @dfn{instantiated} using the @command{guix system} command.  The synopsis is:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:39879
#, no-wrap
msgid "guix system @var{options}@dots{} @var{action} @var{file}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:39885
msgid "@var{file} must be the name of a file containing an @code{operating-system} declaration.  @var{action} specifies how the operating system is instantiated.  Currently the following values are supported:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:39887 guix-git/doc/guix.texi:43755
#, no-wrap
msgid "search"
msgstr "pesquisa"

#. type: table
#: guix-git/doc/guix.texi:39890
msgid "Display available service type definitions that match the given regular expressions, sorted by relevance:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:39912
#, no-wrap
msgid ""
"$ guix system search console\n"
"name: console-fonts\n"
"location: gnu/services/base.scm:806:2\n"
"extends: shepherd-root\n"
"description: Install the given fonts on the specified ttys (fonts are per\n"
"+ virtual console on GNU/Linux).  The value of this service is a list of\n"
"+ tty/font pairs.  The font can be the name of a font provided by the `kbd'\n"
"+ package or any valid argument to `setfont', as in this example:\n"
"+\n"
"+      '((\"tty1\" . \"LatGrkCyr-8x16\")\n"
"+        (\"tty2\" . (file-append\n"
"+                      font-tamzen\n"
"+                      \"/share/kbd/consolefonts/TamzenForPowerline10x20.psf\"))\n"
"+        (\"tty3\" . (file-append\n"
"+                      font-terminus\n"
"+                      \"/share/consolefonts/ter-132n\"))) ; for HDPI\n"
"relevance: 9\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:39918
#, no-wrap
msgid ""
"name: mingetty\n"
"location: gnu/services/base.scm:1190:2\n"
"extends: shepherd-root\n"
"description: Provide console login using the `mingetty' program.\n"
"relevance: 2\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:39925
#, no-wrap
msgid ""
"name: login\n"
"location: gnu/services/base.scm:860:2\n"
"extends: pam\n"
"description: Provide a console log-in service as specified by its\n"
"+ configuration value, a `login-configuration' object.\n"
"relevance: 2\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:39927 guix-git/doc/guix.texi:43791
#, no-wrap
msgid "@dots{}\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39932
msgid "As for @command{guix package --search}, the result is written in @code{recutils} format, which makes it easy to filter the output (@pxref{Top, GNU recutils databases,, recutils, GNU recutils manual})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39933 guix-git/doc/guix.texi:43840
#, no-wrap
msgid "service type definition, editing"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39934 guix-git/doc/guix.texi:43841
#, fuzzy, no-wrap
#| msgid "Adding new service definitions."
msgid "editing, service type definition"
msgstr "Adicionando novas definições de serviço."

#. type: item
#: guix-git/doc/guix.texi:39935 guix-git/doc/guix.texi:43842
#, no-wrap
msgid "edit"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39937
msgid "Edit or view the definition of the given service types."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39941
msgid "For example, the command below opens your editor, as specified by the @env{EDITOR} environment variable, on the definition of the @code{openssh} service type:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:39944
#, fuzzy, no-wrap
#| msgid "guix system vm"
msgid "guix system edit openssh\n"
msgstr "guix system vm"

#. type: item
#: guix-git/doc/guix.texi:39946 guix-git/doc/guix.texi:43853
#, no-wrap
msgid "reconfigure"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39951
msgid "Build the operating system described in @var{file}, activate it, and switch to it@footnote{This action (and the related actions @code{switch-generation} and @code{roll-back}) are usable only on systems already running Guix System.}."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:39959
msgid "It is highly recommended to run @command{guix pull} once before you run @command{guix system reconfigure} for the first time (@pxref{Invoking guix pull}).  Failing to do that you would see an older version of Guix once @command{reconfigure} has completed."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39967
msgid "This effects all the configuration specified in @var{file}: user accounts, system services, global package list, setuid programs, etc.  The command starts system services specified in @var{file} that are not currently running; if a service is currently running this command will arrange for it to be upgraded the next time it is stopped (e.g.@: by @code{herd stop X} or @code{herd restart X})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39973
msgid "This command creates a new generation whose number is one greater than the current generation (as reported by @command{guix system list-generations}).  If that generation already exists, it will be overwritten.  This behavior mirrors that of @command{guix package} (@pxref{Invoking guix package})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39978
msgid "It also adds a bootloader menu entry for the new OS configuration, ---unless @option{--no-bootloader} is passed.  For GRUB, it moves entries for older configurations to a submenu, allowing you to choose an older system generation at boot time should you need it."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:39979 guix-git/doc/guix.texi:40324
#: guix-git/doc/guix.texi:41347
#, no-wrap
msgid "provenance tracking, of the operating system"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39984
msgid "Upon completion, the new system is deployed under @file{/run/current-system}.  This directory contains @dfn{provenance meta-data}: the list of channels in use (@pxref{Channels}) and @var{file} itself, when available.  You can view it by running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:39987
#, no-wrap
msgid "guix system describe\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:39993
msgid "This information is useful should you later want to inspect how this particular generation was built.  In fact, assuming @var{file} is self-contained, you can later rebuild generation @var{n} of your operating system with:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:39999
#, no-wrap
msgid ""
"guix time-machine \\\n"
"  -C /var/guix/profiles/system-@var{n}-link/channels.scm -- \\\n"
"  system reconfigure \\\n"
"  /var/guix/profiles/system-@var{n}-link/configuration.scm\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40005
msgid "You can think of it as some sort of built-in version control! Your system is not just a binary artifact: @emph{it carries its own source}.  @xref{Service Reference, @code{provenance-service-type}}, for more information on provenance tracking."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40011
msgid "By default, @command{reconfigure} @emph{prevents you from downgrading your system}, which could (re)introduce security vulnerabilities and also cause problems with ``stateful'' services such as database management systems.  You can override that behavior by passing @option{--allow-downgrades}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40012 guix-git/doc/guix.texi:43912
#, no-wrap
msgid "switch-generation"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40021
msgid "Switch to an existing system generation.  This action atomically switches the system profile to the specified system generation.  It also rearranges the system's existing bootloader menu entries.  It makes the menu entry for the specified system generation the default, and it moves the entries for the other generations to a submenu, if supported by the bootloader being used.  The next time the system boots, it will use the specified system generation."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40025
msgid "The bootloader itself is not being reinstalled when using this command.  Thus, the installed bootloader is used with an updated configuration file."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40029
msgid "The target generation can be specified explicitly by its generation number.  For example, the following invocation would switch to system generation 7:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40032
#, no-wrap
msgid "guix system switch-generation 7\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40040 guix-git/doc/guix.texi:43931
msgid "The target generation can also be specified relative to the current generation with the form @code{+N} or @code{-N}, where @code{+3} means ``3 generations ahead of the current generation,'' and @code{-1} means ``1 generation prior to the current generation.'' When specifying a negative value such as @code{-1}, you must precede it with @code{--} to prevent it from being parsed as an option.  For example:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40043
#, no-wrap
msgid "guix system switch-generation -- -1\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40051
msgid "Currently, the effect of invoking this action is @emph{only} to switch the system profile to an existing generation and rearrange the bootloader menu entries.  To actually start using the target system generation, you must reboot after running this action.  In the future, it will be updated to do the same things as @command{reconfigure}, like activating and deactivating services."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40053 guix-git/doc/guix.texi:43937
msgid "This action will fail if the specified generation does not exist."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40054 guix-git/doc/guix.texi:43938
#, no-wrap
msgid "roll-back"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40060
msgid "Switch to the preceding system generation.  The next time the system boots, it will use the preceding system generation.  This is the inverse of @command{reconfigure}, and it is exactly the same as invoking @command{switch-generation} with an argument of @code{-1}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40064
msgid "Currently, as with @command{switch-generation}, you must reboot after running this action to actually start using the preceding system generation."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40065 guix-git/doc/guix.texi:43944
#, no-wrap
msgid "delete-generations"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40066
#, no-wrap
msgid "deleting system generations"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40067 guix-git/doc/guix.texi:43946
#, no-wrap
msgid "saving space"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40071
msgid "Delete system generations, making them candidates for garbage collection (@pxref{Invoking guix gc}, for information on how to run the ``garbage collector'')."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40075
msgid "This works in the same way as @samp{guix package --delete-generations} (@pxref{Invoking guix package, @option{--delete-generations}}).  With no arguments, all system generations but the current one are deleted:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40078
#, no-wrap
msgid "guix system delete-generations\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40082
msgid "You can also select the generations you want to delete.  The example below deletes all the system generations that are more than two months old:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40085
#, no-wrap
msgid "guix system delete-generations 2m\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40090
msgid "Running this command automatically reinstalls the bootloader with an updated list of menu entries---e.g., the ``old generations'' sub-menu in GRUB no longer lists the generations that have been deleted."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40095
msgid "Build the derivation of the operating system, which includes all the configuration files and programs needed to boot and run the system.  This action does not actually install anything."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40096
#, no-wrap
msgid "init"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40100
msgid "Populate the given directory with all the files necessary to run the operating system specified in @var{file}.  This is useful for first-time installations of Guix System.  For instance:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40103
#, no-wrap
msgid "guix system init my-os-config.scm /mnt\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40110
msgid "copies to @file{/mnt} all the store items required by the configuration specified in @file{my-os-config.scm}.  This includes configuration files, packages, and so on.  It also creates other essential files needed for the system to operate correctly---e.g., the @file{/etc}, @file{/var}, and @file{/run} directories, and the @file{/bin/sh} file."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40114
msgid "This command also installs bootloader on the targets specified in @file{my-os-config}, unless the @option{--no-bootloader} option was passed."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40115
#, no-wrap
msgid "vm"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40116 guix-git/doc/guix.texi:40760
#, no-wrap
msgid "virtual machine"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40117
#, no-wrap
msgid "VM"
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:40121
msgid "guix system vm"
msgstr "guix system vm"

#. type: table
#: guix-git/doc/guix.texi:40121
msgid "Build a virtual machine (VM) that contains the operating system declared in @var{file}, and return a script to run that VM."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:40129
msgid "The @code{vm} action and others below can use KVM support in the Linux-libre kernel.  Specifically, if the machine has hardware virtualization support, the corresponding KVM kernel module should be loaded, and the @file{/dev/kvm} device node must exist and be readable and writable by the user and by the build users of the daemon (@pxref{Build Environment Setup})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40134
msgid "Arguments given to the script are passed to QEMU as in the example below, which enables networking and requests 1@tie{}GiB of RAM for the emulated machine:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40137
#, no-wrap
msgid "$ /gnu/store/@dots{}-run-vm.sh -m 1024 -smp 2 -nic user,model=virtio-net-pci\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40140
msgid "It's possible to combine the two steps into one:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40143
#, no-wrap
msgid "$ $(guix system vm my-config.scm) -m 1024 -smp 2 -nic user,model=virtio-net-pci\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40146
msgid "The VM shares its store with the host system."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40151
msgid "By default, the root file system of the VM is mounted volatile; the @option{--persistent} option can be provided to make it persistent instead.  In that case, the VM disk-image file will be copied from the store to the @env{TMPDIR} directory to make it writable."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40156
msgid "Additional file systems can be shared between the host and the VM using the @option{--share} and @option{--expose} command-line options: the former specifies a directory to be shared with write access, while the latter provides read-only access to the shared directory."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40160
msgid "The example below creates a VM in which the user's home directory is accessible read-only, and where the @file{/exchange} directory is a read-write mapping of @file{$HOME/tmp} on the host:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40164
#, no-wrap
msgid ""
"guix system vm my-config.scm \\\n"
"   --expose=$HOME --share=$HOME/tmp=/exchange\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40169
msgid "On GNU/Linux, the default is to boot directly to the kernel; this has the advantage of requiring only a very tiny root disk image since the store of the host can then be mounted."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40174
msgid "The @option{--full-boot} option forces a complete boot sequence, starting with the bootloader.  This requires more disk space since a root image containing at least the kernel, initrd, and bootloader data files must be created."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40177
msgid "The @option{--image-size} option can be used to specify the size of the image."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40184
msgid "The @option{--no-graphic} option will instruct @command{guix system} to spawn a headless VM that will use the invoking tty for IO.  Among other things, this enables copy-pasting, and scrollback.  Use the @kbd{ctrl-a} prefix to issue QEMU commands; e.g. @kbd{ctrl-a h} prints a help, @kbd{ctrl-a x} quits the VM, and @kbd{ctrl-a c} switches between the QEMU monitor and the VM."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40185
#, no-wrap
msgid "System images, creation in various formats"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40186
#, no-wrap
msgid "Creating system images in various formats"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40187
#, no-wrap
msgid "image"
msgstr "imagem"

#. type: cindex
#: guix-git/doc/guix.texi:40188
#, no-wrap
msgid "image, creating disk images"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40200
msgid "The @code{image} command can produce various image types.  The image type can be selected using the @option{--image-type} option.  It defaults to @code{efi-raw}.  When its value is @code{iso9660}, the @option{--label} option can be used to specify a volume ID with @code{image}.  By default, the root file system of a disk image is mounted non-volatile; the @option{--volatile} option can be provided to make it volatile instead.  When using @code{image}, the bootloader installed on the generated image is taken from the provided @code{operating-system} definition.  The following example demonstrates how to generate an image that uses the @code{grub-efi-bootloader} bootloader and boot it with QEMU:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40208
#, no-wrap
msgid ""
"image=$(guix system image --image-type=qcow2 \\\n"
"        gnu/system/examples/lightweight-desktop.tmpl)\n"
"cp $image /tmp/my-image.qcow2\n"
"chmod +w /tmp/my-image.qcow2\n"
"qemu-system-x86_64 -enable-kvm -hda /tmp/my-image.qcow2 -m 1000 \\\n"
"                   -bios $(guix build ovmf)/share/firmware/ovmf_x64.bin\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40214
msgid "When using the @code{efi-raw} image type, a raw disk image is produced; it can be copied as is to a USB stick, for instance.  Assuming @code{/dev/sdc} is the device corresponding to a USB stick, one can copy the image to it using the following command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40217
#, no-wrap
msgid "# dd if=$(guix system image my-os.scm) of=/dev/sdc status=progress\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40221
msgid "The @code{--list-image-types} command lists all the available image types."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40222
#, no-wrap
msgid "creating virtual machine images"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40231
msgid "When using the @code{qcow2} image type, the returned image is in qcow2 format, which the QEMU emulator can efficiently use. @xref{Running Guix in a VM}, for more information on how to run the image in a virtual machine.  The @code{grub-bootloader} bootloader is always used independently of what is declared in the @code{operating-system} file passed as argument.  This is to make it easier to work with QEMU, which uses the SeaBIOS BIOS by default, expecting a bootloader to be installed in the Master Boot Record (MBR)."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40232
#, no-wrap
msgid "docker-image, creating docker images"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40238
msgid "When using the @code{docker} image type, a Docker image is produced.  Guix builds the image from scratch, not from a pre-existing Docker base image.  As a result, it contains @emph{exactly} what you define in the operating system configuration file.  You can then load the image and launch a Docker container using commands like the following:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40243
#, no-wrap
msgid ""
"image_id=\"$(docker load < guix-system-docker-image.tar.gz)\"\n"
"container_id=\"$(docker create $image_id)\"\n"
"docker start $container_id\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40250
msgid "This command starts a new Docker container from the specified image.  It will boot the Guix system in the usual manner, which means it will start any services you have defined in the operating system configuration.  You can get an interactive shell running in the container using @command{docker exec}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40253
#, no-wrap
msgid "docker exec -ti $container_id /run/current-system/profile/bin/bash --login\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40260
msgid "Depending on what you run in the Docker container, it may be necessary to give the container additional permissions.  For example, if you intend to build software using Guix inside of the Docker container, you may need to pass the @option{--privileged} option to @code{docker create}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40264
msgid "Last, the @option{--network} option applies to @command{guix system docker-image}: it produces an image where network is supposedly shared with the host, and thus without services like nscd or NetworkManager."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40272
msgid "Return a script to run the operating system declared in @var{file} within a container.  Containers are a set of lightweight isolation mechanisms provided by the kernel Linux-libre.  Containers are substantially less resource-demanding than full virtual machines since the kernel, shared objects, and other resources can be shared with the host system; this also means they provide thinner isolation."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40276
msgid "Currently, the script must be run as root in order to support more than a single user and group.  The container shares its store with the host system."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40280
msgid "As with the @code{vm} action (@pxref{guix system vm}), additional file systems to be shared between the host and container can be specified using the @option{--share} and @option{--expose} options:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40284
#, no-wrap
msgid ""
"guix system container my-config.scm \\\n"
"   --expose=$HOME --share=$HOME/tmp=/exchange\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40289
msgid "The @option{--share} and @option{--expose} options can also be passed to the generated script to bind-mount additional directories into the container."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:40292
msgid "This option requires Linux-libre 3.19 or newer."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40299 guix-git/doc/guix.texi:44055
msgid "@var{options} can contain any of the common build options (@pxref{Common Build Options}).  In addition, @var{options} can contain one of the following:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40308
msgid "Consider the operating-system @var{expr} evaluates to.  This is an alternative to specifying a file which evaluates to an operating system.  This is used to generate the Guix system installer @pxref{Building the Installation Image})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40313
msgid "Attempt to build for @var{system} instead of the host system type.  This works as per @command{guix build} (@pxref{Invoking guix build})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40323
msgid "Return the derivation file name of the given operating system without building anything."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40332
msgid "As discussed above, @command{guix system init} and @command{guix system reconfigure} always save provenance information @i{via} a dedicated service (@pxref{Service Reference, @code{provenance-service-type}}).  However, other commands don't do that by default.  If you wish to, say, create a virtual machine image that contains provenance information, you can run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40335
#, no-wrap
msgid "guix system image -t qcow2 --save-provenance config.scm\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40342
msgid "That way, the resulting image will effectively ``embed its own source'' in the form of meta-data in @file{/run/current-system}.  With that information, one can rebuild the image to make sure it really contains what it pretends to contain; or they could use that to derive a variant of the image."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40343
#, no-wrap
msgid "--image-type=@var{type}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40346
msgid "For the @code{image} action, create an image with given @var{type}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40349
msgid "When this option is omitted, @command{guix system} uses the @code{efi-raw} image type."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40350
#, no-wrap
msgid "ISO-9660 format"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40351
#, no-wrap
msgid "CD image format"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40352
#, no-wrap
msgid "DVD image format"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40355
msgid "@option{--image-type=iso9660} produces an ISO-9660 image, suitable for burning on CDs and DVDs."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40356
#, no-wrap
msgid "--image-size=@var{size}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40361
msgid "For the @code{image} action, create an image of the given @var{size}.  @var{size} may be a number of bytes, or it may include a unit as a suffix (@pxref{Block size, size specifications,, coreutils, GNU Coreutils})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40365
msgid "When this option is omitted, @command{guix system} computes an estimate of the image size as a function of the size of the system declared in @var{file}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40370
msgid "For the @code{container} action, allow containers to access the host network, that is, do not create a network namespace."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40376
#, no-wrap
msgid "--skip-checks"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40378
msgid "Skip pre-installation safety checks."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40385
msgid "By default, @command{guix system init} and @command{guix system reconfigure} perform safety checks: they make sure the file systems that appear in the @code{operating-system} declaration actually exist (@pxref{File Systems}), and that any Linux kernel modules that may be needed at boot time are listed in @code{initrd-modules} (@pxref{Initial RAM Disk}).  Passing this option skips these tests altogether."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40388
msgid "Instruct @command{guix system reconfigure} to allow system downgrades."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40396
msgid "By default, @command{reconfigure} prevents you from downgrading your system.  It achieves that by comparing the provenance info of your system (shown by @command{guix system describe}) with that of your @command{guix} command (shown by @command{guix describe}).  If the commits for @command{guix} are not descendants of those used for your system, @command{guix system reconfigure} errors out.  Passing @option{--allow-downgrades} allows you to bypass these checks."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40402
#, no-wrap
msgid "on-error"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40403
#, no-wrap
msgid "on-error strategy"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40404
#, no-wrap
msgid "error strategy"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40405
#, no-wrap
msgid "--on-error=@var{strategy}"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40408
msgid "Apply @var{strategy} when an error occurs when reading @var{file}.  @var{strategy} may be one of the following:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40410
#, no-wrap
msgid "nothing-special"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40412
msgid "Report the error concisely and exit.  This is the default strategy."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40413
#, no-wrap
msgid "backtrace"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40415
msgid "Likewise, but also display a backtrace."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40416
#, no-wrap
msgid "debug"
msgstr "depuração"

#. type: table
#: guix-git/doc/guix.texi:40422
msgid "Report the error and enter Guile's debugger.  From there, you can run commands such as @code{,bt} to get a backtrace, @code{,locals} to display local variable values, and more generally inspect the state of the program.  @xref{Debug Commands,,, guile, GNU Guile Reference Manual}, for a list of available debugging commands."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40429
msgid "Once you have built, configured, re-configured, and re-re-configured your Guix installation, you may find it useful to list the operating system generations available on disk---and that you can choose from the bootloader boot menu:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40432 guix-git/doc/guix.texi:43971
#, no-wrap
msgid "describe"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40435
msgid "Describe the running system generation: its file name, the kernel and bootloader used, etc., as well as provenance information when available."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40442
msgid "The @code{--list-installed} flag is available, with the same syntax that is used in @command{guix package --list-installed} (@pxref{Invoking guix package}).  When the flag is used, the description will include a list of packages that are currently installed in the system profile, with optional filtering based on a regular expression."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:40449
msgid "The @emph{running} system generation---referred to by @file{/run/current-system}---is not necessarily the @emph{current} system generation---referred to by @file{/var/guix/profiles/system}: it differs when, for instance, you chose from the bootloader menu to boot an older generation."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:40453
msgid "It can also differ from the @emph{booted} system generation---referred to by @file{/run/booted-system}---for instance because you reconfigured the system in the meantime."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40455 guix-git/doc/guix.texi:43986
#, no-wrap
msgid "list-generations"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40460
msgid "List a summary of each generation of the operating system available on disk, in a human-readable way.  This is similar to the @option{--list-generations} option of @command{guix package} (@pxref{Invoking guix package})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40465 guix-git/doc/guix.texi:43996
msgid "Optionally, one can specify a pattern, with the same syntax that is used in @command{guix package --list-generations}, to restrict the list of generations displayed.  For instance, the following command displays generations that are up to 10 days old:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40468
#, no-wrap
msgid "$ guix system list-generations 10d\n"
msgstr "$ guix system list-generations 10d\n"

#. type: table
#: guix-git/doc/guix.texi:40474
msgid "The @code{--list-installed} flag may also be specified, with the same syntax that is used in @command{guix package --list-installed}.  This may be helpful if trying to determine when a package was added to the system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40480
msgid "The @command{guix system} command has even more to offer! The following sub-commands allow you to visualize how your system services relate to each other:"
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:40482
msgid "system-extension-graph"
msgstr "system-extension-graph"

#. type: item
#: guix-git/doc/guix.texi:40484 guix-git/doc/guix.texi:44026
#, no-wrap
msgid "extension-graph"
msgstr "extension-graph"

#. type: table
#: guix-git/doc/guix.texi:40491
msgid "Emit to standard output the @dfn{service extension graph} of the operating system defined in @var{file} (@pxref{Service Composition}, for more information on service extensions).  By default the output is in Dot/Graphviz format, but you can choose a different format with @option{--graph-backend}, as with @command{guix graph} (@pxref{Invoking guix graph, @option{--backend}}):"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40493 guix-git/doc/guix.texi:44035
msgid "The command:"
msgstr "O comando:"

#. type: example
#: guix-git/doc/guix.texi:40496
#, no-wrap
msgid "$ guix system extension-graph @var{file} | xdot -\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40499 guix-git/doc/guix.texi:44041
msgid "shows the extension relations among services."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:40502
msgid "The @command{dot} program is provided by the @code{graphviz} package."
msgstr ""

#. type: anchor{#1}
#: guix-git/doc/guix.texi:40505
msgid "system-shepherd-graph"
msgstr "system-shepherd-graph"

#. type: item
#: guix-git/doc/guix.texi:40505 guix-git/doc/guix.texi:44043
#, no-wrap
msgid "shepherd-graph"
msgstr "shepherd-graph"

#. type: table
#: guix-git/doc/guix.texi:40510
msgid "Emit to standard output the @dfn{dependency graph} of shepherd services of the operating system defined in @var{file}.  @xref{Shepherd Services}, for more information and for an example graph."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40513 guix-git/doc/guix.texi:44050
msgid "Again, the default output format is Dot/Graphviz, but you can pass @option{--graph-backend} to select a different one."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:40517
#, fuzzy, no-wrap
#| msgid "Invoking @command{guix repl}"
msgid "Invoking @command{guix deploy}"
msgstr "Invocando @command{guix repl}"

#. type: command{#1}
#: guix-git/doc/guix.texi:40519
#, fuzzy, no-wrap
#| msgid "# guix install hello\n"
msgid "guix deploy"
msgstr "# guix install hello\n"

#. type: Plain text
#: guix-git/doc/guix.texi:40526
msgid "We've already seen @code{operating-system} declarations used to manage a machine's configuration locally.  Suppose you need to configure multiple machines, though---perhaps you're managing a service on the web that's comprised of several servers.  @command{guix deploy} enables you to use those same @code{operating-system} declarations to manage multiple remote hosts at once as a logical ``deployment''."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:40531 guix-git/doc/guix.texi:42077
msgid "The functionality described in this section is still under development and is subject to change.  Get in touch with us on @email{guix-devel@@gnu.org}!"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40535
#, no-wrap
msgid "guix deploy @var{file}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40539
msgid "Such an invocation will deploy the machines that the code within @var{file} evaluates to.  As an example, @var{file} might contain a definition like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:40546
#, no-wrap
msgid ""
";; This is a Guix deployment of a \"bare bones\" setup, with\n"
";; no X11 display server, to a machine with an SSH daemon\n"
";; listening on localhost:2222. A configuration such as this\n"
";; may be appropriate for virtual machine with ports\n"
";; forwarded to the host's loopback interface.\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:40549
#, no-wrap
msgid ""
"(use-service-modules networking ssh)\n"
"(use-package-modules bootloaders)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:40570
#, no-wrap
msgid ""
"(define %system\n"
"  (operating-system\n"
"   (host-name \"gnu-deployed\")\n"
"   (timezone \"Etc/UTC\")\n"
"   (bootloader (bootloader-configuration\n"
"                (bootloader grub-bootloader)\n"
"                (targets '(\"/dev/vda\"))\n"
"                (terminal-outputs '(console))))\n"
"   (file-systems (cons (file-system\n"
"                        (mount-point \"/\")\n"
"                        (device \"/dev/vda1\")\n"
"                        (type \"ext4\"))\n"
"                       %base-file-systems))\n"
"   (services\n"
"    (append (list (service dhcp-client-service-type)\n"
"                  (service openssh-service-type\n"
"                           (openssh-configuration\n"
"                            (permit-root-login #t)\n"
"                            (allow-empty-passwords? #t))))\n"
"            %base-services))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:40580
#, no-wrap
msgid ""
"(list (machine\n"
"       (operating-system %system)\n"
"       (environment managed-host-environment-type)\n"
"       (configuration (machine-ssh-configuration\n"
"                       (host-name \"localhost\")\n"
"                       (system \"x86_64-linux\")\n"
"                       (user \"alice\")\n"
"                       (identity \"./id_rsa\")\n"
"                       (port 2222)))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40593
msgid "The file should evaluate to a list of @var{machine} objects.  This example, upon being deployed, will create a new generation on the remote system realizing the @code{operating-system} declaration @code{%system}.  @code{environment} and @code{configuration} specify how the machine should be provisioned---that is, how the computing resources should be created and managed.  The above example does not create any resources, as a @code{'managed-host} is a machine that is already running the Guix system and available over the network.  This is a particularly simple case; a more complex deployment may involve, for example, starting virtual machines through a Virtual Private Server (VPS) provider.  In such a case, a different @var{environment} type would be used."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40598
msgid "Do note that you first need to generate a key pair on the coordinator machine to allow the daemon to export signed archives of files from the store (@pxref{Invoking guix archive}), though this step is automatic on Guix System:"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40606
msgid "Each target machine must authorize the key of the master machine so that it accepts store items it receives from the coordinator:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40609
#, no-wrap
msgid "# guix archive --authorize < coordinator-public-key.txt\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40620
msgid "@code{user}, in this example, specifies the name of the user account to log in as to perform the deployment.  Its default value is @code{root}, but root login over SSH may be forbidden in some cases.  To work around this, @command{guix deploy} can log in as an unprivileged user and employ @code{sudo} to escalate privileges.  This will only work if @code{sudo} is currently installed on the remote and can be invoked non-interactively as @code{user}.  That is, the line in @code{sudoers} granting @code{user} the ability to use @code{sudo} must contain the @code{NOPASSWD} tag.  This can be accomplished with the following operating system configuration snippet:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:40624
#, no-wrap
msgid ""
"(use-modules ...\n"
"             (gnu system))               ;for %sudoers-specification\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:40626
#, no-wrap
msgid ""
"(define %user \"username\")\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:40634
#, no-wrap
msgid ""
"(operating-system\n"
"  ...\n"
"  (sudoers-file\n"
"     (plain-file \"sudoers\"\n"
"                 (string-append (plain-file-content %sudoers-specification)\n"
"                                (format #f \"~a ALL = NOPASSWD: ALL~%\"\n"
"                                        %user)))))\n"
"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40639
msgid "For more information regarding the format of the @file{sudoers} file, consult @command{man sudoers}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40644
msgid "Once you've deployed a system on a set of machines, you may find it useful to run a command on all of them.  The @option{--execute} or @option{-x} option lets you do that; the example below runs @command{uname -a} on all the machines listed in the deployment file:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40647
#, no-wrap
msgid "guix deploy @var{file} -x -- uname -a\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40651
msgid "One thing you may often need to do after deployment is restart specific services on all the machines, which you can do like so:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40654
#, no-wrap
msgid "guix deploy @var{file} -x -- herd restart @var{service}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40658
msgid "The @command{guix deploy -x} command returns zero if and only if the command succeeded on all the machines."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40663
msgid "Below are the data types you need to know about when writing a deployment file."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:40664
#, no-wrap
msgid "{Data Type} machine"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:40667
msgid "This is the data type representing a single machine in a heterogeneous Guix deployment."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40671
msgid "The object of the operating system configuration to deploy."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:40672
#, no-wrap
msgid "environment"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40674
msgid "An @code{environment-type} describing how the machine should be provisioned."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40675
#, no-wrap
msgid "@code{configuration} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40680
msgid "An object describing the configuration for the machine's @code{environment}.  If the @code{environment} has a default configuration, @code{#f} may be used.  If @code{#f} is used for an environment with no default configuration, however, an error will be thrown."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:40683
#, no-wrap
msgid "{Data Type} machine-ssh-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:40686
msgid "This is the data type representing the SSH client parameters for a machine with an @code{environment} of @code{managed-host-environment-type}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40689
#, no-wrap
msgid "@code{build-locally?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40691
msgid "If false, system derivations will be built on the machine being deployed to."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:40691 guix-git/doc/guix.texi:44173
#, no-wrap
msgid "system"
msgstr "system"

#. type: table
#: guix-git/doc/guix.texi:40694
msgid "The system type describing the architecture of the machine being deployed to---e.g., @code{\"x86_64-linux\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40694
#, no-wrap
msgid "@code{authorize?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40697
msgid "If true, the coordinator's signing key will be added to the remote's ACL keyring."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40699
#, no-wrap
msgid "@code{identity} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40702
msgid "If specified, the path to the SSH private key to use to authenticate with the remote host."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40703
#, no-wrap
msgid "@code{host-key} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40705
msgid "This should be the SSH host key of the machine, which looks like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40708
#, no-wrap
msgid "ssh-ed25519 AAAAC3Nz@dots{} root@@example.org\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40713
msgid "When @code{host-key} is @code{#f}, the server is authenticated against the @file{~/.ssh/known_hosts} file, just like the OpenSSH @command{ssh} client does."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40714
#, no-wrap
msgid "@code{allow-downgrades?} (default: @code{#f})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40716
msgid "Whether to allow potential downgrades."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40724
msgid "Like @command{guix system reconfigure}, @command{guix deploy} compares the channel commits currently deployed on the remote host (as returned by @command{guix system describe}) to those currently in use (as returned by @command{guix describe}) to determine whether commits currently in use are descendants of those deployed.  When this is not the case and @code{allow-downgrades?} is false, it raises an error.  This ensures you do not accidentally downgrade remote machines."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40725
#, fuzzy, no-wrap
#| msgid "@code{check?} (default: @code{#t})"
msgid "@code{safety-checks?} (default: @code{#t})"
msgstr "@code{check?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:40731
msgid "Whether to perform ``safety checks'' before deployment.  This includes verifying that devices and file systems referred to in the operating system configuration actually exist on the target machine, and making sure that Linux modules required to access storage devices at boot time are listed in the @code{initrd-modules} field of the operating system."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40734
msgid "These safety checks ensure that you do not inadvertently deploy a system that would fail to boot.  Be careful before turning them off!"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:40737
#, no-wrap
msgid "{Data Type} digital-ocean-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:40740
msgid "This is the data type describing the Droplet that should be created for a machine with an @code{environment} of @code{digital-ocean-environment-type}."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:40742
#, no-wrap
msgid "ssh-key"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40745
msgid "The path to the SSH private key to use to authenticate with the remote host.  In the future, this field may not exist."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:40745
#, no-wrap
msgid "tags"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40748
msgid "A list of string ``tags'' that uniquely identify the machine.  Must be given such that no two machines in the deployment have the same set of tags."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:40748
#, no-wrap
msgid "region"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40750
msgid "A Digital Ocean region slug, such as @code{\"nyc3\"}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40752
msgid "A Digital Ocean size slug, such as @code{\"s-1vcpu-1gb\"}"
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:40752
#, no-wrap
msgid "enable-ipv6?"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40754
msgid "Whether or not the droplet should be created with IPv6 networking."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:40758
#, no-wrap
msgid "Running Guix in a Virtual Machine"
msgstr "Usando o Guix em uma Máquina Virtual"

#. type: Plain text
#: guix-git/doc/guix.texi:40766
msgid "To run Guix in a virtual machine (VM), one can use the pre-built Guix VM image distributed at @url{@value{BASE-URL}/guix-system-vm-image-@value{VERSION}.x86_64-linux.qcow2}.  This image is a compressed image in QCOW format.  You can pass it to an emulator such as @uref{https://qemu.org/, QEMU} (see below for details)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40773
msgid "This image boots the Xfce graphical environment and it contains some commonly used tools.  You can install more software in the image by running @command{guix package} in a terminal (@pxref{Invoking guix package}).  You can also reconfigure the system based on its initial configuration file available as @file{/run/current-system/configuration.scm} (@pxref{Using the Configuration System})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40776
msgid "Instead of using this pre-built image, one can also build their own image using @command{guix system image} (@pxref{Invoking guix system})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40777
#, no-wrap
msgid "QEMU"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40784
msgid "If you built your own image, you must copy it out of the store (@pxref{The Store}) and give yourself permission to write to the copy before you can use it.  When invoking QEMU, you must choose a system emulator that is suitable for your hardware platform.  Here is a minimal QEMU invocation that will boot the result of @command{guix system image -t qcow2} on x86_64 hardware:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40791
#, no-wrap
msgid ""
"$ qemu-system-x86_64 \\\n"
"   -nic user,model=virtio-net-pci \\\n"
"   -enable-kvm -m 2048 \\\n"
"   -device virtio-blk,drive=myhd \\\n"
"   -drive if=none,file=guix-system-vm-image-@value{VERSION}.x86_64-linux.qcow2,id=myhd\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40794
msgid "Here is what each of these options means:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40796
#, no-wrap
msgid "qemu-system-x86_64"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40799
msgid "This specifies the hardware platform to emulate.  This should match the host."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40800
#, no-wrap
msgid "-nic user,model=virtio-net-pci"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40808
msgid "Enable the unprivileged user-mode network stack.  The guest OS can access the host but not vice versa.  This is the simplest way to get the guest OS online.  @code{model} specifies which network device to emulate: @code{virtio-net-pci} is a special device made for virtualized operating systems and recommended for most uses.  Assuming your hardware platform is x86_64, you can get a list of available NIC models by running @command{qemu-system-x86_64 -nic model=help}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40809
#, no-wrap
msgid "-enable-kvm"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40813
msgid "If your system has hardware virtualization extensions, enabling the virtual machine support (KVM) of the Linux kernel will make things run faster."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40815
#, no-wrap
msgid "-m 2048"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40818
msgid "RAM available to the guest OS, in mebibytes.  Defaults to 128@tie{}MiB, which may be insufficient for some operations."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40819
#, no-wrap
msgid "-device virtio-blk,drive=myhd"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40824
msgid "Create a @code{virtio-blk} drive called ``myhd''.  @code{virtio-blk} is a ``paravirtualization'' mechanism for block devices that allows QEMU to achieve better performance than if it were emulating a complete disk drive.  See the QEMU and KVM documentation for more info."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:40825
#, no-wrap
msgid "-drive if=none,file=/tmp/qemu-image,id=myhd"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:40829
msgid "Use our QCOW image, the @file{guix-system-vm-image-@value{VERSION}.x86_64-linux.qcow2} file, as the backing store of the ``myhd'' drive."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40839
msgid "The default @command{run-vm.sh} script that is returned by an invocation of @command{guix system vm} does not add a @command{-nic user} flag by default.  To get network access from within the vm add the @code{(dhcp-client-service)} to your system definition and start the VM using @command{$(guix system vm config.scm) -nic user}.  An important caveat of using @command{-nic user} for networking is that @command{ping} will not work, because it uses the ICMP protocol.  You'll have to use a different command to check for network connectivity, for example @command{guix download}."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:40840
#, no-wrap
msgid "Connecting Through SSH"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40848
msgid "To enable SSH inside a VM you need to add an SSH server like @code{openssh-service-type} to your VM (@pxref{Networking Services, @code{openssh-service-type}}).  In addition you need to forward the SSH port, 22 by default, to the host.  You can do this with"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40851
#, no-wrap
msgid "$(guix system vm config.scm) -nic user,model=virtio-net-pci,hostfwd=tcp::10022-:22\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40854
msgid "To connect to the VM you can run"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40857
#, no-wrap
msgid "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 10022 localhost\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40864
msgid "The @command{-p} tells @command{ssh} the port you want to connect to.  @command{-o UserKnownHostsFile=/dev/null} prevents @command{ssh} from complaining every time you modify your @command{config.scm} file and the @command{-o StrictHostKeyChecking=no} prevents you from having to allow a connection to an unknown host every time you connect."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:40870
msgid "If you find the above @samp{hostfwd} example not to be working (e.g., your SSH client hangs attempting to connect to the mapped port of your VM), make sure that your Guix System VM has networking support, such as by using the @code{dhcp-client-service-type} service type."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:40872
#, no-wrap
msgid "Using @command{virt-viewer} with Spice"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40878
msgid "As an alternative to the default @command{qemu} graphical client you can use the @command{remote-viewer} from the @command{virt-viewer} package.  To connect pass the @command{-spice port=5930,disable-ticketing} flag to @command{qemu}.  See previous section for further information on how to do this."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40881
msgid "Spice also allows you to do some nice stuff like share your clipboard with your VM@.  To enable that you'll also have to pass the following flags to @command{qemu}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:40887
#, no-wrap
msgid ""
"-device virtio-serial-pci,id=virtio-serial0,max_ports=16,bus=pci.0,addr=0x5\n"
"-chardev spicevmc,name=vdagent,id=vdagent\n"
"-device virtserialport,nr=1,bus=virtio-serial0.0,chardev=vdagent,\\\n"
"name=com.redhat.spice.0\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40891
msgid "You'll also need to add the @code{(spice-vdagent-service)} to your system definition (@pxref{Miscellaneous Services, Spice service})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40898
msgid "The previous sections show the available services and how one can combine them in an @code{operating-system} declaration.  But how do we define them in the first place? And what is a service anyway?"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40911
#, no-wrap
msgid "daemons"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40924
msgid "Here we define a @dfn{service} as, broadly, something that extends the functionality of the operating system.  Often a service is a process---a @dfn{daemon}---started when the system boots: a secure shell server, a Web server, the Guix build daemon, etc.  Sometimes a service is a daemon whose execution can be triggered by another daemon---e.g., an FTP server started by @command{inetd} or a D-Bus service activated by @command{dbus-daemon}.  Occasionally, a service does not map to a daemon.  For instance, the ``account'' service collects user accounts and makes sure they exist when the system runs; the ``udev'' service collects device management rules and makes them available to the eudev daemon; the @file{/etc} service populates the @file{/etc} directory of the system."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40925
#, no-wrap
msgid "service extensions"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40937
msgid "Guix system services are connected by @dfn{extensions}.  For instance, the secure shell service @emph{extends} the Shepherd---the initialization system, running as PID@tie{}1---by giving it the command lines to start and stop the secure shell daemon (@pxref{Networking Services, @code{openssh-service-type}}); the UPower service extends the D-Bus service by passing it its @file{.service} specification, and extends the udev service by passing it device management rules (@pxref{Desktop Services, @code{upower-service}}); the Guix daemon service extends the Shepherd by passing it the command lines to start and stop the daemon, and extends the account service by passing it a list of required build user accounts (@pxref{Base Services})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40941
msgid "All in all, services and their ``extends'' relations form a directed acyclic graph (DAG).  If we represent services as boxes and extensions as arrows, a typical system might provide something like this:"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40943
msgid "@image{images/service-graph,,5in,Typical service extension graph.}"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40944
#, no-wrap
msgid "system service"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40952
msgid "At the bottom, we see the @dfn{system service}, which produces the directory containing everything to run and boot the system, as returned by the @command{guix system build} command.  @xref{Service Reference}, to learn about the other service types shown here.  @xref{system-extension-graph, the @command{guix system extension-graph} command}, for information on how to generate this representation for a particular operating system definition."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:40953
#, no-wrap
msgid "service types"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40959
msgid "Technically, developers can define @dfn{service types} to express these relations.  There can be any number of services of a given type on the system---for instance, a system running two instances of the GNU secure shell server (lsh) has two instances of @code{lsh-service-type}, with different parameters."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40962
msgid "The following section describes the programming interface for service types and services."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40969
msgid "A @dfn{service type} is a node in the DAG described above.  Let us start with a simple example, the service type for the Guix build daemon (@pxref{Invoking guix-daemon}):"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:40979
#, no-wrap
msgid ""
"(define guix-service-type\n"
"  (service-type\n"
"   (name 'guix)\n"
"   (extensions\n"
"    (list (service-extension shepherd-root-service-type guix-shepherd-service)\n"
"          (service-extension account-service-type guix-accounts)\n"
"          (service-extension activation-service-type guix-activation)))\n"
"   (default-value (guix-configuration))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:40983
msgid "It defines three things:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:40987
msgid "A name, whose sole purpose is to make inspection and debugging easier."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:40992
msgid "A list of @dfn{service extensions}, where each extension designates the target service type and a procedure that, given the parameters of the service, returns a list of objects to extend the service of that type."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:40995
msgid "Every service type has at least one service extension.  The only exception is the @dfn{boot service type}, which is the ultimate service."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:40998
msgid "Optionally, a default value for instances of this type."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41001
msgid "In this example, @code{guix-service-type} extends three services:"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41003 guix-git/doc/guix.texi:41622
#, no-wrap
msgid "shepherd-root-service-type"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41008
msgid "The @code{guix-shepherd-service} procedure defines how the Shepherd service is extended.  Namely, it returns a @code{<shepherd-service>} object that defines how @command{guix-daemon} is started and stopped (@pxref{Shepherd Services})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41009
#, no-wrap
msgid "account-service-type"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41014
msgid "This extension for this service is computed by @code{guix-accounts}, which returns a list of @code{user-group} and @code{user-account} objects representing the build user accounts (@pxref{Invoking guix-daemon})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41015
#, no-wrap
msgid "activation-service-type"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41019
msgid "Here @code{guix-activation} is a procedure that returns a gexp, which is a code snippet to run at ``activation time''---e.g., when the service is booted."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41022
msgid "A service of this type is instantiated like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41028
#, no-wrap
msgid ""
"(service guix-service-type\n"
"         (guix-configuration\n"
"           (build-accounts 5)\n"
"           (extra-options '(\"--gc-keep-derivations\"))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41036
msgid "The second argument to the @code{service} form is a value representing the parameters of this specific service instance.  @xref{guix-configuration-type, @code{guix-configuration}}, for information about the @code{guix-configuration} data type.  When the value is omitted, the default value specified by @code{guix-service-type} is used:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41039
#, no-wrap
msgid "(service guix-service-type)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41043
msgid "@code{guix-service-type} is quite simple because it extends other services but is not extensible itself."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41047
msgid "The service type for an @emph{extensible} service looks like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41054
#, no-wrap
msgid ""
"(define udev-service-type\n"
"  (service-type (name 'udev)\n"
"                (extensions\n"
"                 (list (service-extension shepherd-root-service-type\n"
"                                          udev-shepherd-service)))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41061
#, no-wrap
msgid ""
"                (compose concatenate)       ;concatenate the list of rules\n"
"                (extend (lambda (config rules)\n"
"                          (udev-configuration\n"
"                           (inherit config)\n"
"                           (rules (append (udev-configuration-rules config)\n"
"                                          rules)))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41067
msgid "This is the service type for the @uref{https://wiki.gentoo.org/wiki/Project:Eudev, eudev device management daemon}.  Compared to the previous example, in addition to an extension of @code{shepherd-root-service-type}, we see two new fields:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41069
#, no-wrap
msgid "compose"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41072
msgid "This is the procedure to @dfn{compose} the list of extensions to services of this type."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41075
msgid "Services can extend the udev service by passing it lists of rules; we compose those extensions simply by concatenating them."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41076
#, no-wrap
msgid "extend"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41079
msgid "This procedure defines how the value of the service is @dfn{extended} with the composition of the extensions."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41084
msgid "Udev extensions are composed into a list of rules, but the udev service value is itself a @code{<udev-configuration>} record.  So here, we extend that record by appending the list of rules it contains to the list of contributed rules."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41090
msgid "This is a string giving an overview of the service type.  The string can contain Texinfo markup (@pxref{Overview,,, texinfo, GNU Texinfo}).  The @command{guix system search} command searches these strings and displays them (@pxref{Invoking guix system})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41095
msgid "There can be only one instance of an extensible service type such as @code{udev-service-type}.  If there were more, the @code{service-extension} specifications would be ambiguous."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41098
msgid "Still here? The next section provides a reference of the programming interface for services."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41106
msgid "We have seen an overview of service types (@pxref{Service Types and Services}).  This section provides a reference on how to manipulate services and service types.  This interface is provided by the @code{(gnu services)} module."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41107
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "service type [value]"
msgstr "guix-publish-service-type"

#. type: defun
#: guix-git/doc/guix.texi:41111
msgid "Return a new service of @var{type}, a @code{<service-type>} object (see below).  @var{value} can be any object; it represents the parameters of this particular service instance."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41115
msgid "When @var{value} is omitted, the default value specified by @var{type} is used; if @var{type} does not specify a default value, an error is raised."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41117
msgid "For instance, this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41120
#, no-wrap
msgid "(service openssh-service-type)\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41124
msgid "is equivalent to this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41128
#, no-wrap
msgid ""
"(service openssh-service-type\n"
"         (openssh-configuration))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41132
msgid "In both cases the result is an instance of @code{openssh-service-type} with the default configuration."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41134
#, fuzzy, no-wrap
#| msgid "Services"
msgid "service? obj"
msgstr "Serviços"

#. type: defun
#: guix-git/doc/guix.texi:41136
msgid "Return true if @var{obj} is a service."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41138
#, fuzzy, no-wrap
#| msgid "Service Types and Services"
msgid "service-kind service"
msgstr "Tipos de Service e Serviços"

#. type: defun
#: guix-git/doc/guix.texi:41140
msgid "Return the type of @var{service}---i.e., a @code{<service-type>} object."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41142
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "service-value service"
msgstr "guix-publish-service-type"

#. type: defun
#: guix-git/doc/guix.texi:41145
msgid "Return the value associated with @var{service}.  It represents its parameters."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41148
msgid "Here is an example of how a service is created and manipulated:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41157
#, no-wrap
msgid ""
"(define s\n"
"  (service nginx-service-type\n"
"           (nginx-configuration\n"
"            (nginx nginx)\n"
"            (log-directory log-directory)\n"
"            (run-directory run-directory)\n"
"            (file config-file))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41160
#, no-wrap
msgid ""
"(service? s)\n"
"@result{} #t\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41163
#, no-wrap
msgid ""
"(eq? (service-kind s) nginx-service-type)\n"
"@result{} #t\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41173
msgid "The @code{modify-services} form provides a handy way to change the parameters of some of the services of a list such as @code{%base-services} (@pxref{Base Services, @code{%base-services}}).  It evaluates to a list of services.  Of course, you could always use standard list combinators such as @code{map} and @code{fold} to do that (@pxref{SRFI-1, List Library,, guile, GNU Guile Reference Manual}); @code{modify-services} simply provides a more concise form for this common pattern."
msgstr ""

#. type: defspec
#: guix-git/doc/guix.texi:41174
#, no-wrap
msgid "modify-services services @"
msgstr ""

#. type: defspec
#: guix-git/doc/guix.texi:41176
msgid "(type variable => body) @dots{}"
msgstr ""

#. type: defspec
#: guix-git/doc/guix.texi:41179
msgid "Modify the services listed in @var{services} according to the given clauses.  Each clause has the form:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:41182
#, no-wrap
msgid "(@var{type} @var{variable} => @var{body})\n"
msgstr ""

#. type: defspec
#: guix-git/doc/guix.texi:41189
msgid "where @var{type} is a service type---e.g., @code{guix-service-type}---and @var{variable} is an identifier that is bound within the @var{body} to the service parameters---e.g., a @code{guix-configuration} instance---of the original service of that @var{type}."
msgstr ""

#. type: defspec
#: guix-git/doc/guix.texi:41196
msgid "The @var{body} should evaluate to the new service parameters, which will be used to configure the new service.  This new service will replace the original in the resulting list.  Because a service's service parameters are created using @code{define-record-type*}, you can write a succinct @var{body} that evaluates to the new service parameters by using the @code{inherit} feature that @code{define-record-type*} provides."
msgstr ""

#. type: defspec
#: guix-git/doc/guix.texi:41198
#, fuzzy
#| msgid "Packages are currently available on the following platforms:"
msgid "Clauses can also have the following form:"
msgstr "Os pacotes estão atualmente disponíveis nas seguintes plataformas:"

#. type: lisp
#: guix-git/doc/guix.texi:41201
#, fuzzy, no-wrap
#| msgid "-t @var{type}"
msgid "(delete @var{type})\n"
msgstr "(delete @var{type})\n"

#. type: defspec
#: guix-git/doc/guix.texi:41205
msgid "Such a clause removes all services of the given @var{type} from @var{services}."
msgstr ""

#. type: defspec
#: guix-git/doc/guix.texi:41207
msgid "@xref{Using the Configuration System}, for example usage."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41214
msgid "Next comes the programming interface for service types.  This is something you want to know when writing new service definitions, but not necessarily when simply looking for ways to customize your @code{operating-system} declaration."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:41215
#, no-wrap
msgid "{Data Type} service-type"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:41216
#, no-wrap
msgid "service type"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:41219
msgid "This is the representation of a @dfn{service type} (@pxref{Service Types and Services})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41223
msgid "This is a symbol, used only to simplify inspection and debugging."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:41224
#, no-wrap
msgid "extensions"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41226
msgid "A non-empty list of @code{<service-extension>} objects (see below)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41227
#, no-wrap
msgid "@code{compose} (default: @code{#f})"
msgstr "@code{compose} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:41231
msgid "If this is @code{#f}, then the service type denotes services that cannot be extended---i.e., services that do not receive ``values'' from other services."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41235
msgid "Otherwise, it must be a one-argument procedure.  The procedure is called by @code{fold-services} and is passed a list of values collected from extensions.  It may return any single value."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41236
#, no-wrap
msgid "@code{extend} (default: @code{#f})"
msgstr "@code{extend} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:41238
msgid "If this is @code{#f}, services of this type cannot be extended."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41244
msgid "Otherwise, it must be a two-argument procedure: @code{fold-services} calls it, passing it the initial value of the service as the first argument and the result of applying @code{compose} to the extension values as the second argument.  It must return a value that is a valid parameter value for the service instance."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41250
msgid "This is a string, possibly using Texinfo markup, describing in a couple of sentences what the service is about.  This string allows users to find about the service through @command{guix system search} (@pxref{Invoking guix system})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41251
#, no-wrap
msgid "@code{default-value} (default: @code{&no-default-value})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41254
msgid "The default value associated for instances of this service type.  This allows users to use the @code{service} form without its second argument:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41257
#, no-wrap
msgid "(service @var{type})\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41261
msgid "The returned service in this case has the default value specified by @var{type}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:41264
msgid "@xref{Service Types and Services}, for examples."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41266
#, no-wrap
msgid "service-extension target-type compute"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41271
msgid "Return a new extension for services of type @var{target-type}.  @var{compute} must be a one-argument procedure: @code{fold-services} calls it, passing it the value associated with the service that provides the extension; it must return a valid value for the target service."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41273
#, no-wrap
msgid "service-extension? obj"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41275
msgid "Return true if @var{obj} is a service extension."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41281
msgid "Occasionally, you might want to simply extend an existing service.  This involves creating a new service type and specifying the extension of interest, which can be verbose; the @code{simple-service} procedure provides a shorthand for this."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41282
#, no-wrap
msgid "simple-service name target value"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41286
msgid "Return a service that extends @var{target} with @var{value}.  This works by creating a singleton service type @var{name}, of which the returned service is an instance."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41289
msgid "For example, this extends mcron (@pxref{Scheduled Job Execution}) with an additional job:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41293
#, no-wrap
msgid ""
"(simple-service 'my-mcron-job mcron-service-type\n"
"                #~(job '(next-hour (3)) \"guix gc -F 2G\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41303
msgid "At the core of the service abstraction lies the @code{fold-services} procedure, which is responsible for ``compiling'' a list of services down to a single directory that contains everything needed to boot and run the system---the directory shown by the @command{guix system build} command (@pxref{Invoking guix system}).  In essence, it propagates service extensions down the service graph, updating each node parameters on the way, until it reaches the root node."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41304
#, no-wrap
msgid "fold-services services [#:target-type system-service-type]"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41307
msgid "Fold @var{services} by propagating their extensions down to the root of type @var{target-type}; return the root service adjusted accordingly."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41311
msgid "Lastly, the @code{(gnu services)} module also defines several essential service types, some of which are listed below."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41312
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "system-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:41315
msgid "This is the root of the service graph.  It produces the system directory as returned by the @command{guix system build} command."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41317
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "boot-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:41320
msgid "The type of the ``boot service'', which produces the @dfn{boot script}.  The boot script is what the initial RAM disk runs when booting."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41322
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "etc-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:41326
msgid "The type of the @file{/etc} service.  This service is used to create files under @file{/etc} and can be extended by passing it name/file tuples such as:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41329
#, no-wrap
msgid "(list `(\"issue\" ,(plain-file \"issue\" \"Welcome!\\n\")))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41333
msgid "In this example, the effect would be to add an @file{/etc/issue} file pointing to the given file."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41335
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "setuid-program-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:41339
msgid "Type for the ``setuid-program service''.  This service collects lists of executable file names, passed as gexps, and adds them to the set of setuid and setgid programs on the system (@pxref{Setuid Programs})."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41341
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "profile-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:41345
msgid "Type of the service that populates the @dfn{system profile}---i.e., the programs under @file{/run/current-system/profile}.  Other services can extend it by passing it lists of packages to add to the system profile."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41349
#, no-wrap
msgid "provenance-service-type"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41353
msgid "This is the type of the service that records @dfn{provenance meta-data} in the system itself.  It creates several files under @file{/run/current-system}:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41355
#, no-wrap
msgid "channels.scm"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41360
msgid "This is a ``channel file'' that can be passed to @command{guix pull -C} or @command{guix time-machine -C}, and which describes the channels used to build the system, if that information was available (@pxref{Channels})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41361
#, no-wrap
msgid "configuration.scm"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41366
msgid "This is the file that was passed as the value for this @code{provenance-service-type} service.  By default, @command{guix system reconfigure} automatically passes the OS configuration file it received on the command line."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41367
#, no-wrap
msgid "provenance"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41370
msgid "This contains the same information as the two other files but in a format that is more readily processable."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41374
msgid "In general, these two pieces of information (channels and configuration file) are enough to reproduce the operating system ``from source''."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:41375
#, no-wrap
msgid "Caveats"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:41382
msgid "This information is necessary to rebuild your operating system, but it is not always sufficient.  In particular, @file{configuration.scm} itself is insufficient if it is not self-contained---if it refers to external Guile modules or to extra files.  If you want @file{configuration.scm} to be self-contained, we recommend that modules or files it refers to be part of a channel."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:41390
msgid "Besides, provenance meta-data is ``silent'' in the sense that it does not change the bits contained in your system, @emph{except for the meta-data bits themselves}.  Two different OS configurations or sets of channels can lead to the same system, bit-for-bit; when @code{provenance-service-type} is used, these two systems will have different meta-data and thus different store file names, which makes comparison less trivial."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41395
msgid "This service is automatically added to your operating system configuration when you use @command{guix system reconfigure}, @command{guix system init}, or @command{guix deploy}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41397
#, fuzzy, no-wrap
msgid "linux-loadable-module-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:41401
msgid "Type of the service that collects lists of packages containing kernel-loadable modules, and adds them to the set of kernel-loadable modules."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41404
msgid "This service type is intended to be extended by other service types, such as below:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41410
#, no-wrap
msgid ""
"(simple-service 'installing-module\n"
"                linux-loadable-module-service-type\n"
"                (list module-to-install-1\n"
"                      module-to-install-2))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41414
msgid "This does not actually load modules at bootup, only adds it to the kernel profile so that it @emph{can} be loaded by other means."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:41419
#, no-wrap
msgid "shepherd services"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:41420
#, no-wrap
msgid "PID 1"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:41421
#, no-wrap
msgid "init system"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41427
msgid "The @code{(gnu services shepherd)} module provides a way to define services managed by the GNU@tie{}Shepherd, which is the initialization system---the first process that is started when the system boots, also known as PID@tie{}1 (@pxref{Introduction,,, shepherd, The GNU Shepherd Manual})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41433
msgid "Services in the Shepherd can depend on each other.  For instance, the SSH daemon may need to be started after the syslog daemon has been started, which in turn can only happen once all the file systems have been mounted.  The simple operating system defined earlier (@pxref{Using the Configuration System}) results in a service graph like this:"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41435
msgid "@image{images/shepherd-graph,,5in,Typical shepherd service graph.}"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41439
msgid "You can actually generate such a graph for any operating system definition using the @command{guix system shepherd-graph} command (@pxref{system-shepherd-graph, @command{guix system shepherd-graph}})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41443
msgid "The @code{%shepherd-root-service} is a service object representing PID@tie{}1, of type @code{shepherd-root-service-type}; it can be extended by passing it lists of @code{<shepherd-service>} objects."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:41444
#, no-wrap
msgid "{Data Type} shepherd-service"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:41446
msgid "The data type representing a service managed by the Shepherd."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:41448
#, no-wrap
msgid "provision"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41450
msgid "This is a list of symbols denoting what the service provides."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41455
msgid "These are the names that may be passed to @command{herd start}, @command{herd status}, and similar commands (@pxref{Invoking herd,,, shepherd, The GNU Shepherd Manual}).  @xref{Defining Services,,, shepherd, The GNU Shepherd Manual}, for details."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41456
#, no-wrap
msgid "@code{requirement} (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41458
msgid "List of symbols denoting the Shepherd services this one depends on."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:41459
#, no-wrap
msgid "one-shot services, for the Shepherd"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41464
msgid "Whether this service is @dfn{one-shot}.  One-shot services stop immediately after their @code{start} action has completed.  @xref{Slots of services,,, shepherd, The GNU Shepherd Manual}, for more info."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41465
#, no-wrap
msgid "@code{respawn?} (default: @code{#t})"
msgstr "@code{respawn?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:41468
msgid "Whether to restart the service when it stops, for instance when the underlying process dies."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:41469
#, no-wrap
msgid "start"
msgstr "iniciar"

#. type: itemx
#: guix-git/doc/guix.texi:41470
#, no-wrap
msgid "@code{stop} (default: @code{#~(const #f)})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41476
msgid "The @code{start} and @code{stop} fields refer to the Shepherd's facilities to start and stop processes (@pxref{Service De- and Constructors,,, shepherd, The GNU Shepherd Manual}).  They are given as G-expressions that get expanded in the Shepherd configuration file (@pxref{G-Expressions})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41477
#, no-wrap
msgid "@code{actions} (default: @code{'()})"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:41478
#, no-wrap
msgid "actions, of Shepherd services"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41483
msgid "This is a list of @code{shepherd-action} objects (see below) defining @dfn{actions} supported by the service, in addition to the standard @code{start} and @code{stop} actions.  Actions listed here become available as @command{herd} sub-commands:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:41486
#, no-wrap
msgid "herd @var{action} @var{service} [@var{arguments}@dots{}]\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41488
#, no-wrap
msgid "@code{auto-start?} (default: @code{#t})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41491
msgid "Whether this service should be started automatically by the Shepherd.  If it is @code{#f} the service has to be started manually with @code{herd start}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41494
msgid "A documentation string, as shown when running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:41497
#, no-wrap
msgid "herd doc @var{service-name}\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41501
msgid "where @var{service-name} is one of the symbols in @code{provision} (@pxref{Invoking herd,,, shepherd, The GNU Shepherd Manual})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41505
msgid "This is the list of modules that must be in scope when @code{start} and @code{stop} are evaluated."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41513
msgid "The example below defines a Shepherd service that spawns @command{syslogd}, the system logger from the GNU Networking Utilities (@pxref{syslogd invocation, @command{syslogd},, inetutils, GNU Inetutils}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:41525
#, no-wrap
msgid ""
"(let ((config (plain-file \"syslogd.conf\" \"@dots{}\")))\n"
"  (shepherd-service\n"
"    (documentation \"Run the syslog daemon (syslogd).\")\n"
"    (provision '(syslogd))\n"
"    (requirement '(user-processes))\n"
"    (start #~(make-forkexec-constructor\n"
"               (list #$(file-append inetutils \"/libexec/syslogd\")\n"
"                     \"--rcfile\" #$config)\n"
"               #:pid-file \"/var/run/syslog.pid\"))\n"
"    (stop #~(make-kill-destructor))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41540
msgid "Key elements in this example are the @code{start} and @code{stop} fields: they are @dfn{staged} code snippets that use the @code{make-forkexec-constructor} procedure provided by the Shepherd and its dual, @code{make-kill-destructor} (@pxref{Service De- and Constructors,,, shepherd, The GNU Shepherd Manual}).  The @code{start} field will have @command{shepherd} spawn @command{syslogd} with the given option; note that we pass @code{config} after @option{--rcfile}, which is a configuration file declared above (contents of this file are omitted).  Likewise, the @code{stop} field tells how this service is to be stopped; in this case, it is stopped by making the @code{kill} system call on its PID@.  Code staging is achieved using G-expressions: @code{#~} stages code, while @code{#$} ``escapes'' back to host code (@pxref{G-Expressions})."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:41541
#, no-wrap
msgid "{Data Type} shepherd-action"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:41544
msgid "This is the data type that defines additional actions implemented by a Shepherd service (see above)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41548
msgid "Symbol naming the action."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41551
msgid "This is a documentation string for the action.  It can be viewed by running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:41554
#, no-wrap
msgid "herd doc @var{service} action @var{action}\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41556
#, no-wrap
msgid "procedure"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41560
msgid "This should be a gexp that evaluates to a procedure of at least one argument, which is the ``running value'' of the service (@pxref{Slots of services,,, shepherd, The GNU Shepherd Manual})."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:41564
msgid "The following example defines an action called @code{say-hello} that kindly greets the user:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41573
#, no-wrap
msgid ""
"(shepherd-action\n"
"  (name 'say-hello)\n"
"  (documentation \"Say hi!\")\n"
"  (procedure #~(lambda (running . args)\n"
"                 (format #t \"Hello, friend! arguments: ~s\\n\"\n"
"                         args)\n"
"                 #t)))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:41576
msgid "Assuming this action is added to the @code{example} service, then you can do:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:41582
#, no-wrap
msgid ""
"# herd say-hello example\n"
"Hello, friend! arguments: ()\n"
"# herd say-hello example a b c\n"
"Hello, friend! arguments: (\"a\" \"b\" \"c\")\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:41587
msgid "This, as you can see, is a fairly sophisticated way to say hello.  @xref{Defining Services,,, shepherd, The GNU Shepherd Manual}, for more info on actions."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:41589
#, fuzzy, no-wrap
msgid "configuration file, of Shepherd services"
msgstr "Gerencie a configuração do sistema operacional."

#. type: defun
#: guix-git/doc/guix.texi:41590
#, fuzzy, no-wrap
msgid "shepherd-configuration-action"
msgstr "build-machine {Data Type}"

#. type: defun
#: guix-git/doc/guix.texi:41593
msgid "Return a @code{configuration} action to display @var{file}, which should be the name of the service's configuration file."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41597
msgid "It can be useful to equip services with that action.  For example, the service for the Tor anonymous router (@pxref{Networking Services, @code{tor-service-type}}) is defined roughly like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41603
#, no-wrap
msgid ""
"(let ((torrc (plain-file \"torrc\" @dots{})))\n"
"  (shepherd-service\n"
"    (provision '(tor))\n"
"    (requirement '(user-processes loopback syslogd))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41610
#, no-wrap
msgid ""
"    (start #~(make-forkexec-constructor\n"
"              (list #$(file-append tor \"/bin/tor\") \"-f\" #$torrc)\n"
"              #:user \"tor\" #:group \"tor\"))\n"
"    (stop #~(make-kill-destructor))\n"
"    (actions (list (shepherd-configuration-action torrc)))\n"
"    (documentation \"Run the Tor anonymous network overlay.\")))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41614
msgid "Thanks to this action, administrators can inspect the configuration file passed to @command{tor} with this shell command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:41617
#, fuzzy, no-wrap
#| msgid "System Configuration"
msgid "cat $(herd configuration tor)\n"
msgstr "Configuração do sistema"

#. type: defun
#: guix-git/doc/guix.texi:41620
msgid "This can come in as a handy debugging tool!"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41624
msgid "The service type for the Shepherd ``root service''---i.e., PID@tie{}1."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41629
msgid "This is the service type that extensions target when they want to create shepherd services (@pxref{Service Types and Services}, for an example).  Each extension must pass a list of @code{<shepherd-service>}.  Its value must be a @code{shepherd-configuration}, as described below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:41631
#, no-wrap
msgid "{Data Type} shepherd-configuration"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:41633 guix-git/doc/guix.texi:42869
msgid "This data type represents the Shepherd's configuration."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41635 guix-git/doc/guix.texi:42871
#, no-wrap
msgid "shepherd (default: @code{shepherd})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41637 guix-git/doc/guix.texi:42873
msgid "The Shepherd package to use."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:41638 guix-git/doc/guix.texi:42877
#, no-wrap
msgid "services (default: @code{'()})"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:41642 guix-git/doc/guix.texi:42881
msgid "A list of @code{<shepherd-service>} to start.  You should probably use the service extension mechanism instead (@pxref{Shepherd Services})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41647
msgid "The following example specifies the Shepherd package for the operating system:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41662
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; ...\n"
"  (services (append (list openssh-service-type))\n"
"            ;; ...\n"
"            %desktop-services)\n"
"  ;; ...\n"
"  ;; Use own Shepherd package.\n"
"  (essential-services\n"
"   (modify-services (operating-system-default-essential-services\n"
"                     this-operating-system)\n"
"     (shepherd-root-service-type config => (shepherd-configuration\n"
"                                            (inherit config)\n"
"                                            (shepherd my-shepherd))))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:41664
#, fuzzy, no-wrap
#| msgid "Shepherd Services"
msgid "%shepherd-root-service"
msgstr "Serviços de Shepherd"

#. type: defvar
#: guix-git/doc/guix.texi:41666
msgid "This service represents PID@tie{}1."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:41670
#, fuzzy, no-wrap
#| msgid "System Configuration"
msgid "complex configurations"
msgstr "Configuração do sistema"

#. type: Plain text
#: guix-git/doc/guix.texi:41675
msgid "Some programs might have rather complex configuration files or formats, and to make it easier to create Scheme bindings for these configuration files, you can use the utilities defined in the @code{(gnu services configuration)} module."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41683
msgid "The main utility is the @code{define-configuration} macro, which you will use to define a Scheme record type (@pxref{Record Overview,,, guile, GNU Guile Reference Manual}).  The Scheme record will be serialized to a configuration file by using @dfn{serializers}, which are procedures that take some kind of Scheme value and returns a G-expression (@pxref{G-Expressions}), which should, once serialized to the disk, return a string.  More details are listed below."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41684
#, no-wrap
msgid "define-configuration name clause1 clause2 @dots{}"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41687
msgid "Create a record type named @code{@var{name}} that contains the fields found in the clauses."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41689
#, fuzzy
#| msgid "Packages are currently available on the following platforms:"
msgid "A clause can have one of the following forms:"
msgstr "Os pacotes estão atualmente disponíveis nas seguintes plataformas:"

#. type: example
#: guix-git/doc/guix.texi:41694
#, no-wrap
msgid ""
"(@var{field-name}\n"
" (@var{type} @var{default-value})\n"
" @var{documentation})\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:41699
#, no-wrap
msgid ""
"(@var{field-name}\n"
" (@var{type} @var{default-value})\n"
" @var{documentation}\n"
" (serializer @var{serializer}))\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:41703
#, no-wrap
msgid ""
"(@var{field-name}\n"
" (@var{type})\n"
" @var{documentation})\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:41708
#, no-wrap
msgid ""
"(@var{field-name}\n"
" (@var{type})\n"
" @var{documentation}\n"
" (serializer @var{serializer}))\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:41713
#, no-wrap
msgid ""
"(@var{field-name}\n"
" (@var{type})\n"
" @var{documentation}\n"
" (sanitizer @var{sanitizer})\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:41719
#, no-wrap
msgid ""
"(@var{field-name}\n"
" (@var{type})\n"
" @var{documentation}\n"
" (sanitizer @var{sanitizer})\n"
" (serializer @var{serializer}))\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41723
msgid "@var{field-name} is an identifier that denotes the name of the field in the generated record."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41731
msgid "@var{type} is the type of the value corresponding to @var{field-name}; since Guile is untyped, a predicate procedure---@code{@var{type}?}---will be called on the value corresponding to the field to ensure that the value is of the correct type.  This means that if say, @var{type} is @code{package}, then a procedure named @code{package?} will be applied on the value to make sure that it is indeed a @code{<package>} object."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41735
msgid "@var{default-value} is the default value corresponding to the field; if none is specified, the user is forced to provide a value when creating an object of the record type."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41740
msgid "@var{documentation} is a string formatted with Texinfo syntax which should provide a description of what setting this field does."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41745
msgid "@var{sanitizer} is a procedure which takes one argument, a user-supplied value, and returns a ``sanitized'' value for the field.  If no sanitizer is specified, a default sanitizer is used, which raises an error if the value is not of type @var{type}."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41748
msgid "An example of a sanitizer for a field that accepts both strings and symbols looks like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41753
#, no-wrap
msgid ""
"(define (sanitize-foo value)\n"
"  (cond ((string? value) value)\n"
"        ((symbol? value) (symbol->string value))\n"
"        (else (error \"bad value\"))))\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41761
msgid "@var{serializer} is the name of a procedure which takes two arguments, the first is the name of the field, and the second is the value corresponding to the field.  The procedure should return a string or G-expression (@pxref{G-Expressions}) that represents the content that will be serialized to the configuration file.  If none is specified, a procedure of the name @code{serialize-@var{type}} will be used."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41763
msgid "A simple serializer procedure could look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41768
#, no-wrap
msgid ""
"(define (serialize-boolean field-name value)\n"
"  (let ((value (if value \"true\" \"false\")))\n"
"    #~(string-append #$field-name #$value)))\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41779
msgid "In some cases multiple different configuration records might be defined in the same file, but their serializers for the same type might have to be different, because they have different configuration formats.  For example, the @code{serialize-boolean} procedure for the Getmail service would have to be different from the one for the Transmission service.  To make it easier to deal with this situation, one can specify a serializer prefix by using the @code{prefix} literal in the @code{define-configuration} form.  This means that one doesn't have to manually specify a custom @var{serializer} for every field."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41783
#, no-wrap
msgid ""
"(define (foo-serialize-string field-name value)\n"
"  @dots{})\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41786
#, no-wrap
msgid ""
"(define (bar-serialize-string field-name value)\n"
"  @dots{})\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41792
#, no-wrap
msgid ""
"(define-configuration foo-configuration\n"
"  (label\n"
"   (string)\n"
"   \"The name of label.\")\n"
"  (prefix foo-))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41798
#, no-wrap
msgid ""
"(define-configuration bar-configuration\n"
"  (ip-address\n"
"   (string)\n"
"   \"The IPv4 address for this device.\")\n"
"  (prefix bar-))\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41804
msgid "However, in some cases you might not want to serialize any of the values of the record, to do this, you can use the @code{no-serialization} literal.  There is also the @code{define-configuration/no-serialization} macro which is a shorthand of this."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41812
#, no-wrap
msgid ""
";; Nothing will be serialized to disk.\n"
"(define-configuration foo-configuration\n"
"  (field\n"
"   (string \"test\")\n"
"   \"Some documentation.\")\n"
"  (no-serialization))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41818
#, no-wrap
msgid ""
";; The same thing as above.\n"
"(define-configuration/no-serialization bar-configuration\n"
"  (field\n"
"   (string \"test\")\n"
"   \"Some documentation.\"))\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41821
#, fuzzy, no-wrap
msgid "define-maybe type"
msgstr "guix-publish-service-type"

#. type: defmac
#: guix-git/doc/guix.texi:41826
msgid "Sometimes a field should not be serialized if the user doesn’t specify a value.  To achieve this, you can use the @code{define-maybe} macro to define a ``maybe type''; if the value of a maybe type is left unset, or is set to the @code{%unset-value} value, then it will not be serialized."
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41833
msgid "When defining a ``maybe type'', the corresponding serializer for the regular type will be used by default.  For example, a field of type @code{maybe-string} will be serialized using the @code{serialize-string} procedure by default, you can of course change this by specifying a custom serializer procedure.  Likewise, the type of the value would have to be a string, or left unspecified."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41836
#, no-wrap
msgid ""
"(define-maybe string)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41839
#, no-wrap
msgid ""
"(define (serialize-string field-name value)\n"
"  @dots{})\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41846
#, no-wrap
msgid ""
"(define-configuration baz-configuration\n"
"  (name\n"
"   ;; If set to a string, the `serialize-string' procedure will be used\n"
"   ;; to serialize the string.  Otherwise this field is not serialized.\n"
"   maybe-string\n"
"   \"The name of this module.\"))\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41850
msgid "Like with @code{define-configuration}, one can set a prefix for the serializer name by using the @code{prefix} literal."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41854
#, no-wrap
msgid ""
"(define-maybe integer\n"
"  (prefix baz-))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41857
#, no-wrap
msgid ""
"(define (baz-serialize-integer field-name value)\n"
"  @dots{})\n"
msgstr ""

#. type: defmac
#: guix-git/doc/guix.texi:41864
msgid "There is also the @code{no-serialization} literal, which when set means that no serializer will be defined for the ``maybe type'', regardless of whether its value is set or not.  @code{define-maybe/no-serialization} is a shorthand for specifying the @code{no-serialization} literal."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41867
#, no-wrap
msgid ""
"(define-maybe/no-serialization symbol)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41872
#, no-wrap
msgid ""
"(define-configuration/no-serialization test-configuration\n"
"  (mode\n"
"   maybe-symbol\n"
"   \"Docstring.\"))\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41875
#, fuzzy, no-wrap
#| msgid "packages->manifest"
msgid "maybe-value-set? value"
msgstr "packages->manifest"

#. type: defun
#: guix-git/doc/guix.texi:41878
msgid "Predicate to check whether a user explicitly specified the value of a maybe field."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41880
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "serialize-configuration configuration fields"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: defun
#: guix-git/doc/guix.texi:41885
msgid "Return a G-expression that contains the values corresponding to the @var{fields} of @var{configuration}, a record that has been generated by @code{define-configuration}.  The G-expression can then be serialized to disk by using something like @code{mixed-text-file}."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41887
#, no-wrap
msgid "empty-serializer field-name value"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41890
msgid "A serializer that just returns an empty string.  The @code{serialize-package} procedure is an alias for this."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41895
msgid "Once you have defined a configuration record, you will most likely also want to document it so that other people know to use it.  To help with that, there are two procedures, both of which are documented below."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41896
#, no-wrap
msgid "generate-documentation documentation documentation-name"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41902
msgid "Generate a Texinfo fragment from the docstrings in @var{documentation}, a list of @code{(@var{label} @var{fields} @var{sub-documentation} ...)}.  @var{label} should be a symbol and should be the name of the configuration record.  @var{fields} should be a list of all the fields available for the configuration record."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41907
msgid "@var{sub-documentation} is a @code{(@var{field-name} @var{configuration-name})} tuple.  @var{field-name} is the name of the field which takes another configuration record as its value, and @var{configuration-name} is the name of that configuration record."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41914
msgid "@var{sub-documentation} is only needed if there are nested configuration records.  For example, the @code{getmail-configuration} record (@pxref{Mail Services}) accepts a @code{getmail-configuration-file} record in one of its @code{rcfile} field, therefore documentation for @code{getmail-configuration-file} is nested in @code{getmail-configuration}."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41921
#, no-wrap
msgid ""
"(generate-documentation\n"
"  `((getmail-configuration ,getmail-configuration-fields\n"
"     (rcfile getmail-configuration-file))\n"
"    @dots{})\n"
"  'getmail-configuration)\n"
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41925
msgid "@var{documentation-name} should be a symbol and should be the name of the configuration record."
msgstr ""

#. type: defun
#: guix-git/doc/guix.texi:41928
#, fuzzy, no-wrap
#| msgid "nginx-location-configuration body"
msgid "configuration->documentation configuration-symbol"
msgstr "nginx-location-configuration body"

#. type: defun
#: guix-git/doc/guix.texi:41934
msgid "Take @var{configuration-symbol}, the symbol corresponding to the name used when defining a configuration record with @code{define-configuration}, and print the Texinfo documentation of its fields.  This is useful if there aren’t any nested configuration records since it only prints the documentation for the top-level fields."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41942
msgid "As of right now, there is no automated way to generate documentation for configuration records and put them in the manual.  Instead, every time you make a change to the docstrings of a configuration record, you have to manually call @code{generate-documentation} or @code{configuration->documentation}, and paste the output into the @file{doc/guix.texi} file."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:41946
msgid "Below is an example of a record type created using @code{define-configuration} and friends."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41953
#, no-wrap
msgid ""
"(use-modules (gnu services)\n"
"             (guix gexp)\n"
"             (gnu services configuration)\n"
"             (srfi srfi-26)\n"
"             (srfi srfi-1))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41961
#, no-wrap
msgid ""
";; Turn field names, which are Scheme symbols into strings\n"
"(define (uglify-field-name field-name)\n"
"  (let ((str (symbol->string field-name)))\n"
"    ;; field? -> is-field\n"
"    (if (string-suffix? \"?\" str)\n"
"        (string-append \"is-\" (string-drop-right str 1))\n"
"        str)))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41964
#, no-wrap
msgid ""
"(define (serialize-string field-name value)\n"
"  #~(string-append #$(uglify-field-name field-name) \" = \" #$value \"\\n\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41967
#, no-wrap
msgid ""
"(define (serialize-integer field-name value)\n"
"  (serialize-string field-name (number->string value)))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41970
#, no-wrap
msgid ""
"(define (serialize-boolean field-name value)\n"
"  (serialize-string field-name (if value \"true\" \"false\")))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41973
#, no-wrap
msgid ""
"(define (serialize-contact-name field-name value)\n"
"  #~(string-append \"\\n[\" #$value \"]\\n\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41976
#, no-wrap
msgid ""
"(define (list-of-contact-configurations? lst)\n"
"  (every contact-configuration? lst))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41981
#, no-wrap
msgid ""
"(define (serialize-list-of-contact-configurations field-name value)\n"
"  #~(string-append #$@@(map (cut serialize-configuration <>\n"
"                                contact-configuration-fields)\n"
"                           value)))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41988
#, no-wrap
msgid ""
"(define (serialize-contacts-list-configuration configuration)\n"
"  (mixed-text-file\n"
"   \"contactrc\"\n"
"   #~(string-append \"[Owner]\\n\"\n"
"                    #$(serialize-configuration\n"
"                       configuration contacts-list-configuration-fields))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:41991
#, no-wrap
msgid ""
"(define-maybe integer)\n"
"(define-maybe string)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:42006
#, no-wrap
msgid ""
"(define-configuration contact-configuration\n"
"  (name\n"
"   (string)\n"
"   \"The name of the contact.\"\n"
"   serialize-contact-name)\n"
"  (phone-number\n"
"   maybe-integer\n"
"   \"The person's phone number.\")\n"
"  (email\n"
"   maybe-string\n"
"   \"The person's email address.\")\n"
"  (married?\n"
"   (boolean)\n"
"   \"Whether the person is married.\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:42018
#, no-wrap
msgid ""
"(define-configuration contacts-list-configuration\n"
"  (name\n"
"   (string)\n"
"   \"The name of the owner of this contact list.\")\n"
"  (email\n"
"   (string)\n"
"   \"The owner's email address.\")\n"
"  (contacts\n"
"   (list-of-contact-configurations '())\n"
"   \"A list of @@code@{contact-configuation@} records which contain\n"
"information about all your contacts.\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42021
msgid "A contacts list configuration could then be created like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:42037
#, no-wrap
msgid ""
"(define my-contacts\n"
"  (contacts-list-configuration\n"
"   (name \"Alice\")\n"
"   (email \"alice@@example.org\")\n"
"   (contacts\n"
"    (list (contact-configuration\n"
"           (name \"Bob\")\n"
"           (phone-number 1234)\n"
"           (email \"bob@@gnu.org\")\n"
"           (married? #f))\n"
"          (contact-configuration\n"
"           (name \"Charlie\")\n"
"           (phone-number 0000)\n"
"           (married? #t))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42041
msgid "After serializing the configuration to disk, the resulting file would look like this:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:42046
#, no-wrap
msgid ""
"[owner]\n"
"name = Alice\n"
"email = alice@@example.org\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:42051
#, no-wrap
msgid ""
"[Bob]\n"
"phone-number = 1234\n"
"email = bob@@gnu.org\n"
"is-married = false\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:42055
#, no-wrap
msgid ""
"[Charlie]\n"
"phone-number = 0\n"
"is-married = true\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:42060
#, fuzzy, no-wrap
#| msgid "System Configuration"
msgid "home configuration"
msgstr "Configuração do sistema"

#. type: Plain text
#: guix-git/doc/guix.texi:42072
msgid "Guix supports declarative configuration of @dfn{home environments} by utilizing the configuration mechanism described in the previous chapter (@pxref{Defining Services}), but for user's dotfiles and packages.  It works both on Guix System and foreign distros and allows users to declare all the packages and services that should be installed and configured for the user.  Once a user has written a file containing @code{home-environment} record, such a configuration can be @dfn{instantiated} by an unprivileged user with the @command{guix home} command (@pxref{Invoking guix home})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42089
msgid "The user's home environment usually consists of three basic parts: software, configuration, and state.  Software in mainstream distros are usually installed system-wide, but with GNU Guix most software packages can be installed on a per-user basis without needing root privileges, and are thus considered part of the user’s @dfn{home environment}.  Packages on their own are not very useful in many cases, because often they require some additional configuration, usually config files that reside in @env{XDG_CONFIG_HOME} (@file{~/.config} by default) or other directories.  Everything else can be considered state, like media files, application databases, and logs."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42092
msgid "Using Guix for managing home environments provides a number of advantages:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42095
#, no-wrap
msgid "All software can be configured in one language (Guile Scheme),"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:42098
msgid "this gives users the ability to share values between configurations of different programs."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42099
#, no-wrap
msgid "A well-defined home environment is self-contained and can be"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:42102
msgid "created in a declarative and reproducible way---there is no need to grab external binaries or manually edit some configuration file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42103
#, no-wrap
msgid "After every @command{guix home reconfigure} invocation, a new home"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:42107
msgid "environment generation will be created.  This means that users can rollback to a previous home environment generation so they don’t have to worry about breaking their configuration."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42108
#, no-wrap
msgid "It is possible to manage stateful data with Guix Home, this"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:42113
msgid "includes the ability to automatically clone Git repositories on the initial setup of the machine, and periodically running commands like @command{rsync} to sync data with another host.  This functionality is still in an experimental stage, though."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42130
msgid "The home environment is configured by providing a @code{home-environment} declaration in a file that can be passed to the @command{guix home} command (@pxref{Invoking guix home}).  The easiest way to get started is by generating an initial configuration with @command{guix home import}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:42133
#, no-wrap
msgid "guix home import ~/src/guix-config\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42141
msgid "The @command{guix home import} command reads some of the ``dot files'' such as @file{~/.bashrc} found in your home directory and copies them to the given directory, @file{~/src/guix-config} in this case; it also reads the contents of your profile, @file{~/.guix-profile}, and, based on that, it populates @file{~/src/guix-config/home-configuration.scm} with a Home configuration that resembles your current configuration."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42147
msgid "A simple setup can include Bash and a custom text configuration, like in the example below.  Don't be afraid to declare home environment parts, which overlaps with your current dot files: before installing any configuration files, Guix Home will back up existing config files to a separate place in the home directory."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:42153
msgid "It is highly recommended that you manage your shell or shells with Guix Home, because it will make sure that all the necessary scripts are sourced by the shell configuration file.  Otherwise you will need to do it manually. (@pxref{Configuring the Shell})."
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:42155
#, fuzzy, no-wrap
#| msgid "build environment"
msgid "home-environment"
msgstr "ambiente de compilação"

#. type: include
#: guix-git/doc/guix.texi:42157
#, fuzzy, no-wrap
#| msgid "os-config-bare-bones.texi"
msgid "he-config-bare-bones.scm"
msgstr "os-config-bare-bones.texi"

#. type: Plain text
#: guix-git/doc/guix.texi:42164
msgid "The @code{packages} field should be self-explanatory, it will install the list of packages into the user's profile.  The most important field is @code{services}, it contains a list of @dfn{home services}, which are the basic building blocks of a home environment."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42172
msgid "There is no daemon (at least not necessarily) related to a home service, a home service is just an element that is used to declare part of home environment and extend other parts of it.  The extension mechanism discussed in the previous chapter (@pxref{Defining Services}) should not be confused with Shepherd services (@pxref{Shepherd Services}).  Using this extension mechanism and some Scheme code that glues things together gives the user the freedom to declare their own, very custom, home environments."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:42173 guix-git/doc/guix.texi:43797
#, fuzzy, no-wrap
#| msgid "Invoking @command{guix size}"
msgid "container, for @command{guix home}"
msgstr "Invocando @command{guix size}"

#. type: Plain text
#: guix-git/doc/guix.texi:42176
msgid "Once the configuration looks good, you can first test it in a throw-away ``container'':"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:42179 guix-git/doc/guix.texi:43807
#, fuzzy, no-wrap
#| msgid "$ guix system list-generations 10d\n"
msgid "guix home container config.scm\n"
msgstr "$ guix system list-generations 10d\n"

#. type: Plain text
#: guix-git/doc/guix.texi:42187
msgid "The command above spawns a shell where your home environment is running.  The shell runs in a container, meaning it's isolated from the rest of the system, so it's a good way to try out your configuration---you can see if configuration bits are missing or misbehaving, if daemons get started, and so on.  Once you exit that shell, you're back to the prompt of your original shell ``in the real world''."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42190
msgid "Once you have a configuration file that suits your needs, you can reconfigure your home by running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:42193
#, no-wrap
msgid "guix home reconfigure config.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42197
msgid "This ``builds'' your home environment and creates @file{~/.guix-home} pointing to it.  Voilà!"
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:42204
msgid "Make sure the operating system has elogind, systemd, or a similar mechanism to create the XDG run-time directory and has the @env{XDG_RUNTIME_DIR} variable set.  Failing that, the @file{on-first-login} script will not execute anything, and processes like user Shepherd and its descendants will not start."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42210
msgid "This section is safe to skip if your shell or shells are managed by Guix Home.  Otherwise, read it carefully."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42217
msgid "There are a few scripts that must be evaluated by a login shell to activate the home environment.  The shell startup files only read by login shells often have @code{profile} suffix.  For more information about login shells see @ref{Invoking Bash,,, bash, The GNU Bash Reference Manual} and see @ref{Bash Startup Files,,, bash, The GNU Bash Reference Manual}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42224
msgid "The first script that needs to be sourced is @file{setup-environment}, which sets all the necessary environment variables (including variables declared by the user) and the second one is @file{on-first-login}, which starts Shepherd for the current user and performs actions declared by other home services that extends @code{home-run-on-first-login-service-type}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42227
msgid "Guix Home will always create @file{~/.profile}, which contains the following lines:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:42232
#, no-wrap
msgid ""
"HOME_ENVIRONMENT=$HOME/.guix-home\n"
". $HOME_ENVIRONMENT/setup-environment\n"
"$HOME_ENVIRONMENT/on-first-login\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42242
msgid "This makes POSIX compliant login shells activate the home environment.  However, in most cases this file won't be read by most modern shells, because they are run in non POSIX mode by default and have their own @file{*profile} startup files.  For example Bash will prefer @file{~/.bash_profile} in case it exists and only if it doesn't will it fallback to @file{~/.profile}.  Zsh (if no additional options are specified) will ignore @file{~/.profile}, even if @file{~/.zprofile} doesn't exist."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42247
msgid "To make your shell respect @file{~/.profile}, add @code{. ~/.profile} or @code{source ~/.profile} to the startup file for the login shell.  In case of Bash, it is @file{~/.bash_profile}, and in case of Zsh, it is @file{~/.zprofile}."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:42251
msgid "This step is only required if your shell is @emph{not} managed by Guix Home.  Otherwise, everything will be done automatically."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:42255
#, fuzzy, no-wrap
#| msgid "Other services."
msgid "home services"
msgstr "Serviços domésticos"

#. type: Plain text
#: guix-git/doc/guix.texi:42264
msgid "A @dfn{home service} is not necessarily something that has a daemon and is managed by Shepherd (@pxref{Jump Start,,, shepherd, The GNU Shepherd Manual}), in most cases it doesn't.  It's a simple building block of the home environment, often declaring a set of packages to be installed in the home environment profile, a set of config files to be symlinked into @env{XDG_CONFIG_HOME} (@file{~/.config} by default), and environment variables to be set by a login shell."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42272
msgid "There is a service extension mechanism (@pxref{Service Composition})  which allows home services to extend other home services and utilize capabilities they provide; for example: declare mcron jobs (@pxref{Top,,, mcron, GNU@tie{}Mcron}) by extending @ref{Mcron Home Service}; declare daemons by extending @ref{Shepherd Home Service}; add commands, which will be invoked on by the Bash by extending @ref{Shells Home Services, @code{home-bash-service-type}}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42283
msgid "A good way to discover available home services is using the @command{guix home search} command (@pxref{Invoking guix home}).  After the required home services are found, include its module with the @code{use-modules} form (@pxref{use-modules,, Using Guile Modules, guile, The GNU Guile Reference Manual}), or the @code{#:use-modules} directive (@pxref{define-module,, Creating Guile Modules, guile, The GNU Guile Reference Manual}) and declare a home service using the @code{service} function, or extend a service type by declaring a new service with the @code{simple-service} procedure from @code{(gnu services)}."
msgstr ""

#. type: menuentry
#: guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Game Services"
msgid "Mail: Mail Home Services"
msgstr "Serviços de jogos"

#. type: menuentry
#: guix-git/doc/guix.texi:42299
#, fuzzy
#| msgid "Messaging services."
msgid "Services for managing mail."
msgstr "Serviços de mensageria."

#. type: Plain text
#: guix-git/doc/guix.texi:42308
msgid "There are a few essential home services defined in @code{(gnu services)}, they are mostly for internal use and are required to build a home environment, but some of them will be useful for the end user."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:42309
#, no-wrap
msgid "environment variables"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42311
#, fuzzy, no-wrap
msgid "home-environment-variables-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:42316
msgid "The service of this type will be instantiated by every home environment automatically by default, there is no need to define it, but someone may want to extend it with a list of pairs to set some environment variables."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:42320
#, no-wrap
msgid ""
"(list (\"ENV_VAR1\" . \"value1\")\n"
"      (\"ENV_VAR2\" . \"value2\"))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42325
msgid "The easiest way to extend a service type, without defining a new service type is to use the @code{simple-service} helper from @code{(gnu services)}."
msgstr ""

#. type: findex
#: guix-git/doc/guix.texi:42326
#, no-wrap
msgid "literal-string"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:42335
#, no-wrap
msgid ""
"(simple-service 'some-useful-env-vars-service\n"
"\t\thome-environment-variables-service-type\n"
"\t\t`((\"LESSHISTFILE\" . \"$XDG_CACHE_HOME/.lesshst\")\n"
"                  (\"SHELL\" . ,(file-append zsh \"/bin/zsh\"))\n"
"                  (\"USELESS_VAR\" . #f)\n"
"                  (\"_JAVA_AWT_WM_NONREPARENTING\" . #t)\n"
"                  (\"LITERAL_VALUE\" . ,(literal-string \"$@{abc@}\"))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42340
msgid "If you include such a service in you home environment definition, it will add the following content to the @file{setup-environment} script (which is expected to be sourced by the login shell):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:42346
#, no-wrap
msgid ""
"export LESSHISTFILE=\"$XDG_CACHE_HOME/.lesshst\"\n"
"export SHELL=\"/gnu/store/2hsg15n644f0glrcbkb1kqknmmqdar03-zsh-5.8/bin/zsh\"\n"
"export _JAVA_AWT_WM_NONREPARENTING\n"
"export LITERAL_VALUE='$@{abc@}'\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42352
msgid "Notice that @code{literal-string} above lets us declare that a value is to be interpreted as a @dfn{literal string}, meaning that ``special characters'' such as the dollar sign will not be interpreted by the shell."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:42358
msgid "Make sure that module @code{(gnu packages shells)} is imported with @code{use-modules} or any other way, this namespace contains the definition of the @code{zsh} package, which is used in the example above."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42371
msgid "The association list (@pxref{Association Lists, alists, Association Lists, guile, The GNU Guile Reference manual}) is a data structure containing key-value pairs, for @code{home-environment-variables-service-type} the key is always a string, the value can be a string, string-valued gexp (@pxref{G-Expressions}), file-like object (@pxref{G-Expressions, file-like object}) or boolean.  For gexps, the variable will be set to the value of the gexp; for file-like objects, it will be set to the path of the file in the store (@pxref{The Store}); for @code{#t}, it will export the variable without any value; and for @code{#f}, it will omit variable."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42374
#, fuzzy, no-wrap
msgid "home-profile-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:42380
msgid "The service of this type will be instantiated by every home environment automatically, there is no need to define it, but you may want to extend it with a list of packages if you want to install additional packages into your profile.  Other services, which need to make some programs available to the user will also extend this service type."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42382
msgid "The extension value is just a list of packages:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:42385
#, no-wrap
msgid "(list htop vim emacs)\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42395
msgid "The same approach as @code{simple-service} (@pxref{Service Reference, simple-service}) for @code{home-environment-variables-service-type} can be used here, too.  Make sure that modules containing the specified packages are imported with @code{use-modules}.  To find a package or information about its module use @command{guix search} (@pxref{Invoking guix package}).  Alternatively, @code{specification->package} can be used to get the package record from string without importing related module."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42399
msgid "There are few more essential services, but users are not expected to extend them."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42400
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "home-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:42405
msgid "The root of home services DAG, it generates a folder, which later will be symlinked to @file{~/.guix-home}, it contains configurations, profile with binaries and libraries, and some necessary scripts to glue things together."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42407
#, fuzzy, no-wrap
msgid "home-run-on-first-login-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:42412
msgid "The service of this type generates a Guile script, which is expected to be executed by the login shell.  It is only executed if the special flag file inside @env{XDG_RUNTIME_DIR} hasn't been created, this prevents redundant executions of the script if multiple login shells are spawned."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42418
msgid "It can be extended with a gexp.  However, to autostart an application, users @emph{should not} use this service, in most cases it's better to extend @code{home-shepherd-service-type} with a Shepherd service (@pxref{Shepherd Services}), or extend the shell's startup file with the required command using the appropriate service type."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42420
#, fuzzy, no-wrap
msgid "home-files-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:42427
msgid "The service of this type allows to specify a list of files, which will go to @file{~/.guix-home/files}, usually this directory contains configuration files (to be more precise it contains symlinks to files in @file{/gnu/store}), which should be placed in @file{$XDG_CONFIG_DIR} or in rare cases in @file{$HOME}.  It accepts extension values in the following format:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:42431
#, no-wrap
msgid ""
"`((\".sway/config\" ,sway-file-like-object)\n"
"  (\".tmux.conf\" ,(local-file \"./tmux.conf\")))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42444
msgid "Each nested list contains two values: a subdirectory and file-like object.  After building a home environment @file{~/.guix-home/files} will be populated with apropiate content and all nested directories will be created accordingly, however, those files won't go any further until some other service will do it.  By default a @code{home-symlink-manager-service-type}, which creates necessary symlinks in home folder to files from @file{~/.guix-home/files} and backs up already existing, but clashing configs and other things, is a part of essential home services (enabled by default), but it's possible to use alternative services to implement more advanced use cases like read-only home.  Feel free to experiment and share your results."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42446
#, fuzzy, no-wrap
msgid "home-xdg-configuration-files-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:42453
msgid "The service is very similiar to @code{home-files-service-type} (and actually extends it), but used for defining files, which will go to @file{~/.guix-home/files/.config}, which will be symlinked to @file{$XDG_CONFIG_DIR} by @code{home-symlink-manager-service-type} (for example) during activation.  It accepts extension values in the following format:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:42459
#, no-wrap
msgid ""
"`((\"sway/config\" ,sway-file-like-object)\n"
"  ;; -> ~/.guix-home/files/.config/sway/config\n"
"  ;; -> $XDG_CONFIG_DIR/sway/config (by symlink-manager)\n"
"  (\"tmux/tmux.conf\" ,(local-file \"./tmux.conf\")))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42462
#, fuzzy, no-wrap
msgid "home-activation-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:42466
msgid "The service of this type generates a guile script, which runs on every @command{guix home reconfigure} invocation or any other action, which leads to the activation of the home environment."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42468
#, fuzzy, no-wrap
msgid "home-symlink-manager-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:42472
msgid "The service of this type generates a guile script, which will be executed during activation of home environment, and do a few following steps:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:42477
msgid "Reads the content of @file{files/} directory of current and pending home environments."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:42482
msgid "Cleans up all symlinks created by symlink-manager on previous activation.  Also, sub-directories, which become empty also will be cleaned up."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:42495
msgid "Creates new symlinks the following way: It looks @file{files/} directory (usually defined with @code{home-files-service-type}, @code{home-xdg-configuration-files-service-type} and maybe some others), takes the files from @file{files/.config/} subdirectory and put respective links in @env{XDG_CONFIG_DIR}.  For example symlink for @file{files/.config/sway/config} will end up in @file{$XDG_CONFIG_DIR/sway/config}.  The rest files in @file{files/} outside of @file{files/.config/} subdirectory will be treated slightly different: symlink will just go to @file{$HOME}.  @file{files/.some-program/config} will end up in @file{$HOME/.some-program/config}."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:42498
msgid "If some sub-directories are missing, they will be created."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix.texi:42501
msgid "If there is a clashing files on the way, they will be backed up."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42506
msgid "symlink-manager is a part of essential home services and is enabled and used by default."
msgstr ""

#. type: node
#: guix-git/doc/guix.texi:42509
#, fuzzy, no-wrap
#| msgid "Shepherd Services"
msgid "Shells Home Services"
msgstr "Serviços de Shepherd"

#. type: subsection
#: guix-git/doc/guix.texi:42510
#, no-wrap
msgid "Shells"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:42512 guix-git/doc/guix.texi:43759
#, no-wrap
msgid "shell"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:42513
#, no-wrap
msgid "login shell"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:42514
#, no-wrap
msgid "interactive shell"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:42515 guix-git/doc/guix.texi:43761
#, no-wrap
msgid "bash"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:42516 guix-git/doc/guix.texi:43762
#, no-wrap
msgid "zsh"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42522
msgid "Shells play a quite important role in the environment initialization process, you can configure them manually as described in section @ref{Configuring the Shell}, but the recommended way is to use home services listed below.  It's both easier and more reliable."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42532
msgid "Each home environment instantiates @code{home-shell-profile-service-type}, which creates a @file{~/.profile} startup file for all POSIX-compatible shells.  This file contains all the necessary steps to properly initialize the environment, but many modern shells like Bash or Zsh prefer their own startup files, that's why the respective home services (@code{home-bash-service-type} and @code{home-zsh-service-type}) ensure that @file{~/.profile} is sourced by @file{~/.bash_profile} and @file{~/.zprofile}, respectively."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:42533
#, fuzzy, no-wrap
#| msgid "Certificate Services"
msgid "Shell Profile Service"
msgstr "Serviços de certificado"

#. type: deftp
#: guix-git/doc/guix.texi:42535
#, fuzzy, no-wrap
msgid "{Data Type} home-shell-profile-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:42537
msgid "Available @code{home-shell-profile-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42539
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{profile} (default: @code{'()}) (type: text-config)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42549
msgid "@code{home-shell-profile} is instantiated automatically by @code{home-environment}, DO NOT create this service manually, it can only be extended.  @code{profile} is a list of file-like objects, which will go to @file{~/.profile}.  By default @file{~/.profile} contains the initialization code which must be evaluated by the login shell to make home-environment's profile available to the user, but other commands can be added to the file if it is really necessary.  In most cases shell's configuration files are preferred places for user's customizations.  Extend home-shell-profile service only if you really know what you do."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:42554
#, fuzzy, no-wrap
#| msgid "Base Services"
msgid "Bash Home Service"
msgstr "Serviços base"

#. type: anchor{#1}
#: guix-git/doc/guix.texi:42557
#, fuzzy
#| msgid "System Configuration"
msgid "home-bash-configuration"
msgstr "Configuração do sistema"

#. type: deftp
#: guix-git/doc/guix.texi:42557
#, fuzzy, no-wrap
msgid "{Data Type} home-bash-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:42559
msgid "Available @code{home-bash-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42561
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{package} (default: @code{bash}) (type: package)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:42563
#, fuzzy
#| msgid "The GPM package to use."
msgid "The Bash package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:42564
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{guix-defaults?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42567
msgid "Add sane defaults like reading @file{/etc/bashrc} and coloring the output of @command{ls} to the top of the @file{.bashrc} file."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42568 guix-git/doc/guix.texi:42639
#: guix-git/doc/guix.texi:42678
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{environment-variables} (default: @code{'()}) (type: alist)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42573
msgid "Association list of environment variables to set for the Bash session.  The rules for the @code{home-environment-variables-service-type} apply here (@pxref{Essential Home Services}).  The contents of this field will be added after the contents of the @code{bash-profile} field."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42574 guix-git/doc/guix.texi:42644
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{aliases} (default: @code{'()}) (type: alist)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42579
msgid "Association list of aliases to set for the Bash session.  The aliases will be defined after the contents of the @code{bashrc} field has been put in the @file{.bashrc} file.  The alias will automatically be quoted, so something like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:42582
#, no-wrap
msgid "'((\"ls\" . \"ls -alF\"))\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:42585
msgid "turns into"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:42588
#, no-wrap
msgid "alias ls=\"ls -alF\"\n"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42590 guix-git/doc/guix.texi:42648
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{bash-profile} (default: @code{'()}) (type: text-config)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:42595
msgid "List of file-like objects, which will be added to @file{.bash_profile}.  Used for executing user's commands at start of login shell (In most cases the shell started on tty just after login).  @file{.bash_login} won't be ever read, because @file{.bash_profile} always present."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42596 guix-git/doc/guix.texi:42652
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{bashrc} (default: @code{'()}) (type: text-config)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:42601
msgid "List of file-like objects, which will be added to @file{.bashrc}.  Used for executing user's commands at start of interactive shell (The shell for interactive usage started by typing @code{bash} or by terminal app or any other program)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42602 guix-git/doc/guix.texi:42656
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{bash-logout} (default: @code{'()}) (type: text-config)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:42607
msgid "List of file-like objects, which will be added to @file{.bash_logout}.  Used for executing user's commands at the exit of login shell.  It won't be read in some cases (if the shell terminates by exec'ing another process for example)."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42617
msgid "You can extend the Bash service by using the @code{home-bash-extension} configuration record, whose fields must mirror that of @code{home-bash-configuration} (@pxref{home-bash-configuration}).  The contents of the extensions will be added to the end of the corresponding Bash configuration files (@pxref{Bash Startup Files,,, bash, The GNU Bash Reference Manual}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42621
msgid "For example, here is how you would define a service that extends the Bash service such that @file{~/.bash_profile} defines an additional environment variable, @env{PS1}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:42629
#, no-wrap
msgid ""
"(define bash-fancy-prompt-service\n"
"  (simple-service 'bash-fancy-prompt\n"
"                  home-bash-service-type\n"
"                  (home-bash-extension\n"
"                   (environment-variables\n"
"                    '((\"PS1\" . \"\\\\u \\\\wλ \"))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42634
msgid "You would then add @code{bash-fancy-prompt-service} to the list in the @code{services} field of your @code{home-environment}.  The reference of @code{home-bash-extension} follows."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:42635
#, fuzzy, no-wrap
msgid "{Data Type} home-bash-extension"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:42637
msgid "Available @code{home-bash-extension} fields are:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:42643
msgid "Additional environment variables to set.  These will be combined with the environment variables from other extensions and the base service to form one coherent block of environment variables."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:42647
msgid "Additional aliases to set.  These will be combined with the aliases from other extensions and the base service."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:42651
msgid "Additional text blocks to add to @file{.bash_profile}, which will be combined with text blocks from other extensions and the base service."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:42655
msgid "Additional text blocks to add to @file{.bashrc}, which will be combined with text blocks from other extensions and the base service."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:42659
msgid "Additional text blocks to add to @file{.bash_logout}, which will be combined with text blocks from other extensions and the base service."
msgstr ""

#. type: subsubheading
#: guix-git/doc/guix.texi:42663
#, fuzzy, no-wrap
#| msgid "Game Services"
msgid "Zsh Home Service"
msgstr "Serviços de jogos"

#. type: deftp
#: guix-git/doc/guix.texi:42665
#, fuzzy, no-wrap
msgid "{Data Type} home-zsh-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:42667
msgid "Available @code{home-zsh-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42669
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{package} (default: @code{zsh}) (type: package)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:42671
#, fuzzy
#| msgid "The GPM package to use."
msgid "The Zsh package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:42672
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{xdg-flavor?} (default: @code{#t}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42677
msgid "Place all the configs to @file{$XDG_CONFIG_HOME/zsh}.  Makes @file{~/.zshenv} to set @env{ZDOTDIR} to @file{$XDG_CONFIG_HOME/zsh}.  Shell startup process will continue with @file{$XDG_CONFIG_HOME/zsh/.zshenv}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:42680
msgid "Association list of environment variables to set for the Zsh session."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42681
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{zshenv} (default: @code{'()}) (type: text-config)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:42686
msgid "List of file-like objects, which will be added to @file{.zshenv}.  Used for setting user's shell environment variables.  Must not contain commands assuming the presence of tty or producing output.  Will be read always.  Will be read before any other file in @env{ZDOTDIR}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42687
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{zprofile} (default: @code{'()}) (type: text-config)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42692
msgid "List of file-like objects, which will be added to @file{.zprofile}.  Used for executing user's commands at start of login shell (In most cases the shell started on tty just after login).  Will be read before @file{.zlogin}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42693
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{zshrc} (default: @code{'()}) (type: text-config)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:42698
msgid "List of file-like objects, which will be added to @file{.zshrc}.  Used for executing user's commands at start of interactive shell (The shell for interactive usage started by typing @code{zsh} or by terminal app or any other program)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42699
#, fuzzy, no-wrap
#| msgid "@code{wait?} (default: @code{#t})"
msgid "@code{zlogin} (default: @code{'()}) (type: text-config)"
msgstr "@code{wait?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:42703
msgid "List of file-like objects, which will be added to @file{.zlogin}.  Used for executing user's commands at the end of starting process of login shell."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42704
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{zlogout} (default: @code{'()}) (type: text-config)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:42709
msgid "List of file-like objects, which will be added to @file{.zlogout}.  Used for executing user's commands at the exit of login shell.  It won't be read in some cases (if the shell terminates by exec'ing another process for example)."
msgstr ""

#. type: node
#: guix-git/doc/guix.texi:42714
#, fuzzy, no-wrap
#| msgid "Monitoring Services"
msgid "Mcron Home Service"
msgstr "Serviços de monitoramento"

#. type: subsection
#: guix-git/doc/guix.texi:42715
#, fuzzy, no-wrap
#| msgid "Scheduled Job Execution"
msgid "Scheduled User's Job Execution"
msgstr "Execução de trabalho agendado"

#. type: Plain text
#: guix-git/doc/guix.texi:42728
msgid "The @code{(gnu home services mcron)} module provides an interface to GNU@tie{}mcron, a daemon to run jobs at scheduled times (@pxref{Top,,, mcron, GNU@tie{}mcron}).  The information about system's mcron is applicable here (@pxref{Scheduled Job Execution}), the only difference for home services is that they have to be declared in a @code{home-environment} record instead of an @code{operating-system} record."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42729
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "home-mcron-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:42733
msgid "This is the type of the @code{mcron} home service, whose value is a @code{home-mcron-configuration} object.  It allows to manage scheduled tasks."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:42740
#, fuzzy, no-wrap
msgid "{Data Type} home-mcron-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:42742
#, fuzzy
msgid "Available @code{home-mcron-configuration} fields are:"
msgstr "build-machine {Data Type}"

#. type: table
#: guix-git/doc/guix.texi:42763
msgid "@code{(ice-9 format)} format string for log messages.  The default value produces messages like \"@samp{@var{pid} @var{name}: @var{message}\"} (@pxref{Invoking mcron, Invoking,, mcron,GNU@tie{}mcron}).  Each message is also prefixed by a timestamp by GNU Shepherd."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:42768 guix-git/doc/guix.texi:42769
#, fuzzy, no-wrap
#| msgid "Power Management Services"
msgid "Power Management Home Services"
msgstr "Serviços de gerenciamento de energia"

#. type: cindex
#: guix-git/doc/guix.texi:42771
#, fuzzy, no-wrap
#| msgid "Power Management Services"
msgid "power management"
msgstr "Serviços de gerenciamento de energia"

#. type: Plain text
#: guix-git/doc/guix.texi:42774
msgid "The @code{(gnu home services pm)} module provides home services pertaining to battery power."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42775
#, fuzzy, no-wrap
msgid "home-batsignal-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:42781
msgid "Service for @code{batsignal}, a program that monitors battery levels and warns the user through desktop notifications when their battery is getting low.  You can also configure a command to be run when the battery level passes a point deemed ``dangerous''.  This service is configured with the @code{home-batsignal-configuration} record."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:42783
#, fuzzy, no-wrap
msgid "{Data Type} home-batsignal-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:42785
#, fuzzy
msgid "Data type representing the configuration for batsignal."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:42787
#, fuzzy, no-wrap
#| msgid "@code{compression-level} (default: @code{3})"
msgid "@code{warning-level} (default: @code{15})"
msgstr "@code{compression-level} (padrão: @code{3})"

#. type: table
#: guix-git/doc/guix.texi:42789
msgid "The battery level to send a warning message at."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42790
#, fuzzy, no-wrap
#| msgid "@code{nice} (default: @code{#f})"
msgid "@code{warning-message} (default: @code{#f})"
msgstr "@code{nice} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42794
msgid "The message to send as a notification when the battery level reaches the @code{warning-level}.  Setting to @code{#f} uses the default message."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42795
#, fuzzy, no-wrap
#| msgid "@code{compression-level} (default: @code{3})"
msgid "@code{critical-level} (default: @code{5})"
msgstr "@code{compression-level} (padrão: @code{3})"

#. type: table
#: guix-git/doc/guix.texi:42797
msgid "The battery level to send a critical message at."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42798
#, fuzzy, no-wrap
#| msgid "@code{challenge} (default: @code{#f})"
msgid "@code{critical-message} (default: @code{#f})"
msgstr "@code{challenge} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42802
msgid "The message to send as a notification when the battery level reaches the @code{critical-level}.  Setting to @code{#f} uses the default message."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42803
#, fuzzy, no-wrap
#| msgid "@code{log-level} (default: @code{'info})"
msgid "@code{danger-level} (default: @code{2})"
msgstr "@code{log-level} (default: @code{'info})"

#. type: table
#: guix-git/doc/guix.texi:42805
msgid "The battery level to run the @code{danger-command} at."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42806
#, fuzzy, no-wrap
#| msgid "@code{domain} (default: @code{#f})"
msgid "@code{danger-command} (default: @code{#f})"
msgstr "@code{domain} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42809
msgid "The command to run when the battery level reaches the @code{danger-level}.  Setting to @code{#f} disables running the command entirely."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42810
#, fuzzy, no-wrap
#| msgid "@code{file} (default: @code{#f})"
msgid "@code{full-level} (default: @code{#f})"
msgstr "@code{file} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42813
msgid "The battery level to send a full message at.  Setting to @code{#f} disables sending the full message entirely."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42814
#, fuzzy, no-wrap
#| msgid "@code{file} (default: @code{#f})"
msgid "@code{full-message} (default: @code{#f})"
msgstr "@code{file} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42817
msgid "The message to send as a notification when the battery level reaches the @code{full-level}.  Setting to @code{#f} uses the default message."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42818
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{batteries} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:42821
msgid "The batteries to monitor.  Setting to @code{'()} tries to find batteries automatically."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42822
#, fuzzy, no-wrap
#| msgid "@code{delay} (default: @code{#f})"
msgid "@code{poll-delay} (default: @code{60})"
msgstr "@code{delay} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42824
msgid "The time in seconds to wait before checking the batteries again."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42825
#, fuzzy, no-wrap
#| msgid "@code{nice} (default: @code{#f})"
msgid "@code{icon} (default: @code{#f})"
msgstr "@code{nice} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42828
msgid "A file-like object to use as the icon for battery notifications.  Setting to @code{#f} disables notification icons entirely."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42829
#, fuzzy, no-wrap
#| msgid "@code{options} (default: @code{#f})"
msgid "@code{notifications?} (default: @code{#t})"
msgstr "@code{options} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42831
msgid "Whether to send any notifications."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42832
#, fuzzy, no-wrap
#| msgid "@code{options} (default: @code{#f})"
msgid "@code{notifications-expire?} (default: @code{#f})"
msgstr "@code{options} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42834
msgid "Whether notifications sent expire after a time."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42835
#, fuzzy, no-wrap
#| msgid "@code{authentication-hook} (default: @code{#f})"
msgid "@code{notification-command} (default: @code{#f})"
msgstr "@code{authentication-hook} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42838
msgid "Command to use to send messages.  Setting to @code{#f} sends a notification through @code{libnotify}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42839
#, fuzzy, no-wrap
#| msgid "@code{ignore-lid?} (default: @code{#f})"
msgid "@code{ignore-missing?} (default: @code{#f})"
msgstr "@code{ignore-lid?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42841
msgid "Whether to ignore missing battery errors."
msgstr ""

#. type: node
#: guix-git/doc/guix.texi:42844
#, fuzzy, no-wrap
#| msgid "Shepherd Services"
msgid "Shepherd Home Service"
msgstr "Serviços de Shepherd"

#. type: subsection
#: guix-git/doc/guix.texi:42845
#, fuzzy, no-wrap
#| msgid "Messaging services."
msgid "Managing User Daemons"
msgstr "Serviços de mensageria."

#. type: cindex
#: guix-git/doc/guix.texi:42847
#, fuzzy, no-wrap
#| msgid "Shepherd Services"
msgid "shepherd services, for users"
msgstr "Serviços de Shepherd"

#. type: Plain text
#: guix-git/doc/guix.texi:42854
msgid "The @code{(gnu home services shepherd)} module supports the definitions of per-user Shepherd services (@pxref{Introduction,,, shepherd, The GNU Shepherd Manual}).  You extend @code{home-shepherd-service-type} with new services; Guix Home then takes care of starting the @code{shepherd} daemon for you when you log in, which in turns starts the services you asked for."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42855
#, fuzzy, no-wrap
msgid "home-shepherd-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:42860
msgid "The service type for the userland Shepherd, which allows one to manage long-running processes or one-shot tasks.  User's Shepherd is not an init process (PID 1), but almost all other information described in (@pxref{Shepherd Services}) is applicable here too."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42865
msgid "This is the service type that extensions target when they want to create shepherd services (@pxref{Service Types and Services}, for an example).  Each extension must pass a list of @code{<shepherd-service>}.  Its value must be a @code{home-shepherd-configuration}, as described below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:42867
#, fuzzy, no-wrap
msgid "{Data Type} home-shepherd-configuration"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:42874
#, fuzzy, no-wrap
#| msgid "@code{shared?} (default: @code{#t})"
msgid "auto-start? (default: @code{#t})"
msgstr "@code{shared?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:42876
msgid "Whether or not to start Shepherd on first login."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:42884 guix-git/doc/guix.texi:42885
#, no-wrap
msgid "Secure Shell"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:42887
#, fuzzy, no-wrap
#| msgid "git configuration"
msgid "secure shell client, configuration"
msgstr "Configuração do git"

#. type: cindex
#: guix-git/doc/guix.texi:42888
#, fuzzy, no-wrap
#| msgid "git configuration"
msgid "SSH client, configuration"
msgstr "Configuração do git"

#. type: Plain text
#: guix-git/doc/guix.texi:42896
msgid "The @uref{https://www.openssh.com, OpenSSH package} includes a client, the @command{ssh} command, that allows you to connect to remote machines using the @acronym{SSH, secure shell} protocol.  With the @code{(gnu home services ssh)} module, you can set up OpenSSH so that it works in a predictable fashion, almost independently of state on the local machine.  To do that, you instantiate @code{home-openssh-service-type} in your Home configuration, as explained below."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42897
#, fuzzy, no-wrap
msgid "home-openssh-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:42900
msgid "This is the type of the service to set up the OpenSSH client.  It takes care of several things:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:42906
msgid "providing a @file{~/.ssh/config} file based on your configuration so that @command{ssh} knows about hosts you regularly connect to and their associated parameters;"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:42911
msgid "providing a @file{~/.ssh/authorized_keys}, which lists public keys that the local SSH server, @command{sshd}, may accept to connect to this user account;"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:42915
msgid "optionally providing a @file{~/.ssh/known_hosts} file so that @file{ssh} can authenticate hosts you connect to."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:42919 guix-git/doc/guix.texi:43093
#: guix-git/doc/guix.texi:43675 guix-git/doc/guix.texi:43709
msgid "Here is an example of a service and its configuration that you could add to the @code{services} field of your @code{home-environment}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:42931
#, no-wrap
msgid ""
"(service home-openssh-service-type\n"
"         (home-openssh-configuration\n"
"          (hosts\n"
"           (list (openssh-host (name \"ci.guix.gnu.org\")\n"
"                               (user \"charlie\"))\n"
"                 (openssh-host (name \"chbouib\")\n"
"                               (host-name \"chbouib.example.org\")\n"
"                               (user \"supercharlie\")\n"
"                               (port 10022))))\n"
"          (authorized-keys (list (local-file \"alice.pub\")))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42938
msgid "The example above lists two hosts and their parameters.  For instance, running @command{ssh chbouib} will automatically connect to @code{chbouib.example.org} on port 10022, logging in as user @samp{supercharlie}.  Further, it marks the public key in @file{alice.pub} as authorized for incoming connections."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:42941
msgid "The value associated with a @code{home-openssh-service-type} instance must be a @code{home-openssh-configuration} record, as describe below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:42943
#, fuzzy, no-wrap
msgid "{Data Type} home-openssh-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:42947
msgid "This is the datatype representing the OpenSSH client and server configuration in one's home environment.  It contains the following fields:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42949
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{hosts} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:42953
msgid "A list of @code{openssh-host} records specifying host names and associated connection parameters (see below).  This host list goes into @file{~/.ssh/config}, which @command{ssh} reads at startup."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42954
#, fuzzy, no-wrap
#| msgid "@code{no-hosts?} (default: @code{#f})"
msgid "@code{known-hosts} (default: @code{*unspecified*})"
msgstr "@code{no-hosts?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42956
msgid "This must be either:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:42962
msgid "@code{*unspecified*}, in which case @code{home-openssh-service-type} leaves it up to @command{ssh} and to the user to maintain the list of known hosts at @file{~/.ssh/known_hosts}, or"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:42966
msgid "a list of file-like objects, in which case those are concatenated and emitted as @file{~/.ssh/known_hosts}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:42975
msgid "The @file{~/.ssh/known_hosts} contains a list of host name/host key pairs that allow @command{ssh} to authenticate hosts you connect to and to detect possible impersonation attacks.  By default, @command{ssh} updates it in a @dfn{TOFU, trust-on-first-use} fashion, meaning that it records the host's key in that file the first time you connect to it.  This behavior is preserved when @code{known-hosts} is set to @code{*unspecified*}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:42981
msgid "If you instead provide a list of host keys upfront in the @code{known-hosts} field, your configuration becomes self-contained and stateless: it can be replicated elsewhere or at another point in time.  Preparing this list can be relatively tedious though, which is why @code{*unspecified*} is kept as a default."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:42982
#, fuzzy, no-wrap
#| msgid "@code{uid} (default: @code{#f})"
msgid "@code{authorized-keys} (default: @code{#false})"
msgstr "@code{uid} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:42987
msgid "The default @code{#false} value means: Leave any @file{~/.ssh/authorized_keys} file alone.  Otherwise, this must be a list of file-like objects, each of which containing an SSH public key that should be authorized to connect to this machine."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:42993
msgid "Concretely, these files are concatenated and made available as @file{~/.ssh/authorized_keys}.  If an OpenSSH server, @command{sshd}, is running on this machine, then it @emph{may} take this file into account: this is what @command{sshd} does by default, but be aware that it can also be configured to ignore it."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:42998
#, fuzzy, no-wrap
msgid "{Data Type} openssh-host"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:43000
msgid "Available @code{openssh-host} fields are:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43004
#, fuzzy
#| msgid "Detail of operating-system declarations."
msgid "Name of this host declaration."
msgstr "Detalhe das declarações do operating-system."

#. type: item
#: guix-git/doc/guix.texi:43005
#, fuzzy, no-wrap
msgid "@code{host-name} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43007
msgid "Host name---e.g., @code{\"foo.example.org\"} or @code{\"192.168.1.2\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43008
#, fuzzy, no-wrap
msgid "@code{address-family} (type: maybe-address-family)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43012
msgid "Address family to use when connecting to this host: one of @code{AF_INET} (for IPv4 only), @code{AF_INET6} (for IPv6 only).  Additionally, the field can be left unset to allow any address family."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43013
#, fuzzy, no-wrap
msgid "@code{identity-file} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43015
msgid "The identity file to use---e.g., @code{\"/home/charlie/.ssh/id_ed25519\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43016 guix-git/doc/guix.texi:43056
#, fuzzy, no-wrap
#| msgid "@code{no-hints?} (default: @code{#f})"
msgid "@code{port} (type: maybe-natural-number)"
msgstr "@code{no-hints?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43018 guix-git/doc/guix.texi:43058
msgid "TCP port number to connect to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43019 guix-git/doc/guix.texi:43050
#: guix-git/doc/guix.texi:43642
#, fuzzy, no-wrap
msgid "@code{user} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43021 guix-git/doc/guix.texi:43052
#, fuzzy
#| msgid "The host name of the remote machine."
msgid "User name on the remote host."
msgstr "O nome de host da máquina remota."

#. type: item
#: guix-git/doc/guix.texi:43022
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{forward-x11?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43025
msgid "Whether to forward remote client connections to the local X11 graphical display."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43026
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{forward-x11-trusted?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43029
msgid "Whether remote X11 clients have full access to the original X11 graphical display."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43030
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{forward-agent?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43033
msgid "Whether the authentication agent (if any) is forwarded to the remote machine."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43034
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{compression?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43036
msgid "Whether to compress data in transit."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43037
#, fuzzy, no-wrap
msgid "@code{proxy} (type: maybe-proxy-command-or-jump-list)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43041
msgid "The command to use to connect to the server or a list of SSH hosts to jump through before connecting to the server.  The field may be set to either a @code{proxy-command} or a list of @code{proxy-jump} records."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43045
msgid "As an example, a @code{proxy-command} to connect via an HTTP proxy at 192.0.2.0 would be constructed with: @code{(proxy-command \"nc -X connect -x 192.0.2.0:8080 %h %p\")}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:43046
#, fuzzy, no-wrap
msgid "{Data Type} proxy-jump"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:43048
#, fuzzy
msgid "Available @code{proxy-jump} fields are:"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:43053
#, fuzzy, no-wrap
msgid "@code{host-name} (type: string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43055
msgid "Host name---e.g., @code{foo.example.org} or @code{192.168.1.2}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43063
#, fuzzy, no-wrap
msgid "@code{host-key-algorithms} (type: maybe-string-list)"
msgstr "@code{options} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43066
msgid "The list of accepted host key algorithms---e.g., @code{'(\"ssh-ed25519\")}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43067
#, fuzzy, no-wrap
msgid "@code{accepted-key-types} (type: maybe-string-list)"
msgstr "@code{options} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43069
msgid "The list of accepted user public key types."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43070 guix-git/doc/guix.texi:43192
#: guix-git/doc/guix.texi:43272
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{extra-content} (default: @code{\"\"}) (type: raw-configuration-string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:43073
msgid "Extra content appended as-is to this @code{Host} block in @file{~/.ssh/config}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:43081
#, no-wrap
msgid "ssh-agent"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43089
msgid "The @uref{https://www.openssh.com, OpenSSH package} includes a daemon, the @command{ssh-agent} command, that manages keys to connect to remote machines using the @acronym{SSH, secure shell} protocol.  With the @code{(gnu home services ssh-agent)} service, you can configure the OpenSSH ssh-agent to run upon login.  @xref{GNU Privacy Guard, @code{home-gpg-agent-service-type}}, for an alternative to OpenSSH's @command{ssh-agent}."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:43098
#, no-wrap
msgid ""
"(service home-ssh-agent-service-type\n"
"         (home-ssh-agent-configuration\n"
"          (extra-options '(\"-t\" \"1h30m\"))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43100
#, fuzzy, no-wrap
msgid "home-ssh-agent-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:43103
msgid "This is the type of the @code{ssh-agent} home service, whose value is a @code{home-ssh-agent-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:43105
#, fuzzy, no-wrap
msgid "{Data Type} home-ssh-agent-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:43107
#, fuzzy
msgid "Available @code{home-ssh-agent-configuration} fields are:"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:43109
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{openssh} (default: @code{openssh}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: item
#: guix-git/doc/guix.texi:43112
#, fuzzy, no-wrap
msgid "@code{socket-directory} (default: @code{@env{XDG_RUNTIME_DIR}/ssh-agent\"}) (type: gexp)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43114
msgid "The directory to write the ssh-agent's @file{socket} file."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43118
msgid "Extra options will be passed to @command{ssh-agent}, please run @command{man ssh-agent} for more information."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:43122 guix-git/doc/guix.texi:43123
#, no-wrap
msgid "GNU Privacy Guard"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:43125
#, fuzzy, no-wrap
#| msgid "Game Services"
msgid "GNU Privacy Guard, Home service"
msgstr "Serviços de jogos"

#. type: cindex
#: guix-git/doc/guix.texi:43126
#, fuzzy, no-wrap
#| msgid "Game Services"
msgid "GPG, Home service"
msgstr "Serviços de jogos"

#. type: Plain text
#: guix-git/doc/guix.texi:43130
msgid "The @code{(gnu home services gnupg)} modules provides services that help you set up the GNU Privacy Guard, also known as GnuPG or GPG, in your home environment."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:43131
#, fuzzy, no-wrap
#| msgid "Game Services"
msgid "gpg-agent, Home service"
msgstr "Serviços de jogos"

#. type: cindex
#: guix-git/doc/guix.texi:43132
#, no-wrap
msgid "SSH agent, with gpg-agent"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43137
msgid "The @code{gpg-agent} service configures and sets up GPG's agent, the program that is responsible for managing OpenPGP private keys and, optionally, OpenSSH (secure shell) private keys (@pxref{Invoking GPG-AGENT,,, gnupg, Using the GNU Privacy Guard})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43141
msgid "As an example, here is how you would configure @code{gpg-agent} with SSH support such that it uses the Emacs-based Pinentry interface when prompting for a passphrase:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:43148
#, no-wrap
msgid ""
"(service home-gpg-agent-service-type\n"
"         (home-gpg-agent-configuration\n"
"          (pinentry-program\n"
"           (file-append pinentry-emacs \"/bin/pinentry-emacs\"))\n"
"          (ssh-support? #t)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43151 guix-git/doc/guix.texi:43540
msgid "The service reference is given below."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43152
#, fuzzy, no-wrap
msgid "home-gpg-agent-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:43156
msgid "This is the service type for @command{gpg-agent} (@pxref{Invoking GPG-AGENT,,, gnupg, Using the GNU Privacy Guard}).  Its value must be a @code{home-gpg-agent-configuration}, as shown below."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:43160
#, fuzzy, no-wrap
msgid "{Data Type} home-gpg-agent-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:43162
#, fuzzy
msgid "Available @code{home-gpg-agent-configuration} fields are:"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:43164
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{gnupg} (default: @code{gnupg}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:43166
#, fuzzy
#| msgid "The GPM package to use."
msgid "The GnuPG package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:43167
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{pinentry-program} (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:43172
msgid "Pinentry program to use.  Pinentry is a small user interface that @command{gpg-agent} delegates to anytime it needs user input for a passphrase or @acronym{PIN,personal identification number} (@pxref{Top,,, pinentry,Using the PIN-Entry})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43173
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{ssh-support?} (default: @code{#f}) (type: boolean)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43178
msgid "Whether to enable @acronym{SSH,secure shell} support.  When true, @command{gpg-agent} acts as a drop-in replacement for OpenSSH's @command{ssh-agent} program, taking care of OpenSSH secret keys and directing passphrase requests to the chosen Pinentry program."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43179
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{default-cache-ttl} (default: @code{600}) (type: integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43181
msgid "Time a cache entry is valid, in seconds."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43182
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{max-cache-ttl} (default: @code{7200}) (type: integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43185
msgid "Maximum time a cache entry is valid, in seconds.  After this time a cache entry will be expired even if it has been accessed recently."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43186
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{default-cache-ttl-ssh} (default: @code{1800}) (type: integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43188
msgid "Time a cache entry for SSH keys is valid, in seconds."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43189
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{max-cache-ttl-ssh} (default: @code{7200}) (type: integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43191
msgid "Maximum time a cache entry for SSH keys is valid, in seconds."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43194
msgid "Raw content to add to the end of @file{~/.gnupg/gpg-agent.conf}."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:43203 guix-git/doc/guix.texi:43204
#, fuzzy, no-wrap
#| msgid "Desktop Services"
msgid "Desktop Home Services"
msgstr "Serviços de desktop"

#. type: Plain text
#: guix-git/doc/guix.texi:43209
msgid "The @code{(gnu home services desktop)} module provides services that you may find useful on ``desktop'' systems running a graphical user environment such as Xorg."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43210
#, fuzzy, no-wrap
msgid "home-redshift-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:43215
msgid "This is the service type for @uref{https://github.com/jonls/redshift, Redshift}, a program that adjusts the display color temperature according to the time of day.  Its associated value must be a @code{home-redshift-configuration} record, as shown below."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43218
msgid "A typical configuration, where we manually specify the latitude and longitude, might look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:43225
#, no-wrap
msgid ""
"(service home-redshift-service-type\n"
"         (home-redshift-configuration\n"
"          (location-provider 'manual)\n"
"          (latitude 35.81)    ;northern hemisphere\n"
"          (longitude -0.80))) ;west of Greenwich\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:43228
#, fuzzy, no-wrap
msgid "{Data Type} home-redshift-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:43230
msgid "Available @code{home-redshift-configuration} fields are:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43232
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{redshift} (default: @code{redshift}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:43234
#, fuzzy
#| msgid "The GPM package to use."
msgid "Redshift package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:43235
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{location-provider} (default: @code{geoclue2}) (type: symbol)"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43241
msgid "Geolocation provider---@code{'manual} or @code{'geoclue2}.  In the former case, you must also specify the @code{latitude} and @code{longitude} fields so Redshift can determine daytime at your place.  In the latter case, the Geoclue system service must be running; it will be queried for location information."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43242
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{adjustment-method} (default: @code{randr}) (type: symbol)"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43244
msgid "Color adjustment method."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43245
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{daytime-temperature} (default: @code{6500}) (type: integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43247
msgid "Daytime color temperature (kelvins)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43248
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{nighttime-temperature} (default: @code{4500}) (type: integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43250
msgid "Nighttime color temperature (kelvins)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43251
#, fuzzy, no-wrap
msgid "@code{daytime-brightness} (type: maybe-inexact-number)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43253
msgid "Daytime screen brightness, between 0.1 and 1.0, or left unspecified."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43254
#, fuzzy, no-wrap
msgid "@code{nighttime-brightness} (type: maybe-inexact-number)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43256
msgid "Nighttime screen brightness, between 0.1 and 1.0, or left unspecified."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43257
#, fuzzy, no-wrap
msgid "@code{latitude} (type: maybe-inexact-number)"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43259
msgid "Latitude, when @code{location-provider} is @code{'manual}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43260
#, fuzzy, no-wrap
#| msgid "@code{no-hints?} (default: @code{#f})"
msgid "@code{longitude} (type: maybe-inexact-number)"
msgstr "@code{no-hints?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43262
msgid "Longitude, when @code{location-provider} is @code{'manual}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43263
#, fuzzy, no-wrap
msgid "@code{dawn-time} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43267
msgid "Custom time for the transition from night to day in the morning---@code{\"HH:MM\"} format.  When specified, solar elevation is not used to determine the daytime/nighttime period."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43268
#, fuzzy, no-wrap
msgid "@code{dusk-time} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43271
msgid "Likewise, custom time for the transition from day to night in the evening."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43276
msgid "Extra content appended as-is to the Redshift configuration file.  Run @command{man redshift} for more information about the configuration file format."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43281
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "home-dbus-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:43284
msgid "This is the service type for running a session-specific D-Bus, for unprivileged applications that require D-Bus to be running."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:43286
#, fuzzy, no-wrap
msgid "{Data Type} home-dbus-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:43288
#, fuzzy
msgid "The configuration record for @code{home-dbus-service-type}."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:43290
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{dbus} (default: @code{dbus})"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:43292
#, fuzzy
#| msgid "Package management commands."
msgid "The package providing the @code{/bin/dbus-daemon} command."
msgstr "Comandos de gerenciamento de pacote."

#. type: defvar
#: guix-git/doc/guix.texi:43295
#, fuzzy, no-wrap
msgid "home-unclutter-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:43301
msgid "This is the service type for Unclutter, a program that runs on the background of an X11 session and detects when the X pointer hasn't moved for a specified idle timeout, after which it hides the cursor so that you can focus on the text underneath.  Its associated value must be a @code{home-unclutter-configuration} record, as shown below."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43304
msgid "A typical configuration, where we manually specify the idle timeout (in seconds), might look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:43309
#, no-wrap
msgid ""
"(service home-unclutter-service-type\n"
"         (home-unclutter-configuration\n"
"          (idle-timeout 2)))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:43312
#, fuzzy, no-wrap
msgid "{Data Type} home-unclutter-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:43314
#, fuzzy
msgid "The configuration record for @code{home-unclutter-service-type}."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:43316
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{unclutter} (default: @code{unclutter}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:43318
#, fuzzy
#| msgid "The GPM package to use."
msgid "Unclutter package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:43319
#, fuzzy, no-wrap
#| msgid "@code{debug?} (default: @code{#f})"
msgid "@code{idle-timeout} (default: @code{5}) (type: integer)"
msgstr "@code{debug?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43321
msgid "A timeout in seconds after which to hide cursor."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43325
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "home-xmodmap-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:43331
msgid "This is the service type for the @uref{https://gitlab.freedesktop.org/xorg/app/xmodmap,xmodmap} utility to modify keymaps and pointer button mappings under the Xorg display server.  Its associated value must be a @code{home-xmodmap-configuration} record, as shown below."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43339
msgid "The @code{key-map} field takes a list of objects, each of which is either a @dfn{statement} (a string) or an @dfn{assignment} (a pair of strings).  As an example, the snippet below swaps around the @kbd{Caps_Lock} and the @kbd{Control_L} keys, by first removing the keysyms (on the right-hand side) from the corresponding modifier maps (on the left-hand side), re-assigning them by swapping each other out, and finally adding back the keysyms to the modifier maps."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:43349
#, no-wrap
msgid ""
"(service home-xmodmap-service-type\n"
"         (home-xmodmap-configuration\n"
"          (key-map '((\"remove Lock\" . \"Caps_Lock\")\n"
"                     (\"remove Control\" . \"Control_L\")\n"
"                     (\"keysym Control_L\" . \"Caps_Lock\")\n"
"                     (\"keysym Caps_Lock\" . \"Control_L\")\n"
"                     (\"add Lock\" . \"Caps_Lock\")\n"
"                     (\"add Control\" . \"Control_L\")))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:43352
#, fuzzy, no-wrap
msgid "{Data Type} home-xmodmap-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:43355
#, fuzzy
msgid "The configuration record for @code{home-xmodmap-service-type}.  Its available fields are:"
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:43357
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{xmodmap} (default: @code{xmodmap}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:43359
#, fuzzy
#| msgid "The GPM package to use."
msgid "The @code{xmodmap} package to use."
msgstr "O pacote GPM a ser usado."

#. type: item
#: guix-git/doc/guix.texi:43360
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{key-map} (default: @code{'()}) (type: list)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43362
msgid "The list of expressions to be read by @code{xmodmap} on service startup."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:43366 guix-git/doc/guix.texi:43367
#, fuzzy, no-wrap
#| msgid "Game Services"
msgid "Guix Home Services"
msgstr "Serviços de jogos"

#. type: Plain text
#: guix-git/doc/guix.texi:43371
msgid "The @code{(gnu home services guix)} module provides services for user-specific Guix configuration."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43372
#, fuzzy, no-wrap
msgid "home-channels-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:43378
msgid "This is the service type for managing @file{$XDG_CONFIG_HOME/guix/channels.scm}, the file that controls the channels received on @command{guix pull} (@pxref{Channels}).  Its associated value is a list of @code{channel} records, defined in the @code{(guix channels)} module."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43385
msgid "Generally, it is better to extend this service than to directly configure it, as its default value is the default guix channel(s)  defined by @code{%default-channels}.  If you configure this service directly, be sure to include a guix channel.  @xref{Specifying Additional Channels} and @ref{Using a Custom Guix Channel} for more details."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43387
msgid "A typical extension for adding a channel might look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:43395
#, no-wrap
msgid ""
"(simple-service 'variant-packages-service\n"
"                home-channels-service-type\n"
"                (list\n"
"                 (channel\n"
"                  (name 'variant-packages)\n"
"                  (url \"https://example.org/variant-packages.git\"))))\n"
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:43398 guix-git/doc/guix.texi:43399
#, fuzzy, no-wrap
#| msgid "Game Services"
msgid "Fonts Home Services"
msgstr "Serviços de jogos"

#. type: Plain text
#: guix-git/doc/guix.texi:43405
msgid "The @code{(gnu home services fontutils)} module provides services for user-specific Fontconfig setup.  The @uref{https://www.freedesktop.org/wiki/Software/fontconfig,Fontconfig} library is used by many applications to access fonts on the system."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43406
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "home-fontconfig-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:43412
msgid "This is the service type for generating configurations for Fontconfig.  Its associated value is a list of either strings (or gexps) pointing to fonts locations, or SXML (@pxref{SXML,,, guile, GNU Guile Reference Manual}) fragments to be converted into XML and put inside the main @code{fontconfig} node."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43418
msgid "Generally, it is better to extend this service than to directly configure it, as its default value is the default Guix Home's profile font installation path (@file{~/.guix-home/profile/share/fonts}).  If you configure this service directly, be sure to include the above directory."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43421
msgid "A typical extension for adding an additional font directory and setting a font as the default monospace font might look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:43430
#, no-wrap
msgid ""
"(simple-service 'additional-fonts-service\n"
"                home-fontconfig-service-type\n"
"                (list \"~/.nix-profile/share/fonts\"\n"
"                      '(alias\n"
"                        (family \"monospace\")\n"
"                        (prefer\n"
"                         (family \"Liberation Mono\")))))\n"
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:43433 guix-git/doc/guix.texi:43434
#, fuzzy, no-wrap
#| msgid "Sound Services"
msgid "Sound Home Services"
msgstr "Serviços de som"

#. type: Plain text
#: guix-git/doc/guix.texi:43438
msgid "The @code{(gnu home services sound)} module provides services related to sound support."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:43439
#, fuzzy, no-wrap
#| msgid "Other services."
msgid "PulseAudio, home service"
msgstr "Serviços domésticos"

#. type: cindex
#: guix-git/doc/guix.texi:43440
#, no-wrap
msgid "RTP, for PulseAudio"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43450
msgid "The following services dynamically reconfigure the @uref{https://pulseaudio.org,PulseAudio sound server}: they let you toggle broadcast of audio output over the network using the @acronym{RTP, real-time transport protocol} and, correspondingly, playback of sound received over RTP.  Once @code{home-pulseaudio-rtp-sink-service-type} is among your home services, you can start broadcasting audio output by running this command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43453 guix-git/doc/guix.texi:43519
#, no-wrap
msgid "herd start pulseaudio-rtp-sink\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43458
msgid "You can then run a PulseAudio-capable mixer, such as @code{pavucontrol} or @code{pulsemixer} (both from the same-named package) to control which audio stream(s) should be sent to the RTP ``sink''."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43465
msgid "By default, audio is broadcasted to a multicast address: any device on the @acronym{LAN, local area network} receives it and may play it.  Using multicast in this way puts a lot of pressure on the network and degrades its performance, so you may instead prefer sending to specifically one device.  The first way to do that is by specifying the IP address of the target device when starting the service:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43468
#, no-wrap
msgid "herd start pulseaudio-rtp-sink 192.168.1.42\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43472
msgid "The other option is to specify this IP address as the one to use by default in your home environment configuration:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:43476
#, no-wrap
msgid ""
"(service home-pulseaudio-rtp-sink-service-type\n"
"         \"192.168.1.42\")\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43480
msgid "On the device where you intend to receive and play the RTP stream, you can use @code{home-pulseaudio-rtp-source-service-type}, like so:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:43483
#, fuzzy, no-wrap
msgid "(service home-pulseaudio-rtp-source-service-type)\n"
msgstr "guix-publish-service-type"

#. type: Plain text
#: guix-git/doc/guix.texi:43486
msgid "This will then let you start the receiving module for PulseAudio:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43489
#, no-wrap
msgid "herd start pulseaudio-rtp-source\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43494
msgid "Again, by default it will listen on the multicast address.  If, instead, you'd like it to listen for direct incoming connections, you can do that by running:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:43498
#, no-wrap
msgid ""
"(service home-pulseaudio-rtp-source-service-type\n"
"         \"0.0.0.0\")\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43501
msgid "The reference of these services is given below."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43502
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "home-pulseaudio-rtp-sink-service-type"
msgstr "guix-publish-service-type"

#. type: defvarx
#: guix-git/doc/guix.texi:43503
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "home-pulseaudio-rtp-source-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:43506
msgid "This is the type of the service to send, respectively receive, audio streams over @acronym{RTP, real-time transport protocol}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43511
msgid "The value associated with this service is the IP address (a string)  where to send, respectively receive, the audio stream.  By default, audio is sent/received on multicast address @code{%pulseaudio-rtp-multicast-address}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43516
msgid "This service defines one Shepherd service: @code{pulseaudio-rtp-sink}, respectively @code{pulseaudio-rtp-source}.  The service is not started by default, so you have to explicitly start it when you want to turn it on, as in this example:"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43522
msgid "Stopping the Shepherd service turns off broadcasting."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43524
#, no-wrap
msgid "%pulseaudio-rtp-multicast-address"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43526
msgid "This is the multicast address used by default by the two services above."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:43528 guix-git/doc/guix.texi:43529
#, fuzzy, no-wrap
#| msgid "Game Services"
msgid "Mail Home Services"
msgstr "Serviços de jogos"

#. type: Plain text
#: guix-git/doc/guix.texi:43533
msgid "The @code{(gnu home services mail)} module provides services that help you set up the tools to work with emails in your home environment."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:43534
#, no-wrap
msgid "msmtp"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43538
msgid "@uref{https://marlam.de/msmtp, MSMTP} is a @acronym{SMTP, Simple Mail Transfer Protocol} client.  It sends mail to a predefined SMTP server that takes care of proper delivery."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43541
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "home-msmtp-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:43545
msgid "This is the service type for @command{msmtp}.  Its value must be a @code{home-msmtp-configuration}, as shown below.  It provides the @file{~/.config/msmtp/config} file."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43548
msgid "As an example, here is how you would configure @code{msmtp} for a single account:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:43562
#, no-wrap
msgid ""
"(service home-msmtp-service-type\n"
"         (home-msmtp-configuration\n"
"          (accounts\n"
"           (list\n"
"            (msmtp-account\n"
"             (name \"alice\")\n"
"             (configuration\n"
"              (msmtp-configuration\n"
"               (host \"mail.example.org\")\n"
"               (port 587)\n"
"               (user \"alice\")\n"
"               (password-eval \"pass Mail/alice\"))))))))\n"
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:43567
#, fuzzy, no-wrap
msgid "{Data Type} home-msmtp-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:43569
#, fuzzy
msgid "Available @code{home-msmtp-configuration} fields are:"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:43571
#, fuzzy, no-wrap
msgid "@code{defaults} (type: msmtp-configuration)"
msgstr "build-machine {Data Type}"

#. type: table
#: guix-git/doc/guix.texi:43573
msgid "The configuration that will be set as default for all accounts."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43574
#, fuzzy, no-wrap
#| msgid "@code{replacement} (default: @code{#f})"
msgid "@code{accounts} (default: @code{'()}) (type: list-of-msmtp-accounts)"
msgstr "@code{replacement} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43577
msgid "A list of @code{msmtp-account} records which contain information about all your accounts."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43578
#, fuzzy, no-wrap
msgid "@code{default-account} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43580
msgid "Set the default account."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43581 guix-git/doc/guix.texi:43652
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{extra-content} (default: @code{\"\"}) (type: string)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:43585
msgid "Extra content appended as-is to the configuration file.  Run @command{man msmtp} for more information about the configuration file format."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:43594
#, fuzzy, no-wrap
msgid "{Data Type} msmtp-account"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:43596
#, fuzzy
msgid "Available @code{msmtp-account} fields are:"
msgstr "build-machine {Data Type}"

#. type: table
#: guix-git/doc/guix.texi:43600
#, fuzzy
#| msgid "The host name of the remote machine."
msgid "The unique name of the account."
msgstr "O nome de host da máquina remota."

#. type: item
#: guix-git/doc/guix.texi:43601
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{configuration} (type: msmtp-configuration)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:43603
#, fuzzy
msgid "The configuration for this given account."
msgstr "Gerencie a configuração do sistema operacional."

#. type: deftp
#: guix-git/doc/guix.texi:43612
#, fuzzy, no-wrap
msgid "{Data Type} msmtp-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:43614
#, fuzzy
msgid "Available @code{msmtp-configuration} fields are:"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:43616
#, fuzzy, no-wrap
msgid "@code{auth?} (type: maybe-boolean)"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43618
#, fuzzy
#| msgid "How to enable or disable substitutes."
msgid "Enable or disable authentication."
msgstr "Como habilitar ou desabilitar substitutos."

#. type: item
#: guix-git/doc/guix.texi:43619
#, fuzzy, no-wrap
msgid "@code{tls?} (type: maybe-boolean)"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43621
msgid "Enable or disable TLS (also known as SSL) for secured connections."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43622
#, fuzzy, no-wrap
msgid "@code{tls-starttls?} (type: maybe-boolean)"
msgstr "@code{chdir} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43625
msgid "Choose the TLS variant: start TLS from within the session (‘on’, default), or tunnel the session through TLS (‘off’)."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43626
#, fuzzy, no-wrap
msgid "@code{tls-trust-file} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43629
msgid "Activate server certificate verification using a list of trusted Certification Authorities (CAs)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43634
msgid "Enable logging to the specified file.  An empty argument disables logging.  The file name ‘-’ directs the log information to standard output."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43635
#, fuzzy, no-wrap
msgid "@code{host} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43637
msgid "The SMTP server to send the mail to."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43638
#, fuzzy, no-wrap
msgid "@code{port} (type: maybe-integer)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43641
msgid "The port that the SMTP server listens on.  The default is 25 (\"smtp\"), unless TLS without STARTTLS is used, in which case it is 465 (\"smtps\")."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43644
#, fuzzy
#| msgid "Substitute Authentication"
msgid "Set the user name for authentication."
msgstr "Autenticação de substituto"

#. type: item
#: guix-git/doc/guix.texi:43645
#, fuzzy, no-wrap
msgid "@code{from} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43647
msgid "Set the envelope-from address."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:43648
#, fuzzy, no-wrap
msgid "@code{password-eval} (type: maybe-string)"
msgstr "@code{remote?} (padrão: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:43651
msgid "Set the password for authentication to the output (stdout) of the command cmd."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43656
msgid "Extra content appended as-is to the configuration block.  Run @command{man msmtp} for more information about the configuration file format."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:43663 guix-git/doc/guix.texi:43664
#, fuzzy, no-wrap
#| msgid "Messaging Services"
msgid "Messaging Home Services"
msgstr "Serviços de mensageria"

#. type: cindex
#: guix-git/doc/guix.texi:43666
#, no-wrap
msgid "znc"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43670
msgid "The @uref{https://znc.in, ZNC bouncer} can be run as a daemon to manage your IRC presence.  With the @code{(gnu home services messaging)} service, you can configure ZNC to run upon login."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43672
msgid "You will have to provide a @file{~/.znc/configs/znc.conf} seperately."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:43678
#, fuzzy, no-wrap
msgid "(service home-znc-service-type)\n"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:43680
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "home-znc-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:43683
msgid "This is the type of the ZNC home service, whose value is a @code{home-znc-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:43685
#, fuzzy, no-wrap
msgid "{Data Type} home-znc-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:43687
#, fuzzy
msgid "Available @code{home-znc-configuration} fields are:"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:43689
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{znc} (default: @code{znc}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:43691
#, fuzzy
#| msgid "The GPM package to use."
msgid "The ZNC package to use."
msgstr "O pacote GPM a ser usado."

#. type: table
#: guix-git/doc/guix.texi:43695
msgid "Extra options will be passed to @command{znc}, please run @command{man znc} for more information."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:43699 guix-git/doc/guix.texi:43700
#, fuzzy, no-wrap
#| msgid "Game Services"
msgid "Media Home Services"
msgstr "Serviços de jogos"

#. type: cindex
#: guix-git/doc/guix.texi:43702
#, no-wrap
msgid "kodi"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43706
msgid "The @uref{https://kodi.tv, Kodi media center} can be run as a daemon on a media server.  With the @code{(gnu home services kodi)} service, you can configure Kodi to run upon login."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:43714
#, no-wrap
msgid ""
"(service home-kodi-service-type\n"
"  (home-kodi-configuration\n"
"   (extra-options '(\"--settings=\"<settings-file>\"))))\n"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:43716
#, fuzzy, no-wrap
#| msgid "guix-publish-service-type"
msgid "home-kodi-service-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:43719
msgid "This is the type of the Kodi home service, whose value is a @code{home-kodi-configuration} object."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:43721
#, fuzzy, no-wrap
msgid "{Data Type} home-kodi-configuration"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:43723
#, fuzzy
msgid "Available @code{home-kodi-configuration} fields are:"
msgstr "build-machine {Data Type}"

#. type: item
#: guix-git/doc/guix.texi:43725
#, fuzzy, no-wrap
#| msgid "@code{dbus?} (default: @code{#t})"
msgid "@code{kodi} (default: @code{kodi}) (type: file-like)"
msgstr "@code{dbus?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:43727
#, fuzzy
msgid "The Kodi package to use."
msgstr "O pacote GPM a ser usado."

#. type: table
#: guix-git/doc/guix.texi:43731
msgid "Extra options will be passed to @command{kodi}, please run @command{man kodi} for more information."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:43736
#, fuzzy, no-wrap
#| msgid "Invoking @command{guix size}"
msgid "Invoking @command{guix home}"
msgstr "Invocando @command{guix size}"

#. type: command{#1}
#: guix-git/doc/guix.texi:43738
#, fuzzy, no-wrap
#| msgid "# guix install hello\n"
msgid "guix home"
msgstr "# guix install hello\n"

#. type: Plain text
#: guix-git/doc/guix.texi:43743
msgid "Once you have written a home environment declaration (@pxref{Declaring the Home Environment,,,,}, it can be @dfn{instantiated} using the @command{guix home} command.  The synopsis is:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43746
#, no-wrap
msgid "guix home @var{options}@dots{} @var{action} @var{file}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:43753
msgid "@var{file} must be the name of a file containing a @code{home-environment} declaration.  @var{action} specifies how the home environment is instantiated, but there are few auxiliary actions which don't instantiate it.  Currently the following values are supported:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43758
msgid "Display available home service type definitions that match the given regular expressions, sorted by relevance:"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:43760
#, no-wrap
msgid "shell-profile"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43771
#, no-wrap
msgid ""
"$ guix home search shell\n"
"name: home-shell-profile\n"
"location: gnu/home/services/shells.scm:100:2\n"
"extends: home-files\n"
"description: Create `~/.profile', which is used for environment initialization of POSIX compliant login shells.\n"
"+ This service type can be extended with a list of file-like objects.\n"
"relevance: 6\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43777
#, no-wrap
msgid ""
"name: home-fish\n"
"location: gnu/home/services/shells.scm:640:2\n"
"extends: home-files home-profile\n"
"description: Install and configure Fish, the friendly interactive shell.\n"
"relevance: 3\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43783
#, no-wrap
msgid ""
"name: home-zsh\n"
"location: gnu/home/services/shells.scm:290:2\n"
"extends: home-files home-profile\n"
"description: Install and configure Zsh.\n"
"relevance: 1\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43789
#, no-wrap
msgid ""
"name: home-bash\n"
"location: gnu/home/services/shells.scm:508:2\n"
"extends: home-files home-profile\n"
"description: Install and configure GNU Bash.\n"
"relevance: 1\n"
"\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43796
msgid "As for @command{guix search}, the result is written in @code{recutils} format, which makes it easy to filter the output (@pxref{Top, GNU recutils databases,, recutils, GNU recutils manual})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43801
msgid "Spawn a shell in an isolated environment---a @dfn{container}---containing your home as specified by @var{file}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43804
msgid "For example, this is how you would start an interactive shell in a container with your home:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43812
msgid "This is a throw-away container where you can lightheartedly fiddle with files; any changes made within the container, any process started---all this disappears as soon as you exit that shell."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43814
msgid "As with @command{guix shell}, several options control that container:"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43819
msgid "Enable networking within the container (it is disabled by default)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43826
msgid "As with @command{guix shell}, make directory @var{source} of the host system available as @var{target} inside the container---read-only if you pass @option{--expose}, and writable if you pass @option{--share} (@pxref{Invoking guix shell, @option{--expose} and @option{--share}})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43832
msgid "Additionally, you can run a command in that container, instead of spawning an interactive shell.  For instance, here is how you would check which Shepherd services are started in a throw-away home container:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43835
#, no-wrap
msgid "guix home container config.scm -- herd status\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43839
msgid "The command to run in the container must come after @code{--} (double hyphen)."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43844
msgid "Edit or view the definition of the given Home service types."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43848
msgid "For example, the command below opens your editor, as specified by the @env{EDITOR} environment variable, on the definition of the @code{home-mcron} service type:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43851
#, fuzzy, no-wrap
#| msgid "Invoking guix describe"
msgid "guix home edit home-mcron\n"
msgstr "guix home describe\n"

#. type: table
#: guix-git/doc/guix.texi:43861
msgid "Build the home environment described in @var{file}, and switch to it.  Switching means that the activation script will be evaluated and (in basic scenario) symlinks to configuration files generated from @code{home-environment} declaration will be created in @file{~}.  If the file with the same path already exists in home folder it will be moved to @file{~/@var{timestamp}-guix-home-legacy-configs-backup}, where @var{timestamp} is a current UNIX epoch time."
msgstr ""

#. type: quotation
#: guix-git/doc/guix.texi:43866
msgid "It is highly recommended to run @command{guix pull} once before you run @command{guix home reconfigure} for the first time (@pxref{Invoking guix pull})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43873
msgid "This effects all the configuration specified in @var{file}.  The command starts Shepherd services specified in @var{file} that are not currently running; if a service is currently running, this command will arrange for it to be upgraded the next time it is stopped (e.g.@: by @code{herd stop @var{service}} or @code{herd restart @var{service}})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43879
msgid "This command creates a new generation whose number is one greater than the current generation (as reported by @command{guix home list-generations}).  If that generation already exists, it will be overwritten.  This behavior mirrors that of @command{guix package} (@pxref{Invoking guix package})."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:43880
#, no-wrap
msgid "provenance tracking, of the home environment"
msgstr "rastreamento de proveniência, do ambiente doméstico"

#. type: table
#: guix-git/doc/guix.texi:43885
msgid "Upon completion, the new home is deployed under @file{~/.guix-home}.  This directory contains @dfn{provenance meta-data}: the list of channels in use (@pxref{Channels}) and @var{file} itself, when available.  You can view the provenance information by running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43888
#, fuzzy, no-wrap
#| msgid "Invoking guix describe"
msgid "guix home describe\n"
msgstr "guix home describe\n"

#. type: table
#: guix-git/doc/guix.texi:43894
msgid "This information is useful should you later want to inspect how this particular generation was built.  In fact, assuming @var{file} is self-contained, you can later rebuild generation @var{n} of your home environment with:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43900
#, no-wrap
msgid ""
"guix time-machine \\\n"
"  -C /var/guix/profiles/per-user/@var{USER}/guix-home-@var{n}-link/channels.scm -- \\\n"
"  home reconfigure \\\n"
"  /var/guix/profiles/per-user/@var{USER}/guix-home-@var{n}-link/configuration.scm\n"
"\n"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43907
msgid "You can think of it as some sort of built-in version control! Your home is not just a binary artifact: @emph{it carries its own source}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:43913
#, fuzzy, no-wrap
#| msgid "generations"
msgid "home generations"
msgstr "gerações"

#. type: table
#: guix-git/doc/guix.texi:43916
msgid "Switch to an existing home generation.  This action atomically switches the home profile to the specified home generation."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43920
msgid "The target generation can be specified explicitly by its generation number.  For example, the following invocation would switch to home generation 7:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43923
#, fuzzy, no-wrap
#| msgid "$ guix system list-generations 10d\n"
msgid "guix home switch-generation 7\n"
msgstr "$ guix system list-generations 10d\n"

#. type: example
#: guix-git/doc/guix.texi:43934
#, fuzzy, no-wrap
#| msgid "$ guix system list-generations 10d\n"
msgid "guix home switch-generation -- -1\n"
msgstr "$ guix system list-generations 10d\n"

#. type: table
#: guix-git/doc/guix.texi:43943
msgid "Switch to the preceding home generation.  This is the inverse of @command{reconfigure}, and it is exactly the same as invoking @command{switch-generation} with an argument of @code{-1}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:43945
#, fuzzy, no-wrap
#| msgid "generations"
msgid "deleting home generations"
msgstr "gerações"

#. type: table
#: guix-git/doc/guix.texi:43950
msgid "Delete home generations, making them candidates for garbage collection (@pxref{Invoking guix gc}, for information on how to run the ``garbage collector'')."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43954
msgid "This works in the same way as @samp{guix package --delete-generations} (@pxref{Invoking guix package, @option{--delete-generations}}).  With no arguments, all home generations but the current one are deleted:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43957
#, fuzzy, no-wrap
#| msgid "$ guix system list-generations 10d\n"
msgid "guix home delete-generations\n"
msgstr "$ guix system list-generations 10d\n"

#. type: table
#: guix-git/doc/guix.texi:43961
msgid "You can also select the generations you want to delete.  The example below deletes all the home generations that are more than two months old:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43964
#, fuzzy, no-wrap
#| msgid "$ guix system list-generations 10d\n"
msgid "guix home delete-generations 2m\n"
msgstr "$ guix system list-generations 10d\n"

#. type: table
#: guix-git/doc/guix.texi:43970
msgid "Build the derivation of the home environment, which includes all the configuration files and programs needed.  This action does not actually install anything."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43974
msgid "Describe the current home generation: its file name, as well as provenance information when available."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:43981
msgid "To show installed packages in the current home generation's profile, the @code{--list-installed} flag is provided, with the same syntax that is used in @command{guix package --list-installed} (@pxref{Invoking guix package}).  For instance, the following command shows a table of all the packages with ``emacs'' in their name that are installed in the current home generation's profile:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43984
#, fuzzy, no-wrap
#| msgid "Invoking guix describe"
msgid "guix home describe --list-installed=emacs\n"
msgstr "guix home describe\n"

#. type: table
#: guix-git/doc/guix.texi:43991
msgid "List a summary of each generation of the home environment available on disk, in a human-readable way.  This is similar to the @option{--list-generations} option of @command{guix package} (@pxref{Invoking guix package})."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:43999
#, fuzzy, no-wrap
#| msgid "$ guix system list-generations 10d\n"
msgid "guix home list-generations 10d\n"
msgstr "$ guix system list-generations 10d\n"

#. type: table
#: guix-git/doc/guix.texi:44005
msgid "The @code{--list-installed} flag may also be specified, with the same syntax that is used in @command{guix home describe}.  This may be helpful if trying to determine when a package was added to the home profile."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44006
#, no-wrap
msgid "import"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:44013
msgid "Generate a @dfn{home environment} from the packages in the default profile and configuration files found in the user's home directory.  The configuration files will be copied to the specified directory, and a @file{home-configuration.scm} will be populated with the home environment.  Note that not every home service that exists is supported (@pxref{Home Services})."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44017
#, no-wrap
msgid ""
"$ guix home import ~/guix-config\n"
"guix home: '/home/alice/guix-config' populated with all the Home configuration files\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44023
msgid "And there's more! @command{guix home} also provides the following sub-commands to visualize how the services of your home environment relate to one another:"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:44025
#, fuzzy, no-wrap
#| msgid "provenance tracking, of the home environment"
msgid "service extension graph, of a home environment"
msgstr "rastreamento de proveniência, do ambiente doméstico"

#. type: table
#: guix-git/doc/guix.texi:44033
msgid "Emit to standard output the @dfn{service extension graph} of the home environment defined in @var{file} (@pxref{Service Composition}, for more information on service extensions).  By default the output is in Dot/Graphviz format, but you can choose a different format with @option{--graph-backend}, as with @command{guix graph} (@pxref{Invoking guix graph, @option{--backend}}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44038
#, no-wrap
msgid "guix home extension-graph @var{file} | xdot -\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:44042
#, fuzzy, no-wrap
#| msgid "provenance tracking, of the home environment"
msgid "Shepherd dependency graph, for a home environment"
msgstr "rastreamento de proveniência, do ambiente doméstico"

#. type: table
#: guix-git/doc/guix.texi:44047
msgid "Emit to standard output the @dfn{dependency graph} of shepherd services of the home environment defined in @var{file}.  @xref{Shepherd Services}, for more information and for an example graph."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:44063
msgid "Consider the home-environment @var{expr} evaluates to.  This is an alternative to specifying a file which evaluates to a home environment."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:44066
msgid "Instruct @command{guix home reconfigure} to allow system downgrades."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:44073
msgid "Just like @command{guix system}, @command{guix home reconfigure}, by default, prevents you from downgrading your home to older or unrelated revisions compared to the channel revisions that were used to deploy it---those shown by @command{guix home describe}.  Using @option{--allow-downgrades} allows you to bypass that check, at the risk of downgrading your home---be careful!"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:44079
#, no-wrap
msgid "documentation, searching for"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:44080
#, no-wrap
msgid "searching for documentation"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:44081
#, no-wrap
msgid "Info, documentation format"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:44082
#, no-wrap
msgid "man pages"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:44083
#, no-wrap
msgid "manual pages"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44090
msgid "In most cases packages installed with Guix come with documentation.  There are two main documentation formats: ``Info'', a browsable hypertext format used for GNU software, and ``manual pages'' (or ``man pages''), the linear documentation format traditionally found on Unix.  Info manuals are accessed with the @command{info} command or with Emacs, and man pages are accessed using @command{man}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44094
msgid "You can look for documentation of software installed on your system by keyword.  For example, the following command searches for information about ``TLS'' in Info manuals:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44102
#, no-wrap
msgid ""
"$ info -k TLS\n"
"\"(emacs)Network Security\" -- STARTTLS\n"
"\"(emacs)Network Security\" -- TLS\n"
"\"(gnutls)Core TLS API\" -- gnutls_certificate_set_verify_flags\n"
"\"(gnutls)Core TLS API\" -- gnutls_certificate_set_verify_function\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44108
msgid "The command below searches for the same keyword in man pages@footnote{The database searched by @command{man -k} is only created in profiles that contain the @code{man-db} package.}:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44114
#, no-wrap
msgid ""
"$ man -k TLS\n"
"SSL (7)              - OpenSSL SSL/TLS library\n"
"certtool (1)         - GnuTLS certificate tool\n"
"@dots {}\n"
msgstr ""
"$ man -k TLS\n"
"SSL (7)              - OpenSSL SSL/TLS library\n"
"certtool (1)         - GnuTLS certificate tool\n"
"@dots {}\n"

#. type: Plain text
#: guix-git/doc/guix.texi:44120
msgid "These searches are purely local to your computer so you have the guarantee that documentation you find corresponds to what you have actually installed, you can access it off-line, and your privacy is respected."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44123
msgid "Once you have these results, you can view the relevant documentation by running, say:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44126
#, no-wrap
msgid "$ info \"(gnutls)Core TLS API\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44130
msgid "or:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44133
#, no-wrap
msgid "$ man certtool\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44141
msgid "Info manuals contain sections and indices as well as hyperlinks like those found in Web pages.  The @command{info} reader (@pxref{Top, Info reader,, info-stnd, Stand-alone GNU Info}) and its Emacs counterpart (@pxref{Misc Help,,, emacs, The GNU Emacs Manual}) provide intuitive key bindings to navigate manuals.  @xref{Getting Started,,, info, Info: An Introduction}, for an introduction to Info navigation."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44150
msgid "The packages and systems built by Guix are intended, like most computer programs, to run on a CPU with a specific instruction set, and under a specific operating system.  Those programs are often also targeting a specific kernel and system library.  Those constraints are captured by Guix in @code{platform} records."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:44157
#, no-wrap
msgid "@code{platform} Reference"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44163
msgid "The @code{platform} data type describes a @dfn{platform}: an @acronym{ISA, instruction set architecture}, combined with an operating system and possibly additional system-wide settings such as the @acronym{ABI, application binary interface}."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:44164
#, fuzzy, no-wrap
msgid "{Data Type} platform"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:44166
#, fuzzy
msgid "This is the data type representing a platform."
msgstr "Gerencie a configuração do sistema operacional."

#. type: table
#: guix-git/doc/guix.texi:44172
msgid "This field specifies the platform's GNU triplet as a string (@pxref{Specifying Target Triplets, GNU configuration triplets,, autoconf, Autoconf})."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:44176
msgid "This string is the system type as it is known to Guix and passed, for instance, to the @option{--system} option of most commands."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:44180
msgid "It usually has the form @code{\"@var{cpu}-@var{kernel}\"}, where @var{cpu} is the target CPU and @var{kernel} the target operating system kernel."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:44184
msgid "It can be for instance @code{\"aarch64-linux\"} or @code{\"armhf-linux\"}.  You will encounter system types when you perform native builds (@pxref{Native Builds})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44185
#, fuzzy, no-wrap
msgid "@code{linux-architecture} (default: @code{#false})"
msgstr "@code{term} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:44189
msgid "This optional string field is only relevant if the kernel is Linux.  In that case, it corresponds to the ARCH variable used when building Linux, @code{\"mips\"} for instance."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:44190
#, no-wrap
msgid "glibc-dynamic-linker"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:44194
msgid "This field is the name of the GNU C Library dynamic linker for the corresponding system, as a string.  It can be @code{\"/lib/ld-linux-armhf.so.3\"}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44203
msgid "The @code{(guix platforms @dots{})} modules export the following variables, each of which is bound to a @code{platform} record."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44204
#, fuzzy, no-wrap
#| msgid "armhf-linux"
msgid "armv7-linux"
msgstr "armhf-linux"

#. type: defvar
#: guix-git/doc/guix.texi:44206
msgid "Platform targeting ARM v7 CPU running GNU/Linux."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44210
msgid "Platform targeting ARM v8 CPU running GNU/Linux."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44212
#, fuzzy, no-wrap
#| msgid "aarch64-linux"
msgid "mips64-linux"
msgstr "aarch64-linux"

#. type: defvar
#: guix-git/doc/guix.texi:44214
msgid "Platform targeting MIPS little-endian 64-bit CPU running GNU/Linux."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44216
#, fuzzy, no-wrap
msgid "powerpc-linux"
msgstr "aarch64-linux"

#. type: defvar
#: guix-git/doc/guix.texi:44218
msgid "Platform targeting PowerPC big-endian 32-bit CPU running GNU/Linux."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44222
msgid "Platform targeting PowerPC little-endian 64-bit CPU running GNU/Linux."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44226
msgid "Platform targeting RISC-V 64-bit CPU running GNU/Linux."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44230
msgid "Platform targeting x86 CPU running GNU/Linux."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44234
msgid "Platform targeting x86 64-bit CPU running GNU/Linux."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44236
#, fuzzy, no-wrap
#| msgid "i686-linux"
msgid "i686-mingw"
msgstr "i686-linux"

#. type: defvar
#: guix-git/doc/guix.texi:44239
msgid "Platform targeting x86 CPU running Windows, with run-time support from MinGW."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44241
#, fuzzy, no-wrap
#| msgid "x86_64-linux"
msgid "x86_64-mingw"
msgstr "x86_64-linux"

#. type: defvar
#: guix-git/doc/guix.texi:44244
msgid "Platform targeting x86 64-bit CPU running Windows, with run-time support from MinGW."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44249
msgid "Platform targeting x86 CPU running GNU/Hurd (also referred to as ``GNU'')."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:44254
#, fuzzy, no-wrap
#| msgid "system"
msgid "system images"
msgstr "system"

#. type: Plain text
#: guix-git/doc/guix.texi:44266
msgid "When it comes to installing Guix System for the first time on a new machine, you can basically proceed in three different ways.  The first one is to use an existing operating system on the machine to run the @command{guix system init} command (@pxref{Invoking guix system}).  The second one, is to produce an installation image (@pxref{Building the Installation Image}). This is a bootable system which role is to eventually run @command{guix system init}.  Finally, the third option would be to produce an image that is a direct instantiation of the system you wish to run.  That image can then be copied on a bootable device such as an USB drive or a memory card.  The target machine would then directly boot from it, without any kind of installation procedure."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44275
msgid "The @command{guix system image} command is able to turn an operating system definition into a bootable image.  This command supports different image types, such as @code{efi-raw}, @code{iso9660} and @code{docker}.  Any modern @code{x86_64} machine will probably be able to boot from an @code{iso9660} image.  However, there are a few machines out there that require specific image types.  Those machines, in general using @code{ARM} processors, may expect specific partitions at specific offsets."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44278
msgid "This chapter explains how to define customized system images and how to turn them into actual bootable images."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44291
msgid "The @code{image} record, described right after, allows you to define a customized bootable system image."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:44292
#, fuzzy, no-wrap
msgid "{Data Type} image"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:44294
#, fuzzy
msgid "This is the data type representing a system image."
msgstr "Gerencie a configuração do sistema operacional."

#. type: item
#: guix-git/doc/guix.texi:44296
#, fuzzy, no-wrap
#| msgid "@code{hostname} (default: @code{#f})"
msgid "@code{name} (default: @code{#false})"
msgstr "@code{hostname} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:44299
msgid "The image name as a symbol, @code{'my-iso9660} for instance.  The name is optional and it defaults to @code{#false}."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:44302
msgid "The image format as a symbol.  The following formats are supported:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44304
#, no-wrap
msgid "@code{disk-image}, a raw disk image composed of one or multiple"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:44306
#, fuzzy
#| msgid "Derivations"
msgid "partitions."
msgstr "Derivações"

#. type: item
#: guix-git/doc/guix.texi:44307
#, no-wrap
msgid "@code{compressed-qcow2}, a compressed qcow2 image composed of"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:44309
msgid "one or multiple partitions."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44310
#, fuzzy, no-wrap
#| msgid "@code{tor} (default: @code{tor})"
msgid "@code{docker}, a Docker image."
msgstr "@code{tor} (default: @code{tor})"

#. type: item
#: guix-git/doc/guix.texi:44312
#, no-wrap
msgid "@code{iso9660}, an ISO-9660 image."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44314
#, no-wrap
msgid "@code{tarball}, a tar.gz image archive."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44316
#, no-wrap
msgid "@code{wsl2}, a WSL2 image."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44320
#, fuzzy, no-wrap
#| msgid "@code{term} (default: @code{#f})"
msgid "@code{platform} (default: @code{#false})"
msgstr "@code{term} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:44324
msgid "The @code{platform} record the image is targeting (@pxref{Platforms}), @code{aarch64-linux} for instance.  By default, this field is set to @code{#false} and the image will target the host platform."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44325 guix-git/doc/guix.texi:44387
#, fuzzy, no-wrap
#| msgid "@code{cache-size} (default: @code{150})"
msgid "@code{size} (default: @code{'guess})"
msgstr "@code{cache-size} (default: @code{150})"

#. type: table
#: guix-git/doc/guix.texi:44329
msgid "The image size in bytes or @code{'guess}.  The @code{'guess} symbol, which is the default, means that the image size will be inferred based on the image content."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:44332
msgid "The image's @code{operating-system} record that is instanciated."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44333
#, fuzzy, no-wrap
msgid "@code{partition-table-type} (default: @code{'mbr})"
msgstr "@code{term} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:44336
msgid "The image partition table type as a symbol.  Possible values are @code{'mbr} and @code{'gpt}.  It default to @code{'mbr}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44337
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{partitions} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:44340
msgid "The image partitions as a list of @code{partition} records (@pxref{partition Reference})."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44341
#, fuzzy, no-wrap
#| msgid "@code{compression-level} (default: @code{3})"
msgid "@code{compression?} (default: @code{#true})"
msgstr "@code{compression-level} (padrão: @code{3})"

#. type: table
#: guix-git/doc/guix.texi:44345
msgid "Whether the image content should be compressed, as a boolean.  It defaults to @code{#true} and only applies to @code{'iso9660} image formats."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44346
#, fuzzy, no-wrap
#| msgid "@code{chroot} (default: @code{#f})"
msgid "@code{volatile-root?} (default: @code{#true})"
msgstr "@code{chroot} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:44348
msgid "Whether the image root partition should be made volatile, as a boolean."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:44353
msgid "This is achieved by using a RAM backed file system (overlayfs) that is mounted on top of the root partition by the initrd.  It defaults to @code{#true}.  When set to @code{#false}, the image root partition is mounted as read-write partition by the initrd."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44354
#, fuzzy, no-wrap
#| msgid "@code{shared?} (default: @code{#t})"
msgid "@code{shared-store?} (default: @code{#false})"
msgstr "@code{shared?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:44361
msgid "Whether the image's store should be shared with the host system, as a boolean.  This can be useful when creating images dedicated to virtual machines.  When set to @code{#false}, which is the default, the image's @code{operating-system} closure is copied to the image.  Otherwise, when set to @code{#true}, it is assumed that the host store will be made available at boot, using a @code{9p} mount for instance."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44362
#, fuzzy, no-wrap
#| msgid "@code{shared?} (default: @code{#t})"
msgid "@code{shared-network?} (default: @code{#false})"
msgstr "@code{shared?} (padrão: @code{#t})"

#. type: table
#: guix-git/doc/guix.texi:44366
msgid "Whether to use the host network interfaces within the image, as a boolean.  This is only used for the @code{'docker} image format.  It defaults to @code{#false}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44367
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{substitutable?} (default: @code{#true})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:44370
msgid "Whether the image derivation should be substitutable, as a boolean.  It defaults to @code{true}."
msgstr ""

#. type: subsection
#: guix-git/doc/guix.texi:44379
#, fuzzy, no-wrap
#| msgid "origin Reference"
msgid "@code{partition} Reference"
msgstr "Referência do origin"

#. type: Plain text
#: guix-git/doc/guix.texi:44382
msgid "In @code{image} record may contain some partitions."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:44383
#, fuzzy, no-wrap
msgid "{Data Type} partition"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:44385
#, fuzzy
msgid "This is the data type representing an image partition."
msgstr "Gerencie a configuração do sistema operacional."

#. type: table
#: guix-git/doc/guix.texi:44391
msgid "The partition size in bytes or @code{'guess}.  The @code{'guess} symbol, which is the default, means that the partition size will be inferred based on the partition content."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44392
#, fuzzy, no-wrap
#| msgid "@code{users} (default: @code{#f})"
msgid "@code{offset} (default: @code{0})"
msgstr "@code{users} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:44396
msgid "The partition's start offset in bytes, relative to the image start or the previous partition end.  It defaults to @code{0} which means that there is no offset applied."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44397
#, fuzzy, no-wrap
#| msgid "@code{system?} (default: @code{#f})"
msgid "@code{file-system} (default: @code{\"ext4\"})"
msgstr "@code{system?} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:44401
msgid "The partition file system as a string, defaulting to @code{\"ext4\"}.  The supported values are @code{\"vfat\"}, @code{\"fat16\"}, @code{\"fat32\"} and @code{\"ext4\"}."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44402
#, fuzzy, no-wrap
#| msgid "@code{features} (default: @code{'()})"
msgid "@code{file-system-options} (default: @code{'()})"
msgstr "@code{features} (padrão: @code{'()})"

#. type: table
#: guix-git/doc/guix.texi:44406
msgid "The partition file system creation options that should be passed to the partition creation tool, as a list of strings.  This is only supported when creating @code{\"ext4\"} partitions."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:44409
msgid "See the @code{\"extended-options\"} man page section of the @code{\"mke2fs\"} tool for a more complete reference."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:44413
msgid "The partition label as a mandatory string, @code{\"my-root\"} for instance."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44414
#, fuzzy, no-wrap
#| msgid "@code{uid} (default: @code{#f})"
msgid "@code{uuid} (default: @code{#false})"
msgstr "@code{uid} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:44418
msgid "The partition UUID as an @code{uuid} record (@pxref{File Systems}).  By default it is @code{#false}, which means that the partition creation tool will attribute a random UUID to the partition."
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:44425
msgid "The partition flags as a list of symbols.  Possible values are @code{'boot} and @code{'esp}.  The @code{'boot} flags should be set if you want to boot from this partition.  Exactly one partition should have this flag set, usually the root one. The @code{'esp} flag identifies a UEFI System Partition."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44426
#, fuzzy, no-wrap
#| msgid "@code{term} (default: @code{#f})"
msgid "@code{initializer} (default: @code{#false})"
msgstr "@code{term} (default: @code{#f})"

#. type: table
#: guix-git/doc/guix.texi:44431
msgid "The partition initializer procedure as a gexp.  This procedure is called to populate a partition.  If no initializer is passed, the @code{initialize-root-partition} procedure from the @code{(gnu build image)} module is used."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44440
msgid "Let's say you would like to create an MBR image with three distinct partitions:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44442
#, no-wrap
msgid "The @acronym{ESP, EFI System Partition}, a partition of"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:44444
msgid "40@tie{}MiB at offset 1024@tie{}KiB with a vfat file system."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44445
#, no-wrap
msgid "an ext4 partition of 50@tie{}MiB data file, and labeled ``data''."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44447
#, no-wrap
msgid "an ext4 bootable partition containing the @code{%simple-os}"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:44449
#, fuzzy
#| msgid "operating-system"
msgid "operating-system."
msgstr "sistema operacional"

#. type: Plain text
#: guix-git/doc/guix.texi:44453
msgid "You would then write the following image definition in a @code{my-image.scm} file for instance."
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:44460
#, no-wrap
msgid ""
"(use-modules (gnu)\n"
"             (gnu image)\n"
"             (gnu tests)\n"
"             (gnu system image)\n"
"             (guix gexp))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:44462 guix-git/doc/guix.texi:44564
#, no-wrap
msgid ""
"(define MiB (expt 2 20))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:44491
#, no-wrap
msgid ""
"(image\n"
" (format 'disk-image)\n"
" (operating-system %simple-os)\n"
" (partitions\n"
"  (list\n"
"   (partition\n"
"    (size (* 40 MiB))\n"
"    (offset (* 1024 1024))\n"
"    (label \"GNU-ESP\")\n"
"    (file-system \"vfat\")\n"
"    (flags '(esp))\n"
"    (initializer (gexp initialize-efi-partition)))\n"
"   (partition\n"
"    (size (* 50 MiB))\n"
"    (label \"DATA\")\n"
"    (file-system \"ext4\")\n"
"    (initializer #~(lambda* (root . rest)\n"
"                     (mkdir root)\n"
"                     (call-with-output-file\n"
"                         (string-append root \"/data\")\n"
"                       (lambda (port)\n"
"                         (format port \"my-data\"))))))\n"
"   (partition\n"
"    (size 'guess)\n"
"    (label root-label)\n"
"    (file-system \"ext4\")\n"
"    (flags '(boot))\n"
"    (initializer (gexp initialize-root-partition))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44499
msgid "Note that the first and third partitions use generic initializers procedures, initialize-efi-partition and initialize-root-partition respectively.  The initialize-efi-partition installs a GRUB EFI loader that is loading the GRUB bootloader located in the root partition.  The initialize-root-partition instantiates a complete system as defined by the @code{%simple-os} operating-system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44501
msgid "You can now run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44504
#, fuzzy, no-wrap
#| msgid "$ guix system list-generations 10d\n"
msgid "guix system image my-image.scm\n"
msgstr "$ guix system list-generations 10d\n"

#. type: Plain text
#: guix-git/doc/guix.texi:44508
msgid "to instantiate the @code{image} definition.  That produces a disk image which has the expected structure:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44517
#, no-wrap
msgid ""
"$ parted $(guix system image my-image.scm) print\n"
"@dots{}\n"
"Model:  (file)\n"
"Disk /gnu/store/yhylv1bp5b2ypb97pd3bbhz6jk5nbhxw-disk-image: 1714MB\n"
"Sector size (logical/physical): 512B/512B\n"
"Partition Table: msdos\n"
"Disk Flags:\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44522
#, no-wrap
msgid ""
"Number  Start   End     Size    Type     File system  Flags\n"
" 1      1049kB  43.0MB  41.9MB  primary  fat16        esp\n"
" 2      43.0MB  95.4MB  52.4MB  primary  ext4\n"
" 3      95.4MB  1714MB  1619MB  primary  ext4         boot\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44527
msgid "The size of the @code{boot} partition has been inferred to @code{1619MB} so that it is large enough to host the @code{%simple-os} operating-system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44532
msgid "You can also use existing @code{image} record definitions and inherit from them to simplify the @code{image} definition.  The @code{(gnu system image)} module provides the following @code{image} definition variables."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44533
#, fuzzy, no-wrap
msgid "efi-disk-image"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44537
msgid "A MBR disk-image composed of two partitions: a 64 bits ESP partition and a ROOT boot partition.  This image can be used on most @code{x86_64} and @code{i686} machines, supporting BIOS or UEFI booting."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44539
#, fuzzy, no-wrap
msgid "efi32-disk-image"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44541
msgid "Same as @code{efi-disk-image} but with a 32 bits EFI partition."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44543
#, no-wrap
msgid "iso9660-image"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44546
msgid "An ISO-9660 image composed of a single bootable partition.  This image can also be used on most @code{x86_64} and @code{i686} machines."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44548
#, no-wrap
msgid "docker-image"
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44550
msgid "A Docker image that can be used to spawn a Docker container."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44554
msgid "Using the @code{efi-disk-image} we can simplify our previous @code{image} declaration this way:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:44562
#, no-wrap
msgid ""
"(use-modules (gnu)\n"
"             (gnu image)\n"
"             (gnu tests)\n"
"             (gnu system image)\n"
"             (guix gexp)\n"
"             (ice-9 match))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:44576
#, no-wrap
msgid ""
"(define data\n"
"  (partition\n"
"   (size (* 50 MiB))\n"
"   (label \"DATA\")\n"
"   (file-system \"ext4\")\n"
"   (initializer #~(lambda* (root . rest)\n"
"                    (mkdir root)\n"
"                    (call-with-output-file\n"
"                        (string-append root \"/data\")\n"
"                      (lambda (port)\n"
"                        (format port \"my-data\")))))))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:44584
#, no-wrap
msgid ""
"(image\n"
" (inherit efi-disk-image)\n"
" (operating-system %simple-os)\n"
" (partitions\n"
"  (match (image-partitions efi-disk-image)\n"
"    ((esp root)\n"
"     (list esp data root)))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44588
msgid "This will give the exact same @code{image} instantiation but the @code{image} declaration is simpler."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44597
msgid "The @command{guix system image} command can, as we saw above, take a file containing an @code{image} declaration as argument and produce an actual disk image from it.  The same command can also handle a file containing an @code{operating-system} declaration as argument.  In that case, how is the @code{operating-system} turned into an image?"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44601
msgid "That's where the @code{image-type} record intervenes.  This record defines how to transform an @code{operating-system} record into an @code{image} record."
msgstr ""

#. type: deftp
#: guix-git/doc/guix.texi:44602
#, fuzzy, no-wrap
msgid "{Data Type} image-type"
msgstr "build-machine {Data Type}"

#. type: deftp
#: guix-git/doc/guix.texi:44604
#, fuzzy
msgid "This is the data type representing an image-type."
msgstr "Gerencie a configuração do sistema operacional."

#. type: table
#: guix-git/doc/guix.texi:44609
msgid "The image-type name as a mandatory symbol, @code{'efi32-raw} for instance."
msgstr ""

#. type: code{#1}
#: guix-git/doc/guix.texi:44610
#, no-wrap
msgid "constructor"
msgstr ""

#. type: table
#: guix-git/doc/guix.texi:44614
msgid "The image-type constructor, as a mandatory procedure that takes an @code{operating-system} record as argument and returns an @code{image} record."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44620
msgid "There are several @code{image-type} records provided by the @code{(gnu system image)} and the @code{(gnu system images @dots{})} modules."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44621
#, fuzzy, no-wrap
msgid "efi-raw-image-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44623
msgid "Build an image based on the @code{efi-disk-image} image."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44625
#, fuzzy, no-wrap
msgid "efi32-raw-image-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44627
msgid "Build an image based on the @code{efi32-disk-image} image."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44629
#, fuzzy, no-wrap
msgid "qcow2-image-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44632
msgid "Build an image based on the @code{efi-disk-image} image but with the @code{compressed-qcow2} image format."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44634
#, fuzzy, no-wrap
msgid "iso-image-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44636
msgid "Build a compressed image based on the @code{iso9660-image} image."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44638
#, fuzzy, no-wrap
msgid "uncompressed-iso-image-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44641
msgid "Build an image based on the @code{iso9660-image} image but with the @code{compression?} field set to @code{#false}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44643
#, fuzzy, no-wrap
msgid "docker-image-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44645
msgid "Build an image based on the @code{docker-image} image."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44647
#, fuzzy, no-wrap
msgid "raw-with-offset-image-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44651
msgid "Build an MBR image with a single partition starting at a @code{1024KiB} offset.  This is useful to leave some room to install a bootloader in the post-MBR gap."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44653
#, fuzzy, no-wrap
msgid "pinebook-pro-image-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44658
msgid "Build an image that is targeting the Pinebook Pro machine.  The MBR image contains a single partition starting at a @code{9MiB} offset.  The @code{u-boot-pinebook-pro-rk3399-bootloader} bootloader will be installed in this gap."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44660
#, fuzzy, no-wrap
msgid "rock64-image-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44665
msgid "Build an image that is targeting the Rock64 machine.  The MBR image contains a single partition starting at a @code{16MiB} offset.  The @code{u-boot-rock64-rk3328-bootloader} bootloader will be installed in this gap."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44667
#, fuzzy, no-wrap
msgid "novena-image-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44670
msgid "Build an image that is targeting the Novena machine.  It has the same characteristics as @code{raw-with-offset-image-type}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44672
#, fuzzy, no-wrap
msgid "pine64-image-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44675
msgid "Build an image that is targeting the Pine64 machine.  It has the same characteristics as @code{raw-with-offset-image-type}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44677
#, fuzzy, no-wrap
msgid "hurd-image-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44681
msgid "Build an image that is targeting a @code{i386} machine running the Hurd kernel.  The MBR image contains a single ext2 partitions with specific @code{file-system-options} flags."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44683
#, fuzzy, no-wrap
msgid "hurd-qcow2-image-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44686
msgid "Build an image similar to the one built by the @code{hurd-image-type} but with the @code{format} set to @code{'compressed-qcow2}."
msgstr ""

#. type: defvar
#: guix-git/doc/guix.texi:44688
#, fuzzy, no-wrap
msgid "wsl2-image-type"
msgstr "guix-publish-service-type"

#. type: defvar
#: guix-git/doc/guix.texi:44691
msgid "Build an image for the @acronym{WSL2, Windows Subsystem for Linux 2}.  It can be imported by running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44695
#, no-wrap
msgid ""
"wsl --import Guix ./guix ./wsl2-image.tar.gz\n"
"wsl -d Guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44703
msgid "So, if we get back to the @code{guix system image} command taking an @code{operating-system} declaration as argument.  By default, the @code{efi-raw-image-type} is used to turn the provided @code{operating-system} into an actual bootable image."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44709
msgid "To use a different @code{image-type}, the @code{--image-type} option can be used.  The @code{--list-image-types} option will list all the supported image types.  It turns out to be a textual listing of all the @code{image-types} variables described just above (@pxref{Invoking guix system})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44716
msgid "Let's take the example of the Pine64, an ARM based machine.  To be able to produce an image targeting this board, we need the following elements:"
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44718
#, no-wrap
msgid "An @code{operating-system} record containing at least"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:44721
msgid "an appropriate kernel (@code{linux-libre-arm64-generic}) and bootloader @code{u-boot-pine64-lts-bootloader}) for the Pine64."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44722
#, no-wrap
msgid "Possibly, an @code{image-type} record providing a way to"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:44725
msgid "turn an @code{operating-system} record to an @code{image} record suitable for the Pine64."
msgstr ""

#. type: item
#: guix-git/doc/guix.texi:44726
#, no-wrap
msgid "An actual @code{image} that can be instantiated with the"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:44728
msgid "@command{guix system image} command."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44734
msgid "The @code{(gnu system images pine64)} module provides all those elements: @code{pine64-barebones-os}, @code{pine64-image-type} and @code{pine64-barebones-raw-image} respectively."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44737
msgid "The module returns the @code{pine64-barebones-raw-image} in order for users to be able to run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44740
#, no-wrap
msgid "guix system image gnu/system/images/pine64.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44745
msgid "Now, thanks to the @code{pine64-image-type} record declaring the @code{'pine64-raw} @code{image-type}, one could also prepare a @code{my-pine.scm} file with the following content:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:44751
#, no-wrap
msgid ""
"(use-modules (gnu system images pine64))\n"
"(operating-system\n"
"  (inherit pine64-barebones-os)\n"
"  (timezone \"Europe/Athens\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44754
msgid "to customize the @code{pine64-barebones-os}, and run:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44757
#, no-wrap
msgid "$ guix system image --image-type=pine64-raw my-pine.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44762
msgid "Note that there are other modules in the @code{gnu/system/images} directory targeting @code{Novena}, @code{Pine64}, @code{PinebookPro} and @code{Rock64} machines."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:44766
#, no-wrap
msgid "debugging files"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44772
msgid "Program binaries, as produced by the GCC compilers for instance, are typically written in the ELF format, with a section containing @dfn{debugging information}.  Debugging information is what allows the debugger, GDB, to map binary code to source code; it is required to debug a compiled program in good conditions."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44776
msgid "This chapter explains how to use separate debug info when packages provide it, and how to rebuild packages with debug info when it's missing."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44792
msgid "The problem with debugging information is that is takes up a fair amount of disk space.  For example, debugging information for the GNU C Library weighs in at more than 60 MiB@.  Thus, as a user, keeping all the debugging info of all the installed programs is usually not an option.  Yet, space savings should not come at the cost of an impediment to debugging---especially in the GNU system, which should make it easier for users to exert their computing freedom (@pxref{GNU Distribution})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44799
msgid "Thankfully, the GNU Binary Utilities (Binutils) and GDB provide a mechanism that allows users to get the best of both worlds: debugging information can be stripped from the binaries and stored in separate files.  GDB is then able to load debugging information from those files, when they are available (@pxref{Separate Debug Files,,, gdb, Debugging with GDB})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44807
msgid "The GNU distribution takes advantage of this by storing debugging information in the @code{lib/debug} sub-directory of a separate package output unimaginatively called @code{debug} (@pxref{Packages with Multiple Outputs}).  Users can choose to install the @code{debug} output of a package when they need it.  For instance, the following command installs the debugging information for the GNU C Library and for GNU Guile:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44810
#, no-wrap
msgid "guix install glibc:debug guile:debug\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44816
msgid "GDB must then be told to look for debug files in the user's profile, by setting the @code{debug-file-directory} variable (consider setting it from the @file{~/.gdbinit} file, @pxref{Startup,,, gdb, Debugging with GDB}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44819
#, no-wrap
msgid "(gdb) set debug-file-directory ~/.guix-profile/lib/debug\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44823
msgid "From there on, GDB will pick up debugging information from the @file{.debug} files under @file{~/.guix-profile/lib/debug}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44828
msgid "Below is an alternative GDB script which is useful when working with other profiles.  It takes advantage of the optional Guile integration in GDB.  This snippet is included by default on Guix System in the @file{~/.gdbinit} file."
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44836
#, no-wrap
msgid ""
"guile\n"
"(use-modules (gdb))\n"
"(execute (string-append \"set debug-file-directory \"\n"
"                        (or (getenv \"GDB_DEBUG_FILE_DIRECTORY\")\n"
"                            \"~/.guix-profile/lib/debug\")))\n"
"end\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44844
msgid "In addition, you will most likely want GDB to be able to show the source code being debugged.  To do that, you will have to unpack the source code of the package of interest (obtained with @code{guix build --source}, @pxref{Invoking guix build}), and to point GDB to that source directory using the @code{directory} command (@pxref{Source Path, @code{directory},, gdb, Debugging with GDB})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44852
msgid "The @code{debug} output mechanism in Guix is implemented by the @code{gnu-build-system} (@pxref{Build Systems}).  Currently, it is opt-in---debugging information is available only for the packages with definitions explicitly declaring a @code{debug} output.  To check whether a package has a @code{debug} output, use @command{guix package --list-available} (@pxref{Invoking guix package})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44854
msgid "Read on for how to deal with packages lacking a @code{debug} output."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44866
msgid "As we saw above, some packages, but not all, provide debugging info in a @code{debug} output.  What can you do when debugging info is missing? The @option{--with-debug-info} option provides a solution to that: it allows you to rebuild the package(s) for which debugging info is missing---and only those---and to graft those onto the application you're debugging.  Thus, while it's not as fast as installing a @code{debug} output, it is relatively inexpensive."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44871
msgid "Let's illustrate that.  Suppose you're experiencing a bug in Inkscape and would like to see what's going on in GLib, a library that's deep down in its dependency graph.  As it turns out, GLib does not have a @code{debug} output and the backtrace GDB shows is all sadness:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44882
#, no-wrap
msgid ""
"(gdb) bt\n"
"#0  0x00007ffff5f92190 in g_getenv ()\n"
"   from /gnu/store/@dots{}-glib-2.62.6/lib/libglib-2.0.so.0\n"
"#1  0x00007ffff608a7d6 in gobject_init_ctor ()\n"
"   from /gnu/store/@dots{}-glib-2.62.6/lib/libgobject-2.0.so.0\n"
"#2  0x00007ffff7fe275a in call_init (l=<optimized out>, argc=argc@@entry=1, argv=argv@@entry=0x7fffffffcfd8,\n"
"    env=env@@entry=0x7fffffffcfe8) at dl-init.c:72\n"
"#3  0x00007ffff7fe2866 in call_init (env=0x7fffffffcfe8, argv=0x7fffffffcfd8, argc=1, l=<optimized out>)\n"
"    at dl-init.c:118\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44886
msgid "To address that, you install Inkscape linked against a variant GLib that contains debug info:"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44892
msgid "This time, debugging will be a whole lot nicer:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44910
#, no-wrap
msgid ""
"$ gdb --args sh -c 'exec inkscape'\n"
"@dots{}\n"
"(gdb) b g_getenv\n"
"Function \"g_getenv\" not defined.\n"
"Make breakpoint pending on future shared library load? (y or [n]) y\n"
"Breakpoint 1 (g_getenv) pending.\n"
"(gdb) r\n"
"Starting program: /gnu/store/@dots{}-profile/bin/sh -c exec\\ inkscape\n"
"@dots{}\n"
"(gdb) bt\n"
"#0  g_getenv (variable=variable@@entry=0x7ffff60c7a2e \"GOBJECT_DEBUG\") at ../glib-2.62.6/glib/genviron.c:252\n"
"#1  0x00007ffff608a7d6 in gobject_init () at ../glib-2.62.6/gobject/gtype.c:4380\n"
"#2  gobject_init_ctor () at ../glib-2.62.6/gobject/gtype.c:4493\n"
"#3  0x00007ffff7fe275a in call_init (l=<optimized out>, argc=argc@@entry=3, argv=argv@@entry=0x7fffffffd088,\n"
"    env=env@@entry=0x7fffffffd0a8) at dl-init.c:72\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44913
msgid "Much better!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44917
msgid "Note that there can be packages for which @option{--with-debug-info} will not have the desired effect.  @xref{Package Transformation Options, @option{--with-debug-info}}, for more information."
msgstr ""

#. type: chapter
#: guix-git/doc/guix.texi:44919
#, no-wrap
msgid "Using @TeX{} and @LaTeX{}"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:44921
#, fuzzy, no-wrap
#| msgid "packages"
msgid "@TeX{} packages"
msgstr "pacotes"

#. type: cindex
#: guix-git/doc/guix.texi:44922
#, fuzzy, no-wrap
#| msgid "packages"
msgid "@LaTeX{} packages"
msgstr "pacotes"

#. type: Plain text
#: guix-git/doc/guix.texi:44930
msgid "Guix provides packages for the @TeX{}, @LaTeX{}, ConTeXt, LuaTeX, and related typesetting systems, taken from the @uref{https://www.tug.org/texlive/, @TeX{} Live distribution}.  However, because @TeX{} Live is so huge and because finding your way in this maze is tricky, we thought that you, dear user, would welcome guidance on how to deploy the relevant packages so you can compile your @TeX{} and @LaTeX{} documents."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44932
msgid "@TeX{} Live currently comes in two flavors in Guix:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:44938
msgid "The ``monolithic'' @code{texlive} package: it comes with @emph{every single @TeX{} Live package} (more than 7,000 of them), but it is huge (more than 4@tie{}GiB for a single package!)."
msgstr ""

#. type: itemize
#: guix-git/doc/guix.texi:44948
msgid "The ``modular'' @code{texlive-} packages: you install @code{texlive-base}, which provides core functionality and the main commands---@command{pdflatex}, @command{dvips}, @command{luatex}, @command{mf}, etc.---together with individual packages that provide just the features you need---@code{texlive-listings} for the @code{listings} package, @code{texlive-hyperref} for @code{hyperref}, @code{texlive-beamer} for Beamer, @code{texlive-pgf} for PGF/TikZ, and so on."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44953
msgid "We recommend using the modular package set because it is much less resource-hungry.  To build your documents, you would use commands such as:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44957
#, no-wrap
msgid ""
"guix shell texlive-base texlive-wrapfig \\\n"
"  texlive-hyperref texlive-cm-super -- pdflatex doc.tex\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44961
msgid "You can quickly end up with unreasonably long command lines though.  The solution is to instead write a manifest, for example like this one:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:44965
#, fuzzy, no-wrap
#| msgid ""
#| "(specifications->manifest\n"
#| " '(\"emacs\" \"guile@@2.2\" \"guile@@2.2:debug\"))\n"
msgid ""
"(specifications->manifest\n"
" '(\"rubber\"\n"
"\n"
msgstr ""
"(specifications->manifest\n"
" '(\"emacs\" \"guile@@2.2\" \"guile@@2.2:debug\"))\n"

#. type: lisp
#: guix-git/doc/guix.texi:44968
#, no-wrap
msgid ""
"   \"texlive-base\"\n"
"   \"texlive-wrapfig\"\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:44971
#, no-wrap
msgid ""
"   \"texlive-microtype\"\n"
"   \"texlive-listings\" \"texlive-hyperref\"\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:44974
#, no-wrap
msgid ""
"   ;; PGF/TikZ\n"
"   \"texlive-pgf\"\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:44978
#, no-wrap
msgid ""
"   ;; Additional fonts.\n"
"   \"texlive-cm-super\" \"texlive-amsfonts\"\n"
"   \"texlive-times\" \"texlive-helvetic\" \"texlive-courier\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44981
msgid "You can then pass it to any command with the @option{-m} option:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:44984
#, no-wrap
msgid "guix shell -m manifest.scm -- pdflatex doc.tex\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44992
msgid "@xref{Writing Manifests}, for more on manifests.  In the future, we plan to provide packages for @TeX{} Live @dfn{collections}---``meta-packages'' such as @code{fontsrecommended}, @code{humanities}, or @code{langarabic} that provide the set of packages needed in this particular domain.  That will allow you to list fewer packages."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:44998
msgid "The main difficulty here is that using the modular package set forces you to select precisely the packages that you need.  You can use @command{guix search}, but finding the right package can prove to be tedious.  When a package is missing, @command{pdflatex} and similar commands fail with an obscure message along the lines of:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45002
#, no-wrap
msgid ""
"doc.tex: File `tikz.sty' not found.\n"
"doc.tex:7: Emergency stop.\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45006
msgid "or, for a missing font:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45010
#, no-wrap
msgid ""
"kpathsea: Running mktexmf phvr7t\n"
"! I can't find file `phvr7t'.\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45014
msgid "How do you determine what the missing package is? In the first case, you'll find the answer by running:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45020
#, no-wrap
msgid ""
"$ guix search texlive tikz\n"
"name: texlive-pgf\n"
"version: 59745\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45025
msgid "In the second case, @command{guix search} turns up nothing.  Instead, you can search the @TeX{} Live package database using the @command{tlmgr} command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45029
#, no-wrap
msgid ""
"$ guix shell texlive-base -- tlmgr info phvr7t\n"
"tlmgr: cannot find package phvr7t, searching for other matches:\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45031
#, no-wrap
msgid ""
"Packages containing `phvr7t' in their title/description:\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45040
#, no-wrap
msgid ""
"Packages containing files matching `phvr7t':\n"
"helvetic:\n"
"        texmf-dist/fonts/tfm/adobe/helvetic/phvr7t.tfm\n"
"        texmf-dist/fonts/tfm/adobe/helvetic/phvr7tn.tfm\n"
"        texmf-dist/fonts/vf/adobe/helvetic/phvr7t.vf\n"
"        texmf-dist/fonts/vf/adobe/helvetic/phvr7tn.vf\n"
"tex4ht:\n"
"        texmf-dist/tex4ht/ht-fonts/alias/adobe/helvetic/phvr7t.htf\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45045
msgid "The file is available in the @TeX{} Live @code{helvetic} package, which is known in Guix as @code{texlive-helvetic}.  Quite a ride, but we found it!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45049
msgid "There is one important limitation though: Guix currently provides a subset of the @TeX{} Live packages.  If you stumble upon a missing package, you can try and import it (@pxref{Invoking guix import}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45052
#, fuzzy, no-wrap
#| msgid "./pre-inst-env guix build gnew --keep-failed\n"
msgid "guix import texlive @var{package}\n"
msgstr "./pre-inst-env guix build gnew --keep-failed\n"

#. type: quotation
#: guix-git/doc/guix.texi:45067
msgid "@TeX{} Live packaging is still very much work in progress, but you can help! @xref{Contributing}, for more information."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:45072
#, no-wrap
msgid "security updates"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45081
msgid "Occasionally, important security vulnerabilities are discovered in software packages and must be patched.  Guix developers try hard to keep track of known vulnerabilities and to apply fixes as soon as possible in the @code{master} branch of Guix (we do not yet provide a ``stable'' branch containing only security updates).  The @command{guix lint} tool helps developers find out about vulnerable versions of software packages in the distribution:"
msgstr ""

#. type: smallexample
#: guix-git/doc/guix.texi:45088
#, no-wrap
msgid ""
"$ guix lint -c cve\n"
"gnu/packages/base.scm:652:2: glibc@@2.21: probably vulnerable to CVE-2015-1781, CVE-2015-7547\n"
"gnu/packages/gcc.scm:334:2: gcc@@4.9.3: probably vulnerable to CVE-2015-5276\n"
"gnu/packages/image.scm:312:2: openjpeg@@2.1.0: probably vulnerable to CVE-2016-1923, CVE-2016-1924\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45091
msgid "@xref{Invoking guix lint}, for more information."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45100
msgid "Guix follows a functional package management discipline (@pxref{Introduction}), which implies that, when a package is changed, @emph{every package that depends on it} must be rebuilt.  This can significantly slow down the deployment of fixes in core packages such as libc or Bash, since basically the whole distribution would need to be rebuilt.  Using pre-built binaries helps (@pxref{Substitutes}), but deployment may still take more time than desired."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:45101
#, no-wrap
msgid "grafts"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45109
msgid "To address this, Guix implements @dfn{grafts}, a mechanism that allows for fast deployment of critical updates without the costs associated with a whole-distribution rebuild.  The idea is to rebuild only the package that needs to be patched, and then to ``graft'' it onto packages explicitly installed by the user and that were previously referring to the original package.  The cost of grafting is typically very low, and order of magnitudes lower than a full rebuild of the dependency chain."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:45110
#, no-wrap
msgid "replacements of packages, for grafts"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45116
msgid "For instance, suppose a security update needs to be applied to Bash.  Guix developers will provide a package definition for the ``fixed'' Bash, say @code{bash-fixed}, in the usual way (@pxref{Defining Packages}).  Then, the original package definition is augmented with a @code{replacement} field pointing to the package containing the bug fix:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix.texi:45123
#, no-wrap
msgid ""
"(define bash\n"
"  (package\n"
"    (name \"bash\")\n"
"    ;; @dots{}\n"
"    (replacement bash-fixed)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45133
msgid "From there on, any package depending directly or indirectly on Bash---as reported by @command{guix gc --requisites} (@pxref{Invoking guix gc})---that is installed is automatically ``rewritten'' to refer to @code{bash-fixed} instead of @code{bash}.  This grafting process takes time proportional to the size of the package, usually less than a minute for an ``average'' package on a recent machine.  Grafting is recursive: when an indirect dependency requires grafting, then grafting ``propagates'' up to the package that the user is installing."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45141
msgid "Currently, the length of the name and version of the graft and that of the package it replaces (@code{bash-fixed} and @code{bash} in the example above) must be equal.  This restriction mostly comes from the fact that grafting works by patching files, including binary files, directly.  Other restrictions may apply: for instance, when adding a graft to a package providing a shared library, the original shared library and its replacement must have the same @code{SONAME} and be binary-compatible."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45145
msgid "The @option{--no-grafts} command-line option allows you to forcefully avoid grafting (@pxref{Common Build Options, @option{--no-grafts}}).  Thus, the command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45148
#, no-wrap
msgid "guix build bash --no-grafts\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45152
msgid "returns the store file name of the original Bash, whereas:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45155
#, no-wrap
msgid "guix build bash\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45160
msgid "returns the store file name of the ``fixed'', replacement Bash.  This allows you to distinguish between the two variants of Bash."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45163
msgid "To verify which Bash your whole profile refers to, you can run (@pxref{Invoking guix gc}):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45166
#, no-wrap
msgid "guix gc -R $(readlink -f ~/.guix-profile) | grep bash\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45171
msgid "@dots{} and compare the store file names that you get with those above.  Likewise for a complete Guix system generation:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45174
#, no-wrap
msgid "guix gc -R $(guix system build my-config.scm) | grep bash\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45178
msgid "Lastly, to check which Bash running processes are using, you can use the @command{lsof} command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45181
#, no-wrap
msgid "lsof | grep /gnu/store/.*bash\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:45189
#, no-wrap
msgid "bootstrapping"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45196
msgid "Bootstrapping in our context refers to how the distribution gets built ``from nothing''.  Remember that the build environment of a derivation contains nothing but its declared inputs (@pxref{Introduction}).  So there's an obvious chicken-and-egg problem: how does the first package get built? How does the first compiler get compiled?"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45204
msgid "It is tempting to think of this question as one that only die-hard hackers may care about.  However, while the answer to that question is technical in nature, its implications are wide-ranging.  How the distribution is bootstrapped defines the extent to which we, as individuals and as a collective of users and hackers, can trust the software we run.  It is a central concern from the standpoint of @emph{security} and from a @emph{user freedom} viewpoint."
msgstr ""

#. type: cindex
#: guix-git/doc/guix.texi:45205 guix-git/doc/guix.texi:45424
#, no-wrap
msgid "bootstrap binaries"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45215
msgid "The GNU system is primarily made of C code, with libc at its core.  The GNU build system itself assumes the availability of a Bourne shell and command-line tools provided by GNU Coreutils, Awk, Findutils, `sed', and `grep'.  Furthermore, build programs---programs that run @code{./configure}, @code{make}, etc.---are written in Guile Scheme (@pxref{Derivations}).  Consequently, to be able to build anything at all, from scratch, Guix relies on pre-built binaries of Guile, GCC, Binutils, libc, and the other packages mentioned above---the @dfn{bootstrap binaries}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45219
msgid "These bootstrap binaries are ``taken for granted'', though we can also re-create them if needed (@pxref{Preparing to Use the Bootstrap Binaries})."
msgstr ""

#. type: section
#: guix-git/doc/guix.texi:45226
#, no-wrap
msgid "The Full-Source Bootstrap"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45233
msgid "Guix---like other GNU/Linux distributions---is traditionally bootstrapped from a set of bootstrap binaries: Bourne shell, command-line tools provided by GNU Coreutils, Awk, Findutils, `sed', and `grep' and Guile, GCC, Binutils, and the GNU C Library (@pxref{Bootstrapping}).  Usually, these bootstrap binaries are ``taken for granted.''"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45239
msgid "Taking the bootstrap binaries for granted means that we consider them to be a correct and trustworthy ``seed'' for building the complete system.  Therein lies a problem: the combined size of these bootstrap binaries is about 250MB (@pxref{Bootstrappable Builds,,, mes, GNU Mes}).  Auditing or even inspecting these is next to impossible."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45251
msgid "For @code{i686-linux} and @code{x86_64-linux}, Guix now features a @dfn{full-source bootstrap}.  This bootstrap is rooted in @file{hex0-seed} from the @url{https://savannah.gnu.org/projects/stage0, Stage0} package.  The hex0 program is minimalist assembler: it reads space-separated hexadecimal digits (nibbles) from a file, possibly including comments, and emits on standard output the bytes corresponding to those hexadecimal numbers.  The source code of this initial hex0 program is a file called @url{https://github.com/oriansj/bootstrap-seeds/blob/master/POSIX/x86/hex0_x86.hex0,@file{hex0_x86.hex0}} and is written in the @code{hex0} language."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45253
msgid "Hex0 is self-hosting, which means that it can build itself:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45256
#, no-wrap
msgid "./hex0-seed hex0_x86.hex0 hex0\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45260
msgid "Hex0 it is the ASCII-equivalent of the binary program and can be produced by doing something much like:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45264
#, no-wrap
msgid ""
"sed 's/[;#].*$//g' hex0_x86.hex0 | xxd -r -p > hex0\n"
"chmod +x hex0\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45268
msgid "It is because of this ASCII-binary equivalence that we can bless this initial 357-byte binary as source, and hence `full-source bootstrap''."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45275
msgid "The bootstrap then continues: @code{hex0} builds @code{hex1} and then on to @code{M0}, @code{hex2}, @code{M1}, @code{mescc-tools} and finally @code{M2-Planet}.  Then, using @code{mescc-tools}, @code{M2-Planet} we build Mes (@pxref{Top, GNU Mes Reference Manual,, mes, GNU Mes}, a Scheme interpreter and C compiler in Scheme).  Frome here on starts the more traditional @code{C}-based bootstrap of the GNU System."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45282
msgid "Another step that Guix has taken is to replace the shell and all its utilities with implementations in Guile Scheme, the @emph{Scheme-only bootstrap}.  Gash (@pxref{Gash,,, gash, The Gash manual}) is a POSIX-compatible shell that replaces Bash, and it comes with Gash Utils which has minimalist replacements for Awk, the GNU Core Utilities, Grep, Gzip, Sed, and Tar."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45292
msgid "Building the GNU System from source is currently only possible by adding some historical GNU packages as intermediate steps@footnote{Packages such as @code{gcc-2.95.3}, @code{binutils-2.14}, @code{glibc-2.2.5}, @code{gzip-1.2.4}, @code{tar-1.22}, and some others.  For details, see @file{gnu/packages/commencement.scm}.}.  As Gash and Gash Utils mature, and GNU packages become more bootstrappable again (e.g., new releases of GNU Sed will also ship as gzipped tarballs again, as alternative to the hard to bootstrap @code{xz}-compression), this set of added packages can hopefully be reduced again."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45296
msgid "The graph below shows the resulting dependency graph for @code{gcc-core-mesboot0}, the bootstrap compiler used for the traditional bootstrap of the rest of the Guix System."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45299
msgid "@image{images/gcc-core-mesboot0-graph,6in,,Dependency graph of gcc-core-mesboot0}"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45302
msgid "Work is ongoing to to bring these bootstraps to the @code{arm-linux} and @code{aarch64-linux} architectures and to the Hurd."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45306
msgid "If you are interested, join us on @samp{#bootstrappable} on the Libera.Chat IRC network or discuss on @email{bug-mes@@gnu.org} or @email{gash-devel@@nongnu.org}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45313
msgid "@image{images/bootstrap-graph,6in,,Dependency graph of the early bootstrap derivations}"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45318
msgid "The figure above shows the very beginning of the dependency graph of the distribution, corresponding to the package definitions of the @code{(gnu packages bootstrap)} module.  A similar figure can be generated with @command{guix graph} (@pxref{Invoking guix graph}), along the lines of:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45323
#, no-wrap
msgid ""
"guix graph -t derivation \\\n"
"  -e '(@@@@ (gnu packages bootstrap) %bootstrap-gcc)' \\\n"
"  | dot -Tps > gcc.ps\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45326
msgid "or, for the further Reduced Binary Seed bootstrap"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45331
#, no-wrap
msgid ""
"guix graph -t derivation \\\n"
"  -e '(@@@@ (gnu packages bootstrap) %bootstrap-mes)' \\\n"
"  | dot -Tps > mes.ps\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45340
msgid "At this level of detail, things are slightly complex.  First, Guile itself consists of an ELF executable, along with many source and compiled Scheme files that are dynamically loaded when it runs.  This gets stored in the @file{guile-2.0.7.tar.xz} tarball shown in this graph.  This tarball is part of Guix's ``source'' distribution, and gets inserted into the store with @code{add-to-store} (@pxref{The Store})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45349
msgid "But how do we write a derivation that unpacks this tarball and adds it to the store? To solve this problem, the @code{guile-bootstrap-2.0.drv} derivation---the first one that gets built---uses @code{bash} as its builder, which runs @code{build-bootstrap-guile.sh}, which in turn calls @code{tar} to unpack the tarball.  Thus, @file{bash}, @file{tar}, @file{xz}, and @file{mkdir} are statically-linked binaries, also part of the Guix source distribution, whose sole purpose is to allow the Guile tarball to be unpacked."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45361
msgid "Once @code{guile-bootstrap-2.0.drv} is built, we have a functioning Guile that can be used to run subsequent build programs.  Its first task is to download tarballs containing the other pre-built binaries---this is what the @file{.tar.xz.drv} derivations do.  Guix modules such as @code{ftp-client.scm} are used for this purpose.  The @code{module-import.drv} derivations import those modules in a directory in the store, using the original layout.  The @code{module-import-compiled.drv} derivations compile those modules, and write them in an output directory with the right layout.  This corresponds to the @code{#:modules} argument of @code{build-expression->derivation} (@pxref{Derivations})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45366
msgid "Finally, the various tarballs are unpacked by the derivations @code{gcc-bootstrap-0.drv}, @code{glibc-bootstrap-0.drv}, or @code{bootstrap-mes-0.drv} and @code{bootstrap-mescc-tools-0.drv}, at which point we have a working C tool chain."
msgstr ""

#. type: unnumberedsec
#: guix-git/doc/guix.texi:45367
#, no-wrap
msgid "Building the Build Tools"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45376
msgid "Bootstrapping is complete when we have a full tool chain that does not depend on the pre-built bootstrap tools discussed above.  This no-dependency requirement is verified by checking whether the files of the final tool chain contain references to the @file{/gnu/store} directories of the bootstrap inputs.  The process that leads to this ``final'' tool chain is described by the package definitions found in the @code{(gnu packages commencement)} module."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45383
msgid "The @command{guix graph} command allows us to ``zoom out'' compared to the graph above, by looking at the level of package objects instead of individual derivations---remember that a package may translate to several derivations, typically one derivation to download its source, one to build the Guile modules it needs, and one to actually build the package from source.  The command:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45388
#, no-wrap
msgid ""
"guix graph -t bag \\\n"
"  -e '(@@@@ (gnu packages commencement)\n"
"          glibc-final-with-bootstrap-bash)' | xdot -\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45395
msgid "displays the dependency graph leading to the ``final'' C library@footnote{You may notice the @code{glibc-intermediate} label, suggesting that it is not @emph{quite} final, but as a good approximation, we will consider it final.}, depicted below."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45397
msgid "@image{images/bootstrap-packages,6in,,Dependency graph of the early packages}"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45403
msgid "The first tool that gets built with the bootstrap binaries is GNU@tie{}Make---noted @code{make-boot0} above---which is a prerequisite for all the following packages.  From there Findutils and Diffutils get built."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45408
msgid "Then come the first-stage Binutils and GCC, built as pseudo cross tools---i.e., with @option{--target} equal to @option{--host}.  They are used to build libc.  Thanks to this cross-build trick, this libc is guaranteed not to hold any reference to the initial tool chain."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45414
msgid "From there the final Binutils and GCC (not shown above) are built.  GCC uses @command{ld} from the final Binutils, and links programs against the just-built libc.  This tool chain is used to build the other packages used by Guix and by the GNU Build System: Guile, Bash, Coreutils, etc."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45420
msgid "And voilà! At this point we have the complete set of build tools that the GNU Build System expects.  These are in the @code{%final-inputs} variable of the @code{(gnu packages commencement)} module, and are implicitly used by any package that uses @code{gnu-build-system} (@pxref{Build Systems, @code{gnu-build-system}})."
msgstr ""

#. type: unnumberedsec
#: guix-git/doc/guix.texi:45422
#, no-wrap
msgid "Building the Bootstrap Binaries"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45429
msgid "Because the final tool chain does not depend on the bootstrap binaries, those rarely need to be updated.  Nevertheless, it is useful to have an automated way to produce them, should an update occur, and this is what the @code{(gnu packages make-bootstrap)} module provides."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45435
msgid "The following command builds the tarballs containing the bootstrap binaries (Binutils, GCC, glibc, for the traditional bootstrap and linux-libre-headers, bootstrap-mescc-tools, bootstrap-mes for the Reduced Binary Seed bootstrap, and Guile, and a tarball containing a mixture of Coreutils and other basic command-line tools):"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45438
#, no-wrap
msgid "guix build bootstrap-tarballs\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45443
msgid "The generated tarballs are those that should be referred to in the @code{(gnu packages bootstrap)} module mentioned at the beginning of this section."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45449
msgid "Still here? Then perhaps by now you've started to wonder: when do we reach a fixed point? That is an interesting question! The answer is unknown, but if you would like to investigate further (and have significant computational and storage resources to do so), then let us know."
msgstr ""

#. type: unnumberedsec
#: guix-git/doc/guix.texi:45450
#, no-wrap
msgid "Reducing the Set of Bootstrap Binaries"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45458
msgid "Our traditional bootstrap includes GCC, GNU Libc, Guile, etc.  That's a lot of binary code! Why is that a problem? It's a problem because these big chunks of binary code are practically non-auditable, which makes it hard to establish what source code produced them.  Every unauditable binary also leaves us vulnerable to compiler backdoors as described by Ken Thompson in the 1984 paper @emph{Reflections on Trusting Trust}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45464
msgid "This is mitigated by the fact that our bootstrap binaries were generated from an earlier Guix revision.  Nevertheless it lacks the level of transparency that we get in the rest of the package dependency graph, where Guix always gives us a source-to-binary mapping.  Thus, our goal is to reduce the set of bootstrap binaries to the bare minimum."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45470
msgid "The @uref{https://bootstrappable.org, Bootstrappable.org web site} lists on-going projects to do that.  One of these is about replacing the bootstrap GCC with a sequence of assemblers, interpreters, and compilers of increasing complexity, which could be built from source starting from a simple and auditable assembler."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45479
msgid "Our first major achievement is the replacement of of GCC, the GNU C Library and Binutils by MesCC-Tools (a simple hex linker and macro assembler) and Mes (@pxref{Top, GNU Mes Reference Manual,, mes, GNU Mes}, a Scheme interpreter and C compiler in Scheme).  Neither MesCC-Tools nor Mes can be fully bootstrapped yet and thus we inject them as binary seeds.  We call this the Reduced Binary Seed bootstrap, as it has halved the size of our bootstrap binaries! Also, it has eliminated the C compiler binary; i686-linux and x86_64-linux Guix packages are now bootstrapped without any binary C compiler."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45482
msgid "Work is ongoing to make MesCC-Tools and Mes fully bootstrappable and we are also looking at any other bootstrap binaries.  Your help is welcome!"
msgstr ""

#. type: chapter
#: guix-git/doc/guix.texi:45484
#, no-wrap
msgid "Porting to a New Platform"
msgstr "Portando para uma nova plataforma"

#. type: Plain text
#: guix-git/doc/guix.texi:45493
msgid "As discussed above, the GNU distribution is self-contained, and self-containment is achieved by relying on pre-built ``bootstrap binaries'' (@pxref{Bootstrapping}).  These binaries are specific to an operating system kernel, CPU architecture, and application binary interface (ABI).  Thus, to port the distribution to a platform that is not yet supported, one must build those bootstrap binaries, and update the @code{(gnu packages bootstrap)} module to use them on that platform."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45498
msgid "Fortunately, Guix can @emph{cross compile} those bootstrap binaries.  When everything goes well, and assuming the GNU tool chain supports the target platform, this can be as simple as running a command like this one:"
msgstr ""

#. type: example
#: guix-git/doc/guix.texi:45501
#, no-wrap
msgid "guix build --target=armv5tel-linux-gnueabi bootstrap-tarballs\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45510
msgid "For this to work, it is first required to register a new platform as defined in the @code{(guix platform)} module.  A platform is making the connection between a GNU triplet (@pxref{Specifying Target Triplets, GNU configuration triplets,, autoconf, Autoconf}), the equivalent @var{system} in Nix notation, the name of the @var{glibc-dynamic-linker}, and the corresponding Linux architecture name if applicable (@pxref{Platforms})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45519
msgid "Once the bootstrap tarball are built, the @code{(gnu packages bootstrap)} module needs to be updated to refer to these binaries on the target platform.  That is, the hashes and URLs of the bootstrap tarballs for the new platform must be added alongside those of the currently supported platforms.  The bootstrap Guile tarball is treated specially: it is expected to be available locally, and @file{gnu/local.mk} has rules to download it for the supported architectures; a rule for the new platform must be added as well."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45528
msgid "In practice, there may be some complications.  First, it may be that the extended GNU triplet that specifies an ABI (like the @code{eabi} suffix above) is not recognized by all the GNU tools.  Typically, glibc recognizes some of these, whereas GCC uses an extra @option{--with-abi} configure flag (see @code{gcc.scm} for examples of how to handle this).  Second, some of the required packages could fail to build for that platform.  Lastly, the generated binaries could be broken for some reason."
msgstr ""

#. type: include
#: guix-git/doc/guix.texi:45530
#, no-wrap
msgid "contributing.texi"
msgstr "contributing.pt_BR.texi"

#. type: Plain text
#: guix-git/doc/guix.texi:45543
msgid "Guix is based on the @uref{https://nixos.org/nix/, Nix package manager}, which was designed and implemented by Eelco Dolstra, with contributions from other people (see the @file{nix/AUTHORS} file in Guix).  Nix pioneered functional package management, and promoted unprecedented features, such as transactional package upgrades and rollbacks, per-user profiles, and referentially transparent build processes.  Without this work, Guix would not exist."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix.texi:45546
msgid "The Nix-based software distributions, Nixpkgs and NixOS, have also been an inspiration for Guix."
msgstr "As distribuições de software baseadas em Nix, Nixpkgs e NixOS, também foram uma inspiração para o Guix."

#. type: Plain text
#: guix-git/doc/guix.texi:45552
msgid "GNU@tie{}Guix itself is a collective work with contributions from a number of people.  See the @file{AUTHORS} file in Guix for more information on these fine people.  The @file{THANKS} file lists people who have helped by reporting bugs, taking care of the infrastructure, providing artwork and themes, making suggestions, and more---thank you!"
msgstr "O GNU@tie{}Guix em si é um trabalho coletivo com contribuições de várias pessoas. Veja o arquivo @file{AUTHORS} no Guix para obter mais informações sobre essas pessoas legais. O arquivo @file{THANKS} lista as pessoas que ajudaram a relatar erros, cuidar da infraestrutura, fornecer ilustrações e temas, fazer sugestões e muito mais -- obrigado!"

#. type: cindex
#: guix-git/doc/guix.texi:45557
#, no-wrap
msgid "license, GNU Free Documentation License"
msgstr "licença, Licença de Documentação Livre GNU"

#. type: include
#: guix-git/doc/guix.texi:45558
#, no-wrap
msgid "fdl-1.3.texi"
msgstr "fdl-1.3.texi"

#, no-wrap
#~ msgid "semodule -i etc/guix-daemon.cil\n"
#~ msgstr "semodule -i etc/guix-daemon.cil\n"

#, fuzzy
#~| msgid "Then relabel the file system with @code{restorecon} or by a different mechanism provided by your system."
#~ msgid "Then relabel the file system with @code{restorecon -vR /} or by a different mechanism provided by your system.  You may need to remount @file{/gnu/store} to make it writable first, e.g. with @code{mount -o remount,rw /gnu/store}."
#~ msgstr "Em seguida, altere o rótulo do sistema de arquivos com @code{restorecon} ou por um mecanismo diferente fornecido pelo seu sistema."

#, fuzzy
#~| msgid "@code{features} (default: @code{'()})"
#~ msgid "@code{shepherd-requirement} (default: @code{()})"
#~ msgstr "@code{features} (padrão: @code{'()})"

#, fuzzy
#~| msgid "System Configuration"
#~ msgid "Home Environment Configuration"
#~ msgstr "Configuração do sistema"

#, fuzzy
#~| msgid "Instantiating a system configuration."
#~ msgid "Instantiating a home environment configuration."
#~ msgstr "Inicializando uma configuração de sistema."

#~ msgid "%@{name@}"
#~ msgstr "%@{name@}"

#~ msgid "%C"
#~ msgstr "%C"

#~ msgid "%T"
#~ msgstr "%T"

#, fuzzy
#~ msgid "@code{proxy-command} (type: maybe-string)"
#~ msgstr "@code{remote?} (padrão: @code{#f})"

#, fuzzy
#~| msgid "@code{dbus?} (default: @code{#t})"
#~ msgid "@code{group} (default: @code{\"mpd\"}) (type: string)"
#~ msgstr "@code{dbus?} (padrão: @code{#t})"

#, fuzzy
#~ msgid "{Scheme Variable} tree-sitter-build-system"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~| msgid "packages->manifest"
#~ msgid "{Scheme Procedure} package->development-manifest @var{package} @"
#~ msgstr "packages->manifest"

#, fuzzy
#~| msgid "packages->manifest"
#~ msgid "{Scheme Procedure} fail2ban-jail-service @var{svc-type} @var{jail}"
#~ msgstr "packages->manifest"

#, fuzzy
#~| msgid "@code{id} (default: @code{#f})"
#~ msgid "@code{iwd?} (default: @code{#f})"
#~ msgstr "@code{id} (default: @code{#f})"

#, fuzzy
#~| msgid "git configuration"
#~ msgid "%nscd-default-configuration"
#~ msgstr "Configuração do git"

#~ msgid "5"
#~ msgstr "5"

#~ msgid "spice"
#~ msgstr "spice"

#, fuzzy
#~ msgid "{Data Type} host"
#~ msgstr "build-machine {Data Type}"

#, fuzzy
#~ msgid "@code{address} (type: string)"
#~ msgstr "@code{remote?} (padrão: @code{#f})"

#, fuzzy
#~ msgid "@code{canonical-name} (type: string)"
#~ msgstr "@code{remote?} (padrão: @code{#f})"

#, fuzzy
#~| msgid "name"
#~ msgid "Hostname."
#~ msgstr "name"

#~ msgid "@code{port} (default: @code{\"6600\"})"
#~ msgstr "@code{porta} (default: @code{\"6600\"})"

#, fuzzy
#~ msgid "{Scheme Variable} opendht-service-type"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} ipfs-service-type"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} lightdm-service-type"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} bluetooth-service-type"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} seatd-service-type"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme variable} zabbix-agent-service-type"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} xvnc-service-type"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} bitmask-service-type"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme variable} samba-service-type"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} wsdd-service-type"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} rasdaemon-service-type"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} fail2ban-service-type"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} home-service-type"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} home-mcron-service-type"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} home-dbus-service-type"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} armv7-linux"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} aarch64-linux"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} mips64-linux"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} powerpc-linux"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} powerpc64le-linux"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} riscv64-linux"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} i686-linux"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} x86_64-linux"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} i686-mingw"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} x86_64-mingw"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} i586-gnu"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} iso9660-image"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~ msgid "{Scheme Variable} docker-image"
#~ msgstr "guix-publish-service-type"

#, fuzzy
#~| msgid "@code{dbus?} (default: @code{#t})"
#~ msgid "@code{group} (default: @code{\"zabbix\"}) (type: group)"
#~ msgstr "@code{dbus?} (padrão: @code{#t})"

#~ msgid "@uref{https://gnutls.org/, GnuTLS}, specifically its Guile bindings (@pxref{Guile Preparations, how to install the GnuTLS bindings for Guile,, gnutls-guile, GnuTLS-Guile});"
#~ msgstr "@uref{https://gnutls.org/, GnuTLS}, especificamente suas associações com Guile (@pxref{Guile Preparations, how to install the GnuTLS bindings for Guile,, gnutls-guile, GnuTLS-Guile});"

#~ msgid "Invoking @code{guix system}"
#~ msgstr "Invocando @code{guix system}"

#, fuzzy
#~| msgid "Invoking @code{guix system}"
#~ msgid "Invoking @code{guix home}"
#~ msgstr "Invocando @code{guix system}"

#, fuzzy
#~| msgid "The GPM package to use."
#~ msgid "The config file to use."
#~ msgstr "O pacote GPM a ser usado."

#, fuzzy
#~ msgid "@deftp{Data Type} wsdd-configuration This data type represents the configuration for the wsdd service."
#~ msgstr "Gerencie a configuração do sistema operacional."

#~ msgid ""
#~ ";; @r{Assuming the Guix checkout is in ~/src/guix.}\n"
#~ "(with-eval-after-load 'yasnippet\n"
#~ "  (add-to-list 'yas-snippet-dirs \"~/src/guix/etc/snippets\"))\n"
#~ msgstr ""
#~ ";; @r{Presumindo que o checkout do Guix está em ~/src/guix.}\n"
#~ "(with-eval-after-load 'yasnippet\n"
#~ "  (add-to-list 'yas-snippet-dirs \"~/src/guix/etc/snippets\"))\n"

#, fuzzy
#~| msgid "@code{user} (default: @var{git})"
#~ msgid "@code{user} (default: @samp{\"root\"})"
#~ msgstr "@code{user} (default: @var{git})"

#~ msgid ""
#~ "(specifications->manifest\n"
#~ " '(\"emacs\" \"guile@@2.2\" \"guile@@2.2:debug\"))\n"
#~ msgstr ""
#~ "(specifications->manifest\n"
#~ " '(\"emacs\" \"guile@@2.2\" \"guile@@2.2:debug\"))\n"

#~ msgid "./etc/indent-code.el gnu/packages/@var{file}.scm @var{package}\n"
#~ msgstr "./etc/indent-code.el gnu/packages/@var{arquivo}.scm @var{pacote}\n"

#~ msgid "This automatically indents the definition of @var{package} in @file{gnu/packages/@var{file}.scm} by running Emacs in batch mode.  To indent a whole file, omit the second argument:"
#~ msgstr "Isso automaticamente recua a definição de @var{pacote} em @file{gnu/packages/@var{arquivo}.scm} executando o Emacs no modo em lote. Para recuar um arquivo inteiro, omita o segundo argumento:"

#~ msgid "./etc/indent-code.el gnu/services/@var{file}.scm\n"
#~ msgstr "./etc/indent-code.el gnu/services/@var{arquivo}.scm\n"

#~ msgid "git-send-email"
#~ msgstr "git-send-email"

#, fuzzy
#~| msgid "contents"
#~ msgid "contentdb"
#~ msgstr "conteúdo"
