# SOME DESCRIPTIVE TITLE
# Copyright (C) 2021 the authors of Guix (msgids) and the following authors (msgstr)
# This file is distributed under the same license as the guix manual package.
# Julien Lepiller <fedora-account@lepiller.eu>, 2021, 2022, 2023.
# Francois Polito <francois@polito.se>, 2021.
# tisse vert <tissevert+fedora@marvid.fr>, 2021.
msgid ""
msgstr ""
"Project-Id-Version: guix manual checkout\n"
"Report-Msgid-Bugs-To: bug-guix@gnu.org\n"
"POT-Creation-Date: 2023-05-07 03:18+0000\n"
"PO-Revision-Date: 2023-05-28 18:20+0000\n"
"Last-Translator: Julien Lepiller <fedora-account@lepiller.eu>\n"
"Language-Team: French <https://translate.fedoraproject.org/projects/guix/documentation-cookbook/fr/>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n > 1;\n"
"X-Generator: Weblate 4.17\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:7
msgid "@documentencoding UTF-8"
msgstr ""
"@documentencoding UTF-8\n"
"@documentlanguage fr\n"
"@frenchspacing on"

#. type: top
#: guix-git/doc/guix-cookbook.texi:7 guix-git/doc/guix-cookbook.texi:41
#: guix-git/doc/guix-cookbook.texi:55
#, no-wrap
msgid "GNU Guix Cookbook"
msgstr "Livre de recettes de GNU Guix"

#. type: copying
#: guix-git/doc/guix-cookbook.texi:26
msgid "Copyright @copyright{} 2019, 2022 Ricardo Wurmus@* Copyright @copyright{} 2019 Efraim Flashner@* Copyright @copyright{} 2019 Pierre Neidhardt@* Copyright @copyright{} 2020 Oleg Pykhalov@* Copyright @copyright{} 2020 Matthew Brooks@* Copyright @copyright{} 2020 Marcin Karpezo@* Copyright @copyright{} 2020 Brice Waegeneire@* Copyright @copyright{} 2020 André Batista@* Copyright @copyright{} 2020 Christine Lemmer-Webber@* Copyright @copyright{} 2021 Joshua Branson@* Copyright @copyright{} 2022 Maxim Cournoyer@* Copyright @copyright{} 2023 Ludovic Courtès"
msgstr ""
"Copyright @copyright{} 2019, 2022 Ricardo Wurmus@*\n"
"Copyright @copyright{} 2019 Efraim Flashner@*\n"
"Copyright @copyright{} 2019 Pierre Neidhardt@*\n"
"Copyright @copyright{} 2020 Oleg Pykhalov@*\n"
"Copyright @copyright{} 2020 Matthew Brooks@*\n"
"Copyright @copyright{} 2020 Marcin Karpezo@*\n"
"Copyright @copyright{} 2020 Brice Waegeneire@*\n"
"Copyright @copyright{} 2020 André Batista@*\n"
"Copyright @copyright{} 2020 Christine Lemmer-Webber@*\n"
"Copyright @copyright{} 2021 Joshua Branson@*\n"
"Copyright @copyright{} 2022 Maxim Cournoyer@*\n"
"Copyright @copyright{} 2023 Ludovic Courtès"

#. type: copying
#: guix-git/doc/guix-cookbook.texi:33
msgid "Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license is included in the section entitled ``GNU Free Documentation License''."
msgstr "Vous avez la permission de copier, distribuer ou modifier ce document sous les termes de la Licence GNU Free Documentation, version 1.3 ou toute version ultérieure publiée par la Free Software Foundation ; sans section invariante, texte de couverture et sans texte de quatrième de couverture.  Une copie de la licence est incluse dans la section intitulée « GNU Free Documentation License »."

#. type: dircategory
#: guix-git/doc/guix-cookbook.texi:35
#, no-wrap
msgid "System administration"
msgstr "Administration système"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:38
msgid "Guix cookbook: (guix-cookbook)"
msgstr "Livre de recettes de Guix: (guix-cookbook.fr)"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:38
msgid "Tutorials and examples for GNU Guix."
msgstr "Didacticiels et exemples pour GNU Guix."

#. type: subtitle
#: guix-git/doc/guix-cookbook.texi:42
#, no-wrap
msgid "Tutorials and examples for using the GNU Guix Functional Package Manager"
msgstr "Didacticiels et exemples d'utilisation du gestionnaire de paquets GNU Guix"

#. type: author
#: guix-git/doc/guix-cookbook.texi:43
#, no-wrap
msgid "The GNU Guix Developers"
msgstr "Les développeurs de GNU Guix"

#. type: node
#: guix-git/doc/guix-cookbook.texi:54
#, no-wrap
msgid "Top"
msgstr "Top"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:61
msgid "This document presents tutorials and detailed examples for GNU@tie{}Guix, a functional package management tool written for the GNU system.  Please @pxref{Top,,, guix, GNU Guix reference manual} for details about the system, its API, and related concepts."
msgstr "Ce document propose des didacticiels et des exemples détaillés pour GNU@tie{}Guix, un outil de gestion des paquets fonctionnel écrit pour le système GNU. @pxref{Top,,, guix.fr, le manuel de référence de Guix} pour plus de détails sur le système, son API et les concepts associés."

#.  You can replace the following paragraph with information on
#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:71
msgid "This manual is also available in French (@pxref{Top,,, guix-cookbook.fr, Livre de recettes de GNU Guix}) and German (@pxref{Top,,, guix-cookbook.de, GNU-Guix-Kochbuch}).  If you would like to translate this document in your native language, consider joining @uref{https://translate.fedoraproject.org/projects/guix/documentation-cookbook, Weblate} (@pxref{Translating Guix,,, guix, GNU Guix reference manual})."
msgstr "Ce manuel est aussi disponible en anglais (@pxref{Top,,, guix-cookbook, GNU Guix Cookbook}) et en allemand (@pxref{Top,,, guix-cookbook.de, GNU-Guix-Kochbuch}). Si vous désirez traduire ce document dans votre langue maternelle, rejoignez @uref{https://translate.fedoraproject.org/projects/guix/documentation-cookbook, Weblate} (@pxref{Traduire Guix,,, guix.fr, le manuel de référence de Guix})."

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:131
#: guix-git/doc/guix-cookbook.texi:132
#, no-wrap
msgid "Scheme tutorials"
msgstr "Didacticiels pour Scheme"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "Meet your new favorite language!"
msgstr "Découvrez votre nouveau langage préféré !"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:89
#: guix-git/doc/guix-cookbook.texi:353 guix-git/doc/guix-cookbook.texi:354
#, no-wrap
msgid "Packaging"
msgstr "Empaquetage"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "Packaging tutorials"
msgstr "Didacticiel d'empaquetage"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:93
#: guix-git/doc/guix-cookbook.texi:1411 guix-git/doc/guix-cookbook.texi:1412
#, no-wrap
msgid "System Configuration"
msgstr "Configuration du système"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "Customizing the GNU System"
msgstr "Personnalisation du système GNU"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:107
#: guix-git/doc/guix-cookbook.texi:2759 guix-git/doc/guix-cookbook.texi:2760
#, no-wrap
msgid "Containers"
msgstr "Conteneurs"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "Isolated environments and nested systems"
msgstr "Environnements isolés et systèmes imbriqués"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:112
#: guix-git/doc/guix-cookbook.texi:3158 guix-git/doc/guix-cookbook.texi:3159
#, no-wrap
msgid "Advanced package management"
msgstr "Gestion avancée des paquets"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "Power to the users!"
msgstr "Le pouvoir aux utilisateurs !"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:116
#: guix-git/doc/guix-cookbook.texi:3557 guix-git/doc/guix-cookbook.texi:3558
#, no-wrap
msgid "Environment management"
msgstr "Gestion de l'environnement"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "Control environment"
msgstr "Environnement de contrôle"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:120
#: guix-git/doc/guix-cookbook.texi:3682 guix-git/doc/guix-cookbook.texi:3683
#, no-wrap
msgid "Installing Guix on a Cluster"
msgstr "Installer Guix sur une grappe de calcul"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "High-performance computing."
msgstr "Calcul haute-performance."

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:84 guix-git/doc/guix-cookbook.texi:4055
#: guix-git/doc/guix-cookbook.texi:4056
#, no-wrap
msgid "Acknowledgments"
msgstr "Remerciements"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:84
msgid "Thanks!"
msgstr "Merci !"

#. type: appendix
#: guix-git/doc/guix-cookbook.texi:84 guix-git/doc/guix-cookbook.texi:4082
#: guix-git/doc/guix-cookbook.texi:4083
#, no-wrap
msgid "GNU Free Documentation License"
msgstr "La licence GNU Free Documentation"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:84
msgid "The license of this document."
msgstr "La licence de ce document."

#. type: unnumbered
#: guix-git/doc/guix-cookbook.texi:84 guix-git/doc/guix-cookbook.texi:4088
#: guix-git/doc/guix-cookbook.texi:4089
#, no-wrap
msgid "Concept Index"
msgstr "Index des concepts"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:84
msgid "Concepts."
msgstr "Les concepts."

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:87
msgid "--- The Detailed Node Listing ---"
msgstr "--- Liste détaillée des nœuds ---"

#. type: section
#: guix-git/doc/guix-cookbook.texi:91 guix-git/doc/guix-cookbook.texi:365
#: guix-git/doc/guix-cookbook.texi:367 guix-git/doc/guix-cookbook.texi:368
#, no-wrap
msgid "Packaging Tutorial"
msgstr "Didacticiel d'empaquetage"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:91 guix-git/doc/guix-cookbook.texi:365
msgid "A tutorial on how to add packages to Guix."
msgstr "Un didacticiel sur la manière d'ajouter des paquets à Guix."

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:1435 guix-git/doc/guix-cookbook.texi:1436
#, no-wrap
msgid "Auto-Login to a Specific TTY"
msgstr "Connexion automatique à un TTY donné"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Automatically Login a User to a Specific TTY"
msgstr "Connecter automatiquement un utilisateur sur un TTY donné"

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:1480 guix-git/doc/guix-cookbook.texi:1481
#, no-wrap
msgid "Customizing the Kernel"
msgstr "Personnalisation du noyau"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Creating and using a custom Linux kernel on Guix System."
msgstr "Créer et utiliser un noyau Linux personnalisé sur le système Guix."

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:1718 guix-git/doc/guix-cookbook.texi:1719
#, no-wrap
msgid "Guix System Image API"
msgstr "L'API de création d'images du système Guix"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Customizing images to target specific platforms."
msgstr "Personnaliser des images pour des plateformes particulières."

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:1929 guix-git/doc/guix-cookbook.texi:1930
#, no-wrap
msgid "Using security keys"
msgstr "Utiliser des clés de sécurité"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "How to use security keys with Guix System."
msgstr "Comment utiliser des clés de sécurité avec le système Guix."

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:1988 guix-git/doc/guix-cookbook.texi:1989
#, no-wrap
msgid "Connecting to Wireguard VPN"
msgstr "Se connecter à un VPN Wireguard"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Connecting to a Wireguard VPN."
msgstr "Se connecter à un VPN Wireguard."

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:2065 guix-git/doc/guix-cookbook.texi:2066
#, no-wrap
msgid "Customizing a Window Manager"
msgstr "Personnaliser un gestionnaire de fenêtres"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Handle customization of a Window manager on Guix System."
msgstr "Gérer la personnalisation d'un gestionnaire de fenêtres sur le système Guix."

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:2156 guix-git/doc/guix-cookbook.texi:2157
#, no-wrap
msgid "Running Guix on a Linode Server"
msgstr "Lancer Guix sur un serveur Linode"

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:2399 guix-git/doc/guix-cookbook.texi:2400
#, no-wrap
msgid "Setting up a bind mount"
msgstr "Mettre en place un montage dupliqué"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Setting up a bind mount in the file-systems definition."
msgstr "Mettre en place un montage dupliqué dans une définition de système de fichiers."

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:2448 guix-git/doc/guix-cookbook.texi:2449
#, no-wrap
msgid "Getting substitutes from Tor"
msgstr "Récupérer des substituts via Tor"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Configuring Guix daemon to get substitutes through Tor."
msgstr "Configurer le démon Guix pour récupérer les substituts via Tor."

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:2512 guix-git/doc/guix-cookbook.texi:2513
#, no-wrap
msgid "Setting up NGINX with Lua"
msgstr "Configurer NGINX avec Lua"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Configuring NGINX web-server to load Lua modules."
msgstr "Configurer le serveur web NGINX pour qu'il charge des modules Lua."

#. type: section
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
#: guix-git/doc/guix-cookbook.texi:2569 guix-git/doc/guix-cookbook.texi:2570
#, no-wrap
msgid "Music Server with Bluetooth Audio"
msgstr "Serveur de musique avec l'audio bluetooth"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:105 guix-git/doc/guix-cookbook.texi:1433
msgid "Headless music player with Bluetooth output."
msgstr "Lecteur de musique sans affichage avec entrée bluetooth."

#. type: section
#: guix-git/doc/guix-cookbook.texi:110 guix-git/doc/guix-cookbook.texi:2786
#: guix-git/doc/guix-cookbook.texi:2788 guix-git/doc/guix-cookbook.texi:2789
#, no-wrap
msgid "Guix Containers"
msgstr "Conteneurs Guix"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:110 guix-git/doc/guix-cookbook.texi:2786
msgid "Perfectly isolated environments"
msgstr "Environnements parfaitement isolés"

#. type: section
#: guix-git/doc/guix-cookbook.texi:110 guix-git/doc/guix-cookbook.texi:2786
#: guix-git/doc/guix-cookbook.texi:2937 guix-git/doc/guix-cookbook.texi:2938
#, no-wrap
msgid "Guix System Containers"
msgstr "Conteneurs pour le système Guix"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:110 guix-git/doc/guix-cookbook.texi:2786
msgid "A system inside your system"
msgstr "Un système dans votre système"

#. type: section
#: guix-git/doc/guix-cookbook.texi:114 guix-git/doc/guix-cookbook.texi:3172
#: guix-git/doc/guix-cookbook.texi:3174 guix-git/doc/guix-cookbook.texi:3175
#, no-wrap
msgid "Guix Profiles in Practice"
msgstr "Les profils Guix en pratique"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:114 guix-git/doc/guix-cookbook.texi:3172
msgid "Strategies for multiple profiles and manifests."
msgstr "Stratégies pour gérer plusieurs profils et manifestes."

#. type: section
#: guix-git/doc/guix-cookbook.texi:118 guix-git/doc/guix-cookbook.texi:3565
#: guix-git/doc/guix-cookbook.texi:3567 guix-git/doc/guix-cookbook.texi:3568
#, no-wrap
msgid "Guix environment via direnv"
msgstr "Environnement Guix avec direnv"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:118 guix-git/doc/guix-cookbook.texi:3565
msgid "Setup Guix environment with direnv"
msgstr "Créer un environnement Guix avec direnv"

#. type: section
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
#: guix-git/doc/guix-cookbook.texi:3713 guix-git/doc/guix-cookbook.texi:3714
#, no-wrap
msgid "Setting Up a Head Node"
msgstr "Mettre en place un nœud principal"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
msgid "The node that runs the daemon."
msgstr "Le nœud qui fait tourner le démon."

#. type: section
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
#: guix-git/doc/guix-cookbook.texi:3809 guix-git/doc/guix-cookbook.texi:3810
#, no-wrap
msgid "Setting Up Compute Nodes"
msgstr "Mettre en place des nœuds de calcul"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
msgid "Client nodes."
msgstr "Les nœuds clients."

#. type: node
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
#: guix-git/doc/guix-cookbook.texi:3895
#, no-wrap
msgid "Cluster Network Access"
msgstr "Accès réseau de la grappe"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
msgid "Dealing with network access restrictions."
msgstr "Gérer les restrictions d'accès réseau."

#. type: node
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
#: guix-git/doc/guix-cookbook.texi:3981
#, no-wrap
msgid "Cluster Disk Usage"
msgstr "Utilisation de disque de la grappe"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
msgid "Disk usage considerations."
msgstr "Considérations d'utilisation de l'espace disque."

#. type: node
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
#: guix-git/doc/guix-cookbook.texi:4026
#, no-wrap
msgid "Cluster Security Considerations"
msgstr "Considérations de sécurité de la grappe"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:126 guix-git/doc/guix-cookbook.texi:3711
msgid "Keeping the cluster secure."
msgstr "Garder votre grappe sécurisée."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:138
msgid "GNU@tie{}Guix is written in the general purpose programming language Scheme, and many of its features can be accessed and manipulated programmatically.  You can use Scheme to generate package definitions, to modify them, to build them, to deploy whole operating systems, etc."
msgstr "GNU@tie{}Guix est écrit dans le langage de programmation Scheme.  Nombre de ses fonctionnalités peuvent être consultées et manipulées par programmation. Vous pouvez utiliser Scheme entre autres pour générer des définitions de paquets, pour les modifier, pour les compiler ou pour déployer des systèmes d'exploitation entiers."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:142
msgid "Knowing the basics of how to program in Scheme will unlock many of the advanced features Guix provides --- and you don't even need to be an experienced programmer to use them!"
msgstr "Connaître les bases de la programmation en Scheme vous permettra d'utiliser de nombreuses fonctionnalités avancées de Guix --- et vous n'avez pas besoin d'être un·e programmeur·euse chevronné·e !"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:144
msgid "Let's get started!"
msgstr "C'est parti !"

#. type: section
#: guix-git/doc/guix-cookbook.texi:145 guix-git/doc/guix-cookbook.texi:146
#, no-wrap
msgid "A Scheme Crash Course"
msgstr "Cours accéléré du langage Scheme"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:148
#, no-wrap
msgid "Scheme, crash course"
msgstr "Scheme, cours accéléré"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:154
msgid "Guix uses the Guile implementation of Scheme.  To start playing with the language, install it with @code{guix install guile} and start a @dfn{REPL}---short for @uref{https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop, @dfn{read-eval-print loop}}---by running @code{guile} from the command line."
msgstr "Guix utilise l'implémentation Guile du langage Scheme. Pour commencer à jouer avec le langage, installez-le avec @code{guix install guile} et démarrer une @dfn{BLÉA} (@dfn{REPL} en anglais), une @uref{https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop, @dfn{boucle de lecture, évaluation, affichage}}, en lançant @code{guile} sur la ligne de commande."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:157
msgid "Alternatively you can also run @code{guix shell guile -- guile} if you'd rather not have Guile installed in your user profile."
msgstr "Vous pouvez également lancer la commande @code{guix shell guile -- guile} si vous préférez ne pas installer Guile dans votre profil utilisateur."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:163
msgid "In the following examples, lines show what you would type at the REPL; lines starting with ``@result{}'' show evaluation results, while lines starting with ``@print{}'' show things that get printed.  @xref{Using Guile Interactively,,, guile, GNU Guile Reference Manual}, for more details on the REPL."
msgstr "Dans les exemples suivants, les lignes montrent ce que vous devez taper sur la REPL ; les lignes commençant par « @result{} » montrent le résultat de l'évaluation, tandis que les lignes commençant par « @print{} » montrent ce qui est affiché. @xref{Using Guile Interactively,,, guile, GNU Guile Reference Manual}, pour plus d'information sur la REPL."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:171
msgid "Scheme syntax boils down to a tree of expressions (or @emph{s-expression} in Lisp lingo).  An expression can be a literal such as numbers and strings, or a compound which is a parenthesized list of compounds and literals.  @code{#true} and @code{#false} (abbreviated @code{#t} and @code{#f}) stand for the Booleans ``true'' and ``false'', respectively."
msgstr "La syntaxe de Scheme se résume à un arbre d'expressions (ou une @emph{s-expression} dans le jargon Lisp). Une expression peut être un litéral comme un nombre ou une chaîne de caractères, ou composée d'une liste d'autres éléments composés et litéraux, entourée de parenthèses. @code{#true} et @code{#false} (abrégés @code{#t} et @code{#f}) correspondent aux booléens « vrai » et « faux »."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:173
msgid "Examples of valid expressions:"
msgstr "Voici des exemples d'expressions valides :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:177
#, no-wrap
msgid ""
"\"Hello World!\"\n"
"@result{} \"Hello World!\"\n"
"\n"
msgstr ""
"\"Bonjour le monde !\"\n"
"@result{} \"Bonjour le monde !\"\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:180
#, no-wrap
msgid ""
"17\n"
"@result{} 17\n"
"\n"
msgstr ""
"17\n"
"@result{} 17\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:184
#, no-wrap
msgid ""
"(display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"@print{} Hello Guix!\n"
"@result{} #<unspecified>\n"
msgstr ""
"(display (string-append \"Bonjour \" \"Guix\" \"\\n\"))\n"
"@print{} Bonjour Guix\n"
"@result{} #<unspecified>\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:191
msgid "This last example is a function call nested in another function call.  When a parenthesized expression is evaluated, the first term is the function and the rest are the arguments passed to the function.  Every function returns the last evaluated expression as its return value."
msgstr "Ce dernier exemple est un appel de fonction imbriqué dans un autre appel de fonction. Lorsqu'une expression parenthésée est évaluée, le premier élément est la fonction et le reste sont les arguments passés à la fonction. Chaque fonction renvoie la dernière expression évaluée."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:194
msgid "Anonymous functions are declared with the @code{lambda} term:"
msgstr "On peut déclarer des fonctions anonymes avec le terme @code{lambda} :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:198
#, no-wrap
msgid ""
"(lambda (x) (* x x))\n"
"@result{} #<procedure 120e348 at <unknown port>:24:0 (x)>\n"
msgstr ""
"(lambda (x) (* x x))\n"
"@result{} #<procedure 120e348 at <unknown port>:24:0 (x)>\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:203
msgid "The above procedure returns the square of its argument.  Since everything is an expression, the @code{lambda} expression returns an anonymous procedure, which can in turn be applied to an argument:"
msgstr "La procédure ci-dessus renvoie le carré de son argument. Comme tout est une expression, l'expression @code{lambda} renvoie une procédure anonyme, qui peut ensuite être appliquée à un argument :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:207
#, no-wrap
msgid ""
"((lambda (x) (* x x)) 3)\n"
"@result{} 9\n"
msgstr ""
"((lambda (x) (* x x)) 3)\n"
"@result{} 9\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:211
msgid "Anything can be assigned a global name with @code{define}:"
msgstr "On peut assigner un nom global à tout ce qu'on veut avec @code{define} :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:217
#, no-wrap
msgid ""
"(define a 3)\n"
"(define square (lambda (x) (* x x)))\n"
"(square a)\n"
"@result{} 9\n"
msgstr ""
"(define a 3)\n"
"(define square (lambda (x) (* x x)))\n"
"(square a)\n"
"@result{} 9\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:221
msgid "Procedures can be defined more concisely with the following syntax:"
msgstr "On peut définir des procédure de manière plus concise avec la syntaxe suivante :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:224
#, no-wrap
msgid "(define (square x) (* x x))\n"
msgstr "(define (square x) (* x x))\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:228
msgid "A list structure can be created with the @code{list} procedure:"
msgstr "On peut créer une structure de liste avec la procédure @code{list} :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:232
#, no-wrap
msgid ""
"(list 2 a 5 7)\n"
"@result{} (2 3 5 7)\n"
msgstr ""
"(list 2 a 5 7)\n"
"@result{} (2 3 5 7)\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:239
msgid "The @dfn{quote} disables evaluation of a parenthesized expression: the first term is not called over the other terms (@pxref{Expression Syntax, quote,, guile, GNU Guile Reference Manual}).  Thus it effectively returns a list of terms."
msgstr "La @dfn{quote} (l'apostrophe) désactive l'évaluation d'une expression parenthésée : le premier élément n'est pas appelé avec les autres éléments en argument (@pxref{Expression Syntax, quote,, guile, GNU Guile Reference Manual}). Donc, il renvoie une liste de termes."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:243
#, no-wrap
msgid ""
"'(display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"@result{} (display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"\n"
msgstr ""
"'(display (string-append \"Bonjour \" \"Guix\" \"\\n\"))\n"
"@result{} (display (string-append \"Bonjour \" \"Guix\" \"\\n\"))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:246
#, no-wrap
msgid ""
"'(2 a 5 7)\n"
"@result{} (2 a 5 7)\n"
msgstr ""
"'(2 a 5 7)\n"
"@result{} (2 a 5 7)\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:252
msgid "The @dfn{quasiquote} disables evaluation of a parenthesized expression until @dfn{unquote} (a comma) re-enables it.  Thus it provides us with fine-grained control over what is evaluated and what is not."
msgstr "La @dfn{quasiquote} (l'apostrophe à l'envers) désactive l'évaluation d'une expression parenthésée jusqu'à ce qu'un @dfn{unquote} (une virgule) la réactive. De cette manière, on garde un contrôle fin sur ce qui est évalué et sur ce qui ne l'est pas."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:256
#, no-wrap
msgid ""
"`(2 a 5 7 (2 ,a 5 ,(+ a 4)))\n"
"@result{} (2 a 5 7 (2 3 5 7))\n"
msgstr ""
"`(2 a 5 7 (2 ,a 5 ,(+ a 4)))\n"
"@result{} (2 a 5 7 (2 3 5 7))\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:260
msgid "Note that the above result is a list of mixed elements: numbers, symbols (here @code{a}) and the last element is a list itself."
msgstr "Remarquez que le résultat ci-dessus est une liste d'éléments mixtes : des nombres, des symboles (ici @code{a}) et le dernier élément est aussi une liste."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:264
msgid "Multiple variables can be named locally with @code{let} (@pxref{Local Bindings,,, guile, GNU Guile Reference Manual}):"
msgstr "On peut nommer localement plusieurs variables avec @code{let} (@pxref{Local Bindings,,, guile, GNU Guile Reference Manual}) :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:271
#, no-wrap
msgid ""
"(define x 10)\n"
"(let ((x 2)\n"
"      (y 3))\n"
"  (list x y))\n"
"@result{} (2 3)\n"
"\n"
msgstr ""
"(define x 10)\n"
"(let ((x 2)\n"
"      (y 3))\n"
"  (list x y))\n"
"@result{} (2 3)\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:274
#, no-wrap
msgid ""
"x\n"
"@result{} 10\n"
"\n"
msgstr ""
"x\n"
"@result{} 10\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:277
#, no-wrap
msgid ""
"y\n"
"@error{} In procedure module-lookup: Unbound variable: y\n"
msgstr ""
"y\n"
"@error{} In procedure module-lookup: Unbound variable: y\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:281
msgid "Use @code{let*} to allow later variable declarations to refer to earlier definitions."
msgstr "On peut utiliser @code{let*} pour permettre au déclarations de variables ultérieures d'utiliser les définitions précédentes."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:287
#, no-wrap
msgid ""
"(let* ((x 2)\n"
"       (y (* x 3)))\n"
"  (list x y))\n"
"@result{} (2 6)\n"
msgstr ""
"(let* ((x 2)\n"
"       (y (* x 3)))\n"
"  (list x y))\n"
"@result{} (2 6)\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:294
msgid "@dfn{Keywords} are typically used to identify the named parameters of a procedure.  They are prefixed by @code{#:} (hash, colon) followed by alphanumeric characters: @code{#:like-this}.  @xref{Keywords,,, guile, GNU Guile Reference Manual}."
msgstr "On utilise typiquement des @dfn{mot-clés} pour identifier les paramètres nommés d'une procédure. Ils sont précédés de @code{#:} (dièse, deux-points) suivi par des caractères alphanumériques : @code{#:comme-ça}. @xref{Keywords,,, guile, GNU Guile Reference Manual}."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:299
msgid "The percentage @code{%} is typically used for read-only global variables in the build stage.  Note that it is merely a convention, like @code{_} in C.  Scheme treats @code{%} exactly the same as any other letter."
msgstr "On utilise souvent le signe pourcent @code{%} pour les variables globales non modifiables à l'étape de construction. Remarquez que ce n'est qu'une convention, comme @code{_} en C. Scheme traite @code{%} de la même manière que les autres lettres."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:303
msgid "Modules are created with @code{define-module} (@pxref{Creating Guile Modules,,, guile, GNU Guile Reference Manual}).  For instance"
msgstr "On peut créer des modules avec @code{define-module} (@pxref{Creating Guile Modules,,, guile, GNU Guile Reference Manual}). Par exemple :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:309
#, no-wrap
msgid ""
"(define-module (guix build-system ruby)\n"
"  #:use-module (guix store)\n"
"  #:export (ruby-build\n"
"            ruby-build-system))\n"
msgstr ""
"(define-module (guix build-system ruby)\n"
"  #:use-module (guix store)\n"
"  #:export (ruby-build\n"
"            ruby-build-system))\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:315
msgid "defines the module @code{guix build-system ruby} which must be located in @file{guix/build-system/ruby.scm} somewhere in the Guile load path.  It depends on the @code{(guix store)} module and it exports two variables, @code{ruby-build} and @code{ruby-build-system}."
msgstr "défini le module @code{guix build-system ruby} qui doit se situer dans @file{guix/build-system/ruby.scm} quelque part dans le chemin de recherche de Guile. Il dépend du module @code{(guix store)} et exporte deux variables, @code{ruby-build} et @code{ruby-build-system}."

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:317
#, no-wrap
msgid "Going further"
msgstr "Pour aller plus loin"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:321
msgid "Scheme is a language that has been widely used to teach programming and you'll find plenty of material using it as a vehicle.  Here's a selection of documents to learn more about Scheme:"
msgstr "Scheme est un langage qui a été beaucoup utilisé pour enseigner la programmation et vous trouverez plein de supports qui l'utilisent. Voici une liste de documents qui vous en apprendront plus sur le Scheme :"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:326
msgid "@uref{https://spritely.institute/static/papers/scheme-primer.html, @i{A Scheme Primer}}, by Christine Lemmer-Webber and the Spritely Institute."
msgstr "@uref{https://spritely.institute/static/papers/scheme-primer.html, @i{A Scheme Primer}}, par Christine Lemmer-Webber et le Spritely Institute."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:330
msgid "@uref{http://www.troubleshooters.com/codecorn/scheme_guile/hello.htm, @i{Scheme at a Glance}}, by Steve Litt."
msgstr "@uref{http://www.troubleshooters.com/codecorn/scheme_guile/hello.htm, Scheme at a Glance}, par Steve Litt."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:337
msgid "@uref{https://sarabander.github.io/sicp/, @i{Structure and Interpretation of Computer Programs}}, by Harold Abelson and Gerald Jay Sussman, with Julie Sussman.  Colloquially known as ``SICP'', this book is a reference."
msgstr "@uref{https://sarabander.github.io/sicp/, @i{Structure and Interpretation of Computer Programs}}, par Harold Abelson et Gerald Jay Sussman, avec Julie Sussman.  Souvent appelé ``SICP'', ce livre est une référence."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:339
msgid "You can also install it and read it from your computer:"
msgstr "Vous pouvez aussi l'installer et le lire sur votre ordinateur :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:343
#, no-wrap
msgid ""
"guix install sicp info-reader\n"
"info sicp\n"
msgstr ""
"guix install sicp info-reader\n"
"info sicp\n"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:349
msgid "You'll find more books, tutorials and other resources at @url{https://schemers.org/}."
msgstr "Vous trouverez plus de livres, de didacticiels et d'autres ressources sur @url{https://schemers.org/}."

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:356
#, no-wrap
msgid "packaging"
msgstr "empaquetage"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:362
msgid "This chapter is dedicated to teaching you how to add packages to the collection of packages that come with GNU Guix.  This involves writing package definitions in Guile Scheme, organizing them in package modules, and building them."
msgstr "Ce chapitre est conçu pour vous enseigner comment ajouter des paquets à la collection de paquets de GNU Guix. Pour cela, vous devrez écrire des définitions de paquets en Guile Scheme, les organiser en modules et les construire."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:376
msgid "GNU Guix stands out as the @emph{hackable} package manager, mostly because it uses @uref{https://www.gnu.org/software/guile/, GNU Guile}, a powerful high-level programming language, one of the @uref{https://en.wikipedia.org/wiki/Scheme_%28programming_language%29, Scheme} dialects from the @uref{https://en.wikipedia.org/wiki/Lisp_%28programming_language%29, Lisp family}."
msgstr "GNU Guix se démarque des autres gestionnaire de paquets en étant @emph{bidouillable}, surtout parce qu'il utilise @uref{https://www.gnu.org/software/guile/,GNU Guile}, un langage de programmation de haut-niveau puissant, l'un des dialectes @uref{https://fr.wikipedia.org/wiki/Scheme, Scheme} de @uref{https://fr.wikipedia.org/wiki/Lisp, la famille Lisp}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:380
msgid "Package definitions are also written in Scheme, which empowers Guix in some very unique ways, unlike most other package managers that use shell scripts or simple languages."
msgstr "Les définitions de paquets sont aussi écrites en Scheme, ce qui le rend plus puissant de manière assez unique par rapport aux autres gestionnaires de paquets qui utilisent des scripts shell ou des langages simples."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:385
msgid "Use functions, structures, macros and all of Scheme expressiveness for your package definitions."
msgstr "Vous pouvez utiliser des fonctions, des structures, des macros et toute l'expressivité de Scheme dans vos définitions de paquets."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:389
msgid "Inheritance makes it easy to customize a package by inheriting from it and modifying only what is needed."
msgstr "L'héritage facilite la personnalisation d'un paquet en héritant d'un autre et en modifiant uniquement les points nécessaires."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:399
msgid "Batch processing: the whole package collection can be parsed, filtered and processed.  Building a headless server with all graphical interfaces stripped out? It's possible.  Want to rebuild everything from source using specific compiler optimization flags? Pass the @code{#:make-flags \"...\"} argument to the list of packages.  It wouldn't be a stretch to think @uref{https://wiki.gentoo.org/wiki/USE_flag, Gentoo USE flags} here, but this goes even further: the changes don't have to be thought out beforehand by the packager, they can be @emph{programmed} by the user!"
msgstr "Traitement par lot : la collection des paquets entière peut être analysée, filtrée et traitée. Vous voulez construire un serveur sans interface graphique ? C'est possible. Vous voulez tout reconstruire à partir des sources avec des drapeaux d'optimisation spécifiques ? Passez l'argument @code{#:make-flags \"…\"} à la liste des paquets. Ce ne serait pas aberrant de penser @uref{https://wiki.gentoo.org/wiki/USE_flag, au drapeau USE de Gentoo}, mais cela va plus loin : la personne qui crée les paquets n'a pas besoin de penser à l'avance à ces changements, ils peuvent être @emph{programmés} par l'utilisateur ou l'utilisatrice !"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:405
msgid "The following tutorial covers all the basics around package creation with Guix.  It does not assume much knowledge of the Guix system nor of the Lisp language.  The reader is only expected to be familiar with the command line and to have some basic programming knowledge."
msgstr "Le didacticiel suivant traite des bases de la création de paquets avec Guix. Il ne présuppose aucune connaissance du système Guix ni du langage Lisp. On ne s'attend qu'à ce que vous aillez une certaine familiarité avec la ligne de commande et des connaissances de base en programmation."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:406 guix-git/doc/guix-cookbook.texi:407
#, no-wrap
msgid "A ``Hello World'' package"
msgstr "Un paquet « hello world »"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:412
msgid "The ``Defining Packages'' section of the manual introduces the basics of Guix packaging (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}).  In the following section, we will partly go over those basics again."
msgstr "La section « Définir des paquets » du manuel explique les bases de l'empaquetage avec Guix (@pxref{Définir des paquets,,, guix.fr, le manuel de référence de GNU Guix}). Dans la section suivante, nous reparlerons en partie de ces bases."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:418
msgid "GNU@tie{}Hello is a dummy project that serves as an idiomatic example for packaging.  It uses the GNU build system (@code{./configure && make && make install}).  Guix already provides a package definition which is a perfect example to start with.  You can look up its declaration with @code{guix edit hello} from the command line.  Let's see how it looks:"
msgstr "GNU@tie{}Hello est un exemple de projet qui sert d'exemple idiomatique pour l'empaquetage. Il utilise le système de construction de GNU (@code{./configure && make && make install}). Guix fournit déjà une définition de paquet qui est un parfait exemple pour commencer. Vous pouvez voir sa déclaration avec @code{guix edit hello} depuis la ligne de commande. Voyons à quoi elle ressemble :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:439
#, no-wrap
msgid ""
"(define-public hello\n"
"  (package\n"
"    (name \"hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, GNU world: An example GNU package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"
msgstr ""
"(define-public hello\n"
"  (package\n"
"    (name \"hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, GNU world: An example GNU package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:443
msgid "As you can see, most of it is rather straightforward.  But let's review the fields together:"
msgstr "Comme vous pouvez le voir, la plus grosse partie est assez simple. Mais examinons les champs ensemble :"

#. type: item
#: guix-git/doc/guix-cookbook.texi:445
#, no-wrap
msgid "name"
msgstr "name"

#. type: table
#: guix-git/doc/guix-cookbook.texi:448
msgid "The project name.  Using Scheme conventions, we prefer to keep it lower case, without underscore and using dash-separated words."
msgstr "Le nom du projet. Avec les conventions de Scheme, on préfère le laisser en minuscule, sans tiret du bas, en séparant les mots par des tirets."

#. type: item
#: guix-git/doc/guix-cookbook.texi:449
#, no-wrap
msgid "source"
msgstr "source"

#. type: table
#: guix-git/doc/guix-cookbook.texi:452
msgid "This field contains a description of the source code origin.  The @code{origin} record contains these fields:"
msgstr "Ce champ contient une description de l'origine du code source. L'enregistrement @code{origin} contient ces champs :"

#. type: item
#: guix-git/doc/guix-cookbook.texi:454
#, no-wrap
msgid "The method, here @code{url-fetch} to download via HTTP/FTP, but other methods"
msgstr "La méthode, ici @code{url-fetch} pour télécharger via HTTP/FTP, mais d'autres méthodes"

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:456
msgid "exist, such as @code{git-fetch} for Git repositories."
msgstr "existent, comme @code{git-fetch} pour les dépôts Git."

#. type: item
#: guix-git/doc/guix-cookbook.texi:456
#, no-wrap
msgid "The URI, which is typically some @code{https://} location for @code{url-fetch}.  Here"
msgstr "L'URI, qui est typiquement un emplacement @code{https://} pour @code{url-fetch}. Ici"

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:459
msgid "the special `mirror://gnu` refers to a set of well known locations, all of which can be used by Guix to fetch the source, should some of them fail."
msgstr "le code spécial « mirror://gnu » fait référence à une ensemble d'emplacements bien connus, qui peuvent tous être utilisés par Guix pour récupérer la source, si l'un d'entre eux échoue."

#. type: item
#: guix-git/doc/guix-cookbook.texi:459
#, no-wrap
msgid "The @code{sha256} checksum of the requested file.  This is essential to ensure"
msgstr "La somme de contrôle @code{sha256} du fichier demandé. C'est essentiel pour s'assurer"

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:462
msgid "the source is not corrupted.  Note that Guix works with base32 strings, hence the call to the @code{base32} function."
msgstr "que la source n'est pas corrompue. Remarquez que Guix fonctionne avec des chaînes en base32, d'où l'appel à la fonction @code{base32}."

#. type: item
#: guix-git/doc/guix-cookbook.texi:464
#, no-wrap
msgid "build-system"
msgstr "build-system"

#. type: table
#: guix-git/doc/guix-cookbook.texi:473
msgid "This is where the power of abstraction provided by the Scheme language really shines: in this case, the @code{gnu-build-system} abstracts away the famous @code{./configure && make && make install} shell invocations.  Other build systems include the @code{trivial-build-system} which does not do anything and requires from the packager to program all the build steps, the @code{python-build-system}, the @code{emacs-build-system}, and many more (@pxref{Build Systems,,, guix, GNU Guix Reference Manual})."
msgstr "C'est ici que la puissance d'abstraction du langage Scheme brille de toute sa splendeur : dans ce cas, le @code{gnu-build-system} permet d'abstraire les fameuses invocations shell @code{./configure && make && make install}. Parmi les autres systèmes de construction on trouve le @code{trivial-build-system} qui ne fait rien et demande de programmer toutes les étapes de construction, le @code{python-build-system}, @code{emacs-build-system} et bien d'autres (@pxref{Systèmes de construction,,, guix.fr, le manuel de référence de GNU Guix})."

#. type: item
#: guix-git/doc/guix-cookbook.texi:474
#, no-wrap
msgid "synopsis"
msgstr "synopsis"

#. type: table
#: guix-git/doc/guix-cookbook.texi:477
msgid "It should be a concise summary of what the package does.  For many packages a tagline from the project's home page can be used as the synopsis."
msgstr "Le synopsis devrait être un résumé court de ce que fait le paquet. Pour beaucoup de paquets, le slogan de la page d'accueil du projet est approprié pour le synopsis."

#. type: item
#: guix-git/doc/guix-cookbook.texi:478
#, no-wrap
msgid "description"
msgstr "description"

#. type: table
#: guix-git/doc/guix-cookbook.texi:481
msgid "Same as for the synopsis, it's fine to re-use the project description from the homepage.  Note that Guix uses Texinfo syntax."
msgstr "Comme le synopsis, vous pouvez réutiliser la description de la page d'accueil du projet. Remarquez que Guix utilise la syntaxe Texinfo."

#. type: item
#: guix-git/doc/guix-cookbook.texi:482
#, no-wrap
msgid "home-page"
msgstr "home-page"

#. type: table
#: guix-git/doc/guix-cookbook.texi:484
msgid "Use HTTPS if available."
msgstr "Utilisez l'adresse en HTTPS si elle est disponible."

#. type: item
#: guix-git/doc/guix-cookbook.texi:485
#, no-wrap
msgid "license"
msgstr "license"

#. type: table
#: guix-git/doc/guix-cookbook.texi:488
msgid "See @code{guix/licenses.scm} in the project source for a full list of available licenses."
msgstr "Voir @code{guix/licenses.scm} dans les sources du projet pour une liste complète des licences disponibles."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:492
msgid "Time to build our first package! Nothing fancy here for now: we will stick to a dummy @code{my-hello}, a copy of the above declaration."
msgstr "Il est temps de construire notre premier paquet ! Rien de bien compliqué pour l'instant : nous allons garder notre exemple avec @code{my-hello}, une copie de la déclaration montrée plus haut."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:496
msgid "As with the ritualistic ``Hello World'' taught with most programming languages, this will possibly be the most ``manual'' approach.  We will work out an ideal setup later; for now we will go the simplest route."
msgstr "Comme avec le rituel « Hello World » enseigné avec la plupart des langages de programmation, ce sera sans doute l'approche la plus « manuelle » d'empaquetage que vous utiliserez. Nous vous montrerons une configuration idéale plus tard, pour l'instant nous allons suivre la voie la plus simple."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:498
msgid "Save the following to a file @file{my-hello.scm}."
msgstr "Enregistrez ce qui suit dans un fichier nommé @file{my-hello.scm}."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:504
#, no-wrap
msgid ""
"(use-modules (guix packages)\n"
"             (guix download)\n"
"             (guix build-system gnu)\n"
"             (guix licenses))\n"
"\n"
msgstr ""
"(use-modules (guix packages)\n"
"             (guix download)\n"
"             (guix build-system gnu)\n"
"             (guix licenses))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:523
#, no-wrap
msgid ""
"(package\n"
"  (name \"my-hello\")\n"
"  (version \"2.10\")\n"
"  (source (origin\n"
"            (method url-fetch)\n"
"            (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                \".tar.gz\"))\n"
"            (sha256\n"
"             (base32\n"
"              \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"  (build-system gnu-build-system)\n"
"  (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"  (description\n"
"   \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"  (home-page \"https://www.gnu.org/software/hello/\")\n"
"  (license gpl3+))\n"
msgstr ""
"(package\n"
"  (name \"my-hello\")\n"
"  (version \"2.10\")\n"
"  (source (origin\n"
"            (method url-fetch)\n"
"            (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                \".tar.gz\"))\n"
"            (sha256\n"
"             (base32\n"
"              \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"  (build-system gnu-build-system)\n"
"  (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"  (description\n"
"   \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"  (home-page \"https://www.gnu.org/software/hello/\")\n"
"  (license gpl3+))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:526
msgid "We will explain the extra code in a moment."
msgstr "Nous allons expliquer le code supplémentaire dans un moment."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:533
msgid "Feel free to play with the different values of the various fields.  If you change the source, you'll need to update the checksum.  Indeed, Guix refuses to build anything if the given checksum does not match the computed checksum of the source code.  To obtain the correct checksum of the package declaration, we need to download the source, compute the sha256 checksum and convert it to base32."
msgstr "Essayez de jouer avec les différentes valeurs des différents champs. Si vous changez la source, vous devrez mettre à jour la somme de contrôle. En fait, Guix refusera de construire quoi que ce soit si la somme de contrôle donnée ne correspond pas à la somme de contrôle calculée de la source téléchargée. Pour obtenir la bonne somme de contrôle pour une déclaration de paquet, vous devrez télécharger la source, calculer la somme de contrôle sha256 et la convertir en base32."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:536
msgid "Thankfully, Guix can automate this task for us; all we need is to provide the URI:"
msgstr "Heureusement, Guix peut automatiser cette tache pour nous ; tout ce qu'on doit faire est de lui fournir l'URI :"

#.  This is example shell output.
#. type: example
#: guix-git/doc/guix-cookbook.texi:540
#, no-wrap
msgid ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz\n"
"\n"
msgstr ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:547
#, no-wrap
msgid ""
"Starting download of /tmp/guix-file.JLYgL7\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz...\n"
"following redirection to `https://mirror.ibcp.fr/pub/gnu/hello/hello-2.10.tar.gz'...\n"
" …10.tar.gz  709KiB                                 2.5MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\n"
msgstr ""
"Starting download of /tmp/guix-file.JLYgL7\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz...\n"
"following redirection to `https://mirror.ibcp.fr/pub/gnu/hello/hello-2.10.tar.gz'...\n"
" …10.tar.gz  709KiB                                 2.5MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:552
msgid "In this specific case the output tells us which mirror was chosen.  If the result of the above command is not the same as in the above snippet, update your @code{my-hello} declaration accordingly."
msgstr "Dans ce cas particulier, la sortie nous dit quel miroir a été choisi. Si le résultat de la commande au-dessus n'est pas le même que ce qui est montré, mettez à jour votre déclaration @code{my-hello} en fonction."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:556
msgid "Note that GNU package tarballs come with an OpenPGP signature, so you should definitely check the signature of this tarball with `gpg` to authenticate it before going further:"
msgstr "Remarquez que les archives des paquets GNU sont accompagnées de leur signature OpenPGP, donc vous devriez vérifier la signature de cette archive avec « gpg » pour l'authentifier avant d'aller plus loin :"

#.  This is example shell output.
#. type: example
#: guix-git/doc/guix-cookbook.texi:560
#, no-wrap
msgid ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz.sig\n"
"\n"
msgstr ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz.sig\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:575
#, no-wrap
msgid ""
"Starting download of /tmp/guix-file.03tFfb\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz.sig...\n"
"following redirection to `https://ftp.igh.cnrs.fr/pub/gnu/hello/hello-2.10.tar.gz.sig'...\n"
" ….tar.gz.sig  819B                                                                                                                       1.2MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig\n"
"0q0v86n3y38z17rl146gdakw9xc4mcscpk8dscs412j22glrv9jf\n"
"$ gpg --verify /gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig /gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"gpg: Signature made Sun 16 Nov 2014 01:08:37 PM CET\n"
"gpg:                using RSA key A9553245FDE9B739\n"
"gpg: Good signature from \"Sami Kerola <kerolasa@@iki.fi>\" [unknown]\n"
"gpg:                 aka \"Sami Kerola (http://www.iki.fi/kerolasa/) <kerolasa@@iki.fi>\" [unknown]\n"
"gpg: WARNING: This key is not certified with a trusted signature!\n"
"gpg:          There is no indication that the signature belongs to the owner.\n"
"Primary key fingerprint: 8ED3 96E3 7E38 D471 A005  30D3 A955 3245 FDE9 B739\n"
msgstr ""
"Starting download of /tmp/guix-file.03tFfb\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz.sig...\n"
"following redirection to `https://ftp.igh.cnrs.fr/pub/gnu/hello/hello-2.10.tar.gz.sig'...\n"
" ….tar.gz.sig  819B                                                                                                                       1.2MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig\n"
"0q0v86n3y38z17rl146gdakw9xc4mcscpk8dscs412j22glrv9jf\n"
"$ gpg --verify /gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig /gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"gpg: Signature faite le dim. 16 nov. 2014 13:08:37 CET\n"
"gpg:                avec la clef RSA A9553245FDE9B739\n"
"gpg: Bonne signature de « Sami Kerola (https://www.iki.fi/kerolasa/) <kerolasa@@iki.fi> » [inconnu]\n"
"gpg: Attention : cette clef n'est pas certifiée avec une signature de confiance.\n"
"gpg:             Rien n'indique que la signature appartient à son propriétaire.\n"
"Empreinte de clef principale : 8ED3 96E3 7E38 D471 A005  30D3 A955 3245 FDE9 B739\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:578
msgid "You can then happily run"
msgstr "Vous pouvez ensuite lancer"

#.  Do not translate this command
#. type: example
#: guix-git/doc/guix-cookbook.texi:582
#, no-wrap
msgid "$ guix package --install-from-file=my-hello.scm\n"
msgstr "$ guix package --install-from-file=my-hello.scm\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:585
msgid "You should now have @code{my-hello} in your profile!"
msgstr "Vous devriez maintenant avoir @code{my-hello} dans votre profil !"

#.  Do not translate this command
#. type: example
#: guix-git/doc/guix-cookbook.texi:591
#, no-wrap
msgid ""
"$ guix package --list-installed=my-hello\n"
"my-hello\t2.10\tout\n"
"/gnu/store/f1db2mfm8syb8qvc357c53slbvf1g9m9-my-hello-2.10\n"
msgstr ""
"$ guix package --list-installed=my-hello\n"
"my-hello\t2.10\tout\n"
"/gnu/store/f1db2mfm8syb8qvc357c53slbvf1g9m9-my-hello-2.10\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:596
msgid "We've gone as far as we could without any knowledge of Scheme.  Before moving on to more complex packages, now is the right time to brush up on your Scheme knowledge.  @pxref{A Scheme Crash Course} to get up to speed."
msgstr "Nous sommes allés aussi loin que possible sans aucune connaissance de Scheme. Avant de continuer sur des paquets plus complexes, il est maintenant temps de vous renforcer sur votre connaissance du langage Scheme. @pxref{A Scheme Crash Course} pour démarrer."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:597 guix-git/doc/guix-cookbook.texi:598
#, no-wrap
msgid "Setup"
msgstr "Configuration"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:603
msgid "In the rest of this chapter we will rely on some basic Scheme programming knowledge.  Now let's detail the different possible setups for working on Guix packages."
msgstr "Dans le reste de ce chapitre, nous nous appuierons sur vos connaissances de base du langage Scheme. Maintenant voyons les différentes configurations possibles pour travailler sur des paquets Guix."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:605
msgid "There are several ways to set up a Guix packaging environment."
msgstr "Il y a plusieurs moyens de mettre en place un environnement d'empaquetage pour Guix."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:608
msgid "We recommend you work directly on the Guix source checkout since it makes it easier for everyone to contribute to the project."
msgstr "Nous vous recommandons de travailler directement dans le dépôt des sources de Guix car ça facilitera la contribution au projet."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:610
msgid "But first, let's look at other possibilities."
msgstr "Mais d'abord, voyons les autres possibilités."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:611 guix-git/doc/guix-cookbook.texi:612
#, no-wrap
msgid "Local file"
msgstr "Fichier local"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:617
msgid "This is what we previously did with @samp{my-hello}.  With the Scheme basics we've covered, we are now able to explain the leading chunks.  As stated in @code{guix package --help}:"
msgstr "C'est ce que nous venons de faire avec @samp{my-hello}. Avec les bases de Scheme que nous vous avons présentées, nous pouvons maintenant éclairer le sens du début du fichier. Comme le dit @code{guix package --help} :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:622
#, no-wrap
msgid ""
"  -f, --install-from-file=FILE\n"
"                         install the package that the code within FILE\n"
"                         evaluates to\n"
msgstr ""
"  -f, --install-from-file=FICHIER\n"
"                         installer le paquet évalué par le code dans\n"
"                         FICHIER\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:626
msgid "Thus the last expression @emph{must} return a package, which is the case in our earlier example."
msgstr "Ainsi, la dernière expression @emph{doit} renvoyer un paquet, ce qui est le cas dans notre exemple précédent."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:630
msgid "The @code{use-modules} expression tells which of the modules we need in the file.  Modules are a collection of values and procedures.  They are commonly called ``libraries'' or ``packages'' in other programming languages."
msgstr "L'expression @code{use-modules} indique quels modules sont nécessaires dans le fichier. Les modules sont des collections de valeurs et de procédures. Ils sont souvent appelés « bibliothèques » ou « paquets » dans d'autres langages de programmation."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:631 guix-git/doc/guix-cookbook.texi:632
#, no-wrap
msgid "Channels"
msgstr "Canaux"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:634
#, no-wrap
msgid "channel"
msgstr "canal"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:640
msgid "Guix and its package collection can be extended through @dfn{channels}.  A channel is a Git repository, public or not, containing @file{.scm} files that provide packages (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}) or services (@pxref{Defining Services,,, guix, GNU Guix Reference Manual})."
msgstr "Guix et sa collection de paquet peut être étendu par des @dfn{canaux}. Un canal est un dépôt Git public ou non, qui contient des fichiers @file{.scm} qui fournissent des paquets (@pxref{Définition des paquets,,, guix.fr, le manuel de référence de GNU Guix}) ou des services (@pxref{Définir des services,,, guix.fr, le manuel de référence de GNU Guix})."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:643
msgid "How would you go about creating a channel? First, create a directory that will contain your @file{.scm} files, say @file{~/my-channel}:"
msgstr "Comment créer un canal ? Tout d'abord, créez un répertoire qui contiendra vos fichiers @file{.scm}, disons @file{~/mon-canal} :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:646
#, no-wrap
msgid "mkdir ~/my-channel\n"
msgstr "mkdir ~/mon-canal\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:650
msgid "Suppose you want to add the @samp{my-hello} package we saw previously; it first needs some adjustments:"
msgstr "Imaginons que vous souhaitiez ajouter le paquet @samp{my-hello} que nous avons vu plus tôt. Il a d'abord besoin de quelques ajustement :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:657
#, no-wrap
msgid ""
"(define-module (my-hello)\n"
"  #:use-module (guix licenses)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix build-system gnu)\n"
"  #:use-module (guix download))\n"
"\n"
msgstr ""
"(define-module (my-hello)\n"
"  #:use-module (guix licenses)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix build-system gnu)\n"
"  #:use-module (guix download))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:677
#, no-wrap
msgid ""
"(define-public my-hello\n"
"  (package\n"
"    (name \"my-hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"
msgstr ""
"(define-public my-hello\n"
"  (package\n"
"    (name \"my-hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:683
msgid "Note that we have assigned the package value to an exported variable name with @code{define-public}.  This is effectively assigning the package to the @code{my-hello} variable so that it can be referenced, among other as dependency of other packages."
msgstr "Remarquez que nous avons assigné la valeur du paquet à un nom de variable exportée avec @code{define-public}. Cela assigne en fait le paquet à la variable @code{my-hello} pour qu'elle puisse être utilisée, par exemple en dépendance d'un autre paquet."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:688
msgid "If you use @code{guix package --install-from-file=my-hello.scm} on the above file, it will fail because the last expression, @code{define-public}, does not return a package.  If you want to use @code{define-public} in this use-case nonetheless, make sure the file ends with an evaluation of @code{my-hello}:"
msgstr "Si vous utilisez @code{guix package --install-from-file=my-hello.scm} avec le fichier précédent, la commande échouera car la dernière expression, @code{define-public}, ne renvoie pas un paquet. Si vous voulez utiliser @code{define-public} dans ce cas tout de même, assurez-vous que le fichier termine par une évaluation de @code{my-hello} :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:694
#, no-wrap
msgid ""
";; ...\n"
"(define-public my-hello\n"
"  ;; ...\n"
"  )\n"
"\n"
msgstr ""
";; ...\n"
"(define-public my-hello\n"
"  ;; ...\n"
"  )\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:696
#, no-wrap
msgid "my-hello\n"
msgstr "my-hello\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:699
msgid "This last example is not very typical."
msgstr "Ce dernier exemple n'est pas très typique."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:703
msgid "Now how do you make that package visible to @command{guix} commands so you can test your packages? You need to add the directory to the search path using the @option{-L} command-line option, as in these examples:"
msgstr "Maintenant, comme rendre ce paquet visible pour les commandes @command{guix} afin de tester vos paquets ? Vous devez ajouter le répertoire au chemin de recherche avec l'option en ligne de commande @option{-L}, comme dans ces exemples :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:707
#, no-wrap
msgid ""
"guix show -L ~/my-channel my-hello\n"
"guix build -L ~/my-channel my-hello\n"
msgstr ""
"guix show -L ~/mon-canal my-hello\n"
"guix build -L ~/mon-canal my-hello\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:713
msgid "The final step is to turn @file{~/my-channel} into an actual channel, making your package collection seamlessly available @i{via} any @command{guix} command.  To do that, you first need to make it a Git repository:"
msgstr "L'étape finale consiste à transformer @file{~/mon-canal} en un vrai canal, pour rendre disponible votre collection de paquets via n'importe quelle commande @command{guix}. Pour cela, vous devez d'abord en faire un dépôt Git :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:719
#, no-wrap
msgid ""
"cd ~/my-channel\n"
"git init\n"
"git add my-hello.scm\n"
"git commit -m \"First commit of my channel.\"\n"
msgstr ""
"cd ~/mon-canal\n"
"git init\n"
"git add my-hello.scm\n"
"git commit -m \"Premier commit sur mon canal.\"\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:727
msgid "And that's it, you have a channel! From there on, you can add this channel to your channel configuration in @file{~/.config/guix/channels.scm} (@pxref{Specifying Additional Channels,,, guix, GNU Guix Reference Manual}); assuming you keep your channel local for now, the @file{channels.scm} would look something like this:"
msgstr "Et voilà, vous avez un canal ! À partir de maintenant, vous pouvez ajouter ce canal à votre configuration des canaux dans @file{~/.config/guix/channels.scm} (@pxref{Spécifier des canaux supplémentaires,,, guix.fr, le manuel de référence de GNU Guix}). En supposant que vous gardez votre canal localement pour l'instant, le fichier @file{channels.scm} ressemblerait à quelque chose comme ça :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:734
#, no-wrap
msgid ""
"(append (list (channel\n"
"                (name 'my-channel)\n"
"                (url (string-append \"file://\" (getenv \"HOME\")\n"
"                                    \"/my-channel\"))))\n"
"        %default-channels)\n"
msgstr ""
"(append (list (channel\n"
"                (name 'mon-canal)\n"
"                (url (string-append \"file://\" (getenv \"HOME\")\n"
"                                    \"/mon-canal\"))))\n"
"        %default-channels)\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:741
msgid "Next time you run @command{guix pull}, your channel will be picked up and the packages it defines will be readily available to all the @command{guix} commands, even if you do not pass @option{-L}.  The @command{guix describe} command will show that Guix is, indeed, using both the @code{my-channel} and the @code{guix} channels."
msgstr "La prochaine fois que vous exécuterez @command{guix pull}, votre canal sera récupéré et les paquets qu'il définit seront directement disponibles pour toutes les commandes @command{guix}, même si vous n'utilisez pas @option{-L}. La commande @command{guix describe} vous montrera que Guix utilise effectivement à la fois @code{mon-canal} et les canaux @code{guix}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:744
msgid "@xref{Creating a Channel,,, guix, GNU Guix Reference Manual}, for details."
msgstr "@xref{Écrire de nouveaux de canaux,,, guix.fr, le manuel de référence de GNU Guix} pour des détails."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:745 guix-git/doc/guix-cookbook.texi:746
#, no-wrap
msgid "Direct checkout hacking"
msgstr "Bidouillage direct dans le dépôt git"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:751
msgid "Working directly on the Guix project is recommended: it reduces the friction when the time comes to submit your changes upstream to let the community benefit from your hard work!"
msgstr "Nous vous recommandons de travailler directement sur le projet Guix : cela réduit le travail nécessaire quand vous voudrez soumettre vos changements en amont pour que la communauté puisse bénéficier de votre dur labeur !"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:757
msgid "Unlike most software distributions, the Guix repository holds in one place both the tooling (including the package manager) and the package definitions.  This choice was made so that it would give developers the flexibility to modify the API without breakage by updating all packages at the same time.  This reduces development inertia."
msgstr "Contrairement à la plupart des distributions logiciels, le dépôt Guix contient à la fois les outils (dont le gestionnaire de paquets) et les définitions des paquets. Nous avons fait ce choix pour permettre aux développeurs et développeuses de profiter de plus de flexibilité pour changer l'API sans rien casser, en mettant à jour tous les paquets en même temps. Cela réduit l'inertie dans le développement."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:759
msgid "Check out the official @uref{https://git-scm.com/, Git} repository:"
msgstr "Clonez le dépôt @uref{https://git-scm.com/, Git} officiel :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:762
#, no-wrap
msgid "$ git clone https://git.savannah.gnu.org/git/guix.git\n"
msgstr "$ git clone https://git.savannah.gnu.org/git/guix.git\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:766
msgid "In the rest of this article, we use @samp{$GUIX_CHECKOUT} to refer to the location of the checkout."
msgstr "Dans le reste de cet article, nous utiliserons @samp{$GUIX_CHECKOUT} pour faire référence à l'emplacement de ce clone."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:770
msgid "Follow the instructions in the manual (@pxref{Contributing,,, guix, GNU Guix Reference Manual}) to set up the repository environment."
msgstr "Suivez les instructions du manuel (@pxref{Contribuer,,, guix.fr, le manuel de référence de GNU Guix}) pour mettre en place l'environnement du dépôt."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:773
msgid "Once ready, you should be able to use the package definitions from the repository environment."
msgstr "Une fois prêts, vous devriez pouvoir utiliser les définitions des paquets de l'environnement du dépôt."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:775
msgid "Feel free to edit package definitions found in @samp{$GUIX_CHECKOUT/gnu/packages}."
msgstr "N'ayez pas peur de modifier les définitions des paquets que vous trouverez dans @samp{$GUIX_CHECKOUT/gnu/packages}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:779
msgid "The @samp{$GUIX_CHECKOUT/pre-inst-env} script lets you use @samp{guix} over the package collection of the repository (@pxref{Running Guix Before It Is Installed,,, guix, GNU Guix Reference Manual})."
msgstr "Le script @samp{$GUIX_CHECKOUT/pre-inst-env} vous permet d'utiliser @samp{guix} sur la collection de paquets du dépôt (@pxref{Lancer Guix avant qu’il ne soit installé,,, guix.fr, le manuel de référence de GNU Guix})."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:783
msgid "Search packages, such as Ruby:"
msgstr "Recherchez des paquets, comme Ruby :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:790
#, no-wrap
msgid ""
"  $ cd $GUIX_CHECKOUT\n"
"  $ ./pre-inst-env guix package --list-available=ruby\n"
"      ruby    1.8.7-p374      out     gnu/packages/ruby.scm:119:2\n"
"      ruby    2.1.6   out     gnu/packages/ruby.scm:91:2\n"
"      ruby    2.2.2   out     gnu/packages/ruby.scm:39:2\n"
msgstr ""
"  $ cd $GUIX_CHECKOUT\n"
"  $ ./pre-inst-env guix package --list-available=ruby\n"
"      ruby    1.8.7-p374      out     gnu/packages/ruby.scm:119:2\n"
"      ruby    2.1.6   out     gnu/packages/ruby.scm:91:2\n"
"      ruby    2.2.2   out     gnu/packages/ruby.scm:39:2\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:794
msgid "Build a package, here Ruby version 2.1:"
msgstr "Construisez un paquet, ici Ruby version 2.1 :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:798
#, no-wrap
msgid ""
"  $ ./pre-inst-env guix build --keep-failed ruby@@2.1\n"
"  /gnu/store/c13v73jxmj2nir2xjqaz5259zywsa9zi-ruby-2.1.6\n"
msgstr ""
"  $ ./pre-inst-env guix build --keep-failed ruby@@2.1\n"
"  /gnu/store/c13v73jxmj2nir2xjqaz5259zywsa9zi-ruby-2.1.6\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:802
msgid "Install it to your user profile:"
msgstr "Installez-le dans votre profil utilisateur :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:805
#, no-wrap
msgid "  $ ./pre-inst-env guix package --install ruby@@2.1\n"
msgstr "  $ ./pre-inst-env guix package --install ruby@@2.1\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:809
msgid "Check for common mistakes:"
msgstr "Vérifiez que vous n'avez pas fait l'une des erreurs courantes :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:812
#, no-wrap
msgid "  $ ./pre-inst-env guix lint ruby@@2.1\n"
msgstr "  $ ./pre-inst-env guix lint ruby@@2.1\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:817
msgid "Guix strives at maintaining a high packaging standard; when contributing to the Guix project, remember to"
msgstr "Guix essaye de maintenir un bon standard d'empaquetage ; quand vous contribuez au projet Guix, rappelez-vous de"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:821
msgid "follow the coding style (@pxref{Coding Style,,, guix, GNU Guix Reference Manual}),"
msgstr "suivre le style de code (@pxref{Style de code,,, guix.fr, le manuel de référence de GNU Guix}),"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:823
msgid "and review the check list from the manual (@pxref{Submitting Patches,,, guix, GNU Guix Reference Manual})."
msgstr "et de vérifier la check-list du manuel (@pxref{Envoyer des correctifs,,, guix.fr, le manuel de référence de GNU Guix})."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:827
msgid "Once you are happy with the result, you are welcome to send your contribution to make it part of Guix.  This process is also detailed in the manual.  (@pxref{Contributing,,, guix, GNU Guix Reference Manual})"
msgstr "Une fois que vous êtes satisfait du résultat, vous pouvez envoyer votre contribution pour qu'elle rentre dans Guix. Ce processus est aussi détaillé dans le manuel (@pxref{Contribuer,,, guix.fr, le manuel de référence de GNU Guix})"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:830
msgid "It's a community effort so the more join in, the better Guix becomes!"
msgstr "Guix est un projet communautaire, donc plus on est de fous, plus on rit !"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:831 guix-git/doc/guix-cookbook.texi:832
#, no-wrap
msgid "Extended example"
msgstr "Exemple avancé"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:837
msgid "The above ``Hello World'' example is as simple as it goes.  Packages can be more complex than that and Guix can handle more advanced scenarios.  Let's look at another, more sophisticated package (slightly modified from the source):"
msgstr "L'exemple « Hello World » précédent est le plus simple possible. Les paquets peuvent devenir plus complexes que cela et Guix peut gérer des scénarios plus avancés. Voyons un autre paquet plus sophistiqué (légèrement modifié à partir des sources) :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:851
#, no-wrap
msgid ""
"(define-module (gnu packages version-control)\n"
"  #:use-module ((guix licenses) #:prefix license:)\n"
"  #:use-module (guix utils)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix git-download)\n"
"  #:use-module (guix build-system cmake)\n"
"  #:use-module (gnu packages ssh)\n"
"  #:use-module (gnu packages web)\n"
"  #:use-module (gnu packages pkg-config)\n"
"  #:use-module (gnu packages python)\n"
"  #:use-module (gnu packages compression)\n"
"  #:use-module (gnu packages tls))\n"
"\n"
msgstr ""
"(define-module (gnu packages version-control)\n"
"  #:use-module ((guix licenses) #:prefix license:)\n"
"  #:use-module (guix utils)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix git-download)\n"
"  #:use-module (guix build-system cmake)\n"
"  #:use-module (gnu packages ssh)\n"
"  #:use-module (gnu packages web)\n"
"  #:use-module (gnu packages pkg-config)\n"
"  #:use-module (gnu packages python)\n"
"  #:use-module (gnu packages compression)\n"
"  #:use-module (gnu packages tls))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:905
#, no-wrap
msgid ""
"(define-public my-libgit2\n"
"  (let ((commit \"e98d0a37c93574d2c6107bf7f31140b548c6a7bf\")\n"
"        (revision \"1\"))\n"
"    (package\n"
"      (name \"my-libgit2\")\n"
"      (version (git-version \"0.26.6\" revision commit))\n"
"      (source (origin\n"
"                (method git-fetch)\n"
"                (uri (git-reference\n"
"                      (url \"https://github.com/libgit2/libgit2/\")\n"
"                      (commit commit)))\n"
"                (file-name (git-file-name name version))\n"
"                (sha256\n"
"                 (base32\n"
"                  \"17pjvprmdrx4h6bb1hhc98w9qi6ki7yl57f090n9kbhswxqfs7s3\"))\n"
"                (patches (search-patches \"libgit2-mtime-0.patch\"))\n"
"                (modules '((guix build utils)))\n"
"                ;; Remove bundled software.\n"
"                (snippet '(delete-file-recursively \"deps\"))))\n"
"      (build-system cmake-build-system)\n"
"      (outputs '(\"out\" \"debug\"))\n"
"      (arguments\n"
"       `(#:tests? #true                         ; Run the test suite (this is the default)\n"
"         #:configure-flags '(\"-DUSE_SHA1DC=ON\") ; SHA-1 collision detection\n"
"         #:phases\n"
"         (modify-phases %standard-phases\n"
"           (add-after 'unpack 'fix-hardcoded-paths\n"
"             (lambda _\n"
"               (substitute* \"tests/repo/init.c\"\n"
"                 ((\"#!/bin/sh\") (string-append \"#!\" (which \"sh\"))))\n"
"               (substitute* \"tests/clar/fs.h\"\n"
"                 ((\"/bin/cp\") (which \"cp\"))\n"
"                 ((\"/bin/rm\") (which \"rm\")))))\n"
"           ;; Run checks more verbosely.\n"
"           (replace 'check\n"
"             (lambda _ (invoke \"./libgit2_clar\" \"-v\" \"-Q\")))\n"
"           (add-after 'unpack 'make-files-writable-for-tests\n"
"             (lambda _ (for-each make-file-writable (find-files \".\" \".*\")))))))\n"
"      (inputs\n"
"       (list libssh2 http-parser python-wrapper))\n"
"      (native-inputs\n"
"       (list pkg-config))\n"
"      (propagated-inputs\n"
"       ;; These two libraries are in 'Requires.private' in libgit2.pc.\n"
"       (list openssl zlib))\n"
"      (home-page \"https://libgit2.github.com/\")\n"
"      (synopsis \"Library providing Git core methods\")\n"
"      (description\n"
"       \"Libgit2 is a portable, pure C implementation of the Git core methods\n"
"provided as a re-entrant linkable library with a solid API, allowing you to\n"
"write native speed custom Git applications in any language with bindings.\")\n"
"      ;; GPLv2 with linking exception\n"
"      (license license:gpl2))))\n"
msgstr ""
"(define-public my-libgit2\n"
"  (let ((commit \"e98d0a37c93574d2c6107bf7f31140b548c6a7bf\")\n"
"        (revision \"1\"))\n"
"    (package\n"
"      (name \"my-libgit2\")\n"
"      (version (git-version \"0.26.6\" revision commit))\n"
"      (source (origin\n"
"                (method git-fetch)\n"
"                (uri (git-reference\n"
"                      (url \"https://github.com/libgit2/libgit2/\")\n"
"                      (commit commit)))\n"
"                (file-name (git-file-name name version))\n"
"                (sha256\n"
"                 (base32\n"
"                  \"17pjvprmdrx4h6bb1hhc98w9qi6ki7yl57f090n9kbhswxqfs7s3\"))\n"
"                (patches (search-patches \"libgit2-mtime-0.patch\"))\n"
"                (modules '((guix build utils)))\n"
"                ;; Suppression des logiciels embarqués.\n"
"                (snippet '(delete-file-recursively \"deps\"))))\n"
"      (build-system cmake-build-system)\n"
"      (outputs '(\"out\" \"debug\"))\n"
"      (arguments\n"
"       `(#:tests? #true                         ; Lancer la suite de tests (c'est la valeur par défaut)\n"
"         #:configure-flags '(\"-DUSE_SHA1DC=ON\") ; détection de collision SHA-1\n"
"         #:phases\n"
"         (modify-phases %standard-phases\n"
"           (add-after 'unpack 'fix-hardcoded-paths\n"
"             (lambda _\n"
"               (substitute* \"tests/repo/init.c\"\n"
"                 ((\"#!/bin/sh\") (string-append \"#!\" (which \"sh\"))))\n"
"               (substitute* \"tests/clar/fs.h\"\n"
"                 ((\"/bin/cp\") (which \"cp\"))\n"
"                 ((\"/bin/rm\") (which \"rm\")))))\n"
"           ;; Lancer les tests avec plus de verbosité.\n"
"           (replace 'check\n"
"             (lambda _ (invoke \"./libgit2_clar\" \"-v\" \"-Q\")))\n"
"           (add-after 'unpack 'make-files-writable-for-tests\n"
"             (lambda _ (for-each make-file-writable (find-files \".\" \".*\")))))))\n"
"      (inputs\n"
"       (list libssh2 http-parser python-wrapper))\n"
"      (native-inputs\n"
"       (list pkg-config))\n"
"      (propagated-inputs\n"
"       ;; Ces deux bibliothèques sont dans « Requires.private », dans libgit2.pc.\n"
"       (list openssl zlib))\n"
"      (home-page \"https://libgit2.github.com/\")\n"
"      (synopsis \"Library providing Git core methods\")\n"
"      (description\n"
"       \"Libgit2 is a portable, pure C implementation of the Git core methods\n"
"provided as a re-entrant linkable library with a solid API, allowing you to\n"
"write native speed custom Git applications in any language with bindings.\")\n"
"      ;; GPLv2 with linking exception\n"
"      (license license:gpl2))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:910
msgid "(In those cases were you only want to tweak a few fields from a package definition, you should rely on inheritance instead of copy-pasting everything.  See below.)"
msgstr "(Dans les cas où vous voulez seulement changer quelques champs d'une définition de paquets, vous devriez utiliser l'héritage au lieu de tout copier-coller. Voir plus bas.)"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:912
msgid "Let's discuss those fields in depth."
msgstr "Parlons maintenant de ces champs en détail."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:913
#, no-wrap
msgid "@code{git-fetch} method"
msgstr "La méthode @code{git-fetch}"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:920
msgid "Unlike the @code{url-fetch} method, @code{git-fetch} expects a @code{git-reference} which takes a Git repository and a commit.  The commit can be any Git reference such as tags, so if the @code{version} is tagged, then it can be used directly.  Sometimes the tag is prefixed with a @code{v}, in which case you'd use @code{(commit (string-append \"v\" version))}."
msgstr "Contrairement à la méthode @code{url-fetch}, @code{git-fetch} a besoin d'un @code{git-reference} qui prend un dépôt Git et un commit. Le commit peut être n'importe quelle référence Git comme des tags, donc si la @code{version} a un tag associé, vous pouvez l'utiliser directement. Parfois le tag est précédé de @code{v}, auquel cas vous pouvez utiliser @code{(commit (string-append \"v\" version))}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:924
msgid "To ensure that the source code from the Git repository is stored in a directory with a descriptive name, we use @code{(file-name (git-file-name name version))}."
msgstr "Pour vous assurer que le code source du dépôt Git est stocké dans un répertoire avec un nom descriptif, utilisez @code{(file-name (git-file-name name version))}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:929
msgid "The @code{git-version} procedure can be used to derive the version when packaging programs for a specific commit, following the Guix contributor guidelines (@pxref{Version Numbers,,, guix, GNU Guix Reference Manual})."
msgstr "Vous pouvez utiliser la procédure @code{git-version} pour calculer la version quand vous empaquetez des programmes pour un commit spécifique, en suivant le guide de contribution (@pxref{Numéros de version,,, guix.fr, le manuel de référence de GNU Guix})."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:933
msgid "How does one obtain the @code{sha256} hash that's in there, you ask? By invoking @command{guix hash} on a checkout of the desired commit, along these lines:"
msgstr "Comment obtenir le hash @code{sha256}, vous demandez-vous ? En invoquant @command{guix hash} sur un clone du commit voulu, de cette manière :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:939
#, no-wrap
msgid ""
"git clone https://github.com/libgit2/libgit2/\n"
"cd libgit2\n"
"git checkout v0.26.6\n"
"guix hash -rx .\n"
msgstr ""
"git clone https://github.com/libgit2/libgit2/\n"
"cd libgit2\n"
"git checkout v0.26.6\n"
"guix hash -rx .\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:944
msgid "@command{guix hash -rx} computes a SHA256 hash over the whole directory, excluding the @file{.git} sub-directory (@pxref{Invoking guix hash,,, guix, GNU Guix Reference Manual})."
msgstr "@command{guix hash -rx} calcul un SHA256 sur le répertoire entier, en excluant le sous-répertoire @file{.git} (@pxref{Invoquer guix hash,,, guix.fr, le manuel de référence de GNU Guix})."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:947
msgid "In the future, @command{guix download} will hopefully be able to do these steps for you, just like it does for regular downloads."
msgstr "Dans le futur, @command{guix download} sera sans doute capable de faire cela pour vous, comme il le fait pour les téléchargements directs."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:948
#, no-wrap
msgid "Snippets"
msgstr "Les bouts de code"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:954
msgid "Snippets are quoted (i.e. non-evaluated) Scheme code that are a means of patching the source.  They are a Guix-y alternative to the traditional @file{.patch} files.  Because of the quote, the code in only evaluated when passed to the Guix daemon for building.  There can be as many snippets as needed."
msgstr "Les bouts de code (snippet) sont des fragments quotés (c.-à-d. non évalués) de code Scheme utilisés pour modifier les sources. C'est une alternative aux fichiers @file{.patch} traditionnels, plus proche de l'esprit de Guix. À cause de la quote, le code n'est évalué que lorsqu'il est passé au démon Guix pour la construction. Il peut y avoir autant de bout de code que nécessaire."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:957
msgid "Snippets might need additional Guile modules which can be imported from the @code{modules} field."
msgstr "Les bouts de code on parfois besoin de modules Guile supplémentaires qui peuvent être importés dans le champ @code{modules}."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:958
#, no-wrap
msgid "Inputs"
msgstr "Entrées"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:961
msgid "There are 3 different input types.  In short:"
msgstr "Il y a trois types d'entrées. En résumé :"

#. type: item
#: guix-git/doc/guix-cookbook.texi:963
#, no-wrap
msgid "native-inputs"
msgstr "native-inputs"

#. type: table
#: guix-git/doc/guix-cookbook.texi:966
msgid "Required for building but not runtime -- installing a package through a substitute won't install these inputs."
msgstr "Requis pour construire mais pas à l'exécution -- installer un paquet avec un substitut n'installera pas ces entrées."

#. type: item
#: guix-git/doc/guix-cookbook.texi:966
#, no-wrap
msgid "inputs"
msgstr "inputs"

#. type: table
#: guix-git/doc/guix-cookbook.texi:969
msgid "Installed in the store but not in the profile, as well as being present at build time."
msgstr "Installées dans le dépôt mais pas dans le profil, et présentes à la construction."

#. type: item
#: guix-git/doc/guix-cookbook.texi:969
#, no-wrap
msgid "propagated-inputs"
msgstr "propagated-inputs"

#. type: table
#: guix-git/doc/guix-cookbook.texi:972
msgid "Installed in the store and in the profile, as well as being present at build time."
msgstr "Installées dans le dépôt et dans le profil, et présentes à la construction."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:975
msgid "@xref{package Reference,,, guix, GNU Guix Reference Manual} for more details."
msgstr "@xref{Référence de package,,, guix.fr, le manuel de référence de GNU Guix} pour plus de détails."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:979
msgid "The distinction between the various inputs is important: if a dependency can be handled as an @emph{input} instead of a @emph{propagated input}, it should be done so, or else it ``pollutes'' the user profile for no good reason."
msgstr "La différence entre les différents types d'entrées est importante : si une dépendance peut être utilisée comme @emph{entrée} plutôt que comme @emph{entrée propagée}, il faut faire ça, sinon elle « polluera » le profil utilisateur sans raison."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:986
msgid "For instance, a user installing a graphical program that depends on a command line tool might only be interested in the graphical part, so there is no need to force the command line tool into the user profile.  The dependency is a concern to the package, not to the user.  @emph{Inputs} make it possible to handle dependencies without bugging the user by adding undesired executable files (or libraries) to their profile."
msgstr "Par exemple, si vous installez un programme graphique qui dépend d'un outil en ligne de commande, vous êtes probablement intéressé uniquement par la partie graphique, donc inutile de forcer l'outil en ligne de commande à être présent dans le profil utilisateur. Les dépendances sont gérés par les paquets, pas par les utilisateurs et utilisatrices. Les @emph{entrées} permettent de gérer les dépendances sans ennuyer les utilisateurs et utilisatrices en ajoutant des fichiers exécutables (ou bibliothèque) inutiles dans leur profil."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:992
msgid "Same goes for @emph{native-inputs}: once the program is installed, build-time dependencies can be safely garbage-collected.  It also matters when a substitute is available, in which case only the @emph{inputs} and @emph{propagated inputs} will be fetched: the @emph{native inputs} are not required to install a package from a substitute."
msgstr "Pareil pour @emph{native-inputs} : une fois le programme installé, les dépendances à la construction peuvent être supprimées sans problème par le ramasse-miettes. Lorsqu'un substitut est disponible, seuls les @emph{entrées} et les @emph{entrées propagées} sont récupérées : les @emph{entrées natives} ne sont pas requises pour installer un paquet à partir d'un substitut."

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:993 guix-git/doc/guix-cookbook.texi:2024
#: guix-git/doc/guix-cookbook.texi:3700 guix-git/doc/guix-cookbook.texi:3754
#, no-wrap
msgid "Note"
msgstr "Remarque"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:996
msgid "You may see here and there snippets where package inputs are written quite differently, like so:"
msgstr "Vous trouverez ici et là des extraits où les entrées des paquets sont écrites assez différemment, comme ceci :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1003
#, no-wrap
msgid ""
";; The \"old style\" for inputs.\n"
"(inputs\n"
" `((\"libssh2\" ,libssh2)\n"
"   (\"http-parser\" ,http-parser)\n"
"   (\"python\" ,python-wrapper)))\n"
msgstr ""
";; « L'ancien style » pour les entrées.\n"
"(inputs\n"
" `((\"libssh2\" ,libssh2)\n"
"   (\"http-parser\" ,http-parser)\n"
"   (\"python\" ,python-wrapper)))\n"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:1009
msgid "This is the ``old style'', where each input in the list is explicitly given a label (a string).  It is still supported but we recommend using the style above instead.  @xref{package Reference,,, guix, GNU Guix Reference Manual}, for more info."
msgstr "C'est « l'ancien style », où chaque entrée est une liste que donne une étiquette explicite (une chaine). C'est une méthode prise en charge mais nous vous recommandons plutôt d'utiliser le style présenté plus haut. @xref{Référence de package,,, guix.fr, le manuel de référence de GNU Guix}, pour plus d'informations."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1011
#, no-wrap
msgid "Outputs"
msgstr "Sorties"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1015
msgid "Just like how a package can have multiple inputs, it can also produce multiple outputs."
msgstr "De la même manière qu'un paquet peut avoir plusieurs entrées, il peut aussi avoir plusieurs sorties."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1017
msgid "Each output corresponds to a separate directory in the store."
msgstr "Chaque sortie correspond à un répertoire différent dans le dépôt."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1020
msgid "The user can choose which output to install; this is useful to save space or to avoid polluting the user profile with unwanted executables or libraries."
msgstr "Vous pouvez choisir quelle sortie installer ; c'est utile pour préserver l'espace disque et éviter de polluer le profil utilisateur avec des exécutables et des bibliothèques inutiles."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1023
msgid "Output separation is optional.  When the @code{outputs} field is left out, the default and only output (the complete package) is referred to as @code{\"out\"}."
msgstr "La séparation des sorties est facultative. Lorsque le champ @code{outputs} n'est pas spécifié, l'unique sortie par défaut (le paquet complet donc) est @code{\"out\"}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1025
msgid "Typical separate output names include @code{debug} and @code{doc}."
msgstr "Les sorties séparées sont en général @code{debug} et @code{doc}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1029
msgid "It's advised to separate outputs only when you've shown it's worth it: if the output size is significant (compare with @code{guix size}) or in case the package is modular."
msgstr "Vous devriez séparer les sorties seulement si vous pouvez montrer que c'est utile : si la taille de la sortie est importante (vous pouvez comparer avec @code{guix size}) ou si le paquet est modulaire."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1030
#, no-wrap
msgid "Build system arguments"
msgstr "Arguments du système de construction"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1033
msgid "The @code{arguments} is a keyword-value list used to configure the build process."
msgstr "Le champ @code{arguments} est une liste de mot-clés et de valeurs utilisés pour configurer le processus de construction."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1038
msgid "The simplest argument @code{#:tests?} can be used to disable the test suite when building the package.  This is mostly useful when the package does not feature any test suite.  It's strongly recommended to keep the test suite on if there is one."
msgstr "L'argument le plus simple est @code{#:tests?} et on l'utilise pour désactiver la suite de tests pendant la construction du paquet. C'est surtout utile si le paquet n'a pas de suite de tests. Nous vous recommandons fortement de laisser tourner la suite de tests s'il y en a une."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1042
msgid "Another common argument is @code{:make-flags}, which specifies a list of flags to append when running make, as you would from the command line.  For instance, the following flags"
msgstr "Un autre argument courant est @code{#:make-flags}, qui spécifie une liste de drapeaux à ajouter en lançant make, comme ce que vous feriez sur la ligne de commande. Par exemple, les drapeaux suivants"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1046
#, no-wrap
msgid ""
"#:make-flags (list (string-append \"prefix=\" (assoc-ref %outputs \"out\"))\n"
"                   \"CC=gcc\")\n"
msgstr ""
"#:make-flags (list (string-append \"prefix=\" (assoc-ref %outputs \"out\"))\n"
"                   \"CC=gcc\")\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1049
msgid "translate into"
msgstr "se traduisent en"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1052
#, no-wrap
msgid "$ make CC=gcc prefix=/gnu/store/...-<out>\n"
msgstr "$ make CC=gcc prefix=/gnu/store/...-<out>\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1058
msgid "This sets the C compiler to @code{gcc} and the @code{prefix} variable (the installation directory in Make parlance) to @code{(assoc-ref %outputs \"out\")}, which is a build-stage global variable pointing to the destination directory in the store (something like @file{/gnu/store/...-my-libgit2-20180408})."
msgstr "Cela indique que le compilateur C sera @code{gcc} et la variable @code{prefix} (le répertoire d'installation pour Make) sera @code{(assoc-ref %outputs \"out\")}, qui est une variable globale côté construction qui pointe vers le répertoire de destination dans le dépôt (quelque chose comme @file{/gnu/store/…-my-libgit2-20180408})."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1060
msgid "Similarly, it's possible to set the configure flags:"
msgstr "De manière identique, vous pouvez indiquer les drapeaux de configuration :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1063
#, no-wrap
msgid "#:configure-flags '(\"-DUSE_SHA1DC=ON\")\n"
msgstr "#:configure-flags '(\"-DUSE_SHA1DC=ON\")\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1067
msgid "The @code{%build-inputs} variable is also generated in scope.  It's an association table that maps the input names to their store directories."
msgstr "La variable @code{%build-inputs} est aussi générée dans cette portée. C'est une liste d'association qui fait correspondre les noms des entrées à leur répertoire dans le dépôt."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1072
msgid "The @code{phases} keyword lists the sequential steps of the build system.  Typically phases include @code{unpack}, @code{configure}, @code{build}, @code{install} and @code{check}.  To know more about those phases, you need to work out the appropriate build system definition in @samp{$GUIX_CHECKOUT/guix/build/gnu-build-system.scm}:"
msgstr "Le mot-clé @code{phases} liste la séquence d'étapes du système de construction. Les phases usuelles sont @code{unpack}, @code{configure}, @code{build}, @code{install} et @code{check}. Pour en savoir plus, vous devez trouver la bonne définition du système de construction dans @samp{$GUIX_CHECKOUT/guix/build/gnu-build-system.scm} :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1091
#, no-wrap
msgid ""
"(define %standard-phases\n"
"  ;; Standard build phases, as a list of symbol/procedure pairs.\n"
"  (let-syntax ((phases (syntax-rules ()\n"
"                         ((_ p ...) `((p . ,p) ...)))))\n"
"    (phases set-SOURCE-DATE-EPOCH set-paths install-locale unpack\n"
"            bootstrap\n"
"            patch-usr-bin-file\n"
"            patch-source-shebangs configure patch-generated-file-shebangs\n"
"            build check install\n"
"            patch-shebangs strip\n"
"            validate-runpath\n"
"            validate-documentation-location\n"
"            delete-info-dir-file\n"
"            patch-dot-desktop-files\n"
"            install-license-files\n"
"            reset-gzip-timestamps\n"
"            compress-documentation)))\n"
msgstr ""
"(define %standard-phases\n"
"  ;; Standard build phases, as a list of symbol/procedure pairs.\n"
"  (let-syntax ((phases (syntax-rules ()\n"
"                         ((_ p ...) `((p . ,p) ...)))))\n"
"    (phases set-SOURCE-DATE-EPOCH set-paths install-locale unpack\n"
"            bootstrap\n"
"            patch-usr-bin-file\n"
"            patch-source-shebangs configure patch-generated-file-shebangs\n"
"            build check install\n"
"            patch-shebangs strip\n"
"            validate-runpath\n"
"            validate-documentation-location\n"
"            delete-info-dir-file\n"
"            patch-dot-desktop-files\n"
"            install-license-files\n"
"            reset-gzip-timestamps\n"
"            compress-documentation)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1094
msgid "Or from the REPL:"
msgstr "Ou depuis la REPL :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1100
#, no-wrap
msgid ""
"(add-to-load-path \"/path/to/guix/checkout\")\n"
",use (guix build gnu-build-system)\n"
"(map first %standard-phases)\n"
"@result{} (set-SOURCE-DATE-EPOCH set-paths install-locale unpack bootstrap patch-usr-bin-file patch-source-shebangs configure patch-generated-file-shebangs build check install patch-shebangs strip validate-runpath validate-documentation-location delete-info-dir-file patch-dot-desktop-files install-license-files reset-gzip-timestamps compress-documentation)\n"
msgstr ""
"(add-to-load-path \"/path/to/guix/checkout\")\n"
",use (guix build gnu-build-system)\n"
"(map first %standard-phases)\n"
"@result{} (set-SOURCE-DATE-EPOCH set-paths install-locale unpack bootstrap patch-usr-bin-file patch-source-shebangs configure patch-generated-file-shebangs build check install patch-shebangs strip validate-runpath validate-documentation-location delete-info-dir-file patch-dot-desktop-files install-license-files reset-gzip-timestamps compress-documentation)\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1104
msgid "If you want to know more about what happens during those phases, consult the associated procedures."
msgstr "Si vous voulez en apprendre plus sur ce qui arrive pendant ces phases, consultez les procédures associées."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1107
msgid "For instance, as of this writing the definition of @code{unpack} for the GNU build system is:"
msgstr "Par exemple, au moment d'écrire ces lignes, la définition de @code{unpack} dans le système de construction de GNU est :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1117
#, no-wrap
msgid ""
"(define* (unpack #:key source #:allow-other-keys)\n"
"  \"Unpack SOURCE in the working directory, and change directory within the\n"
"source.  When SOURCE is a directory, copy it in a sub-directory of the current\n"
"working directory.\"\n"
"  (if (file-is-directory? source)\n"
"      (begin\n"
"        (mkdir \"source\")\n"
"        (chdir \"source\")\n"
"\n"
msgstr ""
"(define* (unpack #:key source #:allow-other-keys)\n"
"  \"Unpack SOURCE in the working directory, and change directory within the\n"
"source.  When SOURCE is a directory, copy it in a sub-directory of the current\n"
"working directory.\"\n"
"  (if (file-is-directory? source)\n"
"      (begin\n"
"        (mkdir \"source\")\n"
"        (chdir \"source\")\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1128
#, no-wrap
msgid ""
"        ;; Preserve timestamps (set to the Epoch) on the copied tree so that\n"
"        ;; things work deterministically.\n"
"        (copy-recursively source \".\"\n"
"                          #:keep-mtime? #true))\n"
"      (begin\n"
"        (if (string-suffix? \".zip\" source)\n"
"            (invoke \"unzip\" source)\n"
"            (invoke \"tar\" \"xvf\" source))\n"
"        (chdir (first-subdirectory \".\"))))\n"
"  #true)\n"
msgstr ""
"        ;; Preserve timestamps (set to the Epoch) on the copied tree so that\n"
"        ;; things work deterministically.\n"
"        (copy-recursively source \".\"\n"
"                          #:keep-mtime? #true))\n"
"      (begin\n"
"        (if (string-suffix? \".zip\" source)\n"
"            (invoke \"unzip\" source)\n"
"            (invoke \"tar\" \"xvf\" source))\n"
"        (chdir (first-subdirectory \".\"))))\n"
"  #true)\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1136
msgid "Note the @code{chdir} call: it changes the working directory to where the source was unpacked.  Thus every phase following the @code{unpack} will use the source as a working directory, which is why we can directly work on the source files.  That is to say, unless a later phase changes the working directory to something else."
msgstr "Remarquez l'appel à @code{chdir} : il change de répertoire courant vers la source qui vient d'être décompressée. Ainsi toutes les phases suivantes utiliseront le répertoire des sources comme répertoire de travail, ce qui explique qu'on peut travailler directement sur les fichiers sources. Du moins, tant qu'une phase suivante ne change pas le répertoire de travail."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1140
msgid "We modify the list of @code{%standard-phases} of the build system with the @code{modify-phases} macro as per the list of specified modifications, which may have the following forms:"
msgstr "Nous modifions la liste des @code{%standard-phases} du système de construction avec la macro @code{modify-phases} qui indique la liste des modifications, sous cette formes :"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1144
msgid "@code{(add-before @var{phase} @var{new-phase} @var{procedure})}: Run @var{procedure} named @var{new-phase} before @var{phase}."
msgstr "@code{(add-before @var{phase} @var{nouvelle-phase} @var{procédure})} : Lance une @var{procédure} nommée @var{nouvelle-phase} avant @var{phase}."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1146
msgid "@code{(add-after @var{phase} @var{new-phase} @var{procedure})}: Same, but afterwards."
msgstr "@code{(add-after @var{phase} @var{nouvelle-phase} @var{procédure})} : Pareil, mais après la @var{phase}."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1148
msgid "@code{(replace @var{phase} @var{procedure})}."
msgstr "@code{(replace @var{phase} @var{procédure})}."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1150
msgid "@code{(delete @var{phase})}."
msgstr "@code{(delete @var{phase})}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1157
msgid "The @var{procedure} supports the keyword arguments @code{inputs} and @code{outputs}.  Each input (whether @emph{native}, @emph{propagated} or not) and output directory is referenced by their name in those variables.  Thus @code{(assoc-ref outputs \"out\")} is the store directory of the main output of the package.  A phase procedure may look like this:"
msgstr "La @var{procédure} prend en charge les arguments @code{inputs} et @code{outputs} sous forme de mot-clés. Les entrées (@emph{natives}, @emph{propagées} et simples) et répertoires de sortie sont référencés par leur nom dans ces variables. Ainsi @code{(assoc-ref outputs \"out\")} est le répertoire du dépôt de la sortie principale du paquet. Une procédure de phase ressemble à cela :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1165
#, no-wrap
msgid ""
"(lambda* (#:key inputs outputs #:allow-other-keys)\n"
"  (let ((bash-directory (assoc-ref inputs \"bash\"))\n"
"        (output-directory (assoc-ref outputs \"out\"))\n"
"        (doc-directory (assoc-ref outputs \"doc\")))\n"
"    ;; ...\n"
"    #true))\n"
msgstr ""
"(lambda* (#:key inputs outputs #:allow-other-keys)\n"
"  (let ((bash-directory (assoc-ref inputs \"bash\"))\n"
"        (output-directory (assoc-ref outputs \"out\"))\n"
"        (doc-directory (assoc-ref outputs \"doc\")))\n"
"    ;; ...\n"
"    #true))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1171
msgid "The procedure must return @code{#true} on success.  It's brittle to rely on the return value of the last expression used to tweak the phase because there is no guarantee it would be a @code{#true}.  Hence the trailing @code{#true} to ensure the right value is returned on success."
msgstr "La procédure doit renvoyer @code{#true} si elle réussit. S'appuyer sur la valeur de retour de la dernière expression n'est pas très solide parce qu'il n'y a pas de garantie qu'elle sera @code{#true}. Donc le @code{#true} à la fin permet de s'assurer que la bonne valeur est renvoyée si la phase réussit."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1172
#, no-wrap
msgid "Code staging"
msgstr "Échelonnage du code"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1178
msgid "The astute reader may have noticed the quasi-quote and comma syntax in the argument field.  Indeed, the build code in the package declaration should not be evaluated on the client side, but only when passed to the Guix daemon.  This mechanism of passing code around two running processes is called @uref{https://arxiv.org/abs/1709.00833, code staging}."
msgstr "Si vous avez été attentif, vous aurez remarqué la quasi-quote et la virgule dans le champ argument. En effet, le code de construction dans la déclaration du paquet ne doit pas être évalué côté client, mais seulement après avoir été passé au démon Guix. Ce mécanisme de passage de code entre deux processus s'appelle @uref{https://arxiv.org/abs/1709.00833, l'échelonnage de code}."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1179
#, no-wrap
msgid "Utility functions"
msgstr "Fonctions utilitaires"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1184
msgid "When customizing @code{phases}, we often need to write code that mimics the equivalent system invocations (@code{make}, @code{mkdir}, @code{cp}, etc.)@: commonly used during regular ``Unix-style'' installations."
msgstr "Lorsque vous modifiez les @code{phases}, vous aurez souvent besoin d'écrire du code qui ressemble aux invocation équivalentes (@code{make}, @code{mkdir}, @code{cp}, etc) couramment utilisées durant une installatio plus standard dans le monde Unix."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1187
msgid "Some like @code{chmod} are native to Guile.  @xref{,,, guile, Guile reference manual} for a complete list."
msgstr "Certaines comme @code{chmod} sont natives dans Guile. @xref{,,, guile, Guile reference manual} pour une liste complète."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1190
msgid "Guix provides additional helper functions which prove especially handy in the context of package management."
msgstr "Guix fournit des fonctions utilitaires supplémentaires qui sont particulièrement utiles pour la gestion des paquets."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1194
msgid "Some of those functions can be found in @samp{$GUIX_CHECKOUT/guix/guix/build/utils.scm}.  Most of them mirror the behaviour of the traditional Unix system commands:"
msgstr "Certaines de ces fonctions se trouvent dans @samp{$GUIX_CHECKOUT/guix/guix/build/utils.scm}. La plupart copient le comportement des commandes systèmes Unix traditionnelles :"

#. type: item
#: guix-git/doc/guix-cookbook.texi:1196
#, no-wrap
msgid "which"
msgstr "which"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1198
msgid "Like the @samp{which} system command."
msgstr "Fonctionne comme la commande système @samp{which}."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1198
#, no-wrap
msgid "find-files"
msgstr "find-files"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1200
msgid "Akin to the @samp{find} system command."
msgstr "Fonctionne un peu comme la commande @samp{find}."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1200
#, no-wrap
msgid "mkdir-p"
msgstr "mkdir-p"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1202
msgid "Like @samp{mkdir -p}, which creates all parents as needed."
msgstr "Fonctionne comme @samp{mkdir -p}, qui crée tous les parents si besoin."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1202
#, no-wrap
msgid "install-file"
msgstr "install-file"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1206
msgid "Similar to @samp{install} when installing a file to a (possibly non-existing) directory.  Guile has @code{copy-file} which works like @samp{cp}."
msgstr "Fonctionne comme @samp{install} pour installer un fichier vers un répertoire (éventuellement non existant). Guile a @code{copy-file} qui fonctionne comme @samp{cp}."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1206
#, no-wrap
msgid "copy-recursively"
msgstr "copy-recursively"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1208
msgid "Like @samp{cp -r}."
msgstr "Fonctionne comme @samp{cp -r}."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1208
#, no-wrap
msgid "delete-file-recursively"
msgstr "delete-file-recursively"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1210
msgid "Like @samp{rm -rf}."
msgstr "Fonctionne comme @samp{rm -rf}."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1210
#, no-wrap
msgid "invoke"
msgstr "invoke"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1212
msgid "Run an executable.  This should be used instead of @code{system*}."
msgstr "Lance un exécutable. Vous devriez utiliser cela à la place de @code{system*}."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1212
#, no-wrap
msgid "with-directory-excursion"
msgstr "with-directory-excursion"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1215
msgid "Run the body in a different working directory, then restore the previous working directory."
msgstr "Lance le corps dans un répertoire de travail différent, puis revient au répertoire de travail précédent."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1215
#, no-wrap
msgid "substitute*"
msgstr "substitute*"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1217
msgid "A ``@command{sed}-like'' function."
msgstr "Une fonction similaire à @command{sed}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1221
msgid "@xref{Build Utilities,,, guix, GNU Guix Reference Manual}, for more information on these utilities."
msgstr "@xref{Utilitaires de construction,,, guix.fr, le manuel de référence de GNU Guix}, pour plus d'informations sur ces utilitaires."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1222
#, no-wrap
msgid "Module prefix"
msgstr "Préfixe de module"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1232
msgid "The license in our last example needs a prefix: this is because of how the @code{license} module was imported in the package, as @code{#:use-module ((guix licenses)  #:prefix license:)}.  The Guile module import mechanism (@pxref{Using Guile Modules,,, guile, Guile reference manual})  gives the user full control over namespacing: this is needed to avoid clashes between, say, the @samp{zlib} variable from @samp{licenses.scm} (a @emph{license} value) and the @samp{zlib} variable from @samp{compression.scm} (a @emph{package} value)."
msgstr "La licence dans notre dernier exemple a besoin d'un préfixe à cause de la manière dont le module @code{licenses} a été importé dans le paquet, avec @code{#:use-module ((guix licenses) #:prefix license:)}. Le mécanisme d'import de module de Guile (@pxref{Using Guile Modules,,, guile, Guile reference manual}) permet de contrôler complètement l'espace de nom. Cela évite les conflits entre, disons, la variable @samp{zlib} de @samp{licenses.scm} (un @emph{licence}) et la variable @samp{zlib} de @samp{compression.scm} (un @emph{paquet})."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1233 guix-git/doc/guix-cookbook.texi:1234
#, no-wrap
msgid "Other build systems"
msgstr "Autres systèmes de construction"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1241
msgid "What we've seen so far covers the majority of packages using a build system other than the @code{trivial-build-system}.  The latter does not automate anything and leaves you to build everything manually.  This can be more demanding and we won't cover it here for now, but thankfully it is rarely necessary to fall back on this system."
msgstr "Ce que nous avons vu jusqu'ici couvre la majeur partie des paquets qui utilisent un système de construction autre que @code{trivial-build-system}. Ce dernier n'automatise rien et vous laisse tout construire par vous-même. C'est plus exigeant et nous n'en parlerons pas pour l'instant, mais heureusement il est rarement nécessaire d'aller jusqu'à ces extrémités."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1245
msgid "For the other build systems, such as ASDF, Emacs, Perl, Ruby and many more, the process is very similar to the GNU build system except for a few specialized arguments."
msgstr "Pour les autres systèmes de construction, comme ASDF, Emacs, Perl, Ruby et bien d'autres, le processus est très similaire à celui du système de construction de GNU en dehors de quelques arguments spécialisés."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1250
msgid "@xref{Build Systems,,, guix, GNU Guix Reference Manual}, for more information on build systems, or check the source code in the @samp{$GUIX_CHECKOUT/guix/build} and @samp{$GUIX_CHECKOUT/guix/build-system} directories."
msgstr "@xref{Systèmes de construction,,, guix.fr, le manuel de référence de GNU Guix}, pour plus d'informations sur les systèmes de construction, ou voir le code source dans les répertoires @samp{$GUIX_CHECKOUT/guix/build} et @samp{$GUIX_CHECKOUT/guix/build-system}."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1251 guix-git/doc/guix-cookbook.texi:1252
#, no-wrap
msgid "Programmable and automated package definition"
msgstr "Définition programmable et automatisée"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1256
msgid "We can't repeat it enough: having a full-fledged programming language at hand empowers us in ways that reach far beyond traditional package management."
msgstr "Nous ne le répéterons jamais assez : avoir un langage de programmation complet à disposition nous permet de faire bien plus de choses que la gestion de paquets traditionnelle."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1258
msgid "Let's illustrate this with some awesome features of Guix!"
msgstr "Illustrons cela avec certaines fonctionnalités géniales de Guix !"

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1259 guix-git/doc/guix-cookbook.texi:1260
#, no-wrap
msgid "Recursive importers"
msgstr "Les importateurs récursifs"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1267
msgid "You might find some build systems good enough that there is little to do at all to write a package, to the point that it becomes repetitive and tedious after a while.  A @emph{raison d'être} of computers is to replace human beings at those boring tasks.  So let's tell Guix to do this for us and create the package definition of an R package from CRAN (the output is trimmed for conciseness):"
msgstr "Certains systèmes de constructions sont si bons qu'il n'y a presque rien à écrire pour créer un paquet, au point que cela devient rapidement répétitif et pénible. L'une des raisons d'être des ordinateurs est de remplacer les êtres humains pour ces taches barbantes. Disons donc à Guix de faire cela pour nous et de créer les définitions de paquets pour un paquet R venant de CRAN (la sortie est coupée par souci de place) :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1270
#, no-wrap
msgid ""
"$ guix import cran --recursive walrus\n"
"\n"
msgstr ""
"$ guix import cran --recursive walrus\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1274
#, no-wrap
msgid ""
"(define-public r-mc2d\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"
msgstr ""
"(define-public r-mc2d\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1278
#, no-wrap
msgid ""
"(define-public r-jmvcore\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"
msgstr ""
"(define-public r-jmvcore\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1282
#, no-wrap
msgid ""
"(define-public r-wrs2\n"
"    ; ...\n"
"    (license gpl3)))\n"
"\n"
msgstr ""
"(define-public r-wrs2\n"
"    ; ...\n"
"    (license gpl3)))\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1308
#, no-wrap
msgid ""
"(define-public r-walrus\n"
"  (package\n"
"    (name \"r-walrus\")\n"
"    (version \"1.0.3\")\n"
"    (source\n"
"      (origin\n"
"        (method url-fetch)\n"
"        (uri (cran-uri \"walrus\" version))\n"
"        (sha256\n"
"          (base32\n"
"            \"1nk2glcvy4hyksl5ipq2mz8jy4fss90hx6cq98m3w96kzjni6jjj\"))))\n"
"    (build-system r-build-system)\n"
"    (propagated-inputs\n"
"      (list r-ggplot2 r-jmvcore r-r6 r-wrs2))\n"
"    (home-page \"https://github.com/jamovi/walrus\")\n"
"    (synopsis \"Robust Statistical Methods\")\n"
"    (description\n"
"      \"This package provides a toolbox of common robust statistical\n"
"tests, including robust descriptives, robust t-tests, and robust ANOVA.\n"
"It is also available as a module for 'jamovi' (see\n"
"<https://www.jamovi.org> for more information).  Walrus is based on the\n"
"WRS2 package by Patrick Mair, which is in turn based on the scripts and\n"
"work of Rand Wilcox.  These analyses are described in depth in the book\n"
"'Introduction to Robust Estimation & Hypothesis Testing'.\")\n"
"    (license gpl3)))\n"
msgstr ""
"(define-public r-walrus\n"
"  (package\n"
"    (name \"r-walrus\")\n"
"    (version \"1.0.3\")\n"
"    (source\n"
"      (origin\n"
"        (method url-fetch)\n"
"        (uri (cran-uri \"walrus\" version))\n"
"        (sha256\n"
"          (base32\n"
"            \"1nk2glcvy4hyksl5ipq2mz8jy4fss90hx6cq98m3w96kzjni6jjj\"))))\n"
"    (build-system r-build-system)\n"
"    (propagated-inputs\n"
"      (list r-ggplot2 r-jmvcore r-r6 r-wrs2))\n"
"    (home-page \"https://github.com/jamovi/walrus\")\n"
"    (synopsis \"Robust Statistical Methods\")\n"
"    (description\n"
"      \"This package provides a toolbox of common robust statistical\n"
"tests, including robust descriptives, robust t-tests, and robust ANOVA.\n"
"It is also available as a module for 'jamovi' (see\n"
"<https://www.jamovi.org> for more information).  Walrus is based on the\n"
"WRS2 package by Patrick Mair, which is in turn based on the scripts and\n"
"work of Rand Wilcox.  These analyses are described in depth in the book\n"
"'Introduction to Robust Estimation & Hypothesis Testing'.\")\n"
"    (license gpl3)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1312
msgid "The recursive importer won't import packages for which Guix already has package definitions, except for the very first."
msgstr "L'importateur récursif n'importera pas les paquets pour lesquels Guix a déjà une définition, sauf pour le tout premier."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1317
msgid "Not all applications can be packaged this way, only those relying on a select number of supported systems.  Read about the full list of importers in the guix import section of the manual (@pxref{Invoking guix import,,, guix, GNU Guix Reference Manual})."
msgstr "Toutes les applications ne peuvent pas être empaquetées de cette manière, seules celles qui s'appuient sur un nombre restreint de systèmes pris en charge le peuvent. Vous trouverez la liste complète des importateurs dans la section dédiée du manuel (@pxref{Invoquer guix import,,, guix.fr, le manuel de référence de GNU})."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1318 guix-git/doc/guix-cookbook.texi:1319
#, no-wrap
msgid "Automatic update"
msgstr "Mise à jour automatique"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1323
msgid "Guix can be smart enough to check for updates on systems it knows.  It can report outdated package definitions with"
msgstr "Guix peut être assez intelligent pour vérifier s'il y a des mises à jour sur les systèmes qu'il connaît. Il peut rapporter les paquets anciens avec"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1326
#, no-wrap
msgid "$ guix refresh hello\n"
msgstr "$ guix refresh hello\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1331
msgid "In most cases, updating a package to a newer version requires little more than changing the version number and the checksum.  Guix can do that automatically as well:"
msgstr "La plupart du temps, mettre à jour un paquet vers une nouvelle version ne demande pas beaucoup plus que de changer le numéro de version et la somme de contrôle. Guix peut aussi le faire automatiquement :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1334
#, no-wrap
msgid "$ guix refresh hello --update\n"
msgstr "$ guix refresh hello --update\n"

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1336 guix-git/doc/guix-cookbook.texi:1337
#, no-wrap
msgid "Inheritance"
msgstr "Héritage"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1341
msgid "If you've started browsing the existing package definitions, you might have noticed that a significant number of them have a @code{inherit} field:"
msgstr "Si vous avez commencé à regarder des définitions de paquets existantes, vous avez peut-être remarqué qu'un certain nombre d'entre elles ont un champ @code{inherit} :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1356
#, no-wrap
msgid ""
"(define-public adwaita-icon-theme\n"
"  (package (inherit gnome-icon-theme)\n"
"    (name \"adwaita-icon-theme\")\n"
"    (version \"3.26.1\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnome/sources/\" name \"/\"\n"
"                                  (version-major+minor version) \"/\"\n"
"                                  name \"-\" version \".tar.xz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"17fpahgh5dyckgz7rwqvzgnhx53cx9kr2xw0szprc6bnqy977fi8\"))))\n"
"    (native-inputs (list `(,gtk+ \"bin\")))))\n"
msgstr ""
"(define-public adwaita-icon-theme\n"
"  (package (inherit gnome-icon-theme)\n"
"    (name \"adwaita-icon-theme\")\n"
"    (version \"3.26.1\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnome/sources/\" name \"/\"\n"
"                                  (version-major+minor version) \"/\"\n"
"                                  name \"-\" version \".tar.xz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"17fpahgh5dyckgz7rwqvzgnhx53cx9kr2xw0szprc6bnqy977fi8\"))))\n"
"    (native-inputs (list `(,gtk+ \"bin\")))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1361
msgid "All unspecified fields are inherited from the parent package.  This is very convenient to create alternative packages, for instance with different source, version or compilation options."
msgstr "Tous les champs non spécifiés héritent du paquet parent. C'est très pratique pour créer un paquet alternatif, par exemple avec une source, une version ou des options de compilation différentes."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1362 guix-git/doc/guix-cookbook.texi:1363
#, no-wrap
msgid "Getting help"
msgstr "Se faire aider"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1369
msgid "Sadly, some applications can be tough to package.  Sometimes they need a patch to work with the non-standard file system hierarchy enforced by the store.  Sometimes the tests won't run properly.  (They can be skipped but this is not recommended.)  Other times the resulting package won't be reproducible."
msgstr "Malheureusement, certaines applications peuvent être difficiles à empaqueter. Parfois elles ont besoin d'un correctif pour fonctionner avec la hiérarchie du système de fichiers non standard imposée par de dépôt. Parfois les tests ne se lancent pas correctement (vous pouvez les passer mais ce n'est pas recommandé). Parfois le paquet n'est pas reproductible."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1372
msgid "Should you be stuck, unable to figure out how to fix any sort of packaging issue, don't hesitate to ask the community for help."
msgstr "Si vous êtes bloqué·e, incapable de trouver comme corriger un problème d'empaquetage, n'hésitez pas à demander de l'aide à la communauté."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1374
msgid "See the @uref{https://www.gnu.org/software/guix/contact/, Guix homepage} for information on the mailing lists, IRC, etc."
msgstr "voir la @uref{https://guix.gnu.org/fr/contact/,la page d'accueil de Guix} pour plus d'informations sur les listes de diffusion, IRC, etc."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1375 guix-git/doc/guix-cookbook.texi:1376
#, no-wrap
msgid "Conclusion"
msgstr "Conclusion"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1382
msgid "This tutorial was a showcase of the sophisticated package management that Guix boasts.  At this point we have mostly restricted this introduction to the @code{gnu-build-system} which is a core abstraction layer on which more advanced abstractions are based."
msgstr "Ce didacticiel vous a montré la gestion des paquets sophistiquée dont Guix se targue. Maintenant, nous avons restreint cette introduction au système @code{gnu-build-system} qui est un niveau d'abstraction essentiel sur lequel des niveaux d'abstraction plus avancés se reposent."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1387
msgid "Where do we go from here? Next we ought to dissect the innards of the build system by removing all abstractions, using the @code{trivial-build-system}: this should give us a thorough understanding of the process before investigating some more advanced packaging techniques and edge cases."
msgstr "Comment continuer ? Nous devrions ensuite disséquer le fonctionnement interne des systèmes de construction en supprimant toutes les abstractions, avec le @code{trivial-build-system} : cela vous permettra de bien comprendre le processus avant de voir des techniques plus avancées et certains cas particuliers."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1390
msgid "Other features worth exploring are the interactive editing and debugging capabilities of Guix provided by the Guile REPL@."
msgstr "D'autres fonctionnalités que vous devriez explorer sont l'édition interactive et les possibilités de débogage de Guix fournies par la REPL de Guile."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1395
msgid "Those fancy features are completely optional and can wait; now is a good time to take a well-deserved break.  With what we've introduced here you should be well armed to package lots of programs.  You can get started right away and hopefully we will see your contributions soon!"
msgstr "Ces fonctionnalités avancées sont complètement facultatives et peuvent attendre ; maintenant vous devriez prendre une pause bien méritée. Avec ce dont nous venons de parler ici vous devriez être bien armé·e pour empaqueter de nombreux paquets. Vous pouvez commencer dès maintenant et on espère voir votre contribution bientôt !"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1396 guix-git/doc/guix-cookbook.texi:1397
#, no-wrap
msgid "References"
msgstr "Références"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1402
msgid "The @uref{https://www.gnu.org/software/guix/manual/en/html_node/Defining-Packages.html, package reference in the manual}"
msgstr "La @uref{https://guix.gnu.org/manual/devel/fr/html_node/reference-de-package.html, référence des paquets dans le manuel}"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1405
msgid "@uref{https://gitlab.com/pjotrp/guix-notes/blob/master/HACKING.org, Pjotr’s hacking guide to GNU Guix}"
msgstr "@uref{https://gitlab.com/pjotrp/guix-notes/blob/master/HACKING.org, le guide de bidouillage de GNU Guix de Pjotr}"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1408
msgid "@uref{https://www.gnu.org/software/guix/guix-ghm-andreas-20130823.pdf, ``GNU Guix: Package without a scheme!''}, by Andreas Enge"
msgstr "@uref{https://www.gnu.org/software/guix/guix-ghm-andreas-20130823.pdf, « GNU Guix: Package without a scheme! »}, d'Andreas Enge"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1417
msgid "Guix offers a flexible language for declaratively configuring your Guix System.  This flexibility can at times be overwhelming.  The purpose of this chapter is to demonstrate some advanced configuration concepts."
msgstr "Guix propose un langage flexible pour déclarer la configuration de votre système Guix. Cette flexibilité peut parfois paraître écrasante. Le but de ce chapitre est de vous montrer quelques concepts de configuration avancés."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1420
msgid "@pxref{System Configuration,,, guix, GNU Guix Reference Manual} for a complete reference."
msgstr "@pxref{Configuration du système,,, guix.fr, le manuel de référence de GNU Guix} pour une référence complète."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1445
msgid "While the Guix manual explains auto-login one user to @emph{all} TTYs ( @pxref{auto-login to TTY,,, guix, GNU Guix Reference Manual}), some might prefer a situation, in which one user is logged into one TTY with the other TTYs either configured to login different users or no one at all.  Note that one can auto-login one user to any TTY, but it is usually advisable to avoid @code{tty1}, which, by default, is used to log warnings and errors."
msgstr "Tandis que le manuel de Guix explique comment connecter automatiquement un utilisateur sur @emph{tous} les TTY (@pxref{connexion automatique à un TTY,,, guix.fr, le manuel de référence de Guix}), vous pourriez préférer avoir un utilisateur connecté sur un TTY et configurer les autres TTY pour connecter d'autres utilisateurs ou personne. Remarquez que vous pouvez connecter automatiquement un utilisateur sur n'importe quel TTY, mais il est recommandé d'éviter @code{tty1}, car par défaut, il est utilisé pour afficher les avertissements et les erreurs des journaux systèmes."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1447
msgid "Here is how one might set up auto login for one user to one tty:"
msgstr "Voici comment on peut configurer la connexion d'un utilisateur sur un tty :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1455
#, no-wrap
msgid ""
"(define (auto-login-to-tty config tty user)\n"
"  (if (string=? tty (mingetty-configuration-tty config))\n"
"        (mingetty-configuration\n"
"         (inherit config)\n"
"         (auto-login user))\n"
"        config))\n"
"\n"
msgstr ""
"(define (auto-login-to-tty config tty user)\n"
"  (if (string=? tty (mingetty-configuration-tty config))\n"
"        (mingetty-configuration\n"
"         (inherit config)\n"
"         (auto-login user))\n"
"        config))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1462
#, no-wrap
msgid ""
"(define %my-services\n"
"  (modify-services %base-services\n"
"    ;; @dots{}\n"
"    (mingetty-service-type config =>\n"
"                           (auto-login-to-tty\n"
"                            config \"tty3\" \"alice\"))))\n"
"\n"
msgstr ""
"(define %my-services\n"
"  (modify-services %base-services\n"
"    ;; @dots{}\n"
"    (mingetty-service-type config =>\n"
"                           (auto-login-to-tty\n"
"                            config \"tty3\" \"alice\"))))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1466
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (services %my-services))\n"
msgstr ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (services %my-services))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1471
msgid "One could also @code{compose} (@pxref{Higher-Order Functions,,, guile, The Guile Reference Manual}) @code{auto-login-to-tty} to login multiple users to multiple ttys."
msgstr "On peut aussi utiliser @code{compose} (@pxref{Higher-Order Functions,,, guile, The Guile Reference Manual}) avec @code{auto-login-to-tty} pour connecter plusieurs utilisateurs sur différents ttys."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1478
msgid "Finally, here is a note of caution.  Setting up auto login to a TTY, means that anyone can turn on your computer and run commands as your regular user.  However, if you have an encrypted root partition, and thus already need to enter a passphrase when the system boots, auto-login might be a convenient option."
msgstr "Enfin, une mise en garde. Configurer la connexion automatique à un TTY signifie que n'importe qui peut allumer votre ordinateur et lancer des commandes avec votre utilisateur normal. Cependant, si vous avez une partition racine chiffrée, et donc qu'il faut déjà saisir une phrase de passe au démarrage du système, la connexion automatique peut être un choix pratique."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1490
msgid "Guix is, at its core, a source based distribution with substitutes (@pxref{Substitutes,,, guix, GNU Guix Reference Manual}), and as such building packages from their source code is an expected part of regular package installations and upgrades.  Given this starting point, it makes sense that efforts are made to reduce the amount of time spent compiling packages, and recent changes and upgrades to the building and distribution of substitutes continues to be a topic of discussion within Guix."
msgstr "Guix est, en son cœur, une distribution source avec des substituts (@pxref{Substituts,,, guix.fr, le manuel de référence de GNU Guix}), et donc construire des paquets à partir de leur code source est normal pendant les installations et les mis à jour de paquets. Malgré tout, c'est aussi normal d'essayer de réduire le temps passé à compiler des paquets, et les changements récents et futurs concernant la construction et la distribution des substituts continue d'être un sujet de discussion dans le projet Guix."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1496
msgid "The kernel, while not requiring an overabundance of RAM to build, does take a rather long time on an average machine.  The official kernel configuration, as is the case with many GNU/Linux distributions, errs on the side of inclusiveness, and this is really what causes the build to take such a long time when the kernel is built from source."
msgstr "Le noyau, bien qu'il ne demande pas énormément de RAM pour être construit, prend assez long à construire sur une machine usuelle. La configuration du noyau officielle, comme avec la plupart des autres distributions GNU/Linux, penche du côté de l'inclusivité, et c'est vraiment ça qui rend la construction aussi longue à partir des sources."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1501
msgid "The Linux kernel, however, can also just be described as a regular old package, and as such can be customized just like any other package.  The procedure is a little bit different, although this is primarily due to the nature of how the package definition is written."
msgstr "Le noyau Linux, cependant, peut aussi être décrit comme un simple paquet comme les autres, et peut donc être personnalisé comme n'importe quel autre paquet. La procédure est un peu différente, même si c'est surtout dû à la nature de la définition du paquet."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1504
msgid "The @code{linux-libre} kernel package definition is actually a procedure which creates a package."
msgstr "Le paquet du noyau @code{linux-libre} est en fait une procédure qui crée un paquet."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1515
#, no-wrap
msgid ""
"(define* (make-linux-libre* version gnu-revision source supported-systems\n"
"                            #:key\n"
"                            (extra-version #f)\n"
"                            ;; A function that takes an arch and a variant.\n"
"                            ;; See kernel-config for an example.\n"
"                            (configuration-file #f)\n"
"                            (defconfig \"defconfig\")\n"
"                            (extra-options %default-extra-linux-options))\n"
"  ...)\n"
msgstr ""
"(define* (make-linux-libre* version gnu-revision source supported-systems\n"
"                            #:key\n"
"                            (extra-version #f)\n"
"                            ;; Un fonction qui prend une architecture et une variante\n"
"                            ;; Voir kernel-config si vous voulez un exemple.\n"
"                            (configuration-file #f)\n"
"                            (defconfig \"defconfig\")\n"
"                            (extra-options %default-extra-linux-options))\n"
"  ...)\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1519
msgid "The current @code{linux-libre} package is for the 5.15.x series, and is declared like this:"
msgstr "Le paquet @code{linux-libre} actuel pour la série 5.15.x, est déclaré comme ceci :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1527
#, no-wrap
msgid ""
"(define-public linux-libre-5.15\n"
"  (make-linux-libre* linux-libre-5.15-version\n"
"                     linux-libre-5.15-gnu-revision\n"
"                     linux-libre-5.15-source\n"
"                     '(\"x86_64-linux\" \"i686-linux\" \"armhf-linux\" \"aarch64-linux\" \"riscv64-linux\")\n"
"                     #:configuration-file kernel-config))\n"
msgstr ""
"(define-public linux-libre-5.15\n"
"  (make-linux-libre* linux-libre-5.15-version\n"
"                     linux-libre-5.15-gnu-revision\n"
"                     linux-libre-5.15-source\n"
"                     '(\"x86_64-linux\" \"i686-linux\" \"armhf-linux\" \"aarch64-linux\" \"riscv64-linux\")\n"
"                     #:configuration-file kernel-config))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1534
msgid "Any keys which are not assigned values inherit their default value from the @code{make-linux-libre} definition.  When comparing the two snippets above, notice the code comment that refers to @code{#:configuration-file}.  Because of this, it is not actually easy to include a custom kernel configuration from the definition, but don't worry, there are other ways to work with what we do have."
msgstr "Les clés qui n'ont pas de valeur associée prennent leur valeur par défaut dans la définition de @code{make-linux-libre}. Lorsque vous comparez les deux bouts de code ci-dessus, remarquez le commentaire qui correspond à @code{#:configuration-file}. À cause de cela, il n'est pas facile d'inclure une configuration personnalisée du noyau à partir de la définition, mais ne vous inquiétez pas, il y a d'autres moyens de travailler avec ce qu'on a."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1540
msgid "There are two ways to create a kernel with a custom kernel configuration.  The first is to provide a standard @file{.config} file during the build process by including an actual @file{.config} file as a native input to our custom kernel.  The following is a snippet from the custom @code{'configure} phase of the @code{make-linux-libre} package definition:"
msgstr "Il y a deux manières de créer un noyau avec une configuration personnalisée. La première consiste à fournir un fichier @file{.config} standard au processus de construction en ajoutant un fichier @file{.config} comme entrée native de notre noyau. Voici un bout de code correspondant à la phase @code{'configure} de la définition de paquet @code{make-linux-libre} :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1544
#, no-wrap
msgid ""
"(let ((build  (assoc-ref %standard-phases 'build))\n"
"      (config (assoc-ref (or native-inputs inputs) \"kconfig\")))\n"
"\n"
msgstr ""
"(let ((build  (assoc-ref %standard-phases 'build))\n"
"      (config (assoc-ref (or native-inputs inputs) \"kconfig\")))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1552
#, no-wrap
msgid ""
"  ;; Use a custom kernel configuration file or a default\n"
"  ;; configuration file.\n"
"  (if config\n"
"      (begin\n"
"        (copy-file config \".config\")\n"
"        (chmod \".config\" #o666))\n"
"      (invoke \"make\" ,defconfig)))\n"
msgstr ""
"  ;; Use a custom kernel configuration file or a default\n"
"  ;; configuration file.\n"
"  (if config\n"
"      (begin\n"
"        (copy-file config \".config\")\n"
"        (chmod \".config\" #o666))\n"
"      (invoke \"make\" ,defconfig)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1557
msgid "Below is a sample kernel package.  The @code{linux-libre} package is nothing special and can be inherited from and have its fields overridden like any other package:"
msgstr "Et voici un exemple de paquet de noyau. Le paquet @code{linux-libre} n'a rien de spécial, on peut en hériter et remplacer ses champs comme n'importe quel autre paquet :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1566
#, no-wrap
msgid ""
"(define-public linux-libre/E2140\n"
"  (package\n"
"    (inherit linux-libre)\n"
"    (native-inputs\n"
"     `((\"kconfig\" ,(local-file \"E2140.config\"))\n"
"      ,@@(alist-delete \"kconfig\"\n"
"                      (package-native-inputs linux-libre))))))\n"
msgstr ""
"(define-public linux-libre/E2140\n"
"  (package\n"
"    (inherit linux-libre)\n"
"    (native-inputs\n"
"     `((\"kconfig\" ,(local-file \"E2140.config\"))\n"
"      ,@@(alist-delete \"kconfig\"\n"
"                      (package-native-inputs linux-libre))))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1573
msgid "In the same directory as the file defining @code{linux-libre-E2140} is a file named @file{E2140.config}, which is an actual kernel configuration file.  The @code{defconfig} keyword of @code{make-linux-libre} is left blank here, so the only kernel configuration in the package is the one which was included in the @code{native-inputs} field."
msgstr "Dans le même répertoire que le fichier définissant @code{linux-libre-E2140} se trouve un fichier nommé @file{E2140.config}, qui est un fichier de configuration du noyau. Le mot-clé @code{defconfig} de @code{make-linux-libre} reste vide ici, donc la configuration du noyau dans le paquet est celle qui sera incluse dans le champ @code{native-inputs}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1578
msgid "The second way to create a custom kernel is to pass a new value to the @code{extra-options} keyword of the @code{make-linux-libre} procedure.  The @code{extra-options} keyword works with another function defined right below it:"
msgstr "La deuxième manière de créer un noyau personnalisé est de passer une nouvelle valeur au mot-clé @code{extra-options} de la procédure @code{make-linux-libre}. Le mot-clé @code{extra-options} fonctionne avec une autre fonction définie juste en dessous :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1594
#, no-wrap
msgid ""
"(define %default-extra-linux-options\n"
"  `(;; https://lists.gnu.org/archive/html/guix-devel/2014-04/msg00039.html\n"
"   (\"CONFIG_DEVPTS_MULTIPLE_INSTANCES\" . #true)\n"
"   ;; Modules required for initrd:\n"
"   (\"CONFIG_NET_9P\" . m)\n"
"   (\"CONFIG_NET_9P_VIRTIO\" . m)\n"
"   (\"CONFIG_VIRTIO_BLK\" . m)\n"
"   (\"CONFIG_VIRTIO_NET\" . m)\n"
"   (\"CONFIG_VIRTIO_PCI\" . m)\n"
"   (\"CONFIG_VIRTIO_BALLOON\" . m)\n"
"   (\"CONFIG_VIRTIO_MMIO\" . m)\n"
"   (\"CONFIG_FUSE_FS\" . m)\n"
"   (\"CONFIG_CIFS\" . m)\n"
"   (\"CONFIG_9P_FS\" . m)))\n"
"\n"
msgstr ""
"(define %default-extra-linux-options\n"
"  `(;; https://lists.gnu.org/archive/html/guix-devel/2014-04/msg00039.html\n"
"   (\"CONFIG_DEVPTS_MULTIPLE_INSTANCES\" . #true)\n"
"   ;; Modules required for initrd:\n"
"   (\"CONFIG_NET_9P\" . m)\n"
"   (\"CONFIG_NET_9P_VIRTIO\" . m)\n"
"   (\"CONFIG_VIRTIO_BLK\" . m)\n"
"   (\"CONFIG_VIRTIO_NET\" . m)\n"
"   (\"CONFIG_VIRTIO_PCI\" . m)\n"
"   (\"CONFIG_VIRTIO_BALLOON\" . m)\n"
"   (\"CONFIG_VIRTIO_MMIO\" . m)\n"
"   (\"CONFIG_FUSE_FS\" . m)\n"
"   (\"CONFIG_CIFS\" . m)\n"
"   (\"CONFIG_9P_FS\" . m)))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1605
#, no-wrap
msgid ""
"(define (config->string options)\n"
"  (string-join (map (match-lambda\n"
"                      ((option . 'm)\n"
"                       (string-append option \"=m\"))\n"
"                      ((option . #true)\n"
"                       (string-append option \"=y\"))\n"
"                      ((option . #false)\n"
"                       (string-append option \"=n\")))\n"
"                    options)\n"
"               \"\\n\"))\n"
msgstr ""
"(define (config->string options)\n"
"  (string-join (map (match-lambda\n"
"                      ((option . 'm)\n"
"                       (string-append option \"=m\"))\n"
"                      ((option . #true)\n"
"                       (string-append option \"=y\"))\n"
"                      ((option . #false)\n"
"                       (string-append option \"=n\")))\n"
"                    options)\n"
"               \"\\n\"))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1608
msgid "And in the custom configure script from the `make-linux-libre` package:"
msgstr "Et dans le script configure personnalisé du paquet « make-linux-libre » :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1616
#, no-wrap
msgid ""
";; Appending works even when the option wasn't in the\n"
";; file.  The last one prevails if duplicated.\n"
"(let ((port (open-file \".config\" \"a\"))\n"
"      (extra-configuration ,(config->string extra-options)))\n"
"  (display extra-configuration port)\n"
"  (close-port port))\n"
"\n"
msgstr ""
";; Appending works even when the option wasn't in the\n"
";; file.  The last one prevails if duplicated.\n"
"(let ((port (open-file \".config\" \"a\"))\n"
"      (extra-configuration ,(config->string extra-options)))\n"
"  (display extra-configuration port)\n"
"  (close-port port))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1618
#, no-wrap
msgid "(invoke \"make\" \"oldconfig\")\n"
msgstr "(invoke \"make\" \"oldconfig\")\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1623
msgid "So by not providing a configuration-file the @file{.config} starts blank, and then we write into it the collection of flags that we want.  Here's another custom kernel:"
msgstr "Donc, en ne fournissant pas de fichier de configuration le fichier @file{.config} est au départ vide et on écrit ensuite l'ensemble des drapeaux que l'on veut. Voici un autre noyau personnalisé :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1631
#, no-wrap
msgid ""
"(define %macbook41-full-config\n"
"  (append %macbook41-config-options\n"
"          %file-systems\n"
"          %efi-support\n"
"          %emulation\n"
"          (@@@@ (gnu packages linux) %default-extra-linux-options)))\n"
"\n"
msgstr ""
"(define %macbook41-full-config\n"
"  (append %macbook41-config-options\n"
"          %file-systems\n"
"          %efi-support\n"
"          %emulation\n"
"          (@@@@ (gnu packages linux) %default-extra-linux-options)))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1642
#, no-wrap
msgid ""
"(define-public linux-libre-macbook41\n"
"  ;; XXX: Access the internal 'make-linux-libre*' procedure, which is\n"
"  ;; private and unexported, and is liable to change in the future.\n"
"  ((@@@@ (gnu packages linux) make-linux-libre*)\n"
"   (@@@@ (gnu packages linux) linux-libre-version)\n"
"   (@@@@ (gnu packages linux) linux-libre-gnu-revision)\n"
"   (@@@@ (gnu packages linux) linux-libre-source)\n"
"   '(\"x86_64-linux\")\n"
"   #:extra-version \"macbook41\"\n"
"   #:extra-options %macbook41-config-options))\n"
msgstr ""
"(define-public linux-libre-macbook41\n"
"  ;; XXX: Accède à la procédure interne « make-linux-libre* », qui est privée\n"
"  ;; et n'est pas exportée, et pourrait changer dans le futur.\n"
"  ((@@@@ (gnu packages linux) make-linux-libre*)\n"
"   (@@@@ (gnu packages linux) linux-libre-version)\n"
"   (@@@@ (gnu packages linux) linux-libre-gnu-revision)\n"
"   (@@@@ (gnu packages linux) linux-libre-source)\n"
"   '(\"x86_64-linux\")\n"
"   #:extra-version \"macbook41\"\n"
"   #:extra-options %macbook41-config-options))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1649
msgid "In the above example @code{%file-systems} is a collection of flags enabling different file system support, @code{%efi-support} enables EFI support and @code{%emulation} enables a x86_64-linux machine to act in 32-bit mode also.  @code{%default-extra-linux-options} are the ones quoted above, which had to be added in since they were replaced in the @code{extra-options} keyword."
msgstr "Dans l'exemple ci-dessus @code{%fale-systems} est un ensemble de drapeaux qui activent la prise en charge de différents systèmes de fichiers, @code{%efi-support} active la prise en charge de l'EFI et @code{%emulation} permet à une machine x86_64-linux de fonctionner aussi en mode 32-bits. @code{%default-extra-linux-options} sont l'ensemble de ces options et elles devaient être ajoutées puisqu'elles ont été remplacées dans le mot-clé @code{extra-options}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1658
msgid "This all sounds like it should be doable, but how does one even know which modules are required for a particular system? Two places that can be helpful in trying to answer this question is the @uref{https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel, Gentoo Handbook} and the @uref{https://www.kernel.org/doc/html/latest/admin-guide/README.html?highlight=localmodconfig, documentation from the kernel itself}.  From the kernel documentation, it seems that @code{make localmodconfig} is the command we want."
msgstr "Tout ça est bien beau, mais comment savoir quels modules sont requis pour un système en particulier ? Il y a deux ressources qui peuvent être utiles pour répondre à cette question : le @uref{https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel, manuel de Gentoo} et la @uref{https://www.kernel.org/doc/html/latest/admin-guide/README.html?highlight=localmodconfig, documentation du noyau}. D'après la documentation du noyau, il semble que la commande @code{make localmodconfig} soit la bonne."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1661
msgid "In order to actually run @code{make localmodconfig} we first need to get and unpack the kernel source code:"
msgstr "Pour lancer @code{make localmodconfig} on doit d'abord récupérer et décompresser le code source du noyau :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1664
#, no-wrap
msgid "tar xf $(guix build linux-libre --source)\n"
msgstr "tar xf $(guix build linux-libre --source)\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1671
msgid "Once inside the directory containing the source code run @code{touch .config} to create an initial, empty @file{.config} to start with.  @code{make localmodconfig} works by seeing what you already have in @file{.config} and letting you know what you're missing.  If the file is blank then you're missing everything.  The next step is to run:"
msgstr "Une fois dans le répertoire contenant le code source lancez @code{touch .config} pour créer un fichier @file{.config} initialement vide pour commencer. @code{make localmodconfig} fonctionne en remarquant que avec déjà un @file{.config} et en vous disant ce qu'il vous manque. Si le fichier est vide, il vous manquera tout ce qui est nécessaire. L'étape suivante consiste à lancer :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1674
#, no-wrap
msgid "guix shell -D linux-libre -- make localmodconfig\n"
msgstr "guix shell -D linux-libre -- make localmodconfig\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1679
msgid "and note the output.  Do note that the @file{.config} file is still empty.  The output generally contains two types of warnings.  The first start with \"WARNING\" and can actually be ignored in our case.  The second read:"
msgstr "et regardez la sortie. Remarquez que le fichier @file{.config} est toujours vide. La sortie contient en général deux types d'avertissements. Le premier commence par « WARNING » et peut être ignoré dans notre cas. Le deuxième dit :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1682
#, no-wrap
msgid "module pcspkr did not have configs CONFIG_INPUT_PCSPKR\n"
msgstr "module pcspkr did not have configs CONFIG_INPUT_PCSPKR\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1687
msgid "For each of these lines, copy the @code{CONFIG_XXXX_XXXX} portion into the @file{.config} in the directory, and append @code{=m}, so in the end it looks like this:"
msgstr "Pour chacune de ces lignes, copiez la partie @code{CONFIG_XXXX_XXXX} dans le @file{.config} du répertoire et ajoutez @code{=m} pour qu'à la fin il ressemble à cela :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1691
#, no-wrap
msgid ""
"CONFIG_INPUT_PCSPKR=m\n"
"CONFIG_VIRTIO=m\n"
msgstr ""
"CONFIG_INPUT_PCSPKR=m\n"
"CONFIG_VIRTIO=m\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1700
msgid "After copying all the configuration options, run @code{make localmodconfig} again to make sure that you don't have any output starting with ``module''.  After all of these machine specific modules there are a couple more left that are also needed.  @code{CONFIG_MODULES} is necessary so that you can build and load modules separately and not have everything built into the kernel.  @code{CONFIG_BLK_DEV_SD} is required for reading from hard drives.  It is possible that there are other modules which you will need."
msgstr "Après avoir copié toutes les options de configuration, lancez @code{make localmodconfig} de nouveau pour vous assurer que vous n'avez pas de sortie commençant par « module ». Après tous ces modules spécifiques à la machine, il y en a encore quelques uns que nous devons aussi définir. @code{CONFIG_MODULES} est nécessaire pour que nous puissions construire et charger les modules séparément et ne pas tout construire dans le noyau. @code{CONFIG_BLK_DEV_SD} est requis pour lire les disques durs. Il est possible que vous aillez besoin de quelques autres modules."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1704
msgid "This post does not aim to be a guide to configuring your own kernel however, so if you do decide to build a custom kernel you'll have to seek out other guides to create a kernel which is just right for your needs."
msgstr "Cet article n'a pas pour but de vous guider dans la configuration de votre propre noyau cependant, donc si vous décidez de construire un noyau personnalisé vous devrez chercher d'autres guides pour créer un noyau qui vous convient."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1712
msgid "The second way to setup the kernel configuration makes more use of Guix's features and allows you to share configuration segments between different kernels.  For example, all machines using EFI to boot have a number of EFI configuration flags that they need.  It is likely that all the kernels will share a list of file systems to support.  By using variables it is easier to see at a glance what features are enabled and to make sure you don't have features in one kernel but missing in another."
msgstr "La deuxième manière de configurer le noyau utilise un peu plus les fonctionnalités de Guix et vous permettent de partager des bouts de configuration entre différents noyaux. Par exemple, toutes les machines avec un démarrage EFI ont besoin d'un certain nombre de configurations. Tous les noyaux vont probablement partager une liste de systèmes de fichiers à prendre en charge. En utilisant des variables il est facile de voir du premier coup quelles fonctionnalités sont activées pour vous assurer que vous n'avez pas des fonctionnalités dans un noyau qui manquent dans un autre."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1717
msgid "Left undiscussed however, is Guix's initrd and its customization.  It is likely that you'll need to modify the initrd on a machine using a custom kernel, since certain modules which are expected to be built may not be available for inclusion into the initrd."
msgstr "Cependant, nous ne parlons pas de la personnalisation du disque de ram initial. Vous devrez sans doute modifier le disque de ram initial sur les machines qui utilisent un noyau personnalisé, puisque certains modules attendus peuvent ne pas être disponibles."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1724
msgid "Historically, Guix System is centered around an @code{operating-system} structure.  This structure contains various fields ranging from the bootloader and kernel declaration to the services to install."
msgstr "Historiquement, le système Guix est centré sur une structure @code{operating-system}. Cette structure contient divers champs qui vont du chargeur d'amorçage et à la déclaration du noyau aux services à installer."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1730
msgid "Depending on the target machine, that can go from a standard @code{x86_64} machine to a small ARM single board computer such as the Pine64, the image constraints can vary a lot.  The hardware manufacturers will impose different image formats with various partition sizes and offsets."
msgstr "En fonction de la machine cible, qui peut aller d'une machine @code{x86_64} standard à un petit ordinateur ARM sur carte unique comme le Pine64, les contraintes sur l'image varient beaucoup. Les fabricants imposent différents formats d'image avec plusieurs tailles de partitions et de positions."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1735
msgid "To create images suitable for all those machines, a new abstraction is necessary: that's the goal of the @code{image} record.  This record contains all the required information to be transformed into a standalone image, that can be directly booted on any target machine."
msgstr "Pour créer des images convenables pour toutes ces machines, une nouvelle abstraction est nécessaire : c'est le but de l'enregistrement @code{image}. Cet enregistrement contient toutes les informations requises pour être transformé en une image complète, qui peut être directement démarrée sur une machine cible."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1757
#, no-wrap
msgid ""
"(define-record-type* <image>\n"
"  image make-image\n"
"  image?\n"
"  (name               image-name ;symbol\n"
"                      (default #f))\n"
"  (format             image-format) ;symbol\n"
"  (target             image-target\n"
"                      (default #f))\n"
"  (size               image-size  ;size in bytes as integer\n"
"                      (default 'guess))\n"
"  (operating-system   image-operating-system  ;<operating-system>\n"
"                      (default #f))\n"
"  (partitions         image-partitions ;list of <partition>\n"
"                      (default '()))\n"
"  (compression?       image-compression? ;boolean\n"
"                      (default #t))\n"
"  (volatile-root?     image-volatile-root? ;boolean\n"
"                      (default #t))\n"
"  (substitutable?     image-substitutable? ;boolean\n"
"                      (default #t)))\n"
msgstr ""
"(define-record-type* <image>\n"
"  image make-image\n"
"  image?\n"
"  (name               image-name ;symbol\n"
"                      (default #f))\n"
"  (format             image-format) ;symbol\n"
"  (target             image-target\n"
"                      (default #f))\n"
"  (size               image-size  ;size in bytes as integer\n"
"                      (default 'guess))\n"
"  (operating-system   image-operating-system  ;<operating-system>\n"
"                      (default #f))\n"
"  (partitions         image-partitions ;list of <partition>\n"
"                      (default '()))\n"
"  (compression?       image-compression? ;boolean\n"
"                      (default #t))\n"
"  (volatile-root?     image-volatile-root? ;boolean\n"
"                      (default #t))\n"
"  (substitutable?     image-substitutable? ;boolean\n"
"                      (default #t)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1763
msgid "This record contains the operating-system to instantiate. The @code{format} field defines the image type and can be @code{efi-raw}, @code{qcow2} or @code{iso9660} for instance. In the future, it could be extended to @code{docker} or other image types."
msgstr "Cet enregistrement contient le système d'exploitation à instancier. Le champ @code{format} défini le type d'image et peut être @code{efi-raw}, @code{qcow2} ou @code{iso9660} par exemple. Plus tard, on prévoit de l'étendre à @code{docker} et aux autres types d'images."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1766
msgid "A new directory in the Guix sources is dedicated to images definition. For now there are four files:"
msgstr "Un nouveau répertoire dans les sources de Guix est dédié aux définitions des images. Pour l'instant il y a quatre fichiers :"

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1768
#, no-wrap
msgid "gnu/system/images/hurd.scm"
msgstr "gnu/system/images/hurd.scm"

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1769
#, no-wrap
msgid "gnu/system/images/pine64.scm"
msgstr "gnu/system/images/pine64.scm"

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1770
#, no-wrap
msgid "gnu/system/images/novena.scm"
msgstr "gnu/system/images/novena.scm"

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1771
#, no-wrap
msgid "gnu/system/images/pinebook-pro.scm"
msgstr "gnu/system/images/pinebook-pro.scm"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1777
msgid "Let's have a look to @file{pine64.scm}. It contains the @code{pine64-barebones-os} variable which is a minimal definition of an operating-system dedicated to the @b{Pine A64 LTS} board."
msgstr "Regardons le fichier @file{pine64.scm}. Il contient la variable @code{pine64-barebones-os} qui est une définition minimale d'un système d'exploitation dédié à la carte @b{Pine A64 LTS}."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1801
#, no-wrap
msgid ""
"(define pine64-barebones-os\n"
"  (operating-system\n"
"   (host-name \"vignemale\")\n"
"   (timezone \"Europe/Paris\")\n"
"   (locale \"en_US.utf8\")\n"
"   (bootloader (bootloader-configuration\n"
"                (bootloader u-boot-pine64-lts-bootloader)\n"
"                (targets '(\"/dev/vda\"))))\n"
"   (initrd-modules '())\n"
"   (kernel linux-libre-arm64-generic)\n"
"   (file-systems (cons (file-system\n"
"                        (device (file-system-label \"my-root\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                       %base-file-systems))\n"
"   (services (cons (service agetty-service-type\n"
"                            (agetty-configuration\n"
"                             (extra-options '(\"-L\")) ; no carrier detect\n"
"                             (baud-rate \"115200\")\n"
"                             (term \"vt100\")\n"
"                             (tty \"ttyS0\")))\n"
"                   %base-services))))\n"
msgstr ""
"(define pine64-barebones-os\n"
"  (operating-system\n"
"   (host-name \"vignemale\")\n"
"   (timezone \"Europe/Paris\")\n"
"   (locale \"en_US.utf8\")\n"
"   (bootloader (bootloader-configuration\n"
"                (bootloader u-boot-pine64-lts-bootloader)\n"
"                (targets '(\"/dev/vda\"))))\n"
"   (initrd-modules '())\n"
"   (kernel linux-libre-arm64-generic)\n"
"   (file-systems (cons (file-system\n"
"                        (device (file-system-label \"my-root\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                       %base-file-systems))\n"
"   (services (cons (service agetty-service-type\n"
"                            (agetty-configuration\n"
"                             (extra-options '(\"-L\")) ; no carrier detect\n"
"                             (baud-rate \"115200\")\n"
"                             (term \"vt100\")\n"
"                             (tty \"ttyS0\")))\n"
"                   %base-services))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1805
msgid "The @code{kernel} and @code{bootloader} fields are pointing to packages dedicated to this board."
msgstr "Les champs @code{kernel} et @code{bootloader} pointent vers les paquets dédiés à cette carte."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1807
msgid "Right below, the @code{pine64-image-type} variable is also defined."
msgstr "Ci-dessous, la variable @code{pine64-image-type} est ainsi définie."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1813
#, no-wrap
msgid ""
"(define pine64-image-type\n"
"  (image-type\n"
"   (name 'pine64-raw)\n"
"   (constructor (cut image-with-os arm64-disk-image <>))))\n"
msgstr ""
"(define pine64-image-type\n"
"  (image-type\n"
"   (name 'pine64-raw)\n"
"   (constructor (cut image-with-os arm64-disk-image <>))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1817
msgid "It's using a record we haven't talked about yet, the @code{image-type} record, defined this way:"
msgstr "Elle utilise un enregistrement dont nous n'avons pas encore parlé, l'enregistrement @code{image-type}, défini de cette façon :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1824
#, no-wrap
msgid ""
"(define-record-type* <image-type>\n"
"  image-type make-image-type\n"
"  image-type?\n"
"  (name           image-type-name) ;symbol\n"
"  (constructor    image-type-constructor)) ;<operating-system> -> <image>\n"
msgstr ""
"(define-record-type* <image-type>\n"
"  image-type make-image-type\n"
"  image-type?\n"
"  (name           image-type-name) ;symbol\n"
"  (constructor    image-type-constructor)) ;<operating-system> -> <image>\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1830
msgid "The main purpose of this record is to associate a name to a procedure transforming an @code{operating-system} to an image.  To understand why it is necessary, let's have a look to the command producing an image from an @code{operating-system} configuration file:"
msgstr "Le but principal de cet enregistrement est d'associer un nom à une procédure transformant un @code{operating-system} en une image. Pour comprendre pourquoi c'est nécessaire, voyons la commande produisant une image à partir d'un fichier de configuration de type @code{operating-system} :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1833
#, no-wrap
msgid "guix system image my-os.scm\n"
msgstr "guix system image my-os.scm\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1839
msgid "This command expects an @code{operating-system} configuration but how should we indicate that we want an image targeting a Pine64 board? We need to provide an extra information, the @code{image-type}, by passing the @code{--image-type} or @code{-t} flag, this way:"
msgstr "Cette commande demande une configuration de type @code{operating-system} mais comment indiquer que l'on veut cibler une carte Pine64 ? Nous devons fournir l'information supplémentaire, @code{image-type}, en passant le drapeau @code{--image-type} ou @code{-t}, de cette manière :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1842
#, no-wrap
msgid "guix system image --image-type=pine64-raw my-os.scm\n"
msgstr "guix system image --image-type=pine64-raw my-os.scm\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1848
msgid "This @code{image-type} parameter points to the @code{pine64-image-type} defined above. Hence, the @code{operating-system} declared in @code{my-os.scm} will be applied the @code{(cut image-with-os arm64-disk-image <>)} procedure to turn it into an image."
msgstr "Ce paramètre @code{image-type} pointe vers le @code{pine64-image-type} défini plus haut. Ainsi, la déclaration @code{operating-system} dans @code{my-os.scm} se verra appliquée la procédure @code{[cut image-with-os arm64-disk-image <>)} pour la transformer en une image."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1850
msgid "The resulting image looks like:"
msgstr "L'image qui en résulte ressemble à ceci :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1860
#, no-wrap
msgid ""
"(image\n"
" (format 'disk-image)\n"
" (target \"aarch64-linux-gnu\")\n"
" (operating-system my-os)\n"
" (partitions\n"
"  (list (partition\n"
"         (inherit root-partition)\n"
"         (offset root-offset)))))\n"
msgstr ""
"(image\n"
" (format 'disk-image)\n"
" (target \"aarch64-linux-gnu\")\n"
" (operating-system my-os)\n"
" (partitions\n"
"  (list (partition\n"
"         (inherit root-partition)\n"
"         (offset root-offset)))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1864
msgid "which is the aggregation of the @code{operating-system} defined in @code{my-os.scm} to the @code{arm64-disk-image} record."
msgstr "qui ajoute l'objet @code{operating-system} défini dans @code{my-os.scm} à l'enregistrement @code{arm64-disk-image}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1866
msgid "But enough Scheme madness. What does this image API bring to the Guix user?"
msgstr "Mais assez de cette folie. Qu'est-ce que cette API pour les images apporte aux utilisateurs et utilisatrices ?"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1868
msgid "One can run:"
msgstr "On peut lancer :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1872
#, no-wrap
msgid ""
"mathieu@@cervin:~$ guix system --list-image-types\n"
"The available image types are:\n"
"\n"
msgstr ""
"mathieu@@cervin:~$ guix system --list-image-types\n"
"Les types d'image disponibles sont :\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1884
#, no-wrap
msgid ""
"   - pinebook-pro-raw\n"
"   - pine64-raw\n"
"   - novena-raw\n"
"   - hurd-raw\n"
"   - hurd-qcow2\n"
"   - qcow2\n"
"   - uncompressed-iso9660\n"
"   - efi-raw\n"
"   - arm64-raw\n"
"   - arm32-raw\n"
"   - iso9660\n"
msgstr ""
"   - pinebook-pro-raw\n"
"   - pine64-raw\n"
"   - novena-raw\n"
"   - hurd-raw\n"
"   - hurd-qcow2\n"
"   - qcow2\n"
"   - uncompressed-iso9660\n"
"   - efi-raw\n"
"   - arm64-raw\n"
"   - arm32-raw\n"
"   - iso9660\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1889
msgid "and by writing an @code{operating-system} file based on @code{pine64-barebones-os}, you can customize your image to your preferences in a file (@file{my-pine-os.scm}) like this:"
msgstr "et en écrivant un fichier de type @code{operating-system} basé sur @code{pine64-barebones-os}, vous pouvez personnaliser votre image selon vos préférences dasn un fichier (@file{my-pine-os.scm}) de cette manière :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1893
#, no-wrap
msgid ""
"(use-modules (gnu services linux)\n"
"             (gnu system images pine64))\n"
"\n"
msgstr ""
"(use-modules (gnu services linux)\n"
"             (gnu system images pine64))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1904
#, no-wrap
msgid ""
"(let ((base-os pine64-barebones-os))\n"
"  (operating-system\n"
"    (inherit base-os)\n"
"    (timezone \"America/Indiana/Indianapolis\")\n"
"    (services\n"
"     (cons\n"
"      (service earlyoom-service-type\n"
"               (earlyoom-configuration\n"
"                (prefer-regexp \"icecat|chromium\")))\n"
"      (operating-system-user-services base-os)))))\n"
msgstr ""
"(let ((base-os pine64-barebones-os))\n"
"  (operating-system\n"
"    (inherit base-os)\n"
"    (timezone \"America/Indiana/Indianapolis\")\n"
"    (services\n"
"     (cons\n"
"      (service earlyoom-service-type\n"
"               (earlyoom-configuration\n"
"                (prefer-regexp \"icecat|chromium\")))\n"
"      (operating-system-user-services base-os)))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1907
msgid "run:"
msgstr "lancez :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1910
#, no-wrap
msgid "guix system image --image-type=pine64-raw my-pine-os.scm\n"
msgstr "guix system image --image-type=pine64-raw my-pine-os.scm\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1913
msgid "or,"
msgstr "ou bien,"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1916
#, no-wrap
msgid "guix system image --image-type=hurd-raw my-hurd-os.scm\n"
msgstr "guix system image --image-type=hurd-raw my-hurd-os.scm\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1920
msgid "to get an image that can be written directly to a hard drive and booted from."
msgstr "pour récupérer une image que vous pouvez écrire sur un disque dur pour démarrer dessus."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1922
msgid "Without changing anything to @code{my-hurd-os.scm}, calling:"
msgstr "Sans rien changer à @code{my-hurd-os.scm}, en appelant :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1925
#, no-wrap
msgid "guix system image --image-type=hurd-qcow2 my-hurd-os.scm\n"
msgstr "guix system image --image-type=hurd-qcow2 my-hurd-os.scm\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1928
msgid "will instead produce a Hurd QEMU image."
msgstr "vous aurez une image QEMU pour le Hurd à la place."

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:1931
#, no-wrap
msgid "2FA, two-factor authentication"
msgstr "2FA, authentification à double facteur"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:1932
#, no-wrap
msgid "U2F, Universal 2nd Factor"
msgstr "U2F, second facteur universel"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:1933
#, no-wrap
msgid "security key, configuration"
msgstr "clé de sécurité, configuration"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1940
msgid "The use of security keys can improve your security by providing a second authentication source that cannot be easily stolen or copied, at least for a remote adversary (something that you have), to the main secret (a passphrase -- something that you know), reducing the risk of impersonation."
msgstr "L'utilisation de clés de sécurité peut améliorer votre sécurité en fournissant une seconde source d'authentification qui ne peut pas être facilement volée ni copiée, au moins pour les adversaires à distance (quelque chose que vous possédez) de votre secret principal (une phrase de passe — quelque chose que vous connaissez), ce qui réduit les risques de vol d'identité."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1945
msgid "The example configuration detailed below showcases what minimal configuration needs to be made on your Guix System to allow the use of a Yubico security key.  It is hoped the configuration can be useful for other security keys as well, with minor adjustments."
msgstr "L'exemple de configuration détaillée plus bas montre la configuration minimale dont vous avez besoin sur votre système Guix pour permettre l'utilisation d'une clé de sécurité Yubico. Nous espérons que la configuration puisse être utile pour d'autres clés de sécurité aussi, avec quelques ajustements."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1946
#, no-wrap
msgid "Configuration for use as a two-factor authenticator (2FA)"
msgstr "Configuration pour l'utiliser comme authentification à double facteur (2FA)"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1954
msgid "To be usable, the udev rules of the system should be extended with key-specific rules.  The following shows how to extend your udev rules with the @file{lib/udev/rules.d/70-u2f.rules} udev rule file provided by the @code{libfido2} package from the @code{(gnu packages security-token)} module and add your user to the @samp{\"plugdev\"} group it uses:"
msgstr "Pour être utilisable, les règles udev du systèmes doivent être étendues avec des règles spécifiques à la clé. Ce qui suit montre comment étendre vos règles udev avec le fichier de règles @file{lib/udev/rules.d/70-u2f.rules} fournit par le paquet @code{libfido2} du module @code{(gnu packages security-token)} et ajouter votre utilisateur au groupe @samp{\"plugdev\"} qu'il utilise :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1973
#, no-wrap
msgid ""
"(use-package-modules ... security-token ...)\n"
"...\n"
"(operating-system\n"
" ...\n"
" (users (cons* (user-account\n"
"               (name \"your-user\")\n"
"               (group \"users\")\n"
"               (supplementary-groups\n"
"\t\t'(\"wheel\" \"netdev\" \"audio\" \"video\"\n"
"                  \"plugdev\"))           ;<- added system group\n"
"               (home-directory \"/home/your-user\"))\n"
"              %base-user-accounts))\n"
" ...\n"
" (services\n"
"  (cons*\n"
"   ...\n"
"   (udev-rules-service 'fido2 libfido2 #:groups '(\"plugdev\")))))\n"
msgstr ""
"(use-package-modules ... security-token ...)\n"
"...\n"
"(operating-system\n"
" ...\n"
" (users (cons* (user-account\n"
"               (name \"your-user\")\n"
"               (group \"users\")\n"
"               (supplementary-groups\n"
"\t\t'(\"wheel\" \"netdev\" \"audio\" \"video\"\n"
"                  \"plugdev\"))           ;<- added system group\n"
"               (home-directory \"/home/your-user\"))\n"
"              %base-user-accounts))\n"
" ...\n"
" (services\n"
"  (cons*\n"
"   ...\n"
"   (udev-rules-service 'fido2 libfido2 #:groups '(\"plugdev\")))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1978
msgid "After re-configuring your system and re-logging in your graphical session so that the new group is in effect for your user, you can verify that your key is usable by launching:"
msgstr "Après la reconfiguration de votre système et vous être authentifié dans votre session graphique pour que le nouveau groupe prenne effet pour votre utilisateur, vous pouvez vérifier que la clé est utilisable en exécutant :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1981
#, no-wrap
msgid "guix shell ungoogled-chromium -- chromium chrome://settings/securityKeys\n"
msgstr "guix shell ungoogled-chromium -- chromium chrome://settings/securityKeys\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1987
msgid "and validating that the security key can be reset via the ``Reset your security key'' menu.  If it works, congratulations, your security key is ready to be used with applications supporting two-factor authentication (2FA)."
msgstr "et en validant que la clé de sécurité peut être remise à zéro via le menu « réinitialiser votre clé de sécurité ». Si cela fonctionne, bravo, votre clé de sécurité est prête à être utilisée avec les applications qui prennent en charge l'authentification à double facteur (2FA)."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1994
msgid "To connect to a Wireguard VPN server you need the kernel module to be loaded in memory and a package providing networking tools that support it (e.g.  @code{wireguard-tools} or @code{network-manager})."
msgstr "Pour se connecter à un serveur VPN Wireguard, il faut que le module du noyau soit chargé en mémoire et qu'un paquet fournissant des outils de réseau le prenne en charge (par exemple, @code{wireguard-tools} ou @code{network-manager})."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1998
msgid "Here is a configuration example for Linux-Libre < 5.6, where the module is out of tree and need to be loaded manually---following revisions of the kernel have it built-in and so don't need such configuration:"
msgstr "Voici un exemple de configuration pour Linux-Libre < 5.6, où le module est hors de l'arborescence des sources et doit être chargé manuellement--les révisions suivantes du noyau l'ont intégré et n'ont donc pas besoin d'une telle configuration :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2003
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules desktop)\n"
"(use-package-modules vpn)\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-service-modules desktop)\n"
"(use-package-modules vpn)\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2012
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (services (cons (simple-service 'wireguard-module\n"
"                                  kernel-module-loader-service-type\n"
"                                  '(\"wireguard\"))\n"
"                  %desktop-services))\n"
"  (packages (cons wireguard-tools %base-packages))\n"
"  (kernel-loadable-modules (list wireguard-linux-compat)))\n"
msgstr ""
"(operating-system\n"
"  ;; …\n"
"  (services (cons (simple-service 'wireguard-module\n"
"                                  kernel-module-loader-service-type\n"
"                                  '(\"wireguard\"))\n"
"                  %desktop-services))\n"
"  (packages (cons wireguard-tools %base-packages))\n"
"  (kernel-loadable-modules (list wireguard-linux-compat)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2016
msgid "After reconfiguring and restarting your system you can either use Wireguard tools or NetworkManager to connect to a VPN server."
msgstr "Après avoir reconfiguré et redémarré votre système, vous pouvez utiliser les outils Wireguard ou NetworkManager pour vous connecter à un serveur VPN."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2017
#, no-wrap
msgid "Using Wireguard tools"
msgstr "Utilisation des outils Wireguard"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2023
msgid "To test your Wireguard setup it is convenient to use @command{wg-quick}.  Just give it a configuration file @command{wg-quick up ./wg0.conf}; or put that file in @file{/etc/wireguard} and run @command{wg-quick up wg0} instead."
msgstr "Pour tester votre configuration Wireguard, vous pouvez utiliser @command{wg-quick}. Donnez-lui simplement un fichier de configuration : @command{wg-quick up ./wg0.conf}, ou placez ce fichier dans @file{/etc/wireguard} et lancez @command{wg-quick up wg0} à la place."

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:2027
msgid "Be warned that the author described this command as a: “[…] very quick and dirty bash script […]”."
msgstr "Soyez averti que l'auteur a décrit cette commande comme un : « [...] script bash écrit à la va-vite [...] »."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2029
#, no-wrap
msgid "Using NetworkManager"
msgstr "En utilisant NetworkManager"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2037
msgid "Thanks to NetworkManager support for Wireguard we can connect to our VPN using @command{nmcli} command.  Up to this point this guide assumes that you're using Network Manager service provided by @code{%desktop-services}.  Ortherwise you need to adjust your services list to load @code{network-manager-service-type} and reconfigure your Guix system."
msgstr "Grâce à la prise en charge de NetworkManager pour Wireguard, nous pouvons nous connecter à notre VPN en utilisant la commande @command{nmcli}.  Jusqu'ici, ce guide suppose que vous utilisez le service Network Manager fourni par @code{%desktop-services}.  Dans le cas contraire, vous devez ajuster votre liste de services pour charger @code{network-manager-service-type} et reconfigurer votre système Guix."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2039
msgid "To import your VPN configuration execute nmcli import command:"
msgstr "Pour importer votre configuration VPN, exécutez la commande d'import de nmcli :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2043
#, no-wrap
msgid ""
"# nmcli connection import type wireguard file wg0.conf\n"
"Connection 'wg0' (edbee261-aa5a-42db-b032-6c7757c60fde) successfully added\n"
msgstr ""
"# nmcli connection import type wireguard file wg0.conf\n"
"Connection 'wg0' (edbee261-aa5a-42db-b032-6c7757c60fde) successfully added\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2048
msgid "This will create a configuration file in @file{/etc/NetworkManager/wg0.nmconnection}.  Next connect to the Wireguard server:"
msgstr "Cela va créer un fichier de configuration dans @file{/etc/NetworkManager/wg0.nmconnection}. Ensuite connectez-vous au serveur Wireguard :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2052
#, no-wrap
msgid ""
"$ nmcli connection up wg0\n"
"Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6)\n"
msgstr ""
"$ nmcli connection up wg0\n"
"Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6)\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2056
msgid "By default NetworkManager will connect automatically on system boot.  To change that behaviour you need to edit your config:"
msgstr "Par défaut, NetworkManager se connectera automatiquement au démarrage du système. Pour changer ce comportement vous devez modifier votre configuration :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2059
#, no-wrap
msgid "# nmcli connection modify wg0 connection.autoconnect no\n"
msgstr "# nmcli connection modify wg0 connection.autoconnect no\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2064
msgid "For more specific information about NetworkManager and wireguard @uref{https://blogs.gnome.org/thaller/2019/03/15/wireguard-in-networkmanager/,see this post by thaller}."
msgstr "Pour des informations plus spécifiques sur NetworkManager et wireguard @uref{https://blogs.gnome.org/thaller/2019/03/15/wireguard-in-networkmanager/,voir ce billet par thaller}."

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2067
#, no-wrap
msgid "wm"
msgstr "wm"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2069 guix-git/doc/guix-cookbook.texi:2070
#, no-wrap
msgid "StumpWM"
msgstr "StumpWM"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2071
#, no-wrap
msgid "stumpwm"
msgstr "stumpwm"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2076
msgid "You could install StumpWM with a Guix system by adding @code{stumpwm} and optionally @code{`(,stumpwm \"lib\")} packages to a system configuration file, e.g.@: @file{/etc/config.scm}."
msgstr "Vous pouvez installer StumpWM sur un système Guix en ajoutant @code{stumwm} et éventuellement @code{`(,stumpwm \"lib\")} dans les paquets du fichier de système d'exploitation, p.@: ex.@: @file{/etc/config.scm}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2078
msgid "An example configuration can look like this:"
msgstr "Voici un exemple de configuration :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2082
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-package-modules wm)\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-package-modules wm)\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2087
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    %base-packages)))\n"
msgstr ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    %base-packages)))\n"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2089
#, no-wrap
msgid "stumpwm fonts"
msgstr "polices stumpwm"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2093
msgid "By default StumpWM uses X11 fonts, which could be small or pixelated on your system.  You could fix this by installing StumpWM contrib Lisp module @code{sbcl-ttf-fonts}, adding it to Guix system packages:"
msgstr "Par défaut StumpWM utilise les polices X11, qui peuvent être petites ou pixelisées sur votre système. Vous pouvez corriger cela en installant le module Lisp pour StumpWM @code{sbcl-ttf-fonts}, en l'ajoutant aux paquets de votre système :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2097
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-package-modules fonts wm)\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-package-modules fonts wm)\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2102
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    sbcl-ttf-fonts font-dejavu %base-packages)))\n"
msgstr ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    sbcl-ttf-fonts font-dejavu %base-packages)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2106
msgid "Then you need to add the following code to a StumpWM configuration file @file{~/.stumpwm.d/init.lisp}:"
msgstr "Ensuite vous devrez ajouter le code suivant à au fichier de configuration de StumpWM @file{~/.stumpwm.d/init.lisp} :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2113
#, no-wrap
msgid ""
"(require :ttf-fonts)\n"
"(setf xft:*font-dirs* '(\"/run/current-system/profile/share/fonts/\"))\n"
"(setf clx-truetype:+font-cache-filename+ (concat (getenv \"HOME\") \"/.fonts/font-cache.sexp\"))\n"
"(xft:cache-fonts)\n"
"(set-font (make-instance 'xft:font :family \"DejaVu Sans Mono\" :subfamily \"Book\" :size 11))\n"
msgstr ""
"(require :ttf-fonts)\n"
"(setf xft:*font-dirs* '(\"/run/current-system/profile/share/fonts/\"))\n"
"(setf clx-truetype:+font-cache-filename+ (concat (getenv \"HOME\") \"/.fonts/font-cache.sexp\"))\n"
"(xft:cache-fonts)\n"
"(set-font (make-instance 'xft:font :family \"DejaVu Sans Mono\" :subfamily \"Book\" :size 11))\n"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2115 guix-git/doc/guix-cookbook.texi:2116
#, no-wrap
msgid "Session lock"
msgstr "Verrouillage de session"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2117
#, no-wrap
msgid "sessionlock"
msgstr "verrouillage de session"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2123
msgid "Depending on your environment, locking the screen of your session might come built in or it might be something you have to set up yourself. If you use a desktop environment like GNOME or KDE, it's usually built in. If you use a plain window manager like StumpWM or EXWM, you might have to set it up yourself."
msgstr "En fonction de votre environnement, le verrouillage de l'écran peut être inclus, ou vous devrez le configurer vous-même. La fonctionnalité est souvent intégrée aux environnements de bureau comme GNOME ou KDE. Si vous utilisez un gestionnaire de fenêtre comme StumpWM ou EXWM, vous devrez sans doute le configurer vous-même."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:2124 guix-git/doc/guix-cookbook.texi:2125
#, no-wrap
msgid "Xorg"
msgstr "Xorg"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2131
msgid "If you use Xorg, you can use the utility @uref{https://www.mankier.com/1/xss-lock, xss-lock} to lock the screen of your session.  xss-lock is triggered by DPMS which since Xorg 1.8 is auto-detected and enabled if ACPI is also enabled at kernel runtime."
msgstr "Si vous utilisez Xorg, vous pouvez utiliser l'utilitaire @uref{https://www.mankier.com/1/xss-lock, xss-lock} pour verrouiller votre session. xss-lock est lancé par DPMS qui est détecté et activé automatiquement par Xorg 1.8 si ACPI est aussi activé à l'exécution dans le noyau."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2134
msgid "To use xss-lock, you can simple execute it and put it into the background before you start your window manager from e.g. your @file{~/.xsession}:"
msgstr "Pour utiliser xss-lock, vous pouvez simplement l'exécuter et le laisser tourner en tache de fond avant de démarrer votre gestionnaire de fenêtre, par exemple dans votre @file{~/.xsession} :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2138
#, no-wrap
msgid ""
"xss-lock -- slock &\n"
"exec stumpwm\n"
msgstr ""
"xss-lock -- slock &\n"
"exec stumpwm\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2142
msgid "In this example, xss-lock uses @code{slock} to do the actual locking of the screen when it determines it's appropriate, like when you suspend your device."
msgstr "Dans cet exemple, xss-lock utilise @code{slock} pour effectivement verrouiller l'écran quand il pense que c'est nécessaire, comme lorsque vous mettez votre machine en veille."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2146
msgid "For slock to be allowed to be a screen locker for the graphical session, it needs to be made setuid-root so it can authenticate users, and it needs a PAM service. This can be achieved by adding the following service to your @file{config.scm}:"
msgstr "Pour que slock puisse verrouiller l'écran de la session graphique, il doit être en setuid-root pour qu'il puisse authentifier les utilisateurs, et il a besoin d'un service PAM. On peut y arriver en ajoutant le service suivant dans notre @file{config.scm} :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2149
#, no-wrap
msgid "(screen-locker-service slock)\n"
msgstr "(screen-locker-service slock)\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2155
msgid "If you manually lock your screen, e.g. by directly calling slock when you want to lock your screen but not suspend it, it's a good idea to notify xss-lock about this so no confusion occurs. This can be done by executing @code{xset s activate} immediately before you execute slock."
msgstr "Si vous verrouillez l'écran manuellement, p.@: ex.@: en appelant slock directement si vous voulez verrouiller l'écran sans mettre l'ordinateur en veille, il vaut mieux notifier xss-lock pour éviter la confusion. Vous pouvez faire cela en exécutant @code{xset s activate} juste avant d'exécuter slock."

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2158
#, no-wrap
msgid "linode, Linode"
msgstr "linode, Linode"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2163
msgid "To run Guix on a server hosted by @uref{https://www.linode.com, Linode}, start with a recommended Debian server.  We recommend using the default distro as a way to bootstrap Guix. Create your SSH keys."
msgstr "Pour lancer Guix sur un serveur hébergé par @uref{https://www.linode.com, Linode}, commencez par un serveur Debian recommandé. Nous vous recommandons d'utiliser la distribution par défaut pour amorcer Guix. Créez vos clés SSH."

#. type: example
#: guix-git/doc/guix-cookbook.texi:2166
#, no-wrap
msgid "ssh-keygen\n"
msgstr "ssh-keygen\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2172
msgid "Be sure to add your SSH key for easy login to the remote server.  This is trivially done via Linode's graphical interface for adding SSH keys.  Go to your profile and click add SSH Key.  Copy into it the output of:"
msgstr "Assurez-vous d'ajouter votre clé SSH pour vous connecter facilement sur le serveur distant. C'est facilité par l'interface graphique de Linode. Allez sur votre profil et cliquez sur le bouton pour ajouter une clé SSH. Copiez la sortie de :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2175
#, no-wrap
msgid "cat ~/.ssh/<username>_rsa.pub\n"
msgstr "cat ~/.ssh/<username>_rsa.pub\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2178
msgid "Power the Linode down."
msgstr "Éteignez votre Linode."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2182
msgid "In the Linode's Storage tab, resize the Debian disk to be smaller.  30 GB free space is recommended.  Then click \"Add a disk\", and fill out the form with the following:"
msgstr "Dans l'onglet de stockage du Linode, modifiez la taille du disque Debian pour qu'il soit plus petit. Nous recommandons 30 Go d'espace libre. Ensuite, cliquez sur « Ajouter un disque » et remplissez le formulaire de cette manière :"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2186
msgid "Label: \"Guix\""
msgstr "Label: \"Guix\""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2189
msgid "Filesystem: ext4"
msgstr "Filesystem: ext4"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2192
msgid "Set it to the remaining size"
msgstr "Donnez-lui la taille restante"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2197
msgid "In the Configurations tab, press \"Edit\" on the default Debian profile.  Under \"Block Device Assignment\" click \"Add a Device\". It should be @file{/dev/sdc} and you can select the \"Guix\" disk. Save Changes."
msgstr "Dans l'onglet de configuration, cliquez sur « modifier » sur le profil Debian par défaut. Dans « Block Device Assignment » cliquez sur « Add a Device ». Il devrait apparaître en tant que @file{/dev/sdc} et vous pouvez sélectionner le disque « Guix ». Sauvegardez les changements."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2199
msgid "Now \"Add a Configuration\", with the following:"
msgstr "Maintenant « Add a Configuration », avec ce qui suit :"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2202
msgid "Label: Guix"
msgstr "Label: Guix"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2205
msgid "Kernel:GRUB 2 (it's at the bottom! This step is @b{IMPORTANT!})"
msgstr "Kernel: GRUB 2 (c'est à la toute fin ! Cette étape est @b{IMPORTANTE !})"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2208
msgid "Block device assignment:"
msgstr "Périphériques blocs assignés :"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2211
msgid "@file{/dev/sda}: Guix"
msgstr "@file{/dev/sda} : Guix"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2214
msgid "@file{/dev/sdb}: swap"
msgstr "@file{/dev/sdb} : swap"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2217
msgid "Root device: @file{/dev/sda}"
msgstr "Périphérique racine : @file{/dev/sda}"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2220
msgid "Turn off all the filesystem/boot helpers"
msgstr "Désactivez tous les programmes d'aide pour les systèmes de fichiers et le démarrage"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2227
msgid "Now power it back up, booting with the Debian configuration.  Once it's running, ssh to your server via @code{ssh root@@@var{<your-server-IP-here>}}. (You can find your server IP address in your Linode Summary section.) Now you can run the \"install guix from @pxref{Binary Installation,,, guix, GNU Guix}\" steps:"
msgstr "Maintenant démarrez le serveur avec la configuration Debian. Une fois lancé, connectez vous en ssh au serveur avec @code{ssh root@@@var{<IP-de-votre-serveur-ici>}}. (Vous pouvez trouver l'adresse IP de votre serveur dans la section résumé de Linode). Maintenant vous pouvez lancer les étapes d'installation de @pxref{Installation binaire,,, guix.fr, GNU Guix} :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2235
#, no-wrap
msgid ""
"sudo apt-get install gpg\n"
"wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -\n"
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
"guix pull\n"
msgstr ""
"sudo apt-get install gpg\n"
"wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -\n"
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
"guix pull\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2239
msgid "Now it's time to write out a config for the server.  The key information is below. Save the resulting file as @file{guix-config.scm}."
msgstr "Maintenant il est temps d'écrire une configuration pour le serveur. Voici ce que vous devrez obligatoirement écrire, en plus de vos propres configurations. Enregistrez le fichier avec le nom @file{guix-config.scm}."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2250
#, no-wrap
msgid ""
"(use-modules (gnu)\n"
"             (guix modules))\n"
"(use-service-modules networking\n"
"                     ssh)\n"
"(use-package-modules admin\n"
"                     certs\n"
"                     package-management\n"
"                     ssh\n"
"                     tls)\n"
"\n"
msgstr ""
"(use-modules (gnu)\n"
"             (guix modules))\n"
"(use-service-modules networking\n"
"                     ssh)\n"
"(use-package-modules admin\n"
"                     certs\n"
"                     package-management\n"
"                     ssh\n"
"                     tls)\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2267
#, no-wrap
msgid ""
"(operating-system\n"
"  (host-name \"my-server\")\n"
"  (timezone \"America/New_York\")\n"
"  (locale \"en_US.UTF-8\")\n"
"  ;; This goofy code will generate the grub.cfg\n"
"  ;; without installing the grub bootloader on disk.\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader\n"
"                (bootloader\n"
"                 (inherit grub-bootloader)\n"
"                 (installer #~(const #true))))))\n"
"  (file-systems (cons (file-system\n"
"                        (device \"/dev/sda\")\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"\n"
msgstr ""
"(operating-system\n"
"  (host-name \"my-server\")\n"
"  (timezone \"America/New_York\")\n"
"  (locale \"en_US.UTF-8\")\n"
"  ;; Ce code va générer un grub.cfg\n"
"  ;; sans installer le chargeur d'amorçage grub sur le disque.\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader\n"
"                (bootloader\n"
"                 (inherit grub-bootloader)\n"
"                 (installer #~(const #true))))))\n"
"  (file-systems (cons (file-system\n"
"                        (device \"/dev/sda\")\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2270
#, no-wrap
msgid ""
"  (swap-devices (list \"/dev/sdb\"))\n"
"\n"
msgstr ""
"  (swap-devices (list \"/dev/sdb\"))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2274
#, no-wrap
msgid ""
"  (initrd-modules (cons \"virtio_scsi\"    ; Needed to find the disk\n"
"                        %base-initrd-modules))\n"
"\n"
msgstr ""
"  (initrd-modules (cons \"virtio_scsi\"    ; Requis pour trouver le disque\n"
"                        %base-initrd-modules))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2283
#, no-wrap
msgid ""
"  (users (cons (user-account\n"
"                (name \"janedoe\")\n"
"                (group \"users\")\n"
"                ;; Adding the account to the \"wheel\" group\n"
"                ;; makes it a sudoer.\n"
"                (supplementary-groups '(\"wheel\"))\n"
"                (home-directory \"/home/janedoe\"))\n"
"               %base-user-accounts))\n"
"\n"
msgstr ""
"  (users (cons (user-account\n"
"                (name \"janedoe\")\n"
"                (group \"users\")\n"
"                ;; Ajoute le compte au groupe « wheel »\n"
"                ;; pour en faire un sudoer.\n"
"                (supplementary-groups '(\"wheel\"))\n"
"                (home-directory \"/home/janedoe\"))\n"
"               %base-user-accounts))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2287
#, no-wrap
msgid ""
"  (packages (cons* nss-certs            ;for HTTPS access\n"
"                   openssh-sans-x\n"
"                   %base-packages))\n"
"\n"
msgstr ""
"  (packages (cons* nss-certs            ; pour l'accès HTTPS\n"
"                   openssh-sans-x\n"
"                   %base-packages))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2298
#, no-wrap
msgid ""
"  (services (cons*\n"
"             (service dhcp-client-service-type)\n"
"             (service openssh-service-type\n"
"                      (openssh-configuration\n"
"                       (openssh openssh-sans-x)\n"
"                       (password-authentication? #false)\n"
"                       (authorized-keys\n"
"                        `((\"janedoe\" ,(local-file \"janedoe_rsa.pub\"))\n"
"                          (\"root\" ,(local-file \"janedoe_rsa.pub\"))))))\n"
"             %base-services)))\n"
msgstr ""
"  (services (cons*\n"
"             (service dhcp-client-service-type)\n"
"             (service openssh-service-type\n"
"                      (openssh-configuration\n"
"                       (openssh openssh-sans-x)\n"
"                       (password-authentication? #false)\n"
"                       (authorized-keys\n"
"                        `((\"janedoe\" ,(local-file \"janedoe_rsa.pub\"))\n"
"                          (\"root\" ,(local-file \"janedoe_rsa.pub\"))))))\n"
"             %base-services)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2301
msgid "Replace the following fields in the above configuration:"
msgstr "Remplacez les champs suivants dans la configuration ci-dessus :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2309
#, no-wrap
msgid ""
"(host-name \"my-server\")       ; replace with your server name\n"
"; if you chose a linode server outside the U.S., then\n"
"; use tzselect to find a correct timezone string\n"
"(timezone \"America/New_York\") ; if needed replace timezone\n"
"(name \"janedoe\")              ; replace with your username\n"
"(\"janedoe\" ,(local-file \"janedoe_rsa.pub\")) ; replace with your ssh key\n"
"(\"root\" ,(local-file \"janedoe_rsa.pub\")) ; replace with your ssh key\n"
msgstr ""
"(host-name \"my-server\")       ; remplacez avec le nom de votre serveur\n"
"; si vous avez choisi un serveur Linode en dehors des U.S.,\n"
"; utilisez tzselect pour trouver le bon fuseau horaire\n"
"(timezone \"America/New_York\") ; remplacez le fuseau horaire si besoin\n"
"(name \"janedoe\")              ; remplacez avec votre nom d'utilisateur\n"
"(\"janedoe\" ,(local-file \"janedoe_rsa.pub\")) ; remplacez par votre clé ssh\n"
"(\"root\" ,(local-file \"janedoe_rsa.pub\")) ; remplacez par votre clé ssh\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2316
msgid "The last line in the above example lets you log into the server as root and set the initial root password (see the note at the end of this recipe about root login).  After you have done this, you may delete that line from your configuration and reconfigure to prevent root login."
msgstr "Cette dernière ligne vous permet de vous connecter au serveur en root et de créer le mot de passe initial de root (voir la note à la fin de cette recette sur la connexion en root). Après avoir fait cela, vous pouvez supprimer cette ligne de votre configuration et reconfigurer pour empêcher la connexion directe en root."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2321
msgid "Copy your ssh public key (eg: @file{~/.ssh/id_rsa.pub}) as @file{@var{<your-username-here>}_rsa.pub} and put @file{guix-config.scm} in the same directory.  In a new terminal run these commands."
msgstr "Copiez votre clé ssh publique (ex : @file{~/.ssh/id_rsa.pub}) dans @file{@var{<votre-nom-d'utilisateur>}_rsa.pub} et ajoutez votre @file{guix-config.scm} au même répertoire. Dans un nouveau terminal lancez ces commandes."

#. type: example
#: guix-git/doc/guix-cookbook.texi:2326
#, no-wrap
msgid ""
"sftp root@@<remote server ip address>\n"
"put /path/to/files/<username>_rsa.pub .\n"
"put /path/to/files/guix-config.scm .\n"
msgstr ""
"sftp root@@<adresse IP du serveur distant>\n"
"put /path/to/files/<username>_rsa.pub .\n"
"put /path/to/files/guix-config.scm .\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2329
msgid "In your first terminal, mount the guix drive:"
msgstr "Dans votre premier terminal, montez le disque guix :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2333
#, no-wrap
msgid ""
"mkdir /mnt/guix\n"
"mount /dev/sdc /mnt/guix\n"
msgstr ""
"mkdir /mnt/guix\n"
"mount /dev/sdc /mnt/guix\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2338
msgid "Due to the way we set up the bootloader section of the guix-config.scm, only the grub configuration file will be installed.  So, we need to copy over some of the other GRUB stuff already installed on the Debian system:"
msgstr "À cause de la manière dont nous avons paramétré la section du chargeur d'amorçage dans le fichier guix-config.scm, nous installons seulement notre fichier de configuration grub. Donc on doit copier certains fichiers GRUB déjà installés sur le système Debian :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2342
#, no-wrap
msgid ""
"mkdir -p /mnt/guix/boot/grub\n"
"cp -r /boot/grub/* /mnt/guix/boot/grub/\n"
msgstr ""
"mkdir -p /mnt/guix/boot/grub\n"
"cp -r /boot/grub/* /mnt/guix/boot/grub/\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2345
msgid "Now initialize the Guix installation:"
msgstr "Maintenant initialisez l'installation de Guix :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2348
#, no-wrap
msgid "guix system init guix-config.scm /mnt/guix\n"
msgstr "guix system init guix-config.scm /mnt/guix\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2352
msgid "Ok, power it down! Now from the Linode console, select boot and select \"Guix\"."
msgstr "Ok, éteignez maintenant le serveur ! Depuis la console Linode, démarrez et choisissez « Guix »."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2355
msgid "Once it boots, you should be able to log in via SSH! (The server config will have changed though.)  You may encounter an error like:"
msgstr "Une fois démarré, vous devriez pouvoir vous connecter en SSH ! (La configuration du serveur aura cependant changé). Vous pouvez rencontrer une erreur de ce type :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2371
#, no-wrap
msgid ""
"$ ssh root@@<server ip address>\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n"
"Someone could be eavesdropping on you right now (man-in-the-middle attack)!\n"
"It is also possible that a host key has just been changed.\n"
"The fingerprint for the ECDSA key sent by the remote host is\n"
"SHA256:0B+wp33w57AnKQuHCvQP0+ZdKaqYrI/kyU7CfVbS7R4.\n"
"Please contact your system administrator.\n"
"Add correct host key in /home/joshua/.ssh/known_hosts to get rid of this message.\n"
"Offending ECDSA key in /home/joshua/.ssh/known_hosts:3\n"
"ECDSA host key for 198.58.98.76 has changed and you have requested strict checking.\n"
"Host key verification failed.\n"
msgstr ""
"$ ssh root@@<server ip address>\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n"
"Someone could be eavesdropping on you right now (man-in-the-middle attack)!\n"
"It is also possible that a host key has just been changed.\n"
"The fingerprint for the ECDSA key sent by the remote host is\n"
"SHA256:0B+wp33w57AnKQuHCvQP0+ZdKaqYrI/kyU7CfVbS7R4.\n"
"Please contact your system administrator.\n"
"Add correct host key in /home/joshua/.ssh/known_hosts to get rid of this message.\n"
"Offending ECDSA key in /home/joshua/.ssh/known_hosts:3\n"
"ECDSA host key for 198.58.98.76 has changed and you have requested strict checking.\n"
"Host key verification failed.\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2375
msgid "Either delete @file{~/.ssh/known_hosts} file, or delete the offending line starting with your server IP address."
msgstr "Vous pouvez soit supprimer @file{~/.ssh/known_hosts}, soit supprimer la ligne qui pose problème, qui commence par l'adresse IP de votre serveur."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2377
msgid "Be sure to set your password and root's password."
msgstr "Assurez-vous de configurer votre mot de passe et celui de root."

#. type: example
#: guix-git/doc/guix-cookbook.texi:2382
#, no-wrap
msgid ""
"ssh root@@<remote ip address>\n"
"passwd  ; for the root password\n"
"passwd <username> ; for the user password\n"
msgstr ""
"ssh root@@<remote ip address>\n"
"passwd  ; pour le mot de passe root\n"
"passwd <username> ; pour le mot de passe utilisateur\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2389
msgid "You may not be able to run the above commands at this point.  If you have issues remotely logging into your linode box via SSH, then you may still need to set your root and user password initially by clicking on the ``Launch Console'' option in your linode.  Choose the ``Glish'' instead of ``Weblish''.  Now you should be able to ssh into the machine."
msgstr "Il se peut que vous ne puissiez pas lancer les commandes précédentes si vous n'arrivez pas à vous connecter à distance via SSH, auquel cas vous devrez peut-être configurer vos mot de passes utilisateurs et root en cliquant sur « Launch Console » dans votre espace Linode. Choisissez « Glish » au lieu de « Weblish ». Maintenant vous devriez pouvoir vous connecter en ssh à la machine."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2393
msgid "Hooray! At this point you can shut down the server, delete the Debian disk, and resize the Guix to the rest of the size.  Congratulations!"
msgstr "Hourra ! Maintenant vous pouvez étendre le serveur, supprimer le disque Debian et redimensionner celui de Guix. Bravo !"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2398
msgid "By the way, if you save it as a disk image right at this point, you'll have an easy time spinning up new Guix images! You may need to down-size the Guix image to 6144MB, to save it as an image.  Then you can resize it again to the max size."
msgstr "Au fait, si vous sauvegardez le résultat dans une image disque maintenant, vous pourrez plus facilement démarrer de nouvelles images de guix ! Vous devrez peut-être réduire la taille de l'image Guix à 6144 Mo, pour la sauvegarder en tant qu'image. Ensuite vous pouvez redimensionner la partition à la taille maximum."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2407
msgid "To bind mount a file system, one must first set up some definitions before the @code{operating-system} section of the system definition.  In this example we will bind mount a folder from a spinning disk drive to @file{/tmp}, to save wear and tear on the primary SSD, without dedicating an entire partition to be mounted as @file{/tmp}."
msgstr "Pour dupliquer le montage d'un système de fichier (@i{bind mount}), on doit d'abord ajouter quelques définitions avant la section @code{operating-system} de la définition de système d'exploitation. Dans cet exemple nous allons dupliquer le montage d'un dossier d'un disque dur vers @file{/tmp}, pour éviter d'épuiser le SSD principal, sans dédier une partition entière à @file{/tmp}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2410
msgid "First, the source drive that hosts the folder we wish to bind mount should be defined, so that the bind mount can depend on it."
msgstr "Déjà, le disque source qui héberge de dossier dont nous voulons dupliquer le montage doit être défini, pour que le montage dupliqué puisse en dépendre."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2417
#, no-wrap
msgid ""
"(define source-drive ;; \"source-drive\" can be named anything you want.\n"
"   (file-system\n"
"    (device (uuid \"UUID goes here\"))\n"
"    (mount-point \"/path-to-spinning-disk-goes-here\")\n"
"    (type \"ext4\"))) ;; Make sure to set this to the appropriate type for your drive.\n"
msgstr ""
"(define source-drive ;; vous pouvez nommer « source-drive » comme vous le souhaitez.\n"
"   (file-system\n"
"    (device (uuid \"indiquez l'UUID ici\"))\n"
"    (mount-point \"/chemin-vers-le-disque-dur\")\n"
"    (type \"ext4\"))) ;; Assurez-vous d'indiquer le bon type pour la partition\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2421
msgid "The source folder must also be defined, so that guix will know it's not a regular block device, but a folder."
msgstr "Le dossier source doit aussi être défini, pour que guix sache qu'il ne s'agit pas d'un périphérique bloc, mais d'un dossier."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2423
#, no-wrap
msgid "(define (%source-directory) \"/path-to-spinning-disk-goes-here/tmp\") ;; \"source-directory\" can be named any valid variable name.\n"
msgstr "(define (%source-directory) \"/chemin-vers-le-disque-dur/tmp\") ;; vous pouvez nommer « source-directory » comme vous le souhaitez.\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2427
msgid "Finally, inside the @code{file-systems} definition, we must add the mount itself."
msgstr "Enfin, dans la définition @code{file-systems}, on doit ajouter le montage lui-même."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2430
#, no-wrap
msgid ""
"(file-systems (cons*\n"
"\n"
msgstr ""
"(file-systems (cons*\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2432
#, no-wrap
msgid ""
"                ...<other drives omitted for clarity>...\n"
"\n"
msgstr ""
"                ...<d'autres montages omis pour rester concis>...\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2434
#, no-wrap
msgid ""
"                source-drive ;; Must match the name you gave the source drive in the earlier definition.\n"
"\n"
msgstr ""
"                source-drive ;; Doit correspondre au nom que vous avez donné au disque source dans la définition précédente.\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2442
#, no-wrap
msgid ""
"                (file-system\n"
"                 (device (%source-directory)) ;; Make sure \"source-directory\" matches your earlier definition.\n"
"                 (mount-point \"/tmp\")\n"
"                 (type \"none\") ;; We are mounting a folder, not a partition, so this type needs to be \"none\"\n"
"                 (flags '(bind-mount))\n"
"                 (dependencies (list source-drive)) ;; Ensure \"source-drive\" matches what you've named the variable for the drive.\n"
"                 )\n"
"\n"
msgstr ""
"                (file-system\n"
"                 (device (%source-directory)) ;; Assurez-vous que « source-directory » corresponde à la définition précédente.\n"
"                 (mount-point \"/tmp\")\n"
"                 (type \"none\") ;; On monte un dossier, pas une partition, donc le montage est de type « none »\n"
"                 (flags '(bind-mount))\n"
"                 (dependencies (list source-drive)) ;; Assurez-vous que « source-drive » corresponde au nom de la variable pour le disque.\n"
"                 )\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2444
#, no-wrap
msgid ""
"                 ...<other drives omitted for clarity>...\n"
"\n"
msgstr ""
"                 ...<d'autres montages omis pour rester concis>...\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2446
#, no-wrap
msgid "                ))\n"
msgstr "                ))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2453
msgid "Guix daemon can use a HTTP proxy to get substitutes, here we are configuring it to get them via Tor."
msgstr "Le démon Guix peut utiliser un mandataire HTTP pour récupérer des substituts. Nous le configurons ici pour les récupérer par Tor."

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:2454
#, no-wrap
msgid "Warning"
msgstr "Attention"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:2460
msgid "@emph{Not all} Guix daemon's traffic will go through Tor! Only HTTP/HTTPS will get proxied; FTP, Git protocol, SSH, etc connections will still go through the clearnet.  Again, this configuration isn't foolproof some of your traffic won't get routed by Tor at all.  Use it at your own risk."
msgstr "@emph{Tout} le trafic du démon de passera @emph{pas} par Tor ! Seuls HTTP/HTTPS passer par le mandataire ; les connexions FTP, avec le protocol Git, SSH, etc, passeront toujours par le réseau en clair. De nouveau, cette configuration n'est pas parfaite et une partie de votre trafic ne sera pas routé par Tor du tout. Utilisez-la à vos risques et périls."

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:2466
msgid "Also note that the procedure described here applies only to package substitution. When you update your guix distribution with @command{guix pull}, you still need to use @command{torsocks} if you want to route the connection to guix's git repository servers through Tor."
msgstr "Remarquez aussi que la procédure décrite ici ne s'applique qu'à la substitution de paquets. Lorsque vous mettez à jour la distribution avec @command{guix pull}, vous aurez encore besoin de @command{torsocks} si vous voulez router la connexion vers les serveurs de dépôts git à travers Tor."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2471
msgid "Guix's substitute server is available as a Onion service, if you want to use it to get your substitutes through Tor configure your system as follow:"
msgstr "Le serveur de substitut de Guix est disponible sur un service Onion. Si vous voulez l'utiliser pour récupérer des substituts par Tor, configurez votre système de cette manière :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2475
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-module base networking)\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-service-module base networking)\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2492
#, no-wrap
msgid ""
"(operating-system\n"
"  …\n"
"  (services\n"
"    (cons\n"
"      (service tor-service-type\n"
"              (tor-configuration\n"
"                (config-file (plain-file \"tor-config\"\n"
"                                         \"HTTPTunnelPort 127.0.0.1:9250\"))))\n"
"      (modify-services %base-services\n"
"        (guix-service-type\n"
"          config => (guix-configuration\n"
"                      (inherit config)\n"
"                      ;; ci.guix.gnu.org's Onion service\n"
"                      (substitute-urls\n"
"                       \"@value{SUBSTITUTE-TOR-URL}\")\n"
"                      (http-proxy \"http://localhost:9250\")))))))\n"
msgstr ""
"(operating-system\n"
"  …\n"
"  (services\n"
"    (cons\n"
"      (service tor-service-type\n"
"              (tor-configuration\n"
"                (config-file (plain-file \"tor-config\"\n"
"                                         \"HTTPTunnelPort 127.0.0.1:9250\"))))\n"
"      (modify-services %base-services\n"
"        (guix-service-type\n"
"          config => (guix-configuration\n"
"                      (inherit config)\n"
"                      ;; service Onion de ci.guix.gnu.org\n"
"                      (substitute-urls\n"
"                       \"@value{SUBSTITUTE-TOR-URL}\")\n"
"                      (http-proxy \"http://localhost:9250\")))))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2501
msgid "This will keep a tor process running that provides a HTTP CONNECT tunnel which will be used by @command{guix-daemon}.  The daemon can use other protocols than HTTP(S) to get remote resources, request using those protocols won't go through Tor since we are only setting a HTTP tunnel here.  Note that @code{substitutes-urls} is using HTTPS and not HTTP or it won't work, that's a limitation of Tor's tunnel; you may want to use @command{privoxy} instead to avoid such limitations."
msgstr "Cela fera tourner le processus tor et fournira un tunnel HTTP CONNECT qui sera utilisé par @command{guix-daemon}. Le démon peut utiliser d'autres protocoles que HTTP(S) pour récupérer des ressources distantes. Les requêtes utilisant ces protocoles ne passeront pas par Tor puisqu'il s'agit d'un tunnel HTTP uniquement. Remarquez que @code{substitutes-urls} doit utiliser HTTPS et non HTTP, sinon ça ne fonctionne pas. C'est une limite du tunnel de Tor ; vous voudrez peut-être utiliser @command{privoxy} à la place pour éviter ces limites."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2505
msgid "If you don't want to always get substitutes through Tor but using it just some of the times, then skip the @code{guix-configuration}.  When you want to get a substitute from the Tor tunnel run:"
msgstr "Si vous ne voulez pas toute le temps récupérer des substituts à travers Tor mais l'utiliser seulement de temps en temps, alors ne modifiez pas l'objet @code{guix-configuration}. Lorsque vous voulez récupérer un substitut par le tunnel Tor, lancez :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2510
#, no-wrap
msgid ""
"sudo herd set-http-proxy guix-daemon http://localhost:9250\n"
"guix build \\\n"
"  --substitute-urls=@value{SUBSTITUTE-TOR-URL} @dots{}\n"
msgstr ""
"sudo herd set-http-proxy guix-daemon http://localhost:9250\n"
"guix build \\\n"
"  --substitute-urls=@value{SUBSTITUTE-TOR-URL} @dots{}\n"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2514
#, no-wrap
msgid "nginx, lua, openresty, resty"
msgstr "nginx, lua, openresty, resty"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2517
msgid "NGINX could be extended with Lua scripts."
msgstr "Les fonctionnalités de NGINX peuvent être étendues avec des scripts Lua."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2520
msgid "Guix provides NGINX service with ability to load Lua module and specific Lua packages, and reply to requests by evaluating Lua scripts."
msgstr "Guix fournit un service NGINX qui est capable de charger des modules et des paquets Lua spécifiques, et de répondre aux requêtes en évaluant des scripts Lua."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2524
msgid "The following example demonstrates system definition with configuration to evaluate @file{index.lua} Lua script on HTTP request to @uref{http://localhost/hello} endpoint:"
msgstr "L'exemple suivant montre une définition de système avec une configuration qui évalue le script Lua @file{index.lua} lors d'une requête HTTP à @uref{http://localhost/hello} :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2527
#, no-wrap
msgid ""
"local shell = require \"resty.shell\"\n"
"\n"
msgstr ""
"local shell = require \"resty.shell\"\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2531
#, no-wrap
msgid ""
"local stdin = \"\"\n"
"local timeout = 1000  -- ms\n"
"local max_size = 4096  -- byte\n"
"\n"
msgstr ""
"local stdin = \"\"\n"
"local timeout = 1000  -- ms\n"
"local max_size = 4096  -- byte\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2534
#, no-wrap
msgid ""
"local ok, stdout, stderr, reason, status =\n"
"   shell.run([[/run/current-system/profile/bin/ls /tmp]], stdin, timeout, max_size)\n"
"\n"
msgstr ""
"local ok, stdout, stderr, reason, status =\n"
"   shell.run([[/run/current-system/profile/bin/ls /tmp]], stdin, timeout, max_size)\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2536
#, no-wrap
msgid "ngx.say(stdout)\n"
msgstr "ngx.say(stdout)\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2567
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules #;… web)\n"
"(use-package-modules #;… lua)\n"
"(operating-system\n"
"  ;; …\n"
"  (services\n"
"   ;; …\n"
"   (service nginx-service-type\n"
"            (nginx-configuration\n"
"             (modules\n"
"              (list\n"
"               (file-append nginx-lua-module \"/etc/nginx/modules/ngx_http_lua_module.so\")))\n"
"             (lua-package-path (list lua-resty-core\n"
"                                     lua-resty-lrucache\n"
"                                     lua-resty-signal\n"
"                                     lua-tablepool\n"
"                                     lua-resty-shell))\n"
"             (lua-package-cpath (list lua-resty-signal))\n"
"             (server-blocks\n"
"              (list (nginx-server-configuration\n"
"                     (server-name '(\"localhost\"))\n"
"                     (listen '(\"80\"))\n"
"                     (root \"/etc\")\n"
"                     (locations (list\n"
"                                 (nginx-location-configuration\n"
"                                  (uri \"/hello\")\n"
"                                  (body (list #~(format #f \"content_by_lua_file ~s;\"\n"
"                                                        #$(local-file \"index.lua\"))))))))))))))\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-service-modules #;… web)\n"
"(use-package-modules #;… lua)\n"
"(operating-system\n"
"  ;; …\n"
"  (services\n"
"   ;; …\n"
"   (service nginx-service-type\n"
"            (nginx-configuration\n"
"             (modules\n"
"              (list\n"
"               (file-append nginx-lua-module \"/etc/nginx/modules/ngx_http_lua_module.so\")))\n"
"             (lua-package-path (list lua-resty-core\n"
"                                     lua-resty-lrucache\n"
"                                     lua-resty-signal\n"
"                                     lua-tablepool\n"
"                                     lua-resty-shell))\n"
"             (lua-package-cpath (list lua-resty-signal))\n"
"             (server-blocks\n"
"              (list (nginx-server-configuration\n"
"                     (server-name '(\"localhost\"))\n"
"                     (listen '(\"80\"))\n"
"                     (root \"/etc\")\n"
"                     (locations (list\n"
"                                 (nginx-location-configuration\n"
"                                  (uri \"/hello\")\n"
"                                  (body (list #~(format #f \"content_by_lua_file ~s;\"\n"
"                                                        #$(local-file \"index.lua\"))))))))))))))\n"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2571
#, no-wrap
msgid "mpd"
msgstr "mpd"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2572
#, no-wrap
msgid "music server, headless"
msgstr "serveur de musique, sans affichage"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2573
#, no-wrap
msgid "bluetooth, ALSA configuration"
msgstr "bluetooth, configuration ALSA"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2580
msgid "MPD, the Music Player Daemon, is a flexible server-side application for playing music.  Client programs on different machines on the network --- a mobile phone, a laptop, a desktop workstation --- can connect to it to control the playback of audio files from your local music collection.  MPD decodes the audio files and plays them back on one or many outputs."
msgstr "MPD, le démon lecteur de musique, est une application serveur flexible pour jouer de la musique. Les programmes clients sur différentes machines du réseau — un téléphone portable, un ordinateur portable, un ordinateur de bureau — peuvent s'y connecter pour contrôler la lecture de fichiers audio de votre collection musicale locale. MPD décode les fichiers audio et les joue sur une ou plusieurs sorties."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2587
msgid "By default MPD will play to the default audio device.  In the example below we make things a little more interesting by setting up a headless music server.  There will be no graphical user interface, no Pulseaudio daemon, and no local audio output.  Instead we will configure MPD with two outputs: a bluetooth speaker and a web server to serve audio streams to any streaming media player."
msgstr "Par défaut MPD jouera sur le périphérique audio par défaut. Dans l'exemple ci-dessous nous rendons les choses un peu plus intéressantes en configurant un serveur de musique sans affichage. Il n'y aura pas d'interface graphique, pas de démon Pulseaudio, ni de sortie audio locale. Au lieu de cela, nous configurons MPD avec deux sorties : un haut-parleur bluetooth et un serveur web pour servir des flux audio à n'importe quel lecture de musique."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2593
msgid "Bluetooth is often rather frustrating to set up.  You will have to pair your Bluetooth device and make sure that the device is automatically connected as soon as it powers on.  The Bluetooth system service returned by the @code{bluetooth-service} procedure provides the infrastructure needed to set this up."
msgstr "Le Bluetooth est souvent frustrant à configurer. Vous devrez appairer vos périphériques Bluetooth et vous assurer que le périphérique se connecte automatiquement dès qu'il est branché. Le service système Bluetooth renvoyé par la procédure @code{bluetooth-service} fournit l'infrastructure requise pour cette configuration."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2596
msgid "Reconfigure your system with at least the following services and packages:"
msgstr "Reconfigurez votre système avec au moins les services et les paquets suivants :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2606
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (cons* bluez bluez-alsa\n"
"                   %base-packages))\n"
"  (services\n"
"   ;; …\n"
"   (dbus-service #:services (list bluez-alsa))\n"
"   (bluetooth-service #:auto-enable? #t)))\n"
msgstr ""
"(operating-system\n"
"  ;; …\n"
"  (packages (cons* bluez bluez-alsa\n"
"                   %base-packages))\n"
"  (services\n"
"   ;; …\n"
"   (dbus-service #:services (list bluez-alsa))\n"
"   (bluetooth-service #:auto-enable? #t)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2613
msgid "Start the @code{bluetooth} service and then use @command{bluetoothctl} to scan for Bluetooth devices.  Try to identify your Bluetooth speaker and pick out its device ID from the resulting list of devices that is indubitably dominated by a baffling smorgasbord of your neighbors' home automation gizmos.  This only needs to be done once:"
msgstr "Démarrez le service @code{bluetooth} puis utilisez @command{bluetoothctl} pour scanner les périphériques Bluetooth. Essayez d'identifier votre haut-parleur Bluetooth et choisissez son ID de périphérique dans la liste de périphériques qui est indubitablement polluée par une armée de gadgets connectés chez votre voisin. Vous ne devrez le faire qu'une seule fois :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2617
#, no-wrap
msgid ""
"$ bluetoothctl \n"
"[NEW] Controller 00:11:22:33:95:7F BlueZ 5.40 [default]\n"
"\n"
msgstr ""
"$ bluetoothctl \n"
"[NEW] Controller 00:11:22:33:95:7F BlueZ 5.40 [default]\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2620
#, no-wrap
msgid ""
"[bluetooth]# power on\n"
"[bluetooth]# Changing power on succeeded\n"
"\n"
msgstr ""
"[bluetooth]# power on\n"
"[bluetooth]# Changing power on succeeded\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2623
#, no-wrap
msgid ""
"[bluetooth]# agent on\n"
"[bluetooth]# Agent registered\n"
"\n"
msgstr ""
"[bluetooth]# agent on\n"
"[bluetooth]# Agent registered\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2626
#, no-wrap
msgid ""
"[bluetooth]# default-agent\n"
"[bluetooth]# Default agent request successful\n"
"\n"
msgstr ""
"[bluetooth]# default-agent\n"
"[bluetooth]# Default agent request successful\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2633
#, no-wrap
msgid ""
"[bluetooth]# scan on\n"
"[bluetooth]# Discovery started\n"
"[CHG] Controller 00:11:22:33:95:7F Discovering: yes\n"
"[NEW] Device AA:BB:CC:A4:AA:CD My Bluetooth Speaker\n"
"[NEW] Device 44:44:FF:2A:20:DC My Neighbor's TV\n"
"@dots{}\n"
"\n"
msgstr ""
"[bluetooth]# scan on\n"
"[bluetooth]# Discovery started\n"
"[CHG] Controller 00:11:22:33:95:7F Discovering: yes\n"
"[NEW] Device AA:BB:CC:A4:AA:CD My Bluetooth Speaker\n"
"[NEW] Device 44:44:FF:2A:20:DC My Neighbor's TV\n"
"@dots{}\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2637
#, no-wrap
msgid ""
"[bluetooth]# pair AA:BB:CC:A4:AA:CD\n"
"Attempting to pair with AA:BB:CC:A4:AA:CD\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: yes\n"
"\n"
msgstr ""
"[bluetooth]# pair AA:BB:CC:A4:AA:CD\n"
"Attempting to pair with AA:BB:CC:A4:AA:CD\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: yes\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2643
#, no-wrap
msgid ""
"[My Bluetooth Speaker]# [CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110b-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110c-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110e-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Paired: yes\n"
"Pairing successful\n"
"\n"
msgstr ""
"[My Bluetooth Speaker]# [CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110b-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110c-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110e-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Paired: yes\n"
"Pairing successful\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2645
#, no-wrap
msgid ""
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: no\n"
"\n"
msgstr ""
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: no\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2650
#, no-wrap
msgid ""
"[bluetooth]# \n"
"[bluetooth]# trust AA:BB:CC:A4:AA:CD\n"
"[bluetooth]# [CHG] Device AA:BB:CC:A4:AA:CD Trusted: yes\n"
"Changing AA:BB:CC:A4:AA:CD trust succeeded\n"
"\n"
msgstr ""
"[bluetooth]# \n"
"[bluetooth]# trust AA:BB:CC:A4:AA:CD\n"
"[bluetooth]# [CHG] Device AA:BB:CC:A4:AA:CD Trusted: yes\n"
"Changing AA:BB:CC:A4:AA:CD trust succeeded\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2657
#, no-wrap
msgid ""
"[bluetooth]# \n"
"[bluetooth]# connect AA:BB:CC:A4:AA:CD\n"
"Attempting to connect to AA:BB:CC:A4:AA:CD\n"
"[bluetooth]# [CHG] Device AA:BB:CC:A4:AA:CD RSSI: -63\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: yes\n"
"Connection successful\n"
"\n"
msgstr ""
"[bluetooth]# \n"
"[bluetooth]# connect AA:BB:CC:A4:AA:CD\n"
"Attempting to connect to AA:BB:CC:A4:AA:CD\n"
"[bluetooth]# [CHG] Device AA:BB:CC:A4:AA:CD RSSI: -63\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: yes\n"
"Connection successful\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2662
#, no-wrap
msgid ""
"[My Bluetooth Speaker]# scan off\n"
"[CHG] Device AA:BB:CC:A4:AA:CD RSSI is nil\n"
"Discovery stopped\n"
"[CHG] Controller 00:11:22:33:95:7F Discovering: no\n"
msgstr ""
"[My Bluetooth Speaker]# scan off\n"
"[CHG] Device AA:BB:CC:A4:AA:CD RSSI is nil\n"
"Discovery stopped\n"
"[CHG] Controller 00:11:22:33:95:7F Discovering: no\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2666
msgid "Congratulations, you can now automatically connect to your Bluetooth speaker!"
msgstr "Félicitations, vous pouvez maintenant vous connecter automatiquement à votre haut-parleur Bluetooth !"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2676
msgid "It is now time to configure ALSA to use the @emph{bluealsa} Bluetooth module, so that you can define an ALSA pcm device corresponding to your Bluetooth speaker.  For a headless server using @emph{bluealsa} with a fixed Bluetooth device is likely simpler than configuring Pulseaudio and its stream switching behavior.  We configure ALSA by crafting a custom @code{alsa-configuration} for the @code{alsa-service-type}.  The configuration will declare a @code{pcm} type @code{bluealsa} from the @code{bluealsa} module provided by the @code{bluez-alsa} package, and then define a @code{pcm} device of that type for your Bluetooth speaker."
msgstr "Il est maintenant temps de configurer ALSA pour utiliser le module Bluetooth @emph{bluealsa}, pour que vous puissiez définir un périphérique pcm ALSA correspondant à votre haut-parleur Bluetooth. Un serveur sans affichage utilisant @emph{bluealsa} avec un périphérique fixe est probablement plus facile à configurer que Pulseaudio et son comportement de changement de flux. Nous configurons ALSA en créant un @code{alsa-configuration} personnalisé pour le service @code{alsa-service-type}. La configuration déclarera un type @code{pcm} @code{bluealsa} du module @code{bluealsa} fournit par le paquet @code{bluez-alsa}, puis définira un périphérique @code{pcm} de ce type pour le haut-parleur Bluetooth."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2683
msgid "All that is left then is to make MPD send audio data to this ALSA device.  We also add a secondary MPD output that makes the currently played audio files available as a stream through a web server on port 8080.  When enabled a device on the network could listen to the audio stream by connecting any capable media player to the HTTP server on port 8080, independent of the status of the Bluetooth speaker."
msgstr "Tout ce qui reste à faire est de faire en sorte que MPD envoie les données audio à ce périphérique ALSA. Nous ajoutons aussi une sortie MPD secondaire qui rend les fichiers audio en lecture disponibles en streaming sur un serveur web sur le port 8080. Lorsque la sortie est activée, un appareil sur le réseau peut écouter le flux audio en se connectant avec n'importe quel lecteur multimédia au serveur HTTP sur le port 8080, indépendamment du statut du haut-parleur Bluetooth."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2686
msgid "What follows is the outline of an @code{operating-system} declaration that should accomplish the above-mentioned tasks:"
msgstr "Voici les grandes lignes d'une déclaration @code{operating-system} qui devrait accomplir les tâches sus-mentionnées :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2734
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules audio dbus sound #;… etc)\n"
"(use-package-modules audio linux #;… etc)\n"
"(operating-system\n"
"  ;; …\n"
"  (packages (cons* bluez bluez-alsa\n"
"                   %base-packages))\n"
"  (services\n"
"   ;; …\n"
"   (service mpd-service-type\n"
"            (mpd-configuration\n"
"             (user \"your-username\")\n"
"             (music-dir \"/path/to/your/music\")\n"
"             (address \"192.168.178.20\")\n"
"             (outputs (list (mpd-output\n"
"                             (type \"alsa\")\n"
"                             (name \"MPD\")\n"
"                             (extra-options\n"
"                              ;; Use the same name as in the ALSA\n"
"                              ;; configuration below.\n"
"                              '((device . \"pcm.btspeaker\"))))\n"
"                            (mpd-output\n"
"                             (type \"httpd\")\n"
"                             (name \"streaming\")\n"
"                             (enabled? #false)\n"
"                             (always-on? #true)\n"
"                             (tags? #true)\n"
"                             (mixer-type 'null)\n"
"                             (extra-options\n"
"                              '((encoder . \"vorbis\")\n"
"                                (port    . \"8080\")\n"
"                                (bind-to-address . \"192.168.178.20\")\n"
"                                (max-clients . \"0\") ;no limit\n"
"                                (quality . \"5.0\")\n"
"                                (format  . \"44100:16:1\"))))))))\n"
"   (dbus-service #:services (list bluez-alsa))\n"
"   (bluetooth-service #:auto-enable? #t)\n"
"   (service alsa-service-type\n"
"            (alsa-configuration\n"
"             (pulseaudio? #false) ;we don't need it\n"
"             (extra-options\n"
"              #~(string-append \"\\\n"
"# Declare Bluetooth audio device type \\\"bluealsa\\\" from bluealsa module\n"
"pcm_type.bluealsa @{\n"
"    lib \\\"\" #$(file-append bluez-alsa \"/lib/alsa-lib/libasound_module_pcm_bluealsa.so\") \"\\\"\n"
"@}\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-service-modules audio dbus sound #;… etc)\n"
"(use-package-modules audio linux #;… etc)\n"
"(operating-system\n"
"  ;; …\n"
"  (packages (cons* bluez bluez-alsa\n"
"                   %base-packages))\n"
"  (services\n"
"   ;; …\n"
"   (service mpd-service-type\n"
"            (mpd-configuration\n"
"             (user \"your-username\")\n"
"             (music-dir \"/path/to/your/music\")\n"
"             (address \"192.168.178.20\")\n"
"             (outputs (list (mpd-output\n"
"                             (type \"alsa\")\n"
"                             (name \"MPD\")\n"
"                             (extra-options\n"
"                              ;; Utilisez le même nom que dans la configuration\n"
"                              ;; ALSA plus bas.\n"
"                              '((device . \"pcm.btspeaker\"))))\n"
"                            (mpd-output\n"
"                             (type \"httpd\")\n"
"                             (name \"streaming\")\n"
"                             (enabled? #false)\n"
"                             (always-on? #true)\n"
"                             (tags? #true)\n"
"                             (mixer-type 'null)\n"
"                             (extra-options\n"
"                              '((encoder . \"vorbis\")\n"
"                                (port    . \"8080\")\n"
"                                (bind-to-address . \"192.168.178.20\")\n"
"                                (max-clients . \"0\") ;no limit\n"
"                                (quality . \"5.0\")\n"
"                                (format  . \"44100:16:1\"))))))))\n"
"   (dbus-service #:services (list bluez-alsa))\n"
"   (bluetooth-service #:auto-enable? #t)\n"
"   (service alsa-service-type\n"
"            (alsa-configuration\n"
"             (pulseaudio? #false) ;we don't need it\n"
"             (extra-options\n"
"              #~(string-append \"\\\n"
"# Déclare un type de périphérique audio Bluetooth \\\"bluealsa\\\" du module bluealsa\n"
"pcm_type.bluealsa @{\n"
"    lib \\\"\" #$(file-append bluez-alsa \"/lib/alsa-lib/libasound_module_pcm_bluealsa.so\") \"\\\"\n"
"@}\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2739
#, no-wrap
msgid ""
"# Declare control device type \\\"bluealsa\\\" from the same module\n"
"ctl_type.bluealsa @{\n"
"    lib \\\"\" #$(file-append bluez-alsa \"/lib/alsa-lib/libasound_module_ctl_bluealsa.so\") \"\\\"\n"
"@}\n"
"\n"
msgstr ""
"# Déclare un type de périphérique de contrôle \\\"bluealsa\\\" du même module\n"
"ctl_type.bluealsa @{\n"
"    lib \\\"\" #$(file-append bluez-alsa \"/lib/alsa-lib/libasound_module_ctl_bluealsa.so\") \"\\\"\n"
"@}\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2746
#, no-wrap
msgid ""
"# Define the actual Bluetooth audio device.\n"
"pcm.btspeaker @{\n"
"    type bluealsa\n"
"    device \\\"AA:BB:CC:A4:AA:CD\\\" # unique device identifier\n"
"    profile \\\"a2dp\\\"\n"
"@}\n"
"\n"
msgstr ""
"# Définie le périphérique Bluetooth audio.\n"
"pcm.btspeaker @{\n"
"    type bluealsa\n"
"    device \\\"AA:BB:CC:A4:AA:CD\\\" # unique device identifier\n"
"    profile \\\"a2dp\\\"\n"
"@}\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2752
#, no-wrap
msgid ""
"# Define an associated controller.\n"
"ctl.btspeaker @{\n"
"    type bluealsa\n"
"@}\n"
"\"))))))\n"
msgstr ""
"# Définie un contrôleur associé.\n"
"ctl.btspeaker @{\n"
"    type bluealsa\n"
"@}\n"
"\"))))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2756
msgid "Enjoy the music with the MPD client of your choice or a media player capable of streaming via HTTP!"
msgstr "Profitez de votre musique avec le client MPD de votre choix ou un lecteur multimédia capable de streamer en HTTP !"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2769
msgid "The kernel Linux provides a number of shared facilities that are available to processes in the system.  These facilities include a shared view on the file system, other processes, network devices, user and group identities, and a few others.  Since Linux 3.19 a user can choose to @emph{unshare} some of these shared facilities for selected processes, providing them (and their child processes) with a different view on the system."
msgstr "Le noyau Linux fournit un certain nombre de dispositifs partagés qui sont disponibles pour les processus du système. Ces dispositifs sont entre autres un vue partagée du système de fichiers, des autres processus, des périphériques réseau, des identités de groupe et d'utilisateur et quelques autres. Depuis Linux 3.19 vous pouvez choisir de @emph{départager} certains de ces dispositifs partagés pour des processus choisis, en leur fournissant (ainsi qu'à leurs processus enfant) une vue différente du système."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2775
msgid "A process with an unshared @code{mount} namespace, for example, has its own view on the file system --- it will only be able to see directories that have been explicitly bound in its mount namespace.  A process with its own @code{proc} namespace will consider itself to be the only process running on the system, running as PID 1."
msgstr "Un processus avec un espace de nom de montage (@code{mount}) départagé par exemple, a sa propre vue du système de fichier — il ne pourra voir que les répertoires qui ont été explicitement liés à son espace de nom de montage. Un processus avec son propre espace de nom de processus (@code{proc}) considérera qu'il est le seul processus lancé sur le système, avec le PID 1."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2782
msgid "Guix uses these kernel features to provide fully isolated environments and even complete Guix System containers, lightweight virtual machines that share the host system's kernel.  This feature comes in especially handy when using Guix on a foreign distribution to prevent interference from foreign libraries or configuration files that are available system-wide."
msgstr "Guix utilise ces fonctionnalités du noyau pour fournir des environnement complètement isolés e même des conteneurs complets pour le système Guix, des machines virtuelles légères qui partagent le noyau de l'hôte. Cette fonctionnalité est particulièrement pratique si vous utilise Guix sur une distribution externe pour éviter les interférence avec les bibliothèques ou les fichiers de configuration externes disponibles sur l'ensemble du système."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2794
msgid "The easiest way to get started is to use @command{guix shell} with the @option{--container} option.  @xref{Invoking guix shell,,, guix, GNU Guix Reference Manual} for a reference of valid options."
msgstr "La manière la plus simple de démarrer est d'utiliser @command{guix shell} avec l'option @option{--container}. @xref{Invoquer guix shell,,, guix.fr, le manuel de référence de GNU Guix} pour la référence des options valides."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2801
msgid "The following snippet spawns a minimal shell process with most namespaces unshared from the system.  The current working directory is visible to the process, but anything else on the file system is unavailable.  This extreme isolation can be very useful when you want to rule out any sort of interference from environment variables, globally installed libraries, or configuration files."
msgstr "Le bout de code suivant démarre un shell minimal avec la plupart des espaces de noms départagés du système. Le répertoire de travail actuel est visible pour le processus, mais tout le reste du système de fichiers est indisponible. Cette isolation extrême peut être très utile si vous voulez écarter toute interférence des variables d'environnement, des bibliothèques installées globalement ou des fichiers de configuration."

#. type: example
#: guix-git/doc/guix-cookbook.texi:2804
#, no-wrap
msgid "guix shell --container\n"
msgstr "guix shell --container\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2811
msgid "It is a bleak environment, barren, desolate.  You will find that not even the GNU coreutils are available here, so to explore this deserted wasteland you need to use built-in shell commands.  Even the usually gigantic @file{/gnu/store} directory is reduced to a faint shadow of itself."
msgstr "C'est un environnement vierge, aride et désolé. Vous trouverez que même GNU coreutils n'y est pas disponible, donc pour explorer cet environnement désert vous devrez utiliser les commandes internes au shell. Même le répertoire @file{/gnu/store} habituellement énorme est réduit à peau de chagrin."

#. type: example
#: guix-git/doc/guix-cookbook.texi:2821
#, no-wrap
msgid ""
"$ echo /gnu/store/*\n"
"/gnu/store/@dots{}-gcc-10.3.0-lib\n"
"/gnu/store/@dots{}-glibc-2.33\n"
"/gnu/store/@dots{}-bash-static-5.1.8\n"
"/gnu/store/@dots{}-ncurses-6.2.20210619\n"
"/gnu/store/@dots{}-bash-5.1.8\n"
"/gnu/store/@dots{}-profile\n"
"/gnu/store/@dots{}-readline-8.1.1\n"
msgstr ""
"$ echo /gnu/store/*\n"
"/gnu/store/@dots{}-gcc-10.3.0-lib\n"
"/gnu/store/@dots{}-glibc-2.33\n"
"/gnu/store/@dots{}-bash-static-5.1.8\n"
"/gnu/store/@dots{}-ncurses-6.2.20210619\n"
"/gnu/store/@dots{}-bash-5.1.8\n"
"/gnu/store/@dots{}-profile\n"
"/gnu/store/@dots{}-readline-8.1.1\n"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2823
#, no-wrap
msgid "exiting a container"
msgstr "quitter un conteneur"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2827
msgid "There isn't much you can do in an environment like this other than exiting it.  You can use @key{^D} or @command{exit} to terminate this limited shell environment."
msgstr "Vous ne pouvez pas faire grand chose de plus dans un environnement comme celui-ci à part en sortir. Vous pouvez utiliser @key{Ctrl-D} ou @command{exit} pour quitter cet environnement shell limité."

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2828
#, no-wrap
msgid "exposing directories, container"
msgstr "exposer des répertoires, conteneur"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2829
#, no-wrap
msgid "sharing directories, container"
msgstr "partager des répertoires, conteneur"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2830
#, no-wrap
msgid "mapping locations, container"
msgstr "faire correspondre des emplacement, conteneur"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2839
msgid "You can make other directories available inside of the container environment; use @option{--expose=DIRECTORY} to bind-mount the given directory as a read-only location inside the container, or use @option{--share=DIRECTORY} to make the location writable.  With an additional mapping argument after the directory name you can control the name of the directory inside the container.  In the following example we map @file{/etc} on the host system to @file{/the/host/etc} inside a container in which the GNU coreutils are installed."
msgstr "Vous pouvez rendre d'autres répertoires disponibles à l'intérieur de l'environnement du conteneur. Utilisez @option{--expose=RÉPERTOIRE} pour créer un montage lié au répertoire donné en lecture-seule à l'intérieur du conteneur, ou utilisez @option{--share=RÉPERTOIRE} pour rendre cet emplacement inscriptible. Avec un argument de correspondance supplémentaire après le nom du répertoire vous pouvez contrôler le nom du répertoire lié dans le conteneur. Dans l'exemple suivant nous faisons correspondre @file{/etc} du système hôte à @file{/l/hôte/etc} dans un conteneur dans lequel GNU coreutils est installé."

#. type: example
#: guix-git/doc/guix-cookbook.texi:2843
#, no-wrap
msgid ""
"$ guix shell --container --share=/etc=/the/host/etc coreutils\n"
"$ ls /the/host/etc\n"
msgstr ""
"$ guix shell --container --share=/etc=/l/hôte/etc coreutils\n"
"$ ls /l/hôte/etc\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2850
msgid "Similarly, you can prevent the current working directory from being mapped into the container with the @option{--no-cwd} option.  Another good idea is to create a dedicated directory that will serve as the container's home directory, and spawn the container shell from that directory."
msgstr "De même, vous pouvez empêcher le répertoire actuel d'être ajouté au conteneur avec l'option @option{--no-cwd}. Une autre bonne idée est de créer un répertoire dédié qui servira de répertoire personnel dans le conteneur et de démarrer le shell du conteneur dans ce répertoire."

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2851
#, no-wrap
msgid "hide system libraries, container"
msgstr "cacher les bibliothèques système, conteneur"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2852
#, no-wrap
msgid "avoid ABI mismatch, container"
msgstr "éviter les incompatibilités d'ABI, conteneur"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2862
msgid "On a foreign system a container environment can be used to compile software that cannot possibly be linked with system libraries or with the system's compiler toolchain.  A common use-case in a research context is to install packages from within an R session.  Outside of a container environment there is a good chance that the foreign compiler toolchain and incompatible system libraries are found first, resulting in incompatible binaries that cannot be used by R.  In a container shell this problem disappears, as system libraries and executables simply aren't available due to the unshared @code{mount} namespace."
msgstr "Sur un système externe un environnement de conteneur peut être utilisé pour compiler un logiciel qui ne peut pas être lié aux bibliothèques du système ou avec la chaine d'outils du système. Un cas d'utilisation courant dans le contexte de la recherche est l'installation de paquets à partir d'une session R. En dehors de l'environnement du conteneur il est fort probable que la chaine de compilation externe et les bibliothèques systèmes incompatibles soient trouvés en premier, ce qui créer des binaires incompatibles qui ne peuvent pas être utilisés dans R. Dans un conteneur ce problème disparait car les bibliothèques du système et les executables ne sont simplement pas disponibles à cause de l'espace de nom @code{mount} départagé."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2865
msgid "Let's take a comprehensive manifest providing a comfortable development environment for use with R:"
msgstr "Prenons un manifeste complet pour fournir un environnement de développement confortable pour R :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2869
#, no-wrap
msgid ""
"(specifications->manifest\n"
"  (list \"r-minimal\"\n"
"\n"
msgstr ""
"(specifications->manifest\n"
"  (list \"r-minimal\"\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2874
#, no-wrap
msgid ""
"        ;; base packages\n"
"        \"bash-minimal\"\n"
"        \"glibc-locales\"\n"
"        \"nss-certs\"\n"
"\n"
msgstr ""
"        ;; paquets de base\n"
"        \"bash-minimal\"\n"
"        \"glibc-locales\"\n"
"        \"nss-certs\"\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2881
#, no-wrap
msgid ""
"        ;; Common command line tools lest the container is too empty.\n"
"        \"coreutils\"\n"
"        \"grep\"\n"
"        \"which\"\n"
"        \"wget\"\n"
"        \"sed\"\n"
"\n"
msgstr ""
"        ;; Outils en ligne de commande usuels, sans lesquels le conteneur est trop vide.\n"
"        \"coreutils\"\n"
"        \"grep\"\n"
"        \"which\"\n"
"        \"wget\"\n"
"        \"sed\"\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2884
#, no-wrap
msgid ""
"        ;; R markdown tools\n"
"        \"pandoc\"\n"
"\n"
msgstr ""
"        ;; outils markdown pour R\n"
"        \"pandoc\"\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2900
#, no-wrap
msgid ""
"        ;; Toolchain and common libraries for \"install.packages\"\n"
"        \"gcc-toolchain@@10\"\n"
"        \"gfortran-toolchain\"\n"
"        \"gawk\"\n"
"        \"tar\"\n"
"        \"gzip\"\n"
"        \"unzip\"\n"
"        \"make\"\n"
"        \"cmake\"\n"
"        \"pkg-config\"\n"
"        \"cairo\"\n"
"        \"libxt\"\n"
"        \"openssl\"\n"
"        \"curl\"\n"
"        \"zlib\"))\n"
msgstr ""
"        ;; Chaine d'outils et bibliothèques courantes pour « install.packages »\n"
"        \"gcc-toolchain@@10\"\n"
"        \"gfortran-toolchain\"\n"
"        \"gawk\"\n"
"        \"tar\"\n"
"        \"gzip\"\n"
"        \"unzip\"\n"
"        \"make\"\n"
"        \"cmake\"\n"
"        \"pkg-config\"\n"
"        \"cairo\"\n"
"        \"libxt\"\n"
"        \"openssl\"\n"
"        \"curl\"\n"
"        \"zlib\"))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2906
msgid "Let's use this to run R inside a container environment.  For convenience we share the @code{net} namespace to use the host system's network interfaces.  Now we can build R packages from source the traditional way without having to worry about ABI mismatch or incompatibilities."
msgstr "Utilisons cela pour lancer R dans un environnement de conteneur. Pour se simplifier la vie, nous partageons l'espace de nom @code{net} pour utiliser les interfaces réseau du système hôte. Maintenant nous pouvons construire des paquets R à partir des sources de la manière traditionnelle sans avoir à se soucier des incompatibilités d'ABI."

#. type: example
#: guix-git/doc/guix-cookbook.texi:2909
#, no-wrap
msgid ""
"$ guix shell --container --network --manifest=manifest.scm -- R\n"
"\n"
msgstr ""
"$ guix shell --container --network --manifest=manifest.scm -- R\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2922
#, no-wrap
msgid ""
"R version 4.2.1 (2022-06-23) -- \"Funny-Looking Kid\"\n"
"Copyright (C) 2022 The R Foundation for Statistical Computing\n"
"@dots{}\n"
"> e <- Sys.getenv(\"GUIX_ENVIRONMENT\")\n"
"> Sys.setenv(GIT_SSL_CAINFO=paste0(e, \"/etc/ssl/certs/ca-certificates.crt\"))\n"
"> Sys.setenv(SSL_CERT_FILE=paste0(e, \"/etc/ssl/certs/ca-certificates.crt\"))\n"
"> Sys.setenv(SSL_CERT_DIR=paste0(e, \"/etc/ssl/certs\"))\n"
"> install.packages(\"Cairo\", lib=paste0(getwd()))\n"
"@dots{}\n"
"* installing *source* package 'Cairo' ...\n"
"@dots{}\n"
"* DONE (Cairo)\n"
"\n"
msgstr ""
"R version 4.2.1 (2022-06-23) -- \"Funny-Looking Kid\"\n"
"Copyright (C) 2022 The R Foundation for Statistical Computing\n"
"@dots{}\n"
"> e <- Sys.getenv(\"GUIX_ENVIRONMENT\")\n"
"> Sys.setenv(GIT_SSL_CAINFO=paste0(e, \"/etc/ssl/certs/ca-certificates.crt\"))\n"
"> Sys.setenv(SSL_CERT_FILE=paste0(e, \"/etc/ssl/certs/ca-certificates.crt\"))\n"
"> Sys.setenv(SSL_CERT_DIR=paste0(e, \"/etc/ssl/certs\"))\n"
"> install.packages(\"Cairo\", lib=paste0(getwd()))\n"
"@dots{}\n"
"* installing *source* package 'Cairo' ...\n"
"@dots{}\n"
"* DONE (Cairo)\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:2927
#, no-wrap
msgid ""
"The downloaded source packages are in\n"
"\t'/tmp/RtmpCuwdwM/downloaded_packages'\n"
"> library(\"Cairo\", lib=getwd())\n"
"> # success!\n"
msgstr ""
"The downloaded source packages are in\n"
"\t'/tmp/RtmpCuwdwM/downloaded_packages'\n"
"> library(\"Cairo\", lib=getwd())\n"
"> # success!\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2935
msgid "Using container shells is fun, but they can become a little cumbersome when you want to go beyond just a single interactive process.  Some tasks become a lot easier when they sit on the rock solid foundation of a proper Guix System and its rich set of system services.  The next section shows you how to launch a complete Guix System inside of a container."
msgstr "Utiliser des shells conteneurs est amusant, mais ils peuvent devenir un peu embêtant quand vous voulez plus qu'un seul processus interactif. Certaines tâches deviennent plus faciles lorsqu'elles se reposent sur les fondations solides d'un système Guix et de son riche ensemble de services systèmes. La section suivante vous montre comment lancer un système Guix complet à l'intérieur d'un conteneur."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2949
msgid "The Guix System provides a wide array of interconnected system services that are configured declaratively to form a dependable stateless GNU System foundation for whatever tasks you throw at it.  Even when using Guix on a foreign distribution you can benefit from the design of Guix System by running a system instance as a container.  Using the same kernel features of unshared namespaces mentioned in the previous section, the resulting Guix System instance is isolated from the host system and only shares file system locations that you explicitly declare."
msgstr "Le système Guix fournit un large éventail de services systèmes interconnectés configurés déclarativement pour former les fondations d'un système GNU fiable et sans état pour n'importe quelle tâche que vous lui donnez. Même lorsque vous utilisez Guix sur une distribution externe, vous pouvez bénéficier de la conception du système Guix en lançant une instance du système dans un conteneur. Avec les mêmes fonctionnalités d'espaces de noms départagés mentionnés dans la section précédente, l'instance du système Guix qui en résulte est isolée du système hôte et ne partage que les emplacements de fichiers que vous avez explicitement déclarés."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2960
msgid "A Guix System container differs from the shell process created by @command{guix shell --container} in a number of important ways.  While in a container shell the containerized process is a Bash shell process, a Guix System container runs the Shepherd as PID 1.  In a system container all system services (@pxref{Services,,, guix, GNU Guix Reference Manual}) are set up just as they would be on a Guix System in a virtual machine or on bare metal---this includes daemons managed by the GNU@tie{}Shepherd (@pxref{Shepherd Services,,, guix, GNU Guix Reference Manual}) as well as other kinds of extensions to the operating system (@pxref{Service Composition,,, guix, GNU Guix Reference Manual})."
msgstr "Un conteneur du système Guix est différent du processus shell créé par @command{guix shell --container} de plusieurs façons importantes. Dans un shell conteneur le processus de conteneurisation est le processus de shell Bash alors qu'une conteneur du système Guix fait tourner le Shepherd en PID 1. Dans un conteneur système tous les services systèmes (@pxref{Services,,, guix.fr, le manuel de référence de GNU Guix}) sont paramétrés de la même manière que sur un système Guix dans une machine virtuelle ou directement sur le matériel. Cela comprend les démons gérés par le GNU@tie{}Shepherd (@pxref{Services Shepherd,,, guix.fr, le manuel de référence de GNU Guix}) ainsi que d'autres types d'extensions du système d'exploitation (@pxref{Composition de services,,, guix.fr, le manuel de référence de GNU Guix})."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2967
msgid "The perceived increase in complexity of running a Guix System container is easily justified when dealing with more complex applications that have higher or just more rigid requirements on their execution contexts---configuration files, dedicated user accounts, directories for caches or log files, etc.  In Guix System the demands of this kind of software are satisfied through the deployment of system services."
msgstr "La complexité perçue comme croissante d'un conteneur du système Guix est facilement justifiée lorsque vous devez traiter avec des applications plus complexes qui ont des prérequis plus grands ou plus rigides sur leur contexte d'exécution — des fichiers de configuration, des comptes utilisateurs dédiés, des répertoires pour les le cache ou les fichiers journaux, etc. Sur le système Guix, la demande de ce genre de logiciels est satisfaite en déployant des services systèmes."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2969 guix-git/doc/guix-cookbook.texi:2970
#, no-wrap
msgid "A Database Container"
msgstr "Un conteneur de base de données"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2975
msgid "A good example might be a PostgreSQL database server.  Much of the complexity of setting up such a database server is encapsulated in this deceptively short service declaration:"
msgstr "Un bon exemple pourrait être un serveur de base de données PostgreSQL. La majeure partie de la complexité de configuration d'un tel serveur de base de données est encapsulée dans cette déclaration trompeusement courtes :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2980
#, no-wrap
msgid ""
"(service postgresql-service-type\n"
"         (postgresql-configuration\n"
"          (postgresql postgresql-14)))\n"
msgstr ""
"(service postgresql-service-type\n"
"         (postgresql-configuration\n"
"          (postgresql postgresql-14)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2984
msgid "A complete operating system declaration for use with a Guix System container would look something like this:"
msgstr "Une déclaration de système d'exploitation complète utilisable avec un conteneur du système Guix ressemblerait à ceci :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2989
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-package-modules databases)\n"
"(use-service-modules databases)\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-package-modules databases)\n"
"(use-service-modules databases)\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3023
#, no-wrap
msgid ""
"(operating-system\n"
"  (host-name \"container\")\n"
"  (timezone \"Europe/Berlin\")\n"
"  (file-systems (cons (file-system\n"
"                        (device (file-system-label \"does-not-matter\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader grub-bootloader)\n"
"               (targets '(\"/dev/sdX\"))))\n"
"  (services\n"
"   (cons* (service postgresql-service-type\n"
"                   (postgresql-configuration\n"
"                    (postgresql postgresql-14)\n"
"                    (config-file\n"
"                     (postgresql-config-file\n"
"                      (log-destination \"stderr\")\n"
"                      (hba-file\n"
"                       (plain-file \"pg_hba.conf\"\n"
"                                   \"\\\n"
"local\tall\tall\t\t\ttrust\n"
"host\tall\tall\t10.0.0.1/32 \ttrust\"))\n"
"                      (extra-config\n"
"                       '((\"listen_addresses\" \"*\")\n"
"                         (\"log_directory\"    \"/var/log/postgresql\")))))))\n"
"          (service postgresql-role-service-type\n"
"                   (postgresql-role-configuration\n"
"                    (roles\n"
"                     (list (postgresql-role\n"
"                            (name \"test\")\n"
"                            (create-database? #t))))))\n"
"          %base-services)))\n"
msgstr ""
"(operating-system\n"
"  (host-name \"container\")\n"
"  (timezone \"Europe/Berlin\")\n"
"  (file-systems (cons (file-system\n"
"                        (device (file-system-label \"does-not-matter\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader grub-bootloader)\n"
"               (targets '(\"/dev/sdX\"))))\n"
"  (services\n"
"   (cons* (service postgresql-service-type\n"
"                   (postgresql-configuration\n"
"                    (postgresql postgresql-14)\n"
"                    (config-file\n"
"                     (postgresql-config-file\n"
"                      (log-destination \"stderr\")\n"
"                      (hba-file\n"
"                       (plain-file \"pg_hba.conf\"\n"
"                                   \"\\\n"
"local\tall\tall\t\t\ttrust\n"
"host\tall\tall\t10.0.0.1/32 \ttrust\"))\n"
"                      (extra-config\n"
"                       '((\"listen_addresses\" \"*\")\n"
"                         (\"log_directory\"    \"/var/log/postgresql\")))))))\n"
"          (service postgresql-role-service-type\n"
"                   (postgresql-role-configuration\n"
"                    (roles\n"
"                     (list (postgresql-role\n"
"                            (name \"test\")\n"
"                            (create-database? #t))))))\n"
"          %base-services)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3031
msgid "With @code{postgresql-role-service-type} we define a role ``test'' and create a matching database, so that we can test right away without any further manual setup.  The @code{postgresql-config-file} settings allow a client from IP address 10.0.0.1 to connect without requiring authentication---a bad idea in production systems, but convenient for this example."
msgstr "Avec @code{postgresql-role-service-type} nous définissons un rôle « test » et créons une base de données correspondante, pour que nous puissions le tester immédiatement sans autre paramétrage manuel. Les paramètres de @code{postgresql-config-file} permettent à un client de se connecter à partir de l'adresse IP 10.0.0.1 sans authentification — une mauvaise idée en production, mais pratique pour cet exemple."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3037
msgid "Let's build a script that will launch an instance of this Guix System as a container.  Write the @code{operating-system} declaration above to a file @file{os.scm} and then use @command{guix system container} to build the launcher.  (@pxref{Invoking guix system,,, guix, GNU Guix Reference Manual})."
msgstr "Construisons un script qui exécutera une instance de ce système Guix dans un conteneur. Écrivez la déclaration @code{operating-system} ci-dessus dans un fichier @file{os.scm} puis utilisez @command{guix system container} pour construire le lanceur (@pxref{Invoquer guix system,,, guix.fr, le manuel de référence de GNU Guix})."

#. type: example
#: guix-git/doc/guix-cookbook.texi:3045
#, no-wrap
msgid ""
"$ guix system container os.scm\n"
"The following derivations will be built:\n"
"  /gnu/store/@dots{}-run-container.drv\n"
"  @dots{}\n"
"building /gnu/store/@dots{}-run-container.drv...\n"
"/gnu/store/@dots{}-run-container\n"
msgstr ""
"$ guix system container os.scm\n"
"Les dérivations suivantes seront construites :\n"
"  /gnu/store/@dots{}-run-container.drv\n"
"  @dots{}\n"
"construction de /gnu/store/@dots{}-run-container.drv...\n"
"/gnu/store/@dots{}-run-container\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3051
msgid "Now that we have a launcher script we can run it to spawn the new system with a running PostgreSQL service.  Note that due to some as yet unresolved limitations we need to run the launcher as the root user, for example with @command{sudo}."
msgstr "Maintenant que nous avons le script de lancement nous pouvons le lancer pour démarrer le nouveau système avec un service PostgreSQL. Remarquez qu'à cause de limites non encore résolues, nous devons lancer le lanceur en root, par exemple avec @command{sudo}."

#. type: example
#: guix-git/doc/guix-cookbook.texi:3056
#, no-wrap
msgid ""
"$ sudo /gnu/store/@dots{}-run-container\n"
"system container is running as PID 5983\n"
"@dots{}\n"
msgstr ""
"$ sudo /gnu/store/@dots{}-run-container\n"
"le conteneur système tourne avec le PID 5983\n"
"@dots{}\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3063
msgid "Background the process with @key{Ctrl-z} followed by @command{bg}.  Note the process ID in the output; we will need it to connect to the container later.  You know what? Let's try attaching to the container right now.  We will use @command{nsenter}, a tool provided by the @code{util-linux} package:"
msgstr "Mettez le processus en fond avec @key{Ctrl-z} suivie de @command{bg}. Prenez note de l'ID du processus dans la sortie ; nous en aurons besoin pour nous connecter au conteneur plus tard. Vous savez quoi ? Essayons de nous attacher au conteneur immédiatement. Nous utiliserons @command{nsenter}, un outil fournit par le paquet @code{util-linux} :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3076
#, no-wrap
msgid ""
"$ guix shell util-linux\n"
"$ sudo nsenter -a -t 5983\n"
"root@@container /# pgrep -a postgres\n"
"49 /gnu/store/@dots{}-postgresql-14.4/bin/postgres -D /var/lib/postgresql/data --config-file=/gnu/store/@dots{}-postgresql.conf -p 5432\n"
"51 postgres: checkpointer\n"
"52 postgres: background writer\n"
"53 postgres: walwriter\n"
"54 postgres: autovacuum launcher\n"
"55 postgres: stats collector\n"
"56 postgres: logical replication launcher\n"
"root@@container /# exit\n"
msgstr ""
"$ guix shell util-linux\n"
"$ sudo nsenter -a -t 5983\n"
"root@@container /# pgrep -a postgres\n"
"49 /gnu/store/@dots{}-postgresql-14.4/bin/postgres -D /var/lib/postgresql/data --config-file=/gnu/store/@dots{}-postgresql.conf -p 5432\n"
"51 postgres: checkpointer\n"
"52 postgres: background writer\n"
"53 postgres: walwriter\n"
"54 postgres: autovacuum launcher\n"
"55 postgres: stats collector\n"
"56 postgres: logical replication launcher\n"
"root@@container /# exit\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3079
msgid "The PostgreSQL service is running in the container!"
msgstr "Le service PostgreSQL tourne dans le conteneur !"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3081 guix-git/doc/guix-cookbook.texi:3082
#, no-wrap
msgid "Container Networking"
msgstr "Utilisation du réseau dans le conteneur"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3083
#, no-wrap
msgid "container networking"
msgstr "configuration réseau d'un conteneur"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3089
msgid "What good is a Guix System running a PostgreSQL database service as a container when we can only talk to it with processes originating in the container? It would be much better if we could talk to the database over the network."
msgstr "Que vaut un système Guix dans lequel tourne un service de bases de données PostgreSQL dans un conteneur si nous ne pouvons lui parler qu'avec des processus originaire de ce conteneur ? Il serait bien mieux de pouvoir parler à la base de données via le réseau."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3095
msgid "The easiest way to do this is to create a pair of connected virtual Ethernet devices (known as @code{veth}).  We move one of the devices (@code{ceth-test}) into the @code{net} namespace of the container and leave the other end (@code{veth-test}) of the connection on the host system."
msgstr "La manière la plus simple de faire cela est de créer une paire de périphérique Ethernet virtuels (connus sous le nom de @code{veth}). Nous déplaçons l'un des périphériques (@code{ceth-test}) dans l'espace de nom @code{net} du conteneur et laissons l'autre côté (@code{veth-test}) de la connexion sur le système hôte."

#. type: example
#: guix-git/doc/guix-cookbook.texi:3101
#, no-wrap
msgid ""
"pid=5983\n"
"ns=\"guix-test\"\n"
"host=\"veth-test\"\n"
"client=\"ceth-test\"\n"
"\n"
msgstr ""
"pid=5983\n"
"ns=\"guix-test\"\n"
"host=\"veth-test\"\n"
"client=\"ceth-test\"\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3104
#, no-wrap
msgid ""
"# Attach the new net namespace \"guix-test\" to the container PID.\n"
"sudo ip netns attach $ns $pid\n"
"\n"
msgstr ""
"# Attache le nouvel espace de nom réseau « guix-test » au PID du conteneur.\n"
"sudo ip netns attach $ns $pid\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3107
#, no-wrap
msgid ""
"# Create the pair of devices\n"
"sudo ip link add $host type veth peer name $client\n"
"\n"
msgstr ""
"# Crée une paire de périphériques\n"
"sudo ip link add $host type veth peer name $client\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3110
#, no-wrap
msgid ""
"# Move the client device into the container's net namespace\n"
"sudo ip link set $client netns $ns\n"
msgstr ""
"# Déplace le périphérique client dans l'espace de nom réseau du conteneur\n"
"sudo ip link set $client netns $ns\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3113
msgid "Then we configure the host side:"
msgstr "Puis nous configurons le côté de l'hôte :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3117
#, no-wrap
msgid ""
"sudo ip link set $host up\n"
"sudo ip addr add 10.0.0.1/24 dev $host\n"
msgstr ""
"sudo ip link set $host up\n"
"sudo ip addr add 10.0.0.1/24 dev $host\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3120
msgid "@dots{}and then we configure the client side:"
msgstr "@dots{}puis nous configurons le côté client :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3125
#, no-wrap
msgid ""
"sudo ip netns exec $ns  ip link set lo up\n"
"sudo ip netns exec $ns  ip link set $client up\n"
"sudo ip netns exec $ns  ip addr add 10.0.0.2/24 dev $client\n"
msgstr ""
"sudo ip netns exec $ns  ip link set lo up\n"
"sudo ip netns exec $ns  ip link set $client up\n"
"sudo ip netns exec $ns  ip addr add 10.0.0.2/24 dev $client\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3131
msgid "At this point the host can reach the container at IP address 10.0.0.2, and the container can reach the host at IP 10.0.0.1.  This is all we need to talk to the database server inside the container from the host system on the outside."
msgstr "Maintenant l'hôte peut atteindre le conteneur à l'adresse IP 10.0.0.2 et le conteneur peut atteindre l'hôte à l'adresse IP 10.0.0.1. C'est tout ce dont nous avons besoin pour communiquer avec le serveur de bases de données dans le conteneur à partir du système hôte, à l'extérieur."

#. type: example
#: guix-git/doc/guix-cookbook.texi:3136
#, no-wrap
msgid ""
"$ psql -h 10.0.0.2 -U test\n"
"psql (14.4)\n"
"Type \"help\" for help.\n"
"\n"
msgstr ""
"$ psql -h 10.0.0.2 -U test\n"
"psql (14.4)\n"
"Type \"help\" for help.\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3146
#, no-wrap
msgid ""
"test=> CREATE TABLE hello (who TEXT NOT NULL);\n"
"CREATE TABLE\n"
"test=> INSERT INTO hello (who) VALUES ('world');\n"
"INSERT 0 1\n"
"test=> SELECT * FROM hello;\n"
"  who\n"
"-------\n"
" world\n"
"(1 row)\n"
msgstr ""
"test=> CREATE TABLE hello (who TEXT NOT NULL);\n"
"CREATE TABLE\n"
"test=> INSERT INTO hello (who) VALUES ('world');\n"
"INSERT 0 1\n"
"test=> SELECT * FROM hello;\n"
"  who\n"
"-------\n"
" world\n"
"(1 row)\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3149
msgid "Now that we're done with this little demonstration let's clean up:"
msgstr "Maintenant que nous avons fini cette petite démonstration, nettoyons tout ça :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3154
#, no-wrap
msgid ""
"sudo kill $pid\n"
"sudo ip netns del $ns\n"
"sudo ip link del $host\n"
msgstr ""
"sudo kill $pid\n"
"sudo ip netns del $ns\n"
"sudo ip link del $host\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3166
msgid "Guix is a functional package manager that offers many features beyond what more traditional package managers can do.  To the uninitiated, those features might not have obvious use cases at first.  The purpose of this chapter is to demonstrate some advanced package management concepts."
msgstr "Guix est un gestionnaire de paquets fonctionnel qui propose de nombreuses fonctionnalités en plus de ce que les gestionnaires de paquets traditionnels peuvent faire. Pour quelqu'un qui n'est pas initié, ces fonctionnalités peuvent ne pas paraître utiles au premier coup d'œil. Le but de ce chapitre est de vous montrer certains concepts avancés en gestion de paquets."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3169
msgid "@pxref{Package Management,,, guix, GNU Guix Reference Manual} for a complete reference."
msgstr "@pxref{Gestion des paquets,,, guix.fr, le manuel de référence de GNU Guix} pour une référence complète."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3180
msgid "Guix provides a very useful feature that may be quite foreign to newcomers: @emph{profiles}.  They are a way to group package installations together and all users on the same system are free to use as many profiles as they want."
msgstr "Guix fournit une fonctionnalité utile que peut être plutôt étrange pour les débutants et débutantes : les @emph{profils}. C'est une manière de regrouper l'installation de paquets ensemble et chaque utilisateur ou utilisatrice du même système peuvent avoir autant de profils que souhaité."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3185
msgid "Whether you're a developer or not, you may find that multiple profiles bring you great power and flexibility.  While they shift the paradigm somewhat compared to @emph{traditional package managers}, they are very convenient to use once you've understood how to set them up."
msgstr "Que vous programmiez ou non, vous trouverez sans doute plus de flexibilité et de possibilité avec plusieurs profils. Bien qu'ils changent un peu du paradigme des @emph{gestionnaires de paquets traditionnels}, ils sont pratiques à utiliser une fois que vous avec saisi comment les configurer."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3191
msgid "If you are familiar with Python's @samp{virtualenv}, you can think of a profile as a kind of universal @samp{virtualenv} that can hold any kind of software whatsoever, not just Python software.  Furthermore, profiles are self-sufficient: they capture all the runtime dependencies which guarantees that all programs within a profile will always work at any point in time."
msgstr "Si vous connaissez @samp{virtualenv} de Python, vous pouvez conceptualiser un profil comme une sorte de @samp{virtualenv} universel qui peut contenir n'importe quel sorte de logiciel, pas seulement du code Python. En plus, les profils sont auto-suffisants : ils capturent toutes les dépendances à l'exécution qui garantissent que tous les programmes d'un profil fonctionneront toujours à tout instant."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3193
msgid "Multiple profiles have many benefits:"
msgstr "Avoir plusieurs profils présente de nombreux intérêts :"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3197
msgid "Clean semantic separation of the various packages a user needs for different contexts."
msgstr "Une séparation sémantique claire des divers paquets dont vous avez besoin pour différents contextes."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3201
msgid "Multiple profiles can be made available into the environment either on login or within a dedicated shell."
msgstr "On peut rendre plusieurs profils disponibles dans l'environnement soit à la connexion, soit dans un shell dédié."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3205
msgid "Profiles can be loaded on demand.  For instance, the user can use multiple shells, each of them running different profiles."
msgstr "Les profils peuvent être chargés à la demande. Par exemple, vous pouvez utiliser plusieurs shells, chacun dans un profil différent."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3210
msgid "Isolation: Programs from one profile will not use programs from the other, and the user can even install different versions of the same programs to the two profiles without conflict."
msgstr "L'isolation : les programmes d'un profil n'utiliseront pas ceux d'un autre, et vous pouvez même installe plusieurs versions d'un même programme dans deux profils différents, sans conflit."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3214
msgid "Deduplication: Profiles share dependencies that happens to be the exact same.  This makes multiple profiles storage-efficient."
msgstr "Déduplication : les profils partagent les dépendances qui sont exactement les mêmes. Avoir plusieurs profils ne gâche donc pas d'espace."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3222
msgid "Reproducible: when used with declarative manifests, a profile can be fully specified by the Guix commit that was active when it was set up.  This means that the exact same profile can be @uref{https://guix.gnu.org/blog/2018/multi-dimensional-transactions-and-rollbacks-oh-my/, set up anywhere and anytime}, with just the commit information.  See the section on @ref{Reproducible profiles}."
msgstr "Reproductible : lorsque vous utilisez des manifestes déclaratifs, un profil peut être entièrement spécifié par le commit Guix qui a été utilisé pour le créer. Cela signifie que vous pouvez @uref{https://guix.gnu.org/blog/2018/multi-dimensional-transactions-and-rollbacks-oh-my/, recréer n'importe où et à n'importe quel moment} exactement le même profil, avec juste l'information du numéro de commit. Voir la section sur les @ref{Reproducible profiles}."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3226
msgid "Easier upgrades and maintenance: Multiple profiles make it easy to keep package listings at hand and make upgrades completely frictionless."
msgstr "Des mises à jours et une maintenance plus faciles : avoir plusieurs profils facilite la gestion des listes de paquets à la main."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3229
msgid "Concretely, here follows some typical profiles:"
msgstr "Concrètement voici des profils courants :"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3233
msgid "The dependencies of a project you are working on."
msgstr "Les dépendances d'un projet sur lequel vous travaillez."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3236
msgid "Your favourite programming language libraries."
msgstr "Des bibliothèques de votre langage de programmation favori."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3239
msgid "Laptop-specific programs (like @samp{powertop}) that you don't need on a desktop."
msgstr "Des programmes spécifiques pour les ordinateurs portables (comme @samp{powertop}) dont vous n'avez pas besoin sur un ordinateur de bureau."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3243
msgid "@TeX{}live (this one can be really useful when you need to install just one package for this one document you've just received over email)."
msgstr "@TeX{}live (il peut être bien pratique si vous avez besoin d'installer un seul paquet pour un document que vous avez reçu par courriel)."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3246
msgid "Games."
msgstr "Jeux."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3249
msgid "Let's dive in the set up!"
msgstr "Voyons cela de plus près !"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3250 guix-git/doc/guix-cookbook.texi:3251
#, no-wrap
msgid "Basic setup with manifests"
msgstr "Utilisation de base avec des manifestes"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3256
msgid "A Guix profile can be set up @i{via} a @dfn{manifest}.  A manifest is a snippet of Scheme code that specifies the set of packages you want to have in your profile; it looks like this:"
msgstr "Un profil Guix peut être paramétré par un @dfn{manifeste}. Un manifeste est un bout de code Scheme qui spécifie l'ensemble des paquets que vous voulez avoir dans votre profil ; il ressemble à ceci :"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:3266
#, no-wrap
msgid ""
"(specifications->manifest\n"
"  '(\"package-1\"\n"
"    ;; Version 1.3 of package-2.\n"
"    \"package-2@@1.3\"\n"
"    ;; The \"lib\" output of package-3.\n"
"    \"package-3:lib\"\n"
"    ; ...\n"
"    \"package-N\"))\n"
msgstr ""
"(specifications->manifest\n"
"  '(\"package-1\"\n"
"    ;; Version 1.3 de package-2.\n"
"    \"package-2@@1.3\"\n"
"    ;; La sortie « lib » de package-3.\n"
"    \"package-3:lib\"\n"
"    ; ...\n"
"    \"package-N\"))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3270
msgid "@xref{Writing Manifests,,, guix, GNU Guix Reference Manual}, for more information about the syntax."
msgstr "@xref{Écrire un manifeste,,, guix.fr, le manuel de référence de GNU Guix}, pour plus d'informations sur la syntaxe."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3272
msgid "We can create a manifest specification per profile and install them this way:"
msgstr "On peut créer une spécification de manifeste par profil et les installer de cette manière :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3277
#, no-wrap
msgid ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"mkdir -p \"$GUIX_EXTRA_PROFILES\"/my-project # if it does not exist yet\n"
"guix package --manifest=/path/to/guix-my-project-manifest.scm --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"mkdir -p \"$GUIX_EXTRA_PROFILES\"/my-project # s'il n'existe pas encore\n"
"guix package --manifest=/path/to/guix-my-project-manifest.scm --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3281
msgid "Here we set an arbitrary variable @samp{GUIX_EXTRA_PROFILES} to point to the directory where we will store our profiles in the rest of this article."
msgstr "On spécifie ici une variable arbitraire @samp{GUIX_EXTRA_PROFILES} pour pointer vers le répertoire où seront stockés nos profils dans le reste de cet article."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3287
msgid "Placing all your profiles in a single directory, with each profile getting its own sub-directory, is somewhat cleaner.  This way, each sub-directory will contain all the symlinks for precisely one profile.  Besides, ``looping over profiles'' becomes obvious from any programming language (e.g.@: a shell script) by simply looping over the sub-directories of @samp{$GUIX_EXTRA_PROFILES}."
msgstr "C'est un peu plus propre de placer tous vos profils dans un répertoire unique, où chaque profil a son propre sous-répertoire. De cette manière, chaque sous-répertoire contiendra tous les liens symboliques pour exactement un profil. En plus, il devient facile d'énumérer les profils depuis n'importe quel langage de programmation (p.@: ex.@: un script shell) en énumérant simplement les sous-répertoires de @samp{$GUIX_EXTRA_PROFILES}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3289
msgid "Note that it's also possible to loop over the output of"
msgstr "Remarquez qu'il est aussi possible d'utiliser la sortie de"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3292
#, no-wrap
msgid "guix package --list-profiles\n"
msgstr "guix package --list-profiles\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3295
msgid "although you'll probably have to filter out @file{~/.config/guix/current}."
msgstr "même si vous devrez sans doute enlever @file{~/.config/guix/current}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3297
msgid "To enable all profiles on login, add this to your @file{~/.bash_profile} (or similar):"
msgstr "Pour activer tous les profils à la connexion, ajoutez cela à votre @file{~/.bash_profile} (ou similaire) :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3307
#, no-wrap
msgid ""
"for i in $GUIX_EXTRA_PROFILES/*; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"
msgstr ""
"for i in $GUIX_EXTRA_PROFILES/*; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3312
msgid "Note to Guix System users: the above reflects how your default profile @file{~/.guix-profile} is activated from @file{/etc/profile}, that latter being loaded by @file{~/.bashrc} by default."
msgstr "Remarque pour les utilisateurs du système Guix : ce qui précède ressemble à la manière dont votre profil par défaut @file{~/.guix-profile} est activé dans @file{/etc/profile}, ce dernier étant chargé par défaut par @file{~/.bashrc}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3314
msgid "You can obviously choose to only enable a subset of them:"
msgstr "Vous pouvez évidemment choisir de n'en activer qu'une partie :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3324
#, no-wrap
msgid ""
"for i in \"$GUIX_EXTRA_PROFILES\"/my-project-1 \"$GUIX_EXTRA_PROFILES\"/my-project-2; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"
msgstr ""
"for i in \"$GUIX_EXTRA_PROFILES\"/my-project-1 \"$GUIX_EXTRA_PROFILES\"/my-project-2; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3328
msgid "When a profile is off, it's straightforward to enable it for an individual shell without \"polluting\" the rest of the user session:"
msgstr "Lorsqu'un profil est désactivé, il est facile de l'activer pour un shell individuel sans « polluer » le reste de la session :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3331
#, no-wrap
msgid "GUIX_PROFILE=\"path/to/my-project\" ; . \"$GUIX_PROFILE\"/etc/profile\n"
msgstr "GUIX_PROFILE=\"path/to/my-project\" ; . \"$GUIX_PROFILE\"/etc/profile\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3338
msgid "The key to enabling a profile is to @emph{source} its @samp{etc/profile} file.  This file contains shell code that exports the right environment variables necessary to activate the software contained in the profile.  It is built automatically by Guix and meant to be sourced.  It contains the same variables you would get if you ran:"
msgstr "Le secret pour activer un profil est de @emph{sourcer} son fichier @samp{etc/profile}. Ce fichier contient du code shell qui exporte les bonnes variables d'environnement nécessaires à activer les logiciels présents dans le profil. Il est créé automatiquement par Guix et doit être sourcé. Il contient les mêmes variables que ce que vous obtiendrez en lançant :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3341
#, no-wrap
msgid "guix package --search-paths=prefix --profile=$my_profile\"\n"
msgstr "guix package --search-paths=prefix --profile=$my_profile\"\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3345
msgid "Once again, see (@pxref{Invoking guix package,,, guix, GNU Guix Reference Manual})  for the command line options."
msgstr "Encore une fois, @xref{Invoquer guix package,,, guix.fr, le manuel de référence de GNU Guix} pour les options de la ligne de commande."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3347
msgid "To upgrade a profile, simply install the manifest again:"
msgstr "Pour mettre à jour un profil, installez de nouveau le manifeste :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3350
#, no-wrap
msgid "guix package -m /path/to/guix-my-project-manifest.scm -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr "guix package -m /path/to/guix-my-project-manifest.scm -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3356
msgid "To upgrade all profiles, it's easy enough to loop over them.  For instance, assuming your manifest specifications are stored in @file{~/.guix-manifests/guix-$profile-manifest.scm}, with @samp{$profile} being the name of the profile (e.g.@: \"project1\"), you could do the following in Bourne shell:"
msgstr "Pour mettre à jour tous les profils, vous pouvez simplement les énumérer. Par exemple, en supposant que vous spécifications sont dans @file{~/.guix-manifests/guix-$profile-manifest.scm}, où @samp{$profile} est le nom du profil (p.@: ex@: « projet1 »), vous pouvez utiliser ce qui suit dans le shell :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3361
#, no-wrap
msgid ""
"for profile in \"$GUIX_EXTRA_PROFILES\"/*; do\n"
"  guix package --profile=\"$profile\" --manifest=\"$HOME/.guix-manifests/guix-$profile-manifest.scm\"\n"
"done\n"
msgstr ""
"for profile in \"$GUIX_EXTRA_PROFILES\"/*; do\n"
"  guix package --profile=\"$profile\" --manifest=\"$HOME/.guix-manifests/guix-$profile-manifest.scm\"\n"
"done\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3364
msgid "Each profile has its own generations:"
msgstr "Chaque profil a ses propres générations :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3367
#, no-wrap
msgid "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --list-generations\n"
msgstr "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --list-generations\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3370
msgid "You can roll-back to any generation of a given profile:"
msgstr "Vous pouvez revenir à n'importe quelle génération d'un profil donné :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3373
#, no-wrap
msgid "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --switch-generations=17\n"
msgstr "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --switch-generations=17\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3377
msgid "Finally, if you want to switch to a profile without inheriting from the current environment, you can activate it from an empty shell:"
msgstr "Enfin, si vous voulez passer à un profil sans hériter l'environnement actuel, vous pouvez l'activer dans un shell vide :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3381
#, no-wrap
msgid ""
"env -i $(which bash) --login --noprofile --norc\n"
". my-project/etc/profile\n"
msgstr ""
"env -i $(which bash) --login --noprofile --norc\n"
". my-project/etc/profile\n"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3383 guix-git/doc/guix-cookbook.texi:3384
#, no-wrap
msgid "Required packages"
msgstr "Paquets requis"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3389
msgid "Activating a profile essentially boils down to exporting a bunch of environmental variables.  This is the role of the @samp{etc/profile} within the profile."
msgstr "Activer un profil consiste en substance à exporter un ensemble de variables d'environnement. C'est le rôle de @samp{etc/profile} dans le profil."

#. type: emph{#1}
#: guix-git/doc/guix-cookbook.texi:3392
msgid "Note: Only the environmental variables of the packages that consume them will be set."
msgstr "Remarque : seules les variables d'environnement des paquets qui les utilisent seront modifiées."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3396
msgid "For instance, @samp{MANPATH} won't be set if there is no consumer application for man pages within the profile.  So if you need to transparently access man pages once the profile is loaded, you've got two options:"
msgstr "Par exemple, @samp{MANPATH} ne sera pas modifié s'il n'y a pas d'application qui utilise les pages de manuel dans le profil. Donc si vous voulez pouvoir accéder aux pages de manuel facilement une fois le profil chargé, vous avez deux possibilités :"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3400
msgid "Either export the variable manually, e.g."
msgstr "Exporter la variable manuellement, p.@: ex@:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3402
#, no-wrap
msgid "export MANPATH=/path/to/profile$@{MANPATH:+:@}$MANPATH\n"
msgstr "export MANPATH=/path/to/profile$@{MANPATH:+:@}$MANPATH\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3406
msgid "Or include @samp{man-db} to the profile manifest."
msgstr "Inclure @samp{man-db} dans le manifeste du profil."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3410
msgid "The same is true for @samp{INFOPATH} (you can install @samp{info-reader}), @samp{PKG_CONFIG_PATH} (install @samp{pkg-config}), etc."
msgstr "Il en va de même pour @samp{INFOPATH} (vous pouvez installer @samp{info-reader}), @samp{PKG_CONFIG_PATH} (installer @samp{pkg-config}), etc."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3411 guix-git/doc/guix-cookbook.texi:3412
#, no-wrap
msgid "Default profile"
msgstr "Profil par défaut"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3415
msgid "What about the default profile that Guix keeps in @file{~/.guix-profile}?"
msgstr "Que faire du profil par défaut que Guix garder dans @file{~/.guix-profile} ?"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3418
msgid "You can assign it the role you want.  Typically you would install the manifest of the packages you want to use all the time."
msgstr "Vous pouvez lui assigner le rôle que vous souhaitez. Habituellement, vous y installerez un manifeste des paquets que vous voulez pouvoir utiliser dans toutes les situations."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3422
msgid "Alternatively, you could keep it ``manifest-less'' for throw-away packages that you would just use for a couple of days.  This way makes it convenient to run"
msgstr "Autrement, vous pouvez en faire un profil sans manifeste pour des paquets sans importance que vous voulez juste garder quelques jours. C'est une manière de pouvoir facilement lancer"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3426
#, no-wrap
msgid ""
"guix install package-foo\n"
"guix upgrade package-bar\n"
msgstr ""
"guix install package-foo\n"
"guix upgrade package-bar\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3429
msgid "without having to specify the path to a profile."
msgstr "sans avoir à spécifier un profil."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3430 guix-git/doc/guix-cookbook.texi:3431
#, no-wrap
msgid "The benefits of manifests"
msgstr "Les avantages des manifestes"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3435
msgid "Manifests are a convenient way to keep your package lists around and, say, to synchronize them across multiple machines using a version control system."
msgstr "Les manifestes sont pratiques pour garder la liste des paquets et, par exemple, les synchroniser entre plusieurs machines avec un système de gestion de versions."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3439
msgid "A common complaint about manifests is that they can be slow to install when they contain large number of packages.  This is especially cumbersome when you just want get an upgrade for one package within a big manifest."
msgstr "Les gens se plaignent souvent que les manifestes sont lents à installer quand ils contiennent beaucoup de paquets. C'est particulièrement embêtant quand vous voulez juste mettre à jour un paquet dans un gros manifeste."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3444
msgid "This is one more reason to use multiple profiles, which happen to be just perfect to break down manifests into multiple sets of semantically connected packages.  Using multiple, small profiles provides more flexibility and usability."
msgstr "C'est une raison de plus d'utiliser plusieurs profils, qui sont bien pratiques pour diviser les manifestes en plusieurs ensembles de paquets de même type. Plusieurs petits profils sont plus flexibles et plus maniables."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3446
msgid "Manifests come with multiple benefits.  In particular, they ease maintenance:"
msgstr "Les manifestes ont de nombreux avantages. En particulier, ils facilitent la maintenance :"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3454
msgid "When a profile is set up from a manifest, the manifest itself is self-sufficient to keep a ``package listing'' around and reinstall the profile later or on a different system.  For ad-hoc profiles, we would need to generate a manifest specification manually and maintain the package versions for the packages that don't use the default version."
msgstr "Lorsqu'un profil est créé à partir d'un manifeste, le manifeste lui-même est suffisant pour garder la liste des paquets sous le coude et réinstaller le profil plus tard sur un autre système. Pour les profils ad-hoc, il faudrait générer une spécification de manifeste à la main et noter les versions de paquets pour les paquets qui n'utilisent pas la version par défaut."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3459
msgid "@code{guix package --upgrade} always tries to update the packages that have propagated inputs, even if there is nothing to do.  Guix manifests remove this problem."
msgstr "@code{guix package --upgrade} essaye toujours de mettre à jour les paquets qui ont des entrées propagées, même s'il n'y à rien à faire. Les manifestes de Guix résolvent ce problème."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3465
msgid "When partially upgrading a profile, conflicts may arise (due to diverging dependencies between the updated and the non-updated packages) and they can be annoying to resolve manually.  Manifests remove this problem altogether since all packages are always upgraded at once."
msgstr "Lorsque vous mettez partiellement à jour un profil, des conflits peuvent survenir (à cause des dépendances différentes entre les paquets à jour et ceux qui ne le sont pas) et ça peut être embêtant à corriger à la main. Les manifestes suppriment ce problème puisque tous les paquets sont toujours mis à jour en même temps."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3471
msgid "As mentioned above, manifests allow for reproducible profiles, while the imperative @code{guix install}, @code{guix upgrade}, etc. do not, since they produce different profiles every time even when they hold the same packages.  See @uref{https://issues.guix.gnu.org/issue/33285, the related discussion on the matter}."
msgstr "Comme on l'a mentionné plus haut, les manifestes permettent d'avoir des profils reproductibles, alors que les commandes impératives @code{guix install}, @code{guix upgrade}, etc, ne le peuvent pas, puisqu'elles produisent un profil différent à chaque fois qu'elles sont lancées, même avec les même paquets. Voir @uref{https://issues.guix.gnu.org/issue/33285, la discussion sur ce problème}."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3479
msgid "Manifest specifications are usable by other @samp{guix} commands.  For example, you can run @code{guix weather -m manifest.scm} to see how many substitutes are available, which can help you decide whether you want to try upgrading today or wait a while.  Another example: you can run @code{guix pack -m manifest.scm} to create a pack containing all the packages in the manifest (and their transitive references)."
msgstr "Les spécifications de manifestes sont utilisables par les autres commandes @samp{guix}. Par exemple, vous pouvez lancer @code{guix weather -m manifest} pour voir combien de substituts sont disponibles, ce qui peut vous aider à décider si vous voulez faire la mise à jour maintenant ou un peu plus tard. Un autre exemple : vous pouvez lancer @code{guix package -m manifest.scm} pour créer un lot contenant tous les paquets du manifeste (et leurs références transitives)."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3483
msgid "Finally, manifests have a Scheme representation, the @samp{<manifest>} record type.  They can be manipulated in Scheme and passed to the various Guix @uref{https://en.wikipedia.org/wiki/Api, APIs}."
msgstr "Enfin, les manifestes ont une représentation Scheme, le type d'enregistrement @samp{<manifest>}. Vous pouvez les manipuler en Scheme et les passer aux diverses @uref{https://fr.wikipedia.org/wiki/Api, API} de Guix."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3491
msgid "It's important to understand that while manifests can be used to declare profiles, they are not strictly equivalent: profiles have the side effect that they ``pin'' packages in the store, which prevents them from being garbage-collected (@pxref{Invoking guix gc,,, guix, GNU Guix Reference Manual})  and ensures that they will still be available at any point in the future."
msgstr "Vous devez bien comprendre que même si vous pouvez utiliser les manifestes pour déclarer des profils, les deux ne sont pas strictement équivalents : les profils pour l'effet de bord « d'épingler » les paquets dans le dépôt, ce qui évite qu'ils ne soient nettoyés (@pxref{Invoquer guix gc,,, guix.fr, le manuel de référence de GNU Guix}) et s'assure qu'ils seront toujours disponibles à n'importe quel moment dans le futur."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3493
msgid "Let's take an example:"
msgstr "Voyons un exemple :"

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:3499
msgid "We have an environment for hacking on a project for which there isn't a Guix package yet.  We build the environment using a manifest, and then run @code{guix environment -m manifest.scm}.  So far so good."
msgstr "Vous avez un environnement pour bidouiller un projet pour lequel il n'y a pas encore de paquet Guix. Vous construisez l'environnement avec un manifeste puis lancez @code{guix environment -m manifest.scm}. Jusqu'ici tout va bien."

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:3505
msgid "Many weeks pass and we have run a couple of @code{guix pull} in the mean time.  Maybe a dependency from our manifest has been updated; or we may have run @code{guix gc} and some packages needed by our manifest have been garbage-collected."
msgstr "Plusieurs semaines plus tard vous avez lancé quelques @code{guix pull} entre temps. Plusieurs dépendances du manifeste ont été mises à jour ; ou bien vous avez lancé @code{guix gc} et certains paquets requis par le manifeste ont été nettoyés."

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:3510
msgid "Eventually, we set to work on that project again, so we run @code{guix shell -m manifest.scm}.  But now we have to wait for Guix to build and install stuff!"
msgstr "Finalement, vous vous remettez au travail sur ce projet, donc vous lancez @code{guix shell -m manifest.scm}. Mais maintenant vous devez attendre que Guix construise et installe des paquets !"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3516
msgid "Ideally, we could spare the rebuild time.  And indeed we can, all we need is to install the manifest to a profile and use @code{GUIX_PROFILE=/the/profile; . \"$GUIX_PROFILE\"/etc/profile} as explained above: this guarantees that our hacking environment will be available at all times."
msgstr "Idéalement, vous voudriez éviter de perdre du temps à reconstruire. C'est en fait possible, tout ce dont on a besoin, c'est d'installer le manifeste dans un profil et d'utiliser @code{GUIX_PROFILE=/le/profil; . \"$GUIX_PROFILE\"/etc/profile} comme on l'a expliqué plus haut : cela garantie que l'environnement de bidouillage sera toujours disponible."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3519
msgid "@emph{Security warning:} While keeping old profiles around can be convenient, keep in mind that outdated packages may not have received the latest security fixes."
msgstr "@emph{Avertissement de sécurité :} bien que garder d'anciens profils soit pratique, gardez à l'esprit que les anciens paquets n'ont pas forcément reçu les dernières corrections de sécurité."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:3520 guix-git/doc/guix-cookbook.texi:3521
#, no-wrap
msgid "Reproducible profiles"
msgstr "Profils reproductibles"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3524
msgid "To reproduce a profile bit-for-bit, we need two pieces of information:"
msgstr "Pour reproduire un profil bit-à-bit, on a besoin de deux informations :"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3528
msgid "a manifest,"
msgstr "un manifeste,"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:3530
msgid "a Guix channel specification."
msgstr "et une spécification de canaux Guix."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3534
msgid "Indeed, manifests alone might not be enough: different Guix versions (or different channels) can produce different outputs for a given manifest."
msgstr "En effet, les manifestes seuls ne sont pas forcément suffisants : différentes versions de Guix (ou différents canaux) peuvent produire des sorties différentes avec le même manifeste."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3538
msgid "You can output the Guix channel specification with @samp{guix describe --format=channels}.  Save this to a file, say @samp{channel-specs.scm}."
msgstr "Vous pouvez afficher la spécification de canaux Guix avec @samp{guix describe --format=channels}. Enregistrez-la dans un fichier, par exemple @samp{channel-specs.scm}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3541
msgid "On another computer, you can use the channel specification file and the manifest to reproduce the exact same profile:"
msgstr "Sur un autre ordinateur, vous pouvez utiliser le fichier de spécification de canaux et le manifeste pour reproduire exactement le même profil :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3545
#, no-wrap
msgid ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"GUIX_EXTRA=$HOME/.guix-extra\n"
"\n"
msgstr ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"GUIX_EXTRA=$HOME/.guix-extra\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3548
#, no-wrap
msgid ""
"mkdir -p \"$GUIX_EXTRA\"/my-project\n"
"guix pull --channels=channel-specs.scm --profile=\"$GUIX_EXTRA/my-project/guix\"\n"
"\n"
msgstr ""
"mkdir -p \"$GUIX_EXTRA\"/my-project\n"
"guix pull --channels=channel-specs.scm --profile=\"$GUIX_EXTRA/my-project/guix\"\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3551
#, no-wrap
msgid ""
"mkdir -p \"$GUIX_EXTRA_PROFILES/my-project\"\n"
"\"$GUIX_EXTRA\"/my-project/guix/bin/guix package --manifest=/path/to/guix-my-project-manifest.scm --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""
"mkdir -p \"$GUIX_EXTRA_PROFILES/my-project\"\n"
"\"$GUIX_EXTRA\"/my-project/guix/bin/guix package --manifest=/path/to/guix-my-project-manifest.scm --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3555
msgid "It's safe to delete the Guix channel profile you've just installed with the channel specification, the project profile does not depend on it."
msgstr "Vous pouvez supprimer le profil des canaux Guix que vous venez d'installer avec la spécification de canaux, le profil du projet n'en dépend pas."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3562
msgid "Guix provides multiple tools to manage environment.  This chapter demonstrate such utilities."
msgstr "Guix fournit plusieurs outils pour gérer l'environnement. Ce chapitre vous montre ces outils."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3573
msgid "Guix provides a @samp{direnv} package, which could extend shell after directory change.  This tool could be used to prepare a pure Guix environment."
msgstr "Guix fournit un paquet @samp{direnv}, qui peut étendre le shell après avoir changé de répertoire de travail. Vous pouvez utiliser cet outil pour préparer un environnement Guix pur."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3579
msgid "The following example provides a shell function for @file{~/.direnvrc} file, which could be used from Guix Git repository in @file{~/src/guix/.envrc} file to setup a build environment similar to described in @pxref{Building from Git,,, guix, GNU Guix Reference Manual}."
msgstr "L'exemple suivant fournit une fonction shell dans @file{~/.direnvrc}, qui peut être utilisée dans le dépôt Git de Guix dans @file{~/src/guix/.envrc} pour créer un environnement de construction similaire à celui décrit dans @ref{Construire depuis Git,,, guix.fr, le manuel de référence de GNU Guix}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3581
msgid "Create a @file{~/.direnvrc} with a Bash code:"
msgstr "Créez un fichier @file{~/.direnv} avec le code Bash suivant :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3599
#, no-wrap
msgid ""
"# Thanks <https://github.com/direnv/direnv/issues/73#issuecomment-152284914>\n"
"export_function()\n"
"@{\n"
"  local name=$1\n"
"  local alias_dir=$PWD/.direnv/aliases\n"
"  mkdir -p \"$alias_dir\"\n"
"  PATH_add \"$alias_dir\"\n"
"  local target=\"$alias_dir/$name\"\n"
"  if declare -f \"$name\" >/dev/null; then\n"
"    echo \"#!$SHELL\" > \"$target\"\n"
"    declare -f \"$name\" >> \"$target\" 2>/dev/null\n"
"    # Notice that we add shell variables to the function trigger.\n"
"    echo \"$name \\$*\" >> \"$target\"\n"
"    chmod +x \"$target\"\n"
"  fi\n"
"@}\n"
"\n"
msgstr ""
"# Grâce à <https://github.com/direnv/direnv/issues/73#issuecomment-152284914>\n"
"export_function()\n"
"@{\n"
"  local name=$1\n"
"  local alias_dir=$PWD/.direnv/aliases\n"
"  mkdir -p \"$alias_dir\"\n"
"  PATH_add \"$alias_dir\"\n"
"  local target=\"$alias_dir/$name\"\n"
"  if declare -f \"$name\" >/dev/null; then\n"
"    echo \"#!$SHELL\" > \"$target\"\n"
"    declare -f \"$name\" >> \"$target\" 2>/dev/null\n"
"    # Remarquez qu'on ajoute des variables shells au déclencheur de la fonction.\n"
"    echo \"$name \\$*\" >> \"$target\"\n"
"    chmod +x \"$target\"\n"
"  fi\n"
"@}\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3604
#, no-wrap
msgid ""
"use_guix()\n"
"@{\n"
"    # Set GitHub token.\n"
"    export GUIX_GITHUB_TOKEN=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n"
"\n"
msgstr ""
"use_guix()\n"
"@{\n"
"    # indique un jeton Github.\n"
"    export GUIX_GITHUB_TOKEN=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3607
#, no-wrap
msgid ""
"    # Unset 'GUIX_PACKAGE_PATH'.\n"
"    export GUIX_PACKAGE_PATH=\"\"\n"
"\n"
msgstr ""
"    # Nettoie « GUIX_PACKAGE_PATH ».\n"
"    export GUIX_PACKAGE_PATH=\"\"\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3616
#, no-wrap
msgid ""
"    # Recreate a garbage collector root.\n"
"    gcroots=\"$HOME/.config/guix/gcroots\"\n"
"    mkdir -p \"$gcroots\"\n"
"    gcroot=\"$gcroots/guix\"\n"
"    if [ -L \"$gcroot\" ]\n"
"    then\n"
"        rm -v \"$gcroot\"\n"
"    fi\n"
"\n"
msgstr ""
"    # Recrée une racine du ramasse miettes.\n"
"    gcroots=\"$HOME/.config/guix/gcroots\"\n"
"    mkdir -p \"$gcroots\"\n"
"    gcroot=\"$gcroots/guix\"\n"
"    if [ -L \"$gcroot\" ]\n"
"    then\n"
"        rm -v \"$gcroot\"\n"
"    fi\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3631
#, no-wrap
msgid ""
"    # Miscellaneous packages.\n"
"    PACKAGES_MAINTENANCE=(\n"
"        direnv\n"
"        git\n"
"        git:send-email\n"
"        git-cal\n"
"        gnupg\n"
"        guile-colorized\n"
"        guile-readline\n"
"        less\n"
"        ncurses\n"
"        openssh\n"
"        xdot\n"
"    )\n"
"\n"
msgstr ""
"    # Divers paquets.\n"
"    PACKAGES_MAINTENANCE=(\n"
"        direnv\n"
"        git\n"
"        git:send-email\n"
"        git-cal\n"
"        gnupg\n"
"        guile-colorized\n"
"        guile-readline\n"
"        less\n"
"        ncurses\n"
"        openssh\n"
"        xdot\n"
"    )\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3634
#, no-wrap
msgid ""
"    # Environment packages.\n"
"    PACKAGES=(help2man guile-sqlite3 guile-gcrypt)\n"
"\n"
msgstr ""
"    # Paquets de l'environnement.\n"
"    PACKAGES=(help2man guile-sqlite3 guile-gcrypt)\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3637
#, no-wrap
msgid ""
"    # Thanks <https://lists.gnu.org/archive/html/guix-devel/2016-09/msg00859.html>\n"
"    eval \"$(guix environment --search-paths --root=\"$gcroot\" --pure guix --ad-hoc $@{PACKAGES[@@]@} $@{PACKAGES_MAINTENANCE[@@]@} \"$@@\")\"\n"
"\n"
msgstr ""
"    # Grâce à <https://lists.gnu.org/archive/html/guix-devel/2016-09/msg00859.html>\n"
"    eval \"$(guix environment --search-paths --root=\"$gcroot\" --pure guix --ad-hoc $@{PACKAGES[@@]@} $@{PACKAGES_MAINTENANCE[@@]@} \"$@@\")\"\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3644
#, no-wrap
msgid ""
"    # Predefine configure flags.\n"
"    configure()\n"
"    @{\n"
"        ./configure --localstatedir=/var --prefix=\n"
"    @}\n"
"    export_function configure\n"
"\n"
msgstr ""
"    # Défini les drapeaux configure à l'avance.\n"
"    configure()\n"
"    @{\n"
"        ./configure --localstatedir=/var --prefix=\n"
"    @}\n"
"    export_function configure\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3655
#, no-wrap
msgid ""
"    # Run make and optionally build something.\n"
"    build()\n"
"    @{\n"
"        make -j 2\n"
"        if [ $# -gt 0 ]\n"
"        then\n"
"            ./pre-inst-env guix build \"$@@\"\n"
"        fi\n"
"    @}\n"
"    export_function build\n"
"\n"
msgstr ""
"    # Lance make et construit éventuellement quelque chose.\n"
"    build()\n"
"    @{\n"
"        make -j 2\n"
"        if [ $# -gt 0 ]\n"
"        then\n"
"            ./pre-inst-env guix build \"$@@\"\n"
"        fi\n"
"    @}\n"
"    export_function build\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3662
#, no-wrap
msgid ""
"    # Predefine push Git command.\n"
"    push()\n"
"    @{\n"
"        git push --set-upstream origin\n"
"    @}\n"
"    export_function push\n"
"\n"
msgstr ""
"    # Défini une commande Git pour pousser.\n"
"    push()\n"
"    @{\n"
"        git push --set-upstream origin\n"
"    @}\n"
"    export_function push\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3665
#, no-wrap
msgid ""
"    clear                        # Clean up the screen.\n"
"    git-cal --author='Your Name' # Show contributions calendar.\n"
"\n"
msgstr ""
"    clear                        # Nettoie l'écran.\n"
"    git-cal --author='Votre Nom' # Montre le calendrier des contributions.\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3673
#, no-wrap
msgid ""
"    # Show commands help.\n"
"    echo \"\n"
"build          build a package or just a project if no argument provided\n"
"configure      run ./configure with predefined parameters\n"
"push           push to upstream Git repository\n"
"\"\n"
"@}\n"
msgstr ""
"    # Montre l'aide des commandes.\n"
"    echo \"\n"
"build          construit un paquet ou juste un projet si aucun argument n'est fournit\n"
"configure      lance ./configure avec les paramètres pré-définis\n"
"push           pousse un dépôt Git\n"
"\"\n"
"@}\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3677
msgid "Every project containing @file{.envrc} with a string @code{use guix} will have predefined environment variables and procedures."
msgstr "Tous les projets contenant un @file{.envrc} avec une chaine @code{use guix} aura des variables d'environnement et des procédures prédéfinies."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3679
msgid "Run @command{direnv allow} to setup the environment for the first time."
msgstr "Lancez @command{direnv allow} pour mettre en place l'environnement pour la première fois."

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3685
#, no-wrap
msgid "cluster installation"
msgstr "installation d'une grappe de calcul"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3686
#, no-wrap
msgid "high-performance computing, HPC"
msgstr "calcul haute-performance, HPC"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3687
#, no-wrap
msgid "HPC, high-performance computing"
msgstr "HPC, calcul haute-performance"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3693
msgid "Guix is appealing to scientists and @acronym{HPC, high-performance computing} practitioners: it makes it easy to deploy potentially complex software stacks, and it lets you do so in a reproducible fashion---you can redeploy the exact same software on different machines and at different points in time."
msgstr "Guix est intéressant pour les scientifiques et les professionnels du @acronym{HPC, calcul haute-performance}. Il facilite en effet le déploiement de piles logicielles complexes et vous permet de le faire de manière reproductible — vous pouvez redéployer exactement le même logiciel sur des machines différentes et à des moments différents."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3699
msgid "In this chapter we look at how a cluster sysadmin can install Guix for system-wide use, such that it can be used on all the cluster nodes, and discuss the various tradeoffs@footnote{This chapter is adapted from a @uref{https://hpc.guix.info/blog/2017/11/installing-guix-on-a-cluster/, blog post published on the Guix-HPC web site in 2017}.}."
msgstr "Dans ce chapitre nous allons voir comment l'administrateur·ice système d'une grappe peut installer Guix sur le système, de sorte qu'il puisse être utilisé sur tous les nœuds de la grappe, et nous discuterons de différents compromis possibles@footnote{Ce chapitre est adapté d'un @uref{https://hpc.guix.info/blog/2017/11/installing-guix-on-a-cluster/, billet de blog publié sur le site web de Guix-HPC en 2017}.}."

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:3703
msgid "Here we assume that the cluster is running a GNU/Linux distro other than Guix System and that we are going to install Guix on top of it."
msgstr "Nous supposons ici que la grappe utilise une distribution GNU/Linux autre que le Système Guix et que nous allons installer Guix par-dessus."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3719
msgid "The recommended approach is to set up one @emph{head node} running @command{guix-daemon} and exporting @file{/gnu/store} over NFS to compute nodes."
msgstr "L'approche recommandée est d'installer un @emph{nœud principal} qui exécuterait @command{guix-daemon} et exporterait @file{/gnu/store} sur NFS vers les nœuds de calcul."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3729
msgid "Remember that @command{guix-daemon} is responsible for spawning build processes and downloads on behalf of clients (@pxref{Invoking guix-daemon,,, guix, GNU Guix Reference Manual}), and more generally accessing @file{/gnu/store}, which contains all the package binaries built by all the users (@pxref{The Store,,, guix, GNU Guix Reference Manual}).  ``Client'' here refers to all the Guix commands that users see, such as @code{guix install}.  On a cluster, these commands may be running on the compute nodes and we'll want them to talk to the head node's @code{guix-daemon} instance."
msgstr "Rappelez-vous que @command{guix-daemon} est responsable du démarrage des constructions et des téléchargements pour ses clients (@pxref{Invoquer guix-daemon,,, guix'fr, le manuel de référence de GNU Guix}), et plus généralement de l'accès à @file{/gnu/store} qui contient tous les binaires des paquets construits par tous les utilisateur·ices (@pxref{Le dépôt,,, guix.fr, le manuel de référence de GNU Guix}). Les « clients » signifient toutes les commandes Guix que voient les utilisateurs et utilisatrices, comme @command{guix install}. Sur une grappe, ces commandes peuvent être lancées sur les nœuds de calcul et l'on souhaiterait qu'elles parlent au @code{guix-daemon} du nœud principal."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3734
msgid "To begin with, the head node can be installed following the usual binary installation instructions (@pxref{Binary Installation,,, guix, GNU Guix Reference Manual}).  Thanks to the installation script, this should be quick.  Once installation is complete, we need to make some adjustments."
msgstr "Pour commencer, le nœud principal peut être installé suivant les instructions d'installation binaires habituelles (@pxref{Installation binaire,,, guix.fr, le manuel de référence de GNU Guix}). Grâce au script d'installation, cela devrait être rapide. Une fois l'installation terminée, nous devons faire quelques ajustements."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3742
msgid "Since we want @code{guix-daemon} to be reachable not just from the head node but also from the compute nodes, we need to arrange so that it listens for connections over TCP/IP.  To do that, we'll edit the systemd startup file for @command{guix-daemon}, @file{/etc/systemd/system/guix-daemon.service}, and add a @code{--listen} argument to the @code{ExecStart} line so that it looks something like this:"
msgstr "Comme nous voulons que @code{guix-daemon} soit joignable non seulement depuis le nœud principal, mais aussi depuis les nœuds de calcul, nous devons nous arranger pour qu'il se mette en écoute de connexions sur TCP/IP. Pour ce faire, nous allons modifier le fichier de démarrage systemd de @command{guix-daemon}, @file{/etc/systemd/system/guix-daemon.service}, et ajouter un argument @code{--listen} à la ligne @code{ExecStart} ur qu'elle ressemble à quelque chose comme :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3745
#, no-wrap
msgid "ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild --listen=/var/guix/daemon-socket/socket --listen=0.0.0.0\n"
msgstr "ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild --listen=/var/guix/daemon-socket/socket --listen=0.0.0.0\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3748
msgid "For these changes to take effect, the service needs to be restarted:"
msgstr "Pour que ces changements fassent effet, le service doit être redémarré :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3752
#, no-wrap
msgid ""
"systemctl daemon-reload\n"
"systemctl restart guix-daemon\n"
msgstr ""
"systemctl daemon-reload\n"
"systemctl restart guix-daemon\n"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:3761
msgid "The @code{--listen=0.0.0.0} bit means that @code{guix-daemon} will process @emph{all} incoming TCP connections on port 44146 (@pxref{Invoking guix-daemon,,, guix, GNU Guix Reference Manual}). This is usually fine in a cluster setup where the head node is reachable exclusively from the cluster's local area network---you don't want that to be exposed to the Internet!"
msgstr "@code{--listen=0.0.0.0} indique que @code{guix-daemon} traitera @emph{toutes} les connexions TCP entrantes sur le port 44146 (@pxref{Invoquer guix-daemon,,, guix.fr, le manuel de référence de GNU Guix}). C'est généralement acceptable sur une grappe dont le nœud principal est exclusivement accessible à partir du réseau local de la grappe. Vous ne voulez pas l'exposer sur Internet !"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3766
msgid "The next step is to define our NFS exports in @uref{https://linux.die.net/man/5/exports,@file{/etc/exports}} by adding something along these lines:"
msgstr "L'étape suivante consiste à définir nos exports NFS dans @uref{https://linux.die.net/man/5/exports,@file{/etc/exports}} en ajoutant quelque chose comme :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3771
#, no-wrap
msgid ""
"/gnu/store    *(ro)\n"
"/var/guix     *(rw, async)\n"
"/var/log/guix *(ro)\n"
msgstr ""
"/gnu/store    *(ro)\n"
"/var/guix     *(rw, async)\n"
"/var/log/guix *(ro)\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3778
msgid "The @file{/gnu/store} directory can be exported read-only since only @command{guix-daemon} on the master node will ever modify it.  @file{/var/guix} contains @emph{user profiles} as managed by @code{guix package}; thus, to allow users to install packages with @code{guix package}, this must be read-write."
msgstr "Le répertoire @file{/gnu/store} peut être exporté en lecture-seule car seul le @command{guix-daemon} du nœud principal le modifiera jamais. @file{/var/guix} contient les @emph{profils utilisateurs} gérés par @code{guix package}. Ainsi, pour permettre à tout le monde d'installer des paquets avec @code{guix package}, il doit être en lecture-écriture."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3788
msgid "Users can create as many profiles as they like in addition to the default profile, @file{~/.guix-profile}.  For instance, @code{guix package -p ~/dev/python-dev -i python} installs Python in a profile reachable from the @code{~/dev/python-dev} symlink.  To make sure that this profile is protected from garbage collection---i.e., that Python will not be removed from @file{/gnu/store} while this profile exists---, @emph{home directories should be mounted on the head node} as well so that @code{guix-daemon} knows about these non-standard profiles and avoids collecting software they refer to."
msgstr "Les utilisateurs et utilisatrices peuvent créer autant de profils qu'ils et elles le souhaitent en plus du profil par défaut, @file{~/.guix-profile}. Par exemple, @code{guix package -p ~/dev/python-dev -i python} installe Python dans un profil accessible depuis le lien symbolique @code{~/dev/python-dev}. Pour vous assurer que ce profil est protégé contre le ramasse-miettes, c.-à-d.@: que Python ne sera pas supprimé de @file{/gnu/store} alors que le profil existe, @emph{les répertoires personnels devraient également être montés sur le nœud principal} pour que @code{guix-daemon} connaisse ces profils non standards et évite de supprimer les logiciels auxquels ils se réfèrent."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3793
msgid "It may be a good idea to periodically remove unused bits from @file{/gnu/store} by running @command{guix gc} (@pxref{Invoking guix gc,,, guix, GNU Guix Reference Manual}).  This can be done by adding a crontab entry on the head node:"
msgstr "Vous devriez régulièrement supprimer les paquets inutilisés de @file{/gnu/store} en exécutant @command{guix gc} (@pxref{Invoquer guix gc,,, guix.fr, le manuel de référence de GNU Guix}). Vous pouvez le faire en ajoutant une entrée à la crontab du nœud principal :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3796
#, no-wrap
msgid "root@@master# crontab -e\n"
msgstr "root@@master# crontab -e\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3800
msgid "... with something like this:"
msgstr "… avec quelque chose comme cela :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3805
#, no-wrap
msgid ""
"# Every day at 5AM, run the garbage collector to make sure\n"
"# at least 10 GB are free on /gnu/store.\n"
"0 5 * * 1  /usr/local/bin/guix gc -F10G\n"
msgstr ""
"# Tous les jours à 5h, lancer le ramasse-miettes pour s'assurer\n"
"# d'avoir au moins 10 Gio libres sur /gnu/store.\n"
"0 5 * * 1  /usr/local/bin/guix gc -F10G\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3808
msgid "We're done with the head node! Let's look at compute nodes now."
msgstr "Nous en avons terminé avec le nœud principal ! Voyons maintenant les nœuds de calcul."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3815
msgid "First of all, we need compute nodes to mount those NFS directories that the head node exports.  This can be done by adding the following lines to @uref{https://linux.die.net/man/5/fstab,@file{/etc/fstab}}:"
msgstr "Tout d'abord, les nœuds de calcul doivent monter les répertoires NFS exportés par le nœud principal. Vous pouvez le faire en ajoutant les lignes suivantes à @uref{https://linux.die.net/man/5/fstab,@file{/etc/fstab}} :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3820
#, no-wrap
msgid ""
"@var{head-node}:/gnu/store    /gnu/store    nfs  defaults,_netdev,vers=3 0 0\n"
"@var{head-node}:/var/guix     /var/guix     nfs  defaults,_netdev,vers=3 0 0\n"
"@var{head-node}:/var/log/guix /var/log/guix nfs  defaults,_netdev,vers=3 0 0\n"
msgstr ""
"@var{head-node}:/gnu/store    /gnu/store    nfs  defaults,_netdev,vers=3 0 0\n"
"@var{head-node}:/var/guix     /var/guix     nfs  defaults,_netdev,vers=3 0 0\n"
"@var{head-node}:/var/log/guix /var/log/guix nfs  defaults,_netdev,vers=3 0 0\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3826
msgid "... where @var{head-node} is the name or IP address of your head node.  From there on, assuming the mount points exist, you should be able to mount each of these on the compute nodes."
msgstr "… où @var{head-node} est le nom ou l'IP de votre nœud principal. À partir de là, en supposant que les points de montage existent, vous devriez pouvoir monter tous ces répertoires sur chaque nœud de calcul."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3832
msgid "Next, we need to provide a default @command{guix} command that users can run when they first connect to the cluster (eventually they will invoke @command{guix pull}, which will provide them with their ``own'' @command{guix} command).  Similar to what the binary installation script did on the head node, we'll store that in @file{/usr/local/bin}:"
msgstr "Ensuite, nous devons fournir une commande @command{guix} par défaut que les utilisateur·ices peuvent exécuter lors de leur première connexion à la grappe (ils et elles finiront par invoquer @command{guix pull}, qui leur fournira leur propre commande @command{guix}). Comme l'a fait le script d'installation sur le nœud principal, nous le stockons dans @file{/usr/local/bin} :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3837
#, no-wrap
msgid ""
"mkdir -p /usr/local/bin\n"
"ln -s /var/guix/profiles/per-user/root/current-guix/bin/guix \\\n"
"      /usr/local/bin/guix\n"
msgstr ""
"mkdir -p /usr/local/bin\n"
"ln -s /var/guix/profiles/per-user/root/current-guix/bin/guix \\\n"
"      /usr/local/bin/guix\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3841
msgid "We then need to tell @code{guix} to talk to the daemon running on our master node, by adding these lines to @code{/etc/profile}:"
msgstr "Nous devons ensuite dire à @code{guix} de parler au démon qui s'exécute sur notre nœud principal, en ajoutant ces lignes à @code{/etc/profile} :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3845
#, no-wrap
msgid ""
"GUIX_DAEMON_SOCKET=\"guix://@var{head-node}\"\n"
"export GUIX_DAEMON_SOCKET\n"
msgstr ""
"GUIX_DAEMON_SOCKET=\"guix://@var{head-node}\"\n"
"export GUIX_DAEMON_SOCKET\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3850
msgid "To avoid warnings and make sure @code{guix} uses the right locale, we need to tell it to use locale data provided by Guix (@pxref{Application Setup,,, guix, GNU Guix Reference Manual}):"
msgstr "Pour éviter des avertissements et vous assurer que @code{guix} utilise le bon environnement linguistique, nous devons lui dire d'utiliser les données linguistiques fournies par Guix (@pxref{Application Setup,,, guix.fr, le manuel de référence de GNU Guix Reference Manual}) :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3854
#, no-wrap
msgid ""
"GUIX_LOCPATH=/var/guix/profiles/per-user/root/guix-profile/lib/locale\n"
"export GUIX_LOCPATH\n"
"\n"
msgstr ""
"GUIX_LOCPATH=/var/guix/profiles/per-user/root/guix-profile/lib/locale\n"
"export GUIX_LOCPATH\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3859
#, no-wrap
msgid ""
"# Here we must use a valid locale name.  Try \"ls $GUIX_LOCPATH/*\"\n"
"# to see what names can be used.\n"
"LC_ALL=fr_FR.utf8\n"
"export LC_ALL\n"
msgstr ""
"# Nous devons utiliser un nom de paramètre linguistique valide. Essayez « ls $GUIX_LOCPATH/* »\n"
"# pour voir les noms utilisables.\n"
"LC_ALL=fr_FR.utf8\n"
"export LC_ALL\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3866
msgid "For convenience, @code{guix package} automatically generates @file{~/.guix-profile/etc/profile}, which defines all the environment variables necessary to use the packages---@code{PATH}, @code{C_INCLUDE_PATH}, @code{PYTHONPATH}, etc.  Thus it's a good idea to source it from @code{/etc/profile}:"
msgstr "Pour votre confort, @code{guix package} génère automatiquement @file{~/.guix-profile/etc/profile}, qui définit toutes les variables d'environnement nécessaires pour utiliser les paquets : @code{PATH}, @code{C_INCLUDE_PATH}, @code{PYTHONPATH}, etc. Ainsi, il vaut mieux le sourcer à partir de @code{/etc/profile} :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3872
#, no-wrap
msgid ""
"GUIX_PROFILE=\"$HOME/.guix-profile\"\n"
"if [ -f \"$GUIX_PROFILE/etc/profile\" ]; then\n"
"  . \"$GUIX_PROFILE/etc/profile\"\n"
"fi\n"
msgstr ""
"GUIX_PROFILE=\"$HOME/.guix-profile\"\n"
"if [ -f \"$GUIX_PROFILE/etc/profile\" ]; then\n"
"  . \"$GUIX_PROFILE/etc/profile\"\n"
"fi\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3876
msgid "Last but not least, Guix provides command-line completion notably for Bash and zsh.  In @code{/etc/bashrc}, consider adding this line:"
msgstr "Enfin, Guix propose la complétion des commandes notamment pour Bash et zsh. Dans @code{/etc/bashrc}, pensez à ajouter cette ligne :"

#. type: verbatim
#: guix-git/doc/guix-cookbook.texi:3879
#, no-wrap
msgid ". /var/guix/profiles/per-user/root/current-guix/etc/bash_completion.d/guix\n"
msgstr ". /var/guix/profiles/per-user/root/current-guix/etc/bash_completion.d/guix\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3882
msgid "Voilà!"
msgstr "Et voilà !"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3885
msgid "You can check that everything's in place by logging in on a compute node and running:"
msgstr "Vous pouvez vérifier que tout est en place en vous connectant à un nœud de calcul et en exécutant :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3888
#, no-wrap
msgid "guix install hello\n"
msgstr "guix install hello\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3894
msgid "The daemon on the head node should download pre-built binaries on your behalf and unpack them in @file{/gnu/store}, and @command{guix install} should create @file{~/.guix-profile} containing the @file{~/.guix-profile/bin/hello} command."
msgstr "Le démon sur le nœud principal devrait télécharger les binaires préconstruits pour vous et les déballer dans @file{/gnu/store} et @command{guix install} devrait créer un @file{~/.guix-profile} contenant la commande @file{~/.guix-profile/bin/hello}."

#. type: section
#: guix-git/doc/guix-cookbook.texi:3896
#, no-wrap
msgid "Network Access"
msgstr "Accès réseau"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3901
msgid "Guix requires network access to download source code and pre-built binaries.  The good news is that only the head node needs that since compute nodes simply delegate to it."
msgstr "Guix a besoin d'un accès réseau pour télécharger le code source et les binaires préconstruits. La bonne nouvelle, c'est que seul le nœud principal en a besoin car les nœuds de calcul lui délèguent cette tâche."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3907
msgid "It is customary for cluster nodes to have access at best to a @emph{white list} of hosts.  Our head node needs at least @code{ci.guix.gnu.org} in this white list since this is where it gets pre-built binaries from by default, for all the packages that are in Guix proper."
msgstr "Les nœuds d'une grappe ont traditionnellement accès au mieux à une liste blanche d'hôtes. Notre nœud principal a besoin au minimum que @code{ci.guix.gnu.org} soit dans cette liste car c'est là qu'il récupère les binaires préconstruits par défaut, pour tous les paquets dans Guix lui-même."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3912
msgid "Incidentally, @code{ci.guix.gnu.org} also serves as a @emph{content-addressed mirror} of the source code of those packages.  Consequently, it is sufficient to have @emph{only} @code{ci.guix.gnu.org} in that white list."
msgstr "Au passage, @code{ci.guix.gnu.org} sert également de @emph{miroir addressé par le contenu} du code source de ces paquets. En conséquence, il suffit d'avoir @emph{uniquement} @code{ci.guix.gnu.org} dans cette liste blanche."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3921
msgid "Software packages maintained in a separate repository such as one of the various @uref{https://hpc.guix.info/channels, HPC channels} are of course unavailable from @code{ci.guix.gnu.org}.  For these packages, you may want to extend the white list such that source and pre-built binaries (assuming this-party servers provide binaries for these packages) can be downloaded.  As a last resort, users can always download source on their workstation and add it to the cluster's @file{/gnu/store}, like this:"
msgstr "Les paquets logiciels maintenus dans un dépôt séparé comme ceux des divers @uref{https://hpc.guix.info/channels, canaux HPC} ne sont bien sur pas disponibles sur @code{ci.guix.gnu.org}. Pour ces paquets, vous devriez étendre la liste blanche pour que les sources et les binaires préconstruits (en supposant que des serveurs tiers fournissent des binaires pour ces paquets) puissent être téléchargés. En dernier recours, les utilisateur·ices peuvent toujours télécharger les sources sur leur machine de travail et les ajouter au @file{/gnu/store} de la grappe, de cette manière :"

#. type: verbatim
#: guix-git/doc/guix-cookbook.texi:3925
#, no-wrap
msgid ""
"GUIX_DAEMON_SOCKET=ssh://compute-node.example.org \\\n"
"  guix download http://starpu.gforge.inria.fr/files/starpu-1.2.3/starpu-1.2.3.tar.gz\n"
msgstr ""
"GUIX_DAEMON_SOCKET=ssh://compute-node.example.org \\\n"
"  guix download http://starpu.gforge.inria.fr/files/starpu-1.2.3/starpu-1.2.3.tar.gz\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3929
msgid "The above command downloads @code{starpu-1.2.3.tar.gz} @emph{and} sends it to the cluster's @code{guix-daemon} instance over SSH."
msgstr "La commande ci-dessus télécharge @code{starpu-1.2.3.tar.gz} @emph{et} l'envoie à l'instance @code{guix-daemon} du nœud principal par SSH."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3936
msgid "Air-gapped clusters require more work.  At the moment, our suggestion would be to download all the necessary source code on a workstation running Guix.  For instance, using the @option{--sources} option of @command{guix build} (@pxref{Invoking guix build,,, guix, GNU Guix Reference Manual}), the example below downloads all the source code the @code{openmpi} package depends on:"
msgstr "Les grappes sans connexion nécessitent plus de travail. Pour le moment, notre suggestion est de télécharger tout le code source nécessaire sur une station de travail qui exécute Guix. Par exemple, avec l'option @option{--sources} de @command{guix build} (@pxref{Invoquer guix build,,, guix.fr, le manuel de référence de GNU Guix}), l'exemple ci-dessous télécharge tout le code source dont dépend le paquet @code{openmpi} :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3939
#, no-wrap
msgid ""
"$ guix build --sources=transitive openmpi\n"
"\n"
msgstr ""
"$ guix build --sources=transitive openmpi\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3941
#, no-wrap
msgid ""
"@dots{}\n"
"\n"
msgstr ""
"@dots{}\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:3953
#, no-wrap
msgid ""
"/gnu/store/xc17sm60fb8nxadc4qy0c7rqph499z8s-openmpi-1.10.7.tar.bz2\n"
"/gnu/store/s67jx92lpipy2nfj5cz818xv430n4b7w-gcc-5.4.0.tar.xz\n"
"/gnu/store/npw9qh8a46lrxiwh9xwk0wpi3jlzmjnh-gmp-6.0.0a.tar.xz\n"
"/gnu/store/hcz0f4wkdbsvsdky3c0vdvcawhdkyldb-mpfr-3.1.5.tar.xz\n"
"/gnu/store/y9akh452n3p4w2v631nj0injx7y0d68x-mpc-1.0.3.tar.gz\n"
"/gnu/store/6g5c35q8avfnzs3v14dzl54cmrvddjm2-glibc-2.25.tar.xz\n"
"/gnu/store/p9k48dk3dvvk7gads7fk30xc2pxsd66z-hwloc-1.11.8.tar.bz2\n"
"/gnu/store/cry9lqidwfrfmgl0x389cs3syr15p13q-gcc-5.4.0.tar.xz\n"
"/gnu/store/7ak0v3rzpqm2c5q1mp3v7cj0rxz0qakf-libfabric-1.4.1.tar.bz2\n"
"/gnu/store/vh8syjrsilnbfcf582qhmvpg1v3rampf-rdma-core-14.tar.gz\n"
"…\n"
msgstr ""
"/gnu/store/xc17sm60fb8nxadc4qy0c7rqph499z8s-openmpi-1.10.7.tar.bz2\n"
"/gnu/store/s67jx92lpipy2nfj5cz818xv430n4b7w-gcc-5.4.0.tar.xz\n"
"/gnu/store/npw9qh8a46lrxiwh9xwk0wpi3jlzmjnh-gmp-6.0.0a.tar.xz\n"
"/gnu/store/hcz0f4wkdbsvsdky3c0vdvcawhdkyldb-mpfr-3.1.5.tar.xz\n"
"/gnu/store/y9akh452n3p4w2v631nj0injx7y0d68x-mpc-1.0.3.tar.gz\n"
"/gnu/store/6g5c35q8avfnzs3v14dzl54cmrvddjm2-glibc-2.25.tar.xz\n"
"/gnu/store/p9k48dk3dvvk7gads7fk30xc2pxsd66z-hwloc-1.11.8.tar.bz2\n"
"/gnu/store/cry9lqidwfrfmgl0x389cs3syr15p13q-gcc-5.4.0.tar.xz\n"
"/gnu/store/7ak0v3rzpqm2c5q1mp3v7cj0rxz0qakf-libfabric-1.4.1.tar.bz2\n"
"/gnu/store/vh8syjrsilnbfcf582qhmvpg1v3rampf-rdma-core-14.tar.gz\n"
"…\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3957
msgid "(In case you're wondering, that's more than 320@ MiB of @emph{compressed} source code.)"
msgstr "(Si vous vous posez la question, c'est plus de 320 Mio de code source compressé)"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3960
msgid "We can then make a big archive containing all of this (@pxref{Invoking guix archive,,, guix, GNU Guix Reference Manual}):"
msgstr "Nous pouvons ensuite créer une grosse archive contenant tout cela (@pxref{Invoquer guix archive,,, guix.fr, le manuel de référence de GNU Guix}) :"

#. type: verbatim
#: guix-git/doc/guix-cookbook.texi:3965
#, no-wrap
msgid ""
"$ guix archive --export \\\n"
"    `guix build --sources=transitive openmpi` \\\n"
"    > openmpi-source-code.nar\n"
msgstr ""
"$ guix archive --export \\\n"
"    `guix build --sources=transitive openmpi` \\\n"
"    > openmpi-source-code.nar\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3969
msgid "@dots{} and we can eventually transfer that archive to the cluster on removable storage and unpack it there:"
msgstr "@dots{} et nous pouvons enfin transférer cette archive vers la grappe avec une clé usb et la déballer :"

#. type: verbatim
#: guix-git/doc/guix-cookbook.texi:3972
#, no-wrap
msgid "$ guix archive --import < openmpi-source-code.nar\n"
msgstr "$ guix archive --import < openmpi-source-code.nar\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3976
msgid "This process has to be repeated every time new source code needs to be brought to the cluster."
msgstr "Ce processus doit être répété chaque fois qu'un nouveau code source doit être apporté à la grappe."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3980
msgid "As we write this, the research institutes involved in Guix-HPC do not have air-gapped clusters though. If you have experience with such setups, we would like to hear feedback and suggestions."
msgstr "Au moment d'écrire ces lignes, les instituts de recherche qui participent à Guix-HPC n'ont pas de grappe déconnectées. Si vous avez de l'expérience avec ce genre de configuration, nous aimerions entendre vos retours et vos suggestions."

#. type: section
#: guix-git/doc/guix-cookbook.texi:3982
#, no-wrap
msgid "Disk Usage"
msgstr "Utilisation du disque"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3984
#, no-wrap
msgid "disk usage, on a cluster"
msgstr "utilisation du disque, sur une grappe de calcul"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3991
msgid "A common concern of sysadmins' is whether this is all going to eat a lot of disk space.  If anything, if something is going to exhaust disk space, it's going to be scientific data sets rather than compiled software---that's our experience with almost ten years of Guix usage on HPC clusters.  Nevertheless, it's worth taking a look at how Guix contributes to disk usage."
msgstr "Une inquiétude courante des administrateur·ices systèmes est de savoir si cela va prendre beaucoup de place. Si cela doit avoir lieu, les jeux de données scientifiques prendront plus probablement toute la place, plutôt que les logiciels compilés. C'est notre expérience après presque dix ans d'utilisation de Guix sur des grappes HPC. Néanmoins, il vaut mieux jeter un œil à la manière dont Guix contribue à l'utilisation du disque."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3996
msgid "First, having several versions or variants of a given package in @file{/gnu/store} does not necessarily cost much, because @command{guix-daemon} implements deduplication of identical files, and package variants are likely to have a number of common files."
msgstr "Tout d'abord, avoir plusieurs versions ou variantes d'un paquet donné dans @file{/gnu/store} ne coûte pas forcément très cher, car @command{guix-daemon} implémente la déduplication des fichiers identiques et les variantes de paquets ont tendance à avoir de nombreux fichiers en commun."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4003
msgid "As mentioned above, we recommend having a cron job to run @code{guix gc} periodically, which removes @emph{unused} software from @file{/gnu/store}. However, there's always a possibility that users will keep lots of software in their profiles, or lots of old generations of their profiles, which is ``live'' and cannot be deleted from the viewpoint of @command{guix gc}."
msgstr "Comme nous l'avons mentionné plus haut, nous recommandons d'utiliser une tâche cron pour exécuter @code{guix gc} régulièrement, pour supprimer les logiciels @emph{inutilisés} de @file{/gnu/store}. Cependant, il est toujours possible que les utilisateur·ices gardent de nombreux logiciels dans leurs profils, qui sont « vivants » et ne peuvent pas être supprimés du point de vu de @command{guix gc}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4007
msgid "The solution to this is for users to regularly remove old generations of their profile. For instance, the following command removes generations that are more than two-month old:"
msgstr "La solution à ce problème est de demander aux utilisateur·ices de régulièrement supprimer les anciennes générations de leurs profils. Par exemple, la commande suivante supprime les générations de plus de deux mois :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:4010
#, no-wrap
msgid "guix package --delete-generations=2m\n"
msgstr "guix package --delete-generations=2m\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4015
msgid "Likewise, it's a good idea to invite users to regularly upgrade their profile, which can reduce the number of variants of a given piece of software stored in @file{/gnu/store}:"
msgstr "De même, il vaut mieux inviter les utilisateur·ices à régulièrement mettre à jour leur profil, ce qui peut réduire le nombre de variantes d'un logiciel donnés stockés dans @file{/gnu/store} :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:4019
#, no-wrap
msgid ""
"guix pull\n"
"guix upgrade\n"
msgstr ""
"guix pull\n"
"guix upgrade\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4025
msgid "As a last resort, it is always possible for sysadmins to do some of this on behalf of their users. Nevertheless, one of the strengths of Guix is the freedom and control users get on their software environment, so we strongly recommend leaving users in control."
msgstr "En dernier recours, il est toujours possibles pour les administrateur·ices systèmes de le faire pour leurs utilisateur·ices. Néanmoins, l'une des forces de Guix est la liberté et le contrôle que ses utilisateur·ices ont sur leur environnement logiciel, donc nous vous recommandons fortement de les laisser aux manettes."

#. type: section
#: guix-git/doc/guix-cookbook.texi:4027
#, no-wrap
msgid "Security Considerations"
msgstr "Considérations de sécurité"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:4029
#, no-wrap
msgid "security, on a cluster"
msgstr "sécurité, sur une grappe"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4034
msgid "On an HPC cluster, Guix is typically used to manage scientific software.  Security-critical software such as the operating system kernel and system services such as @code{sshd} and the batch scheduler remain under control of sysadmins."
msgstr "Sur un grappe PC, guix est généralement utilisé pour gérer des logiciels scientifiques. Les logiciels critiques pour la sécurité comme le noyau du système d'exploitation et les services systèmes comme @code{sshd} et l'ordonnanceur par lot restent sous votre contrôle."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4039
msgid "The Guix project has a good track record delivering security updates in a timely fashion (@pxref{Security Updates,,, guix, GNU Guix Reference Manual}).  To get security updates, users have to run @code{guix pull && guix upgrade}."
msgstr "Le projet Guix a un bon historique de délivrance de mises à jour de sécurité à temps (@pxref{Mises à jour de sécurité,,, guix.fr, le manuel de référence de GNU Guix}). Pour récupérer les mises à jour de sécurité, les utilisateur·ices doivent exécuter @code{guix pull && guix upgrade}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4045
msgid "Because Guix uniquely identifies software variants, it is easy to see if a vulnerable piece of software is in use. For instance, to check whether the glibc@ 2.25 variant without the mitigation patch against ``@uref{https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt,Stack Clash}'', one can check whether user profiles refer to it at all:"
msgstr "Comme Guix identifie de manière unique les variantes des logiciels, il est facile de voir si un logiciel vulnérable est utilisé. Par exemple, pour vérifier si la variante glibc@@2.25 sans correctif d'atténuation de « @uref{https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt,Stack Clash} », on peut vérifier si les profils des utilisateur·ices s'y réfèrent ou non :"

#. type: example
#: guix-git/doc/guix-cookbook.texi:4048
#, no-wrap
msgid "guix gc --referrers /gnu/store/…-glibc-2.25\n"
msgstr "guix gc --referrers /gnu/store/…-glibc-2.25\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4052
msgid "This will report whether profiles exist that refer to this specific glibc variant."
msgstr "Cela rapportera si des profils qui se réfèrent à cette variante spécifique de glibc existent."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4065
msgid "Guix is based on the @uref{https://nixos.org/nix/, Nix package manager}, which was designed and implemented by Eelco Dolstra, with contributions from other people (see the @file{nix/AUTHORS} file in Guix.)  Nix pioneered functional package management, and promoted unprecedented features, such as transactional package upgrades and rollbacks, per-user profiles, and referentially transparent build processes.  Without this work, Guix would not exist."
msgstr "Guix se base sur le @uref{https://nixos.org/nix/ gestionnaire de paquets Nix} conçu et implémenté par Eelco Dolstra, avec des contributions d'autres personnes (voir le fichier @file{nix/AUTHORS} dans Guix).  Nix a inventé la gestion de paquet fonctionnelle et promu des fonctionnalités sans précédents comme les mises à jour de paquets transactionnelles et les retours en arrière, les profils par utilisateurs et les processus de constructions transparents pour les références.  Sans ce travail, Guix n'existerait pas."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4068
msgid "The Nix-based software distributions, Nixpkgs and NixOS, have also been an inspiration for Guix."
msgstr "Les distributions logicielles basées sur Nix, Nixpkgs et NixOS, ont aussi été une inspiration pour Guix."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4074
msgid "GNU@tie{}Guix itself is a collective work with contributions from a number of people.  See the @file{AUTHORS} file in Guix for more information on these fine people.  The @file{THANKS} file lists people who have helped by reporting bugs, taking care of the infrastructure, providing artwork and themes, making suggestions, and more---thank you!"
msgstr "GNU@tie{}Guix lui-même est un travail collectif avec des contributions d'un grand nombre de personnes.  Voyez le fichier @file{AUTHORS} dans Guix pour plus d'information sur ces personnes de qualité.  Le fichier @file{THANKS} liste les personnes qui ont aidé en rapportant des bogues, en prenant soin de l'infrastructure, en fournissant des images et des thèmes, en faisant des suggestions et bien plus. Merci !"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:4079
msgid "This document includes adapted sections from articles that have previously been published on the Guix blog at @uref{https://guix.gnu.org/blog} and on the Guix-HPC blog at @uref{https://hpc.guix.info/blog}."
msgstr "Ce document contient des sections adaptées d'articles précédemment publiés sur le blog de Guix sur @uref{https://guix.gnu.org/blog} et le blog de Guix-HPC sur @uref{https://hpc.guix.info/blog}."

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:4084
#, no-wrap
msgid "license, GNU Free Documentation License"
msgstr "licence, GNU Free Documentation License"

#. type: include
#: guix-git/doc/guix-cookbook.texi:4085
#, no-wrap
msgid "fdl-1.3.texi"
msgstr "fdl-1.3.texi"

#~ msgid "@samp{GUIX_PACKAGE_PATH}"
#~ msgstr "@samp{GUIX_PACKAGE_PATH}"

#~ msgid "GUIX_PACKAGE_PATH"
#~ msgstr "GUIX_PACKAGE_PATH"

#~ msgid "Note: Starting from Guix 0.16, the more flexible Guix @dfn{channels} are the preferred way and supersede @samp{GUIX_PACKAGE_PATH}.  See next section."
#~ msgstr "Remarque : à partir de Guix 0.16, les @dfn{canaux} plus flexibles sont préférables et remplacent @samp{GUIX_PACKAGE_PATH}. Voir la section suivante."

#~ msgid "It can be tedious to specify the file from the command line instead of simply calling @code{guix package --install my-hello} as you would do with the official packages."
#~ msgstr "Il peut être fastidieux de spécifier le fichier depuis la ligne de commande par rapport à un appel à @code{guix package --install my-hello} comme on le ferait pour les paquets officiels."

#~ msgid "Guix makes it possible to streamline the process by adding as many ``package declaration directories'' as you want."
#~ msgstr "Guix permet d'uniformiser le processus en ajoutant autant de « répertoires de déclaration de paquets » que vous le souhaitez."

#~ msgid "Create a directory, say @file{~/guix-packages} and add it to the @samp{GUIX_PACKAGE_PATH} environment variable:"
#~ msgstr "Créez un répertoire, disons @file{~/guix-packages} et ajoutez-le à la variable d'environnement @samp{GUIX_PACKAGE_PATH} :"

#~ msgid ""
#~ "$ mkdir ~/guix-packages\n"
#~ "$ export GUIX_PACKAGE_PATH=~/guix-packages\n"
#~ msgstr ""
#~ "$ mkdir ~/guix-packages\n"
#~ "$ export GUIX_PACKAGE_PATH=~/guix-packages\n"

#~ msgid "To add several directories, separate them with a colon (@code{:})."
#~ msgstr "Pour ajouter plusieurs répertoires, séparez-les avec un deux-points (@code{:})."

#~ msgid "Our previous @samp{my-hello} needs some adjustments though:"
#~ msgstr "Notre @samp{my-hello} précédent doit être légèrement ajusté :"

#~ msgid "Now @samp{my-hello} should be part of the package collection like all other official packages.  You can verify this with:"
#~ msgstr "Maintenant @samp{my-hello} devrait faire partie de la collection de paquets comme tous les paquets officiels. Vous pouvez le vérifier avec :"

#~ msgid "$ guix package --show=my-hello\n"
#~ msgstr "$ guix package --show=my-hello\n"

#~ msgid "Guix 0.16 features channels, which is very similar to @samp{GUIX_PACKAGE_PATH} but provides better integration and provenance tracking.  Channels are not necessarily local, they can be maintained as a public Git repository for instance.  Of course, several channels can be used at the same time."
#~ msgstr "Guix 0.16 a introduit la notion de canaux, qui sont similaires à @samp{GUIX_PACKAGE_PATH} mais fournit une meilleure intégration et un meilleur suivi de la provenance. Les canaux ne sont pas nécessairement locaux et ils peuvent être maintenus dans un dépôt Git public par exemple. Bien sûr, vous pouvez utiliser plusieurs canaux en même temps."

#~ msgid "Learn the basics of Scheme"
#~ msgstr "Apprenez les bases du langage Scheme"

#~ msgid "Let's add a package to Guix!"
#~ msgstr "Ajoutons un paquet à Guix !"

#~ msgid "Running Guix on a Linode Server.  Running Guix on a Linode Server"
#~ msgstr "Lancer Guix sur un serveur Linode"

#~ msgid "An @uref{https://sarabander.github.io/sicp/, unofficial ebook} is also available."
#~ msgstr "Un @uref{https://sarabander.github.io/sicp/, ebook non officiel} est aussi disponible."

#~ msgid "One of the reference Scheme books is the seminal ``Structure and Interpretation of Computer Programs'', by Harold Abelson and Gerald Jay Sussman, with Julie Sussman.  You'll find a @uref{https://mitpress.mit.edu/sites/default/files/sicp/index.html, free copy online}, together with @uref{https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/, videos of the lectures by the authors}.  The book is available in Texinfo format as the @code{sicp} Guix package.  Go ahead, run @code{guix install sicp} and start reading with @code{info sicp} (@pxref{Top,,, sicp, Structure and Interpretation of Computer Programs}).  An @uref{https://sarabander.github.io/sicp/, unofficial ebook is also available}."
#~ msgstr "L'un des livres de référence majeurs pour Scheme est « Structure and Interpretation of Computer Programs » de Harold Abelson et Gerald Jay Sussman, avec Julie Sussman. Vous trouverez une @uref{https://mitpress.mit.edu/sites/default/files/sicp/index.html,copie gratuite en ligne}, avec @uref{https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/, les vidéos des cours donnés par les auteurs, en anglais}. Le livre est disponible au format Texinfo dans le paquet Guix @code{sicp}. Allez-y, lancez @code{guix install sicp} et commencez à le lire avec @code{info sicp} (@pxref{Top,,, sicp, Structure and Interpretation of Computer Programs}). Un @uref{https://sarabander.github.io/sicp/,livre électronique officieux est aussi disponible}."

#~ msgid "A Guix profile can be set up @emph{via} a so-called @emph{manifest specification} that looks like this:"
#~ msgstr "On peut créer un profil Guix avec une @emph{spécification de manifeste} qui ressemble à ceci :"

#~ msgid "@pxref{Invoking guix package,,, guix, GNU Guix Reference Manual}, for the syntax details."
#~ msgstr "@pxref{Invoquer guix package,,, guix.fr, le manuel de référence de GNU Guix}, pour les détails sur la syntaxe."

#~ msgid "First, a syntactic comment: See the quasi-quote / comma syntax?"
#~ msgstr "Tout d'abord, un commentaire sur la syntaxe : vous voyez la quasiquote (la virgule) ?"

#~ msgid ""
#~ "    (native-inputs\n"
#~ "     `((\"pkg-config\" ,pkg-config)))\n"
#~ msgstr ""
#~ "    (native-inputs\n"
#~ "     `((\"pkg-config\" ,pkg-config)))\n"

#~ msgid "is equivalent to"
#~ msgstr "est équivalent à"

#~ msgid ""
#~ "    (native-inputs\n"
#~ "     (list (list \"pkg-config\" pkg-config)))\n"
#~ msgstr ""
#~ "    (native-inputs\n"
#~ "     (list (list \"pkg-config\" pkg-config)))\n"

#~ msgid "You'll mostly see the former because it's shorter."
#~ msgstr "Vous verrez surtout la première forme car elle est plus courte."

#~ msgid "Power the Linode down. In the Linode's Disks/Configurations tab, resize the Debian disk to be smaller. 30 GB is recommended."
#~ msgstr "Éteignez le serveur Linode. Dans l'onglet Disks/Configurations de Linode, redimensionnez le disque Debian pour être plus petit. Nous vous recommandons de choisir 30 Go."

#~ msgid "In the Linode settings, \"Add a disk\", with the following:"
#~ msgstr "Dans les paramètres de Linode, « Add a disk » avec ce qui suit :"

#~ msgid "On the \"configuration\" field that comes with the default image, press \"...\" and select \"Edit\", then on that menu add to @file{/dev/sdc} the \"Guix\" label."
#~ msgstr "Dans le champ « configuration » de l'image par défaut, cliquez sur « … » et choisissez « Edit », puis sur le menu ajoutez l'étiquette « Guix » à @file{/dev/sdc}."

#~ msgid "Creating and using a custom Linux kernel"
#~ msgstr "Créer et utiliser un noyau Linux personnalisé"
